<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端八股总结JS分支-类型转换</title>
    <link href="/2024/11/03/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93JS%E5%88%86%E6%94%AF-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2024/11/03/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93JS%E5%88%86%E6%94%AF-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>总结一下JS的类型转换</p><span id="more"></span><p>参考<a href="https://github.com/YvetteLau/Blog/issues/28">【面试篇】寒冬求职季之你必须要懂的原生JS(中) · Issue #28 · YvetteLau&#x2F;Blog</a>（是真寒冬🥶🥶🥶🥶🥶🥶🥶🥶🥶🥶🥶寒死人了）</p><p>Typora字一多就卡，只能抽出来单独写了🥲JS知识点好多，背不完，根本背不完</p><h3 id="一、强制类型转换"><a href="#一、强制类型转换" class="headerlink" title="一、强制类型转换"></a>一、强制类型转换</h3><h4 id="（1）Number"><a href="#（1）Number" class="headerlink" title="（1）Number()"></a>（1）Number()</h4><p>将任意类型的参数转换为数值类型</p><ul><li>布尔值：转化为0或1</li><li>数字：返回自身</li><li>null：返回0</li><li>undefined：返回NaN</li><li>字符串：<ul><li>如果只包含数字（可十六进制，可正负号），转化为十进制</li><li>如果包含有效的浮点形式，转化为浮点数值</li><li>如果是空字符串，转化为0</li><li>如果不是以上类型，转化为NaN</li></ul></li><li>Symbol：抛出错误（Symbol唯一且不可变）</li><li>如果是对象，调用对象的valueof方法，再根据前面规则转换；如果转换的结果是NaN，调用对象的toString方法再依次按照前面的规则转换返回的字符串值</li></ul><h4 id="（2）parseInt-param-radix"><a href="#（2）parseInt-param-radix" class="headerlink" title="（2）parseInt(param,radix)"></a>（2）parseInt(param,radix)</h4><p>用于将字符串转化为整数。</p><ul><li>param：要解析的字符串<ul><li>会忽略掉字符串开始的空格</li><li>从第一个有效字符开始解析，直到无法解析时停止（‘123abc’-&gt;123）</li><li>如果不是字符串会被自动转化为字符串</li></ul></li><li>radix：进制基数<ul><li>2-36之间的整数，表示响应进制数</li><li>如果未指定，会根据param的前缀识别，0x开头解析为十六进制，0开头会被解析为八进制或者十进制</li></ul></li></ul><h4 id="（3）toString"><a href="#（3）toString" class="headerlink" title="（3）toString()"></a>（3）toString()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">let</span> sym = <span class="hljs-title class_">Symbol</span>(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;稳住，我们能赢！&#x27;</span>)&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([].<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// &#x27;&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>].<span class="hljs-title function_">toString</span>());<span class="hljs-comment">//1,2,3,,5,6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// [object Object]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// Sun Apr 21 2019 16:11:39 GMT+0800 (CST)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-title function_">toString</span>());<span class="hljs-comment">// function () &#123;console.log(&#x27;稳住，我们能赢！&#x27;)&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">toString</span>());<span class="hljs-comment">// &#x27;hello world&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sym.<span class="hljs-title function_">toString</span>());<span class="hljs-comment">// Symbol(100)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span>.<span class="hljs-title function_">toString</span>());<span class="hljs-comment">// 抛错</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span>.<span class="hljs-title function_">toString</span>());<span class="hljs-comment">// 抛错</span><br></code></pre></td></tr></table></figure><h4 id="（4）String"><a href="#（4）String" class="headerlink" title="（4）String()"></a>（4）String()</h4><p>和上面一致，只是遇到null和undefined会转换成‘null’和‘undefined’，不会报错</p><h4 id="（5）Boolean"><a href="#（5）Boolean" class="headerlink" title="（5）Boolean()"></a>（5）Boolean()</h4><p>假值：null，0，undefined，NaN，false，“”转化为false，其他都是true</p><h3 id="二、隐式转换"><a href="#二、隐式转换" class="headerlink" title="二、隐式转换"></a>二、隐式转换</h3><h4 id="（1）-if-while条件判断"><a href="#（1）-if-while条件判断" class="headerlink" title="（1）&amp;&amp;  ||  !  if&#x2F;while条件判断"></a>（1）&amp;&amp;  ||  !  if&#x2F;while条件判断</h4><p>需要将数据转为Boolean类型，同Boolean()</p><h4 id="（2）-，-，-，"><a href="#（2）-，-，-，" class="headerlink" title="（2）+，-，*，&#x2F;"></a>（2）+，-，*，&#x2F;</h4><h5 id="1、"><a href="#1、" class="headerlink" title="1、+"></a>1、+</h5><p>如果操作数是对象、数值或者布尔值，使用toString转换规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;+<span class="hljs-number">10</span>); <span class="hljs-comment">//[object Object]10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>] + <span class="hljs-number">10</span>);<span class="hljs-comment">//1,2,3,,5,610</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span>+<span class="hljs-number">10</span>+<span class="hljs-string">&quot;s&quot;</span>);<span class="hljs-comment">//NaNs</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-literal">undefined</span>)+<span class="hljs-number">10</span>);<span class="hljs-comment">//undefined10</span><br></code></pre></td></tr></table></figure><h5 id="2、-、-、-操作符"><a href="#2、-、-、-操作符" class="headerlink" title="2、-、*、/ 操作符"></a>2、<code>-</code>、<code>*</code>、<code>/</code> 操作符</h5><p>针对的是运算，如果操作值之一不是数值，则被隐式调用Number()函数进行转换。如果其中有一个转换除了为NaN，结果为NaN.</p><h4 id="（3）-，"><a href="#（3）-，" class="headerlink" title="（3）&lt;&#x3D;，&gt;&#x3D;，&lt;，&gt;"></a>（3）&lt;&#x3D;，&gt;&#x3D;，&lt;，&gt;</h4><ul><li>若两个操作值都是数值，进行数值比较</li><li>如果都是字符串，比较字符串对应的字符编码值</li><li>如果有一方是Symbol，报错</li><li>除上述情况都进行Number()强制转换再比较</li></ul><h4 id="（4）"><a href="#（4）" class="headerlink" title="（4）&#x3D;&#x3D;"></a>（4）&#x3D;&#x3D;</h4><ul><li>类型相同不需要进行类型转换</li><li>如果有一个操作值是null或者undefined，另一个也许必须是null&#x2F;undefined才是true</li><li>如果其中一个是Symbol，返回false</li><li>如果是string&#x2F;boolean类型，就转化为number再比较</li><li>如果一个是Object，就调用Object的valueOf或者toString方法来获取原始值再比较</li></ul><h4 id="（5）下列代码在什么情况下打印出1"><a href="#（5）下列代码在什么情况下打印出1" class="headerlink" title="（5）下列代码在什么情况下打印出1"></a>（5）下列代码在什么情况下打印出1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(a == <span class="hljs-number">1</span> &amp;&amp; a == <span class="hljs-number">2</span> &amp;&amp; a == <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>JavaScript 在遇到 <code>==</code> 操作符时，会尝试将操作数转换为相同类型。如果一方是对象，则会调用该对象的 <code>valueOf</code> 或 <code>toString</code> 方法以获取一个原始值。以下方法利用这一机制，每次返回不同的值来满足 <code>==</code> 的比较条件。</p><h5 id="1、valueof"><a href="#1、valueof" class="headerlink" title="1、valueof"></a>1、valueof</h5><p>定义一个对象，并重写它的valueof方法，使得每次转换a为原始值时返回不同的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a=&#123;<br>   <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>;<br>   <span class="hljs-title function_">valueOf</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>++;<br>   &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、toString"><a href="#2、toString" class="headerlink" title="2、toString"></a>2、toString</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>++;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>JavaScript 在遇到 <code>==</code> 操作符时，会尝试将操作数转换为相同类型。如果一方是对象，则会调用该对象的 <code>valueOf</code> 或 <code>toString</code> 方法以获取一个原始值。以上方法利用这一机制，每次返回不同的值来满足 <code>==</code> 的比较条件。</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结-函数、对象和this</title>
    <link href="/2024/11/03/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-%E5%87%BD%E6%95%B0%E3%80%81%E5%AF%B9%E8%B1%A1%E5%92%8Cthis/"/>
    <url>/2024/11/03/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-%E5%87%BD%E6%95%B0%E3%80%81%E5%AF%B9%E8%B1%A1%E5%92%8Cthis/</url>
    
    <content type="html"><![CDATA[<p>记录一下一些常见场景</p><span id="more"></span><p>（崩溃了，怎么就是看不懂🥹小小this赶紧让我拿下）</p><p>this部分参考总结于<a href="https://github.com/YvetteLau/Blog/issues/6">嗨，你真的懂this吗？ · Issue #6 · YvetteLau&#x2F;Blog</a></p><h3 id="一、this的绑定规则"><a href="#一、this的绑定规则" class="headerlink" title="一、this的绑定规则"></a>一、this的绑定规则</h3><h4 id="（1）默认绑定"><a href="#（1）默认绑定" class="headerlink" title="（1）默认绑定"></a>（1）默认绑定</h4><p>默认绑定，在不能应用其它绑定规则时使用的默认规则，通常是<strong>独立函数调用</strong>。</p><ul><li>在非严格模式下，函数内的 <code>this</code> 指向全局对象（浏览器中是 <code>window</code>，Node.js 中是 <code>global</code>），除非该函数是作为对象的方法调用。</li><li>在严格模式下，如果函数是直接调用（不通过对象调用），<code>this</code> 将会是 <code>undefined</code>。</li></ul><p>浏览器中，使用 <code>var</code> 定义(<strong>let不行</strong>)的全局变量（如 <code>name</code>）会被添加到 <code>window</code> 对象上。</p><p>在 Node.js 中，使用 <code>var</code> 定义的全局变量不会自动添加到 <code>global</code> 对象上。相反，它们只能在当前模块的作用域中访问。</p><ul><li>global.name &#x3D; ‘YvetteLau’;只有这样的显示定义才被视为定义</li></ul><h4 id="（2）隐式绑定"><a href="#（2）隐式绑定" class="headerlink" title="（2）隐式绑定"></a>（2）隐式绑定</h4><p>函数的调用是在某个对象上触发的，即调用位置上存在上下文对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello,&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><span class="hljs-keyword">let</span> person=&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Yaoyao&quot;</span>,<br>   <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">let</span> name=<span class="hljs-string">&quot;Shenshen&quot;</span>;<br>person.<span class="hljs-title function_">sayHi</span>();  <span class="hljs-comment">//Hello,Yaoyao.</span><br></code></pre></td></tr></table></figure><p><strong>对象属性链中只有最后一层会影响到调用位置：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello,&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><span class="hljs-keyword">let</span> person1=&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Yaoyao&quot;</span>,<br>   <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">let</span> person2=&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Shenshen&quot;</span>,<br>   <span class="hljs-attr">friend</span>: person1,<br>&#125;<br>person2.<span class="hljs-property">friend</span>.<span class="hljs-title function_">sayHi</span>();  <span class="hljs-comment">//Hello,Yaoyao.</span><br></code></pre></td></tr></table></figure><p>不是通过对象来进行<strong>调用</strong>仍旧是默认指向！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello,&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><span class="hljs-keyword">let</span> person=&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Yaoyao&quot;</span>,<br>   <span class="hljs-attr">sayHi</span>: sayHi,<br>&#125;<br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;Shenshen&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Hi</span>=person.<span class="hljs-property">sayHi</span>;<br><span class="hljs-title class_">Hi</span>();<br></code></pre></td></tr></table></figure><p>在上面的例子中，输出的是Shenshen。因为Hi绑定在sayHi上，调用时和person没有关系</p><p>下一个例子：（隐形绑定的丢失会发生在回调函数中）（在浏览器运行）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello,&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><span class="hljs-keyword">let</span> person1=&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Yaoyao&quot;</span>,<br>   <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);  <span class="hljs-comment">//setTimeout的回调函数中，this使用的是默认绑定</span><br>      &#125;)<br>   &#125;<br>&#125;<br><span class="hljs-keyword">let</span> person2=&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Shenshen&quot;</span>,<br>   <span class="hljs-attr">sayHi</span>: sayHi<br>&#125;<br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;Shanshan&quot;</span>;<br>person1.<span class="hljs-title function_">sayHi</span>();  <span class="hljs-comment">//Hello, Shanshan</span><br><span class="hljs-built_in">setTimeout</span>(person2.<span class="hljs-property">sayHi</span>,<span class="hljs-number">1000</span>);  <span class="hljs-comment">//Hello, Shanshan</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   person2.<span class="hljs-title function_">sayHi</span>();<br>&#125;,<span class="hljs-number">1000</span>);  <span class="hljs-comment">//Hello, shenshen</span><br></code></pre></td></tr></table></figure><p>（在node中运行时就算显式指定global.name的值还是会输出undefined，不知道为什么）</p><h4 id="（3）显式绑定"><a href="#（3）显式绑定" class="headerlink" title="（3）显式绑定"></a>（3）显式绑定</h4><p>显式绑定的丢失：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;YvetteLau&#x27;</span>,<br>    <span class="hljs-attr">sayHi</span>: sayHi<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Wiliam&#x27;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Hi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-title function_">fn</span>();<br>&#125;<br><span class="hljs-title class_">Hi</span>.<span class="hljs-title function_">call</span>(person, person.<span class="hljs-property">sayHi</span>); <br></code></pre></td></tr></table></figure><p>这时候，fn是person.sayHi，将this绑定到了Hi的this，但是执行fn的时候相当于直接调用了sayHi方法，此时隐式绑定也丢了，对应的是默认绑定。</p><p>解决方法是在调用fn的时候也硬绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Hi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br>    fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们将null或者是undefined作为this的绑定对象传入call、apply或者是bind,这些值在调用时会被忽略，实际应用的是默认绑定规则。</p><h4 id="（4）new绑定"><a href="#（4）new绑定" class="headerlink" title="（4）new绑定"></a>（4）new绑定</h4><p>使用new来调用函数会自动执行下面的操作：</p><p>1、创建一个新对象</p><p>2、将构造函数的作用域赋值给新对象（即this指向这个新对象）</p><p>3、执行构造函数中的代码</p><p>4、返回新对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params">name</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Hi</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-string">&quot;Yaoyao&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Hi</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">//Yaoyao</span><br></code></pre></td></tr></table></figure><h4 id="（5）绑定优先级"><a href="#（5）绑定优先级" class="headerlink" title="（5）绑定优先级"></a>（5）绑定优先级</h4><p>new绑定&gt;显式绑定&gt;隐式绑定&gt;默认绑定</p><h4 id="（6）箭头函数"><a href="#（6）箭头函数" class="headerlink" title="（6）箭头函数"></a>（6）箭头函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">hi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">say</span>: <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> hi = obj.<span class="hljs-title function_">hi</span>();  <span class="hljs-comment">//输出obj对象————①</span><br><span class="hljs-title function_">hi</span>();               <span class="hljs-comment">//输出obj对象————②</span><br><span class="hljs-keyword">let</span> sayHi = obj.<span class="hljs-title function_">sayHi</span>();<br><span class="hljs-keyword">let</span> fun1 = <span class="hljs-title function_">sayHi</span>(); <span class="hljs-comment">//输出window————③</span><br><span class="hljs-title function_">fun1</span>();             <span class="hljs-comment">//输出window————④</span><br>obj.<span class="hljs-title function_">say</span>();          <span class="hljs-comment">//输出window————⑤</span><br></code></pre></td></tr></table></figure><p>①：通过对象调用函数，属于隐式调用。this指向obj</p><p>②：箭头函数是从上一个作用域继承this，所以这时指向的是obj</p><p>③：这是上面的隐式绑定丢失的情况，this指向window</p><p>④：这一步执行的是箭头函数，继承上一个作用域，this指向window</p><p>⑤：当前代码块中obj中不存在this，因此再向上找就找到了window</p><p>如果这样去显式绑定：（箭头函数不能显式绑定）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sayHi=obj.<span class="hljs-title function_">sayHi</span>();<br><span class="hljs-keyword">let</span> fun1=sayHi.<span class="hljs-title function_">bind</span>(obj);<br><span class="hljs-title function_">fun1</span>();<br></code></pre></td></tr></table></figure><h4 id="（7）例题"><a href="#（7）例题" class="headerlink" title="（7）例题"></a>（7）例题</h4><h5 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> number = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">number</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">fn</span>: (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> number;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> *= <span class="hljs-number">2</span>;<br>        number = number * <span class="hljs-number">2</span>;<br>        number = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> num = <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> *= <span class="hljs-number">2</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>            number *= <span class="hljs-number">3</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number);<br>        &#125;<br>    &#125;)()<br>&#125;<br><span class="hljs-keyword">var</span> myFun = obj.<span class="hljs-property">fn</span>;<br>myFun.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>);<br>obj.<span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">number</span>);<br></code></pre></td></tr></table></figure><p>输出结果分别为10、9、3、27、20</p><h5 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;obj&#x27;</span>,<br>    <span class="hljs-attr">foo</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo:&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inner:&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;window&#x27;</span><br><span class="hljs-keyword">var</span> obj2 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;obj2&#x27;</span> &#125;<br> <br>obj.<span class="hljs-title function_">foo</span>()()<br>obj.<span class="hljs-property">foo</span>.<span class="hljs-title function_">call</span>(obj2)()<br>obj.<span class="hljs-title function_">foo</span>().<span class="hljs-title function_">call</span>(obj2)<br></code></pre></td></tr></table></figure><p>①：分别打印出的是obj.a和window.a</p><p>②：分别打印的是obj2.a和window.a</p><p>③：分别打印的是obj.a和obj2.a</p><h5 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">foo</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">b</span>) &#123;<br>    b = b || <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + b + c)<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br><span class="hljs-keyword">var</span> obj2 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span> &#125;<br> <br>obj.<span class="hljs-title function_">foo</span>(a).<span class="hljs-title function_">call</span>(obj2, <span class="hljs-number">1</span>)<br>obj.<span class="hljs-property">foo</span>.<span class="hljs-title function_">call</span>(obj2)(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>①：传入foo的参数为a&#x3D;2，也就是说b&#x3D;2；call方法将this绑定到obj2，this.a&#x3D;3，此时c&#x3D;1</p><p>②：foo绑定至obj2，此时没有传入参数，b&#x3D;this.a&#x3D;obj2.a&#x3D;3，return匿名函数中的this.a指向window对象a&#x3D;2，传入的参数c&#x3D;1。</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结JS分支-数组常用方法</title>
    <link href="/2024/10/28/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93JS%E5%88%86%E6%94%AF-%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2024/10/28/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93JS%E5%88%86%E6%94%AF-%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>总结一下数组的常用方法</p><span id="more"></span><blockquote><p>参考CSDN：青松pine</p></blockquote><p>简单属性：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028221113005.png" alt="image-20241028221113005"></p><h3 id="一、构建数组及其长度"><a href="#一、构建数组及其长度" class="headerlink" title="一、构建数组及其长度"></a>一、构建数组及其长度</h3><ul><li><p>数组字面量方法：<code>const fruits = [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;];</code></p></li><li><p>Array构造函数：</p><ul><li><p><code>new Array(1, 2, 3)</code>（ [ 1 , 2 , 3 ] ）</p></li><li><p><code>new Array(5)</code>（长度为5的空数组）</p></li></ul></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split"><code>String.prototype.split()</code></a>：<code>const fruits3 = &quot;Apple, Banana&quot;.split(&quot;, &quot;);</code></p></li></ul><h4 id="（1）Array-from"><a href="#（1）Array-from" class="headerlink" title="（1）Array.from()"></a>（1）Array.from()</h4><p>从<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">可迭代</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E4%BD%BF%E7%94%A8%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1">类数组</a>对象创建一个新的浅拷贝的数组实例。</p><h5 id="1、从字符串构建"><a href="#1、从字符串构建" class="headerlink" title="1、从字符串构建"></a>1、从字符串构建</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Array</span>.<span class="hljs-keyword">from</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-regexp">//</span> [ <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;o&quot;</span> ]<br></code></pre></td></tr></table></figure><h5 id="2、从Set构建"><a href="#2、从Set构建" class="headerlink" title="2、从Set构建"></a>2、从Set构建</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;baz&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>]);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(set);<br><span class="hljs-comment">// [ &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot; ]</span><br></code></pre></td></tr></table></figure><h5 id="3、从Map构建"><a href="#3、从Map构建" class="headerlink" title="3、从Map构建"></a>3、从Map构建</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>  [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>],<br>  [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>],<br>]);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(map);<br><span class="hljs-comment">// [[1, 2], [2, 4], [4, 8]]</span><br><br><span class="hljs-keyword">const</span> mapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>],<br>  [<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>],<br>]);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(mapper.<span class="hljs-title function_">values</span>());<br><span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;];</span><br><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(mapper.<span class="hljs-title function_">keys</span>());<br><span class="hljs-comment">// [&#x27;1&#x27;, &#x27;2&#x27;];</span><br></code></pre></td></tr></table></figure><h5 id="4、从类对象构建"><a href="#4、从类对象构建" class="headerlink" title="4、从类对象构建"></a>4、从类对象构建</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>);<br>&#125;<br><span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// [ 1, 2, 3 ]</span><br></code></pre></td></tr></table></figure><h5 id="5、箭头函数和-Array-from"><a href="#5、箭头函数和-Array-from" class="headerlink" title="5、箭头函数和 Array.from()"></a>5、箭头函数和 Array.from()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用箭头函数作为映射函数去操作多个元素</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x + x);<br><span class="hljs-comment">// [2, 4, 6]</span><br><br><span class="hljs-comment">// 生成一个数字序列。因为数组在每个位置都使用 `undefined` 初始化，下面的 `v` 值将是 `undefined`</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">5</span> &#125;, <span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i);<br><span class="hljs-comment">// [0, 1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><h4 id="（2）Array-of"><a href="#（2）Array-of" class="headerlink" title="（2）Array.of()"></a>（2）Array.of()</h4><p>比较独特的是使用构造函数创建的时候，只写一个数字会创建长度为它的空数组，而这个方法只会直接创建含有那个数字的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>();  <span class="hljs-comment">//[]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);   <span class="hljs-comment">//[1,2,3,4]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">5</span>);   <span class="hljs-comment">//[5]</span><br></code></pre></td></tr></table></figure><h4 id="（3）长度"><a href="#（3）长度" class="headerlink" title="（3）长度"></a>（3）长度</h4><p>🐣Array.length是一个小于2^32的非负整数</p><p>数组对象会观察 <code>length</code> 属性，并自动将 <code>length</code> 值与数组的内容同步。这意味着：</p><ul><li>设置 <code>length</code> 小于当前长度的值将会截断数组——超过新 <code>length</code> 的元素将被删除。</li><li>设置超过当前 <code>length</code> 的任何数组索引（小于 232 的非负整数）将会扩展数组——<code>length</code> 属性增加以反映新的最高索引。</li><li>将 <code>length</code> 设置为无效值（例如负数或非整数）会引发 <code>RangeError</code> 异常。</li></ul><p>当 <code>length</code> 被设置为比当前长度更大的值时，数组通过添加<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84">空槽</a>来扩展，而不是实际的 <code>undefined</code> 值。空槽与数组方法有一些特殊的交互作用；详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E5%92%8C%E7%A9%BA%E6%A7%BD">数组方法和空槽</a>。</p><h3 id="二、按顺序排列的数组方法"><a href="#二、按顺序排列的数组方法" class="headerlink" title="二、按顺序排列的数组方法"></a>二、按顺序排列的数组方法</h3><h4 id="（1）at"><a href="#（1）at" class="headerlink" title="（1）at()"></a>（1）at()</h4><p>at() 方法接收一个整数值并返回该索引对应的元素，允许正数和负数。负整数从数组中的最后一个元素开始倒数（即index+array.length位置）</p><p>返回数组中与给定索引匹配的元素。如果 <code>index &lt; -array.length</code> 或 <code>index &gt;= array.length</code>，则总是返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>，而不会尝试访问相应的属性。</p><p>🦃非数组对象也可以调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arrayLike = &#123;<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-number">0</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">at</span>.<span class="hljs-title function_">call</span>(arrayLike, -<span class="hljs-number">1</span>)); <span class="hljs-comment">// &quot;b&quot;</span><br></code></pre></td></tr></table></figure><h4 id="（2）concat"><a href="#（2）concat" class="headerlink" title="（2）concat()"></a>（2）concat()</h4><p><code>concat</code> 方法创建一个新数组。该数组将首先由调用它的对象中的元素填充</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> num1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<span class="hljs-keyword">const</span> num2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<span class="hljs-keyword">const</span> num3 = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br><span class="hljs-keyword">const</span> numbers = num1.<span class="hljs-title function_">concat</span>(num2, num3);<span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br><span class="hljs-keyword">const</span> letters = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">const</span> alphaNumeric = letters.<span class="hljs-title function_">concat</span>(<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span><br><br><span class="hljs-keyword">const</span> num1 = [[<span class="hljs-number">1</span>]];<span class="hljs-keyword">const</span> num2 = [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>]];<br><span class="hljs-keyword">const</span> numbers = num1.<span class="hljs-title function_">concat</span>(num2);<span class="hljs-comment">//[[1], 2, [3]]</span><br></code></pre></td></tr></table></figure><p>在稀疏数组上调用，结果的数组也是稀疏的。</p><h4 id="（3）every"><a href="#（3）every" class="headerlink" title="（3）every"></a>（3）every</h4><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过指定函数的测试。它返回一个布尔值。（是一种迭代方法，为数组中除空槽外所有元素调用callbackFn函数，直到返回一个假值）</p><p>示例：判断一个数组是否是另一个数组的子集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">isSubset</span>=(<span class="hljs-params">array1,array2</span>)=&gt;array2.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">el</span>=&gt;</span>array1.<span class="hljs-title function_">includes</span>(el));<br></code></pre></td></tr></table></figure><h4 id="（4）fill-（是修改方法）"><a href="#（4）fill-（是修改方法）" class="headerlink" title="（4）fill()（是修改方法）"></a>（4）fill()（是修改方法）</h4><ul><li>fill(value)</li><li>fill(value, start)</li><li>fill(value, start, end)  （区间左闭右开）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br><span class="hljs-comment">//位置2到4填充0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<span class="hljs-comment">//[1, 2, 0, 0]</span><br><br><span class="hljs-comment">//从位置1填充5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">fill</span>(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>)); <span class="hljs-comment">//[1, 5, 5, 5]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">fill</span>(<span class="hljs-number">6</span>));<br><span class="hljs-comment">// Expected output: Array [6, 6, 6, 6]</span><br></code></pre></td></tr></table></figure><ul><li>如果 <code>value</code> 是个对象，那么数组的每一项都会引用这个元素。</li><li>负索引从数组的末端开始计算</li><li>超过数组范围的索引填充会被忽略</li><li>如果经标准化后，<code>end</code> 的位置在 <code>start</code> 之前或之上，没有索引被填充。</li><li>会填充稀疏数组的空槽</li></ul><p>🦫如果 <code>value</code> 是个对象，那么数组的每一项都会引用这个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 一个简单的对象，被数组的每个空槽所引用</span><br><span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">fill</span>(&#123;&#125;); <span class="hljs-comment">// [&#123;&#125;, &#123;&#125;, &#123;&#125;]</span><br>arr[<span class="hljs-number">0</span>].<span class="hljs-property">hi</span> = <span class="hljs-string">&quot;hi&quot;</span>; <span class="hljs-comment">// [&#123; hi: &quot;hi&quot; &#125;, &#123; hi: &quot;hi&quot; &#125;, &#123; hi: &quot;hi&quot; &#125;]</span><br></code></pre></td></tr></table></figure><h4 id="（4）filter"><a href="#（4）filter" class="headerlink" title="（4）filter()"></a>（4）filter()</h4><p>传入一个callback函数，只有满足条件的才会被留下。</p><p>⚠️在callback中修改数组是真的会修改原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改每个单词</span><br><span class="hljs-keyword">let</span> words = [<span class="hljs-string">&quot;spray&quot;</span>, <span class="hljs-string">&quot;limit&quot;</span>, <span class="hljs-string">&quot;exuberant&quot;</span>, <span class="hljs-string">&quot;destruction&quot;</span>, <span class="hljs-string">&quot;elite&quot;</span>, <span class="hljs-string">&quot;present&quot;</span>];<br><br><span class="hljs-keyword">const</span> modifiedWords = words.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">word, index, arr</span>) =&gt;</span> &#123;<br>  arr[index + <span class="hljs-number">1</span>] += <span class="hljs-string">&quot; extra&quot;</span>;<br>  <span class="hljs-keyword">return</span> word.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(modifiedWords);<br><span class="hljs-comment">// 注意，在长度为 6 以下有三个单词，但是由于它们已经被修改，所以返回一个单词</span><br><span class="hljs-comment">// [&quot;spray&quot;]</span><br><br><span class="hljs-comment">// 添加新单词</span><br>words = [<span class="hljs-string">&quot;spray&quot;</span>, <span class="hljs-string">&quot;limit&quot;</span>, <span class="hljs-string">&quot;exuberant&quot;</span>, <span class="hljs-string">&quot;destruction&quot;</span>, <span class="hljs-string">&quot;elite&quot;</span>, <span class="hljs-string">&quot;present&quot;</span>];<br><span class="hljs-keyword">const</span> appendedWords = words.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">word, index, arr</span>) =&gt;</span> &#123;<br>  arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;new&quot;</span>);<br>  <span class="hljs-keyword">return</span> word.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(appendedWords);<br><span class="hljs-comment">// 只有三个符合条件，即使 `words` 本身现在有更多字符长度小于 6 的单词</span><br><span class="hljs-comment">// [&quot;spray&quot; ,&quot;limit&quot; ,&quot;elite&quot;]</span><br><br><span class="hljs-comment">// 删除单词</span><br>words = [<span class="hljs-string">&quot;spray&quot;</span>, <span class="hljs-string">&quot;limit&quot;</span>, <span class="hljs-string">&quot;exuberant&quot;</span>, <span class="hljs-string">&quot;destruction&quot;</span>, <span class="hljs-string">&quot;elite&quot;</span>, <span class="hljs-string">&quot;present&quot;</span>];<br><span class="hljs-keyword">const</span> deleteWords = words.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">word, index, arr</span>) =&gt;</span> &#123;<br>  arr.<span class="hljs-title function_">pop</span>();<br>  <span class="hljs-keyword">return</span> word.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(deleteWords);<br><span class="hljs-comment">// 注意我们没有得到 &#x27;elite&#x27;，因为它在过滤器访问到它之前就已经从 &#x27;words&#x27; 弹出了</span><br><span class="hljs-comment">// [&quot;spray&quot; ,&quot;limit&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="（5）find"><a href="#（5）find" class="headerlink" title="（5）find"></a>（5）find</h4><p>find方法返回数组中满足<strong>提供测试函数的第一个元素的值</strong>。（没有找到则返回undifined）</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结-React</title>
    <link href="/2024/10/28/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-React/"/>
    <url>/2024/10/28/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-React/</url>
    
    <content type="html"><![CDATA[<p>总结一下React常见问题</p><span id="more"></span><p>（所以记忆是会消失的对吗，一阵不看就忘光了🥹）</p><h3 id="0、React18的新特性"><a href="#0、React18的新特性" class="headerlink" title="0、React18的新特性"></a>0、React18的新特性</h3><p>并发渲染</p><p>自动批处理</p><p>suspense</p><p>createRoot API（用于启用并发特性）</p><p>SSR流式传输</p><h3 id="一、useState是如何记住上次的状态的"><a href="#一、useState是如何记住上次的状态的" class="headerlink" title="一、useState是如何记住上次的状态的"></a>一、useState是如何记住上次的状态的</h3><blockquote><p>工作原理是通过在组件内部维护一个状态变量，以及提供一个函数来更新这个状态</p></blockquote><p>每次组件渲染时，<code>useState</code> 都会记住上次的状态值，而不是重新初始化。这是因为 React 通过内部数据结构（如 fiber 树）跟踪状态变化。在组件的每次更新中，React 会查找与当前组件相对应的状态值，并返回它。</p><h3 id="二、React生命周期"><a href="#二、React生命周期" class="headerlink" title="二、React生命周期"></a>二、React生命周期</h3><p>React生命周期是指组件从创建到销毁的整个过程。</p><p>指的是<strong>挂载</strong>、<strong>更新</strong>和<strong>卸载</strong>。</p><p>在类组件中通过生命周期方法来管理组件的生命周期。</p><p>在函数组件中，则是通过<strong>useState钩子</strong>来管理的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 组件挂载时执行的代码</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 组件卸载时执行的清理代码</span><br>    &#125;;<br>&#125;, [dependencies]); <span class="hljs-comment">// 可选的依赖数组</span><br></code></pre></td></tr></table></figure><ul><li>挂载和卸载：</li></ul><p>如果依赖数组为[]，效果只会在组件挂载的时候执行，在组件卸载的时候清理</p><ul><li>更新：</li></ul><p>如果依赖数组中包含变量，当这些变量发生变化时，useEffect会在每次更新的时候执行。</p><h3 id="三、React和Vue的区别"><a href="#三、React和Vue的区别" class="headerlink" title="三、React和Vue的区别"></a>三、React和Vue的区别</h3><h4 id="（1）设计理念"><a href="#（1）设计理念" class="headerlink" title="（1）设计理念"></a>（1）设计理念</h4><h5 id="React："><a href="#React：" class="headerlink" title="React："></a>React：</h5><p>React 是一个库，专注于构建用户界面，特别是单页应用（SPA）。它采用了“组件化”设计思想，强调通过组合组件来构建复杂的用户界面。</p><h5 id="Vue："><a href="#Vue：" class="headerlink" title="Vue："></a>Vue：</h5><p>Vue 是一个渐进式框架，可以逐步引入，也可以用于构建大型应用程序。</p><h4 id="（2）数据绑定"><a href="#（2）数据绑定" class="headerlink" title="（2）数据绑定"></a>（2）数据绑定</h4><h5 id="React：-1"><a href="#React：-1" class="headerlink" title="React："></a>React：</h5><ul><li>React 使用单向数据流。父组件向子组件传递数据，通过 props 进行通信。子组件不能直接修改父组件的状态。</li><li>需要使用 state 来管理组件的状态。</li></ul><h5 id="Vue：-1"><a href="#Vue：-1" class="headerlink" title="Vue："></a>Vue：</h5><p>Vue 支持双向数据绑定，通过 <code>v-model</code> 指令可以轻松实现。组件的 data 属性与视图保持同步，视图的变化会自动反映到数据上。</p><h4 id="（3）模板语法"><a href="#（3）模板语法" class="headerlink" title="（3）模板语法"></a>（3）模板语法</h4><p>React使用JSX语法，Vue使用的是HTML和JS分开的逻辑</p><h3 id="四、useMemo和useCallback"><a href="#四、useMemo和useCallback" class="headerlink" title="四、useMemo和useCallback"></a>四、useMemo和useCallback</h3><p>useMemo用于记忆（缓存）计算结果，可以避免在每次渲染时重新计算，只有在依赖项发生变化的时候才会重新计算。</p><p>useCallback用于记忆（缓存）函数实例，可以避免在每次渲染时创建新的函数实例，只有在依赖项发生变化的时候才会返回新的函数。这对于依赖于函数的子组件特别重要，因为如果传递给子组件的函数在每次渲染时都不同，子组件会被重新渲染，即使它们的 props 没有变化。通过使用 <code>useCallback</code>，你可以确保传递给子组件的函数实例在依赖项不变时保持一致，从而减少不必要的渲染。</p><h3 id="五、HOOKS"><a href="#五、HOOKS" class="headerlink" title="五、HOOKS"></a>五、HOOKS</h3><h4 id="（1）主要Hook"><a href="#（1）主要Hook" class="headerlink" title="（1）主要Hook"></a>（1）主要Hook</h4><h5 id="1、useState"><a href="#1、useState" class="headerlink" title="1、useState"></a>1、useState</h5><p>用于在函数组件中添加状态，允许组件响应用户交互、数据请求等事件时更新自身的状态，从而重新渲染组件。</p><p>惰性初始状态：接受一个函数作为初始状态的参数，这个函数指挥在初始渲染时执行一次，适用于复杂的初始状态的计算。</p><h5 id="2、useEffect"><a href="#2、useEffect" class="headerlink" title="2、useEffect"></a>2、useEffect</h5><p>用于在函数组件中管理副作用。副作用指的是组件渲染以外需要执行的操作，例如：数据获取、订阅、手动DOM操作等等。</p><p>第一个参数是一个函数，包含副作用的逻辑。React在执行完选然后会调用这个函数。当组件卸载或依赖项更新的时候会调用返回的清理函数。</p><h5 id="3、useRef"><a href="#3、useRef" class="headerlink" title="3、useRef"></a>3、useRef</h5><p>1、访问DOM元素，通过useRef创建的引用可以直接访问某个DOM元素的属性，而不需要在重新渲染组件的时候改变引用的内容。例如当需要访问某个输入框的值、控制焦点或者直接操作某个元素时，可以使用。</p><p>2、保存跨渲染的状态。useRef创建的引用不会因为组件的重新渲染而改变，这让它适合存储不影响渲染逻辑的变量。对于非显示状态的数据useRef是个不错的选择。</p><h4 id="（2）为什么hook要保证顺序"><a href="#（2）为什么hook要保证顺序" class="headerlink" title="（2）为什么hook要保证顺序"></a>（2）为什么hook要保证顺序</h4><p>为了React可以正确地将状态和副作用和相应的组件实例相关联。由于React是基于虚拟DOM的，对组件状态的更新和管理依赖于Hooks的调用顺序。如果顺序发生变化，React将无法正确识别哪些状态或副作用属于哪个组件。</p><p>如果在条件或循环语句调用hook，可能在某些情况下跳过对某些hooks的调用，会导致React认为某个hook的状态已经被销毁或者未定义，从而引发错误。</p><p>React在组件每次重新渲染时都会重新执行函数组件，如果hook的调用顺序不一致，React可能会根据上一次的渲染错误地更新state或effect。</p><p>React的设计目标之一是性能优化，通过固定的调用顺序，React可以在内部进行更多的优化。例如React可以根据hooks调用的顺序快速识别和比较组件状态，从而高效更新组件。</p><h3 id="六、React的并发特性"><a href="#六、React的并发特性" class="headerlink" title="六、React的并发特性"></a>六、React的并发特性</h3><p>旨在提升应用的用户体验和性能。这些特性可以让React在不阻塞主线程的情况下更高效地处理用户交互，帮助开发者创建相应迅速的应用。（<strong>频繁更新、非紧急更新、渲染性能</strong>）</p><h4 id="（1）自动批处理"><a href="#（1）自动批处理" class="headerlink" title="（1）自动批处理"></a>（1）自动批处理</h4><p>React18之前，只会在事件处理器中自动批处理状态更新，在React18中自动批会在任何更新中自动执行。多个setState调用会自动合并，减少渲染次数，提高性能。</p><h4 id="（2）优先级更新"><a href="#（2）优先级更新" class="headerlink" title="（2）优先级更新"></a>（2）优先级更新</h4><p>允许React通过优先级更新模型，决定哪些更新应该优先处理。</p><h4 id="（3）过渡"><a href="#（3）过渡" class="headerlink" title="（3）过渡"></a>（3）过渡</h4><p>transition是一种让React将一些状态更新标记为非紧急。使用startTransition包裹这些更新，React会优先响应紧急更新，标记为过渡的更新会稍后执行。</p><h4 id="（4）useDeferredValue和useTransition"><a href="#（4）useDeferredValue和useTransition" class="headerlink" title="（4）useDeferredValue和useTransition"></a>（4）useDeferredValue和useTransition</h4><p>useDeferredValue适合在高频率更新时缓解性能问题，用于在渲染非紧急内容时延迟展示结果，避免卡顿。</p><p>useTransition用于标记更新为过渡，它会返回一个布尔值表示是否处于过渡状态，以便在过渡状态过程中提供用户反馈。</p><h4 id="（5）并发渲染"><a href="#（5）并发渲染" class="headerlink" title="（5）并发渲染"></a>（5）并发渲染</h4><p>使得React可以暂停渲染并在需要时恢复。在复杂界面比较有用。并发渲染的核心思想是让 React 可以暂停、恢复或放弃渲染任务，以便用户交互能够优先得到响应。</p><p>七、</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结CSS分支-flex布局</title>
    <link href="/2024/10/28/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93CSS%E5%88%86%E6%94%AF-flex%E5%B8%83%E5%B1%80/"/>
    <url>/2024/10/28/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93CSS%E5%88%86%E6%94%AF-flex%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>整理一下flex布局的知识。</p><span id="more"></span><p>Flexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。本文给出了 flexbox 的主要特性，更多的细节将在别的文档中探索。</p><p>我们说 flexbox 是一种一维的布局，是因为一个 flexbox 一次只能处理一个维度上的元素布局，一行或者一列。作为对比的是另外一个二维布局 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_grid_layout">CSS Grid Layout</a>，可以同时处理行和列上的布局。</p><h3 id="一、flexbox的两根轴线"><a href="#一、flexbox的两根轴线" class="headerlink" title="一、flexbox的两根轴线"></a>一、flexbox的两根轴线</h3><p>当使用 flex 布局时，首先想到的是两根轴线 — 主轴和交叉轴。主轴由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-direction"><code>flex-direction</code></a> 定义，<strong>另一根轴垂直于它</strong>。我们使用 flexbox 的所有属性都跟这两根轴线有关，所以有必要在一开始首先理解它：flexbox 的特性是沿着主轴或者交叉轴对齐之中的元素。</p><p>它由四个值定义：</p><ul><li><code>row</code></li><li><code>row-reverse</code></li><li><code>column</code></li><li><code>column-reverse</code></li></ul><p>如果选择了 <code>row</code> 或者 <code>row-reverse</code>，主轴将沿着<strong>行向</strong>延伸，交叉轴随之延径向；</p><p>选择 <code>column</code> 或者 <code>column-reverse</code> 时，主轴会沿着页面的上下方向延伸。</p><h3 id="二、Flex容器"><a href="#二、Flex容器" class="headerlink" title="二、Flex容器"></a>二、Flex容器</h3><p>文档中采用了 flexbox 的区域就叫做 flex 容器。为了创建 flex 容器，我们把一个容器的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 属性值改为 <code>flex</code> 或者 <code>inline-flex</code>。完成这一步之后，容器中的直系子元素就会变为 <strong>flex 元素</strong>。由于所有 CSS 属性都会有一个初始值，所以 flex 容器中的所有 flex 元素都会有下列行为：</p><ul><li>元素排列为一行（<code>flex-direction</code> 属性的初始值是 <code>row</code>）。</li><li>元素从主轴的起始线开始。</li><li>元素不会在主维度方向拉伸，但是可以缩小。</li><li>元素被拉伸来填充交叉轴大小。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis"><code>flex-basis</code></a> 属性为 <code>auto</code>。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap"><code>flex-wrap</code></a> 属性为 <code>nowrap</code>。</li></ul><p>这会让你的元素呈线形排列，并且把自己的大小作为主轴上的大小。如果有太多元素超出容器，它们会溢出而不会换行。如果一些元素比其他元素高，那么元素会沿交叉轴被拉伸来填满它的大小。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028102541209.png" alt="image-20241028102541209" style="zoom:50%;" /><h3 id="三、Flex的基本属性"><a href="#三、Flex的基本属性" class="headerlink" title="三、Flex的基本属性"></a>三、Flex的基本属性</h3><h4 id="（1）flex-wrap"><a href="#（1）flex-wrap" class="headerlink" title="（1）flex-wrap"></a>（1）flex-wrap</h4><p>用于决定子元素是否换行。</p><ul><li>nowrap（默认）：不换行（子元素<strong>会缩小以适应</strong>容器，无法缩小会溢出）</li><li>wrap：换行，移除元素会移至下一行</li><li>wrap-reverse：换行并逆序排列</li></ul><h4 id="（2）flex-flow"><a href="#（2）flex-flow" class="headerlink" title="（2）flex-flow"></a>（2）flex-flow</h4><p>可以将两个属性 <code>flex-direction</code> 和 <code>flex-wrap</code> 组合为简写属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-flow"><code>flex-flow</code></a>，第一个指定的值为 <code>flex-direction</code> ，第二个指定的值为 <code>flex-wrap</code>。</p><h4 id="（3）控制flex元素上的属性"><a href="#（3）控制flex元素上的属性" class="headerlink" title="（3）控制flex元素上的属性"></a>（3）控制flex元素上的属性</h4><p>是为了控制<strong>元素</strong>如何会自动延伸收缩以适应可用空间。（<strong>控制元素而非容器</strong>）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028142856880.png" alt="image-20241028142856880" style="zoom:50%;" /><h5 id="🦔flex-basis"><a href="#🦔flex-basis" class="headerlink" title="🦔flex-basis"></a>🦔flex-basis</h5><p><code>flex-basis</code> 定义了该元素的<strong>空间大小</strong>，flex 容器里除了元素所占的空间以外的富余空间就是<strong>可用空间</strong>。该属性的默认值是 <code>auto</code>。此时，浏览器会检测这个元素是否具有确定的尺寸。在上面的例子中，所有元素都设定了宽度（width）为 100px，所以 <code>flex-basis</code> 的值为 100px。</p><p>如果没有给元素设定尺寸，<code>flex-basis</code> 的值采用元素内容的尺寸。这就解释了：我们给只要给 Flex 元素的父元素声明 <code>display: flex</code>，所有子元素就会排成一行，且自动分配大小以充分展示元素的内容。</p><h5 id="🦔flex-grow"><a href="#🦔flex-grow" class="headerlink" title="🦔flex-grow"></a>🦔flex-grow</h5><p><code>flex-grow</code> 若被赋值为一个正整数，flex 元素会以 <code>flex-basis</code> 为基础，沿主轴方向增长尺寸。这会使该元素延展，并占据此方向轴上的可用空间（available space）。如果有其他元素也被允许延展，那么他们会各自占据可用空间的一部分。</p><p>它可以按照比例分配空间，在下面的例子可以看到。</p><h5 id="🦔flex-shrink"><a href="#🦔flex-shrink" class="headerlink" title="🦔flex-shrink"></a>🦔flex-shrink</h5><blockquote><p>在计算 flex 元素收缩的大小时，它的最小尺寸也会被考虑进去，就是说实际上 flex-shrink 属性可能会和 flex-grow 属性表现的不一致。因此，我们可以在文章《<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Controlling_ratios_of_flex_items_along_the_main_axis">控制 Flex 子元素在主轴上的比例</a>》中更详细地看一下这个算法的原理。</p></blockquote><p>相反<code>flex-shrink</code>属性是处理 flex 元素收缩的问题。如果我们的容器中没有足够排列 flex 元素的空间，那么可以把 flex 元素<code>flex-shrink</code>属性设置为正整数来缩小它所占空间到<code>flex-basis</code>以下。与<code>flex-grow</code>属性一样，可以赋予不同的值来控制 flex 元素收缩的程度——给<code>flex-shrink</code>属性赋予更大的数值可以比赋予小数值的同级元素收缩程度更大。</p><p>（就算收缩，如果元素中有子元素，最小的大小不会小于元素中子元素的长度，见例子）</p><h5 id="🦔flex属性的简写"><a href="#🦔flex属性的简写" class="headerlink" title="🦔flex属性的简写"></a>🦔flex属性的简写</h5><p>大部分这些属性都是混合在一起写的，按照下面的顺序：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex</span>: flex-grow flex-shrink flex-basis<br></code></pre></td></tr></table></figure><p>当然也可以使用预定义的简写形式：</p><ul><li><code>flex: initial</code>（相当于0 1 auto，默认值)(不会超过它们本身的长度，但是可以收缩</li><li><code>flex: auto</code>（相当于 1 1 auto）（可收缩可拉伸）</li><li><code>flex: none</code>（相当于 0 0 auto）（不可收缩，也不可拉伸）</li><li><code>flex: &lt;positive-number&gt;</code>（相当于  num 1 0）(num表示占几倍的剩余空间)</li></ul><h5 id="🦔示例"><a href="#🦔示例" class="headerlink" title="🦔示例"></a>🦔示例</h5><p>均设置成initial：（容器大小200px，三个元素大小均50px）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028144648615.png" alt="image-20241028144648615"></p><p>第一个设置成auto：（全设成auto会平分空间）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028144815014.png" alt="image-20241028144815014"></p><p>均设置成auto&#x2F;none：（容器140，元素仍旧50）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028144950361.png" alt="image-20241028144950361"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028145129787.png" alt="image-20241028145129787"></p><p>均设置成auto：（容器120，元素50）（缩到最小也无法适应）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028145059519.png" alt="image-20241028145059519"></p><p>分别设置成 1、2、3：（容器300，元素50）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028145338443.png" alt="image-20241028145338443"></p><h3 id="四、元素间的对齐和空间分配"><a href="#四、元素间的对齐和空间分配" class="headerlink" title="四、元素间的对齐和空间分配"></a>四、元素间的对齐和空间分配</h3><h4 id="（1）align-items"><a href="#（1）align-items" class="headerlink" title="（1）align-items"></a>（1）align-items</h4><p>定义在交叉轴上的对齐方式。</p><h5 id="🦒stretch（默认）"><a href="#🦒stretch（默认）" class="headerlink" title="🦒stretch（默认）"></a>🦒stretch（默认）</h5><p>拉伸元素来填满flex容器：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028145859870.png" alt="image-20241028145859870" style="zoom:67%;" /><h5 id="🦒flex-start"><a href="#🦒flex-start" class="headerlink" title="🦒flex-start"></a>🦒flex-start</h5><p>按照flex容器的顶部对齐：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028150022317.png" alt="image-20241028150022317" style="zoom: 67%;" /><h5 id="🦒flex-end"><a href="#🦒flex-end" class="headerlink" title="🦒flex-end"></a>🦒flex-end</h5><p>按照最下部对齐：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028150214847.png" alt="image-20241028150214847" style="zoom:67%;" /><h5 id="🦒center"><a href="#🦒center" class="headerlink" title="🦒center"></a>🦒center</h5><p>在交叉轴上居中对齐：（即在垂直方向居中）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028150232063.png" alt="image-20241028150232063" style="zoom:67%;" /><h4 id="（2）justify-content"><a href="#（2）justify-content" class="headerlink" title="（2）justify-content"></a>（2）justify-content</h4><h5 id="🦒flex-start（默认值）"><a href="#🦒flex-start（默认值）" class="headerlink" title="🦒flex-start（默认值）"></a>🦒flex-start（默认值）</h5><h5 id="🦒flex-end-1"><a href="#🦒flex-end-1" class="headerlink" title="🦒flex-end"></a>🦒flex-end</h5><h5 id="🦒flex-right"><a href="#🦒flex-right" class="headerlink" title="🦒flex-right"></a>🦒flex-right</h5><h5 id="🦒flex-left"><a href="#🦒flex-left" class="headerlink" title="🦒flex-left"></a>🦒flex-left</h5><h5 id="🦒stretch"><a href="#🦒stretch" class="headerlink" title="🦒stretch"></a>🦒stretch</h5><h5 id="🦒center-1"><a href="#🦒center-1" class="headerlink" title="🦒center"></a>🦒center</h5><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028150625147.png" alt="image-20241028150625147" style="zoom:67%;" /><h5 id="🦒space-around"><a href="#🦒space-around" class="headerlink" title="🦒space-around"></a>🦒space-around</h5><p>每个元素的左右空间相等：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028150722335.png" alt="image-20241028150722335" style="zoom:67%;" /><h5 id="🦒space-between"><a href="#🦒space-between" class="headerlink" title="🦒space-between"></a>🦒space-between</h5><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028150739876.png" alt="image-20241028150739876" style="zoom:67%;" /><h5 id="🦒space-evenly"><a href="#🦒space-evenly" class="headerlink" title="🦒space-evenly"></a>🦒space-evenly</h5><p>所有间距都相同</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028151435953.png" alt="image-20241028151435953" style="zoom:67%;" /><h4 id="（3）align-self（子元素的属性）"><a href="#（3）align-self（子元素的属性）" class="headerlink" title="（3）align-self（子元素的属性）"></a>（3）align-self（子元素的属性）</h4><p>用于对齐单个flex子项。</p><p>拥有<code>align-items</code> 的所有属性值，另外还有一个 <code>auto</code> 能重置自身的值为 <code>align-items</code> 定义的值。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028151745449.png" alt="image-20241028151745449" style="zoom: 50%;" /><h4 id="（4）align-content"><a href="#（4）align-content" class="headerlink" title="（4）align-content"></a>（4）align-content</h4><p>当有多行（多列）元素的时候，设置每行（每列）元素在交叉轴上的对齐方式。</p><p>属性值和justify-content一样。</p><p>示例几个：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028152722109.png" alt="image-20241028152722109" style="zoom: 33%;float: left" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028152826620.png" alt="image-20241028152826620" style="zoom:33%;float: left" /></p><h4 id="（5）没有justify-self怎么办"><a href="#（5）没有justify-self怎么办" class="headerlink" title="（5）没有justify-self怎么办"></a>（5）没有justify-self怎么办</h4><p>怎么达到这样的效果？</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028153028418.png" alt="image-20241028153028418" style="zoom:67%;" /><p>答案是在three元素上添加margin-left: auto属性。或者Two添加右外边距属性。</p><h3 id="五、用flex实现经典布局"><a href="#五、用flex实现经典布局" class="headerlink" title="五、用flex实现经典布局"></a>五、用flex实现经典布局</h3><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028154132102.png" alt="image-20241028154132102" style="zoom: 50%;" /><h4 id="（1）HTML"><a href="#（1）HTML" class="headerlink" title="（1）HTML"></a>（1）HTML</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layout&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span>导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span>侧栏<span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>内容块1<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>内容块2<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）CSS"><a href="#（2）CSS" class="headerlink" title="（2）CSS"></a>（2）CSS</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">body</span>,<span class="hljs-selector-tag">html</span> &#123;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-comment">/* 布局容器 */</span><br><span class="hljs-selector-class">.layout</span> &#123;<br>   <span class="hljs-attribute">display</span>: flex;<br>   <span class="hljs-attribute">flex-direction</span>: column;<span class="hljs-comment">/* 将导航栏放在上方 */</span><br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<span class="hljs-comment">/* 占满整个视口高度 */</span><br>&#125;<br><br><span class="hljs-selector-class">.navbar</span> &#123;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;<br>   <span class="hljs-attribute">color</span>: white;<br>   <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>   <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><span class="hljs-comment">/* 主容器 */</span><br><span class="hljs-selector-class">.main</span> &#123;<br>   <span class="hljs-attribute">display</span>: flex;<br>   <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* 主容器占满剩余空间 */</span><br>&#125;<br><span class="hljs-comment">/* 侧栏 */</span><br><span class="hljs-selector-class">.sidebar</span> &#123;<br>   backgroud-<span class="hljs-attribute">color</span>: <span class="hljs-number">#f4f4f4</span>;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <span class="hljs-comment">/* 固定宽度 */</span><br>   <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-comment">/* 右侧内容区 */</span><br><span class="hljs-selector-class">.content</span> &#123;<br>   <span class="hljs-attribute">display</span>: flex;<br>   <span class="hljs-attribute">flex-direction</span>: column;<span class="hljs-comment">/* 上下排列内容块 */</span><br>   <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* 占满主容器剩余空间 */</span><br>   <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>   <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;<span class="hljs-comment">/* 内容块间距 */</span><br>&#125;<br><span class="hljs-comment">/* 上下内容块 */</span><br><span class="hljs-selector-tag">section</span> &#123;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ddd</span>;<br>   <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<span class="hljs-comment">/* 两个内容块等高 */</span><br>   <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（终于结束了😇，四小时不停敲敲敲，手已断）</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结CSS分支-媒体查询</title>
    <link href="/2024/10/28/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93CSS%E5%88%86%E6%94%AF-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/10/28/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93CSS%E5%88%86%E6%94%AF-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>本节总结一下媒体查询（结合一下CSDN、GPT和MDN）</p><span id="more"></span><p>（没有耕不完的地，只有累不死的牛…😁）</p><p>CSS 中的媒体查询（Media Query），用于根据设备特性（如屏幕宽度、分辨率、颜色等）来应用不同的样式。它是<strong>响应式设计</strong>的核心，让网页在不同屏幕和设备上显示适应性良好的布局。</p><h3 id="一、使用方法"><a href="#一、使用方法" class="headerlink" title="一、使用方法"></a>一、使用方法</h3><p>1、@media：用CSS装饰样式（下面详讲）</p><p>2、用 <code>media=</code> 属性为<code>&lt;style&gt;,&lt;link&gt;,&lt;source&gt;</code>和其他HTML元素指定特定的媒体类型：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;style.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;print&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia"><code>Window.matchMedia()</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList/addListener"><code>MediaQueryList.addListener()</code></a>方法来<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries/Testing_media_queries">测试和监控媒体状态</a></p><h3 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h3><p>**🦩@media 媒体类型 and (条件)**（不写类型或者条件也可以）</p><p>每条媒体查询语句都由一个可选的媒体类型和任意数量的媒体特性表达式构成。可以使用多种逻辑操作符去合并多条媒体查询语句。不区分大小写。</p><p>当媒体类型（如果指定）与在其上显示文档的设备匹配并且所有媒体功能表达式都计算为 true 时，媒体查询将计算为 true。涉及未知媒体类型的查询始终为 false。</p><blockquote><p>即使媒体查询返回 false，带有媒体查询附加到其<code>&lt;link&gt;</code>标记的样式表<a href="http://scottjehl.github.com/CSS-Download-Tests/">仍将下载</a>。但是，除非查询结果变为 true，否则其内容将不适用。</p></blockquote><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: portrait) &#123; ... &#125;  (纵向设备)<br></code></pre></td></tr></table></figure><h4 id="1、多重查询"><a href="#1、多重查询" class="headerlink" title="1、多重查询"></a>1、多重查询</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen, print &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>当用户的设备与各种媒体类型，功能或状态中的任何一种匹配时，可以使用逗号分隔的列表来应用样式。</p><h4 id="2、and"><a href="#2、and" class="headerlink" title="2、and"></a>2、and</h4><p><code>and</code> 运算符用于将媒体类型与媒体功能分组。还可以将多个媒体功能组合到单个媒体查询中。必须满足and连接的所有条件，查询才会返回true</p><h4 id="3、not"><a href="#3、not" class="headerlink" title="3、not"></a>3、not</h4><p><code>not</code>关键字会反转整个媒体查询的含义。它只会否定要应用的特定媒体查询。 （因此，它不会应用于以逗号分隔的媒体查询列表中的每个媒体查询。）<code>not</code>关键字不能用于否定单个功能查询，只能用于否定整个媒体查询。</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">monochrome</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> (all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">monochrome</span>)) &#123; ... &#125;<br></code></pre></td></tr></table></figure><h4 id="4、only"><a href="#4、only" class="headerlink" title="4、only"></a>4、only</h4><p><code>only</code>关键字可防止不支持带有媒体功能的媒体查询的旧版浏览器应用给定的样式。<strong>它对现代浏览器没有影响</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">color</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure><h3 id="三、常见的媒体类型和条件"><a href="#三、常见的媒体类型和条件" class="headerlink" title="三、常见的媒体类型和条件"></a>三、常见的媒体类型和条件</h3><h4 id="（1）媒体类型"><a href="#（1）媒体类型" class="headerlink" title="（1）媒体类型"></a>（1）媒体类型</h4><ul><li>all：适用于所有设备类型，通常省略。</li><li>screen：用于电脑显示器、平板、智能手机等屏幕设备。</li><li>print：用于打印机或打印预览模式。</li><li>speech：用于屏幕阅读器等语音设备。</li></ul><h4 id="（2）条件"><a href="#（2）条件" class="headerlink" title="（2）条件"></a>（2）条件</h4><ul><li>宽度和高度：<code>min-width</code>、<code>max-width</code>、<code>min-height</code>、<code>max-height</code></li><li>设备宽度和高度：<code>min-device-width</code>、<code>max-device-width</code></li><li>分辨率：<code>min-resolution</code>、<code>max-resolution</code></li><li>方向：<code>orientation</code>，取值为 <code>portrait</code>（纵向）和 <code>landscape</code>（横向）</li></ul><h3 id="四、版本4的语法改进"><a href="#四、版本4的语法改进" class="headerlink" title="四、版本4的语法改进"></a>四、版本4的语法改进</h3><blockquote><p>某些媒体功能可能并未得到良好的支持</p></blockquote><p>例如：</p><ul><li>@media (max-width: 30em) 可以被写成@media (width &lt;&#x3D; 30em)</li><li>@media (min-width: 30em) and (max-width: 50em)能写成@media (30em &lt;&#x3D; width &lt;&#x3D; 50em )</li></ul><h3 id="五、媒体类型"><a href="#五、媒体类型" class="headerlink" title="五、媒体类型"></a>五、媒体类型</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028094648654.png" alt="image-20241028094648654"></p><h3 id="六、媒体特性"><a href="#六、媒体特性" class="headerlink" title="六、媒体特性"></a>六、媒体特性</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028094757994.png" alt="image-20241028094757994"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028094816500.png" alt="image-20241028094816500"></p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结CSS分支-transform</title>
    <link href="/2024/10/27/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93CSS%E5%88%86%E6%94%AF-transform/"/>
    <url>/2024/10/27/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93CSS%E5%88%86%E6%94%AF-transform/</url>
    
    <content type="html"><![CDATA[<p>本文详细总结一下CSS3新特性transform的用法</p><span id="more"></span><blockquote><p><code>transform</code> 是一个非常强大的 CSS 属性，用于对元素进行 2D 或 3D 变换，包括平移、旋转、缩放、倾斜等。它可以<strong>直接影响元素的视觉效果，而不会影响其他元素的布局</strong>。<code>transform</code> 支持多种变换函数，可以单独使用，也可以组合使用（空格隔开）。</p></blockquote><h3 id="一、2D变换函数"><a href="#一、2D变换函数" class="headerlink" title="一、2D变换函数"></a>一、2D变换函数</h3><p>多个变换组合在一起按照从左到右的顺序执行</p><h4 id="（1）translate：平移"><a href="#（1）translate：平移" class="headerlink" title="（1）translate：平移"></a>（1）translate：平移</h4><ul><li>translateX(px&#x2F;%&#x2F;em&#x2F;rem)：在水平方向平移元素。</li><li>translateY(px&#x2F;%&#x2F;em&#x2F;rem)：在垂直方向平移元素。</li><li>translate(x, y)：同时在水平和垂直方向平移。eg:（translate(100px,50px)）</li></ul><h4 id="（2）scale：缩放"><a href="#（2）scale：缩放" class="headerlink" title="（2）scale：缩放"></a>（2）scale：缩放</h4><ul><li>scale(sx, sy)：分别在水平方向和垂直方向上缩放元素。如果只指定一个值，则同时缩放水平和垂直方向。</li><li>scaleX(sx)：仅在水平方向上缩放元素。</li><li>scaleY(sy)：仅在垂直方向上缩放元素。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>,<span class="hljs-number">2</span>)  <span class="hljs-comment">/*水平放大1.5倍，垂直放大2倍</span><br></code></pre></td></tr></table></figure><h4 id="（3）rotate：旋转（顺时针）"><a href="#（3）rotate：旋转（顺时针）" class="headerlink" title="（3）rotate：旋转（顺时针）"></a>（3）rotate：旋转（顺时针）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>) <span class="hljs-comment">/*顺时针旋转45度</span><br></code></pre></td></tr></table></figure><h4 id="（4）skew：倾斜"><a href="#（4）skew：倾斜" class="headerlink" title="（4）skew：倾斜"></a>（4）skew：倾斜</h4><ul><li>skewX(angle)：沿 X 轴倾斜。</li><li>skewY(angle)：沿 Y 轴倾斜。</li><li>skew(x-angle, y-angle)：同时沿 X 和 Y 轴倾斜。（如果只指定一个值，只显示x方向）</li></ul><h4 id="（5）示例"><a href="#（5）示例" class="headerlink" title="（5）示例"></a>（5）示例</h4><p>如图，分别对应：（从左到右从上到下）</p><ul><li>transform: rotate(45deg);</li><li>transform: skewX(20deg);</li><li>transform: skewY(20deg);</li><li>transform: skew(20deg,40deg);</li></ul><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027194627900.png" alt="image-20241027194627900" style="zoom:50%;" /><h3 id="二、3D变换"><a href="#二、3D变换" class="headerlink" title="二、3D变换"></a>二、3D变换</h3><h4 id="（1）rotate：旋转"><a href="#（1）rotate：旋转" class="headerlink" title="（1）rotate：旋转"></a>（1）rotate：旋转</h4><ul><li>rotateX(angle)：绕 X 轴旋转。</li><li>rotateY(angle)：绕 Y 轴旋转。</li><li>rotateZ(angle)：绕 Z 轴旋转（与 2D <code>rotate</code> 相同）。</li><li>rotate3d(x, y, z, angle)：按指定的三维方向向量旋转。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">70deg</span>)   <span class="hljs-built_in">rotateY</span>(-<span class="hljs-number">70deg</span>)   <span class="hljs-built_in">rotate3d</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">70deg</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027195914168.png" alt="image-20241027195914168" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027195936275.png" alt="image-20241027195936275"><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-27%20200425.png" alt="img" style="zoom: 50%;" /></p><h4 id="（2）translate3d：平移"><a href="#（2）translate3d：平移" class="headerlink" title="（2）translate3d：平移"></a>（2）translate3d：平移</h4><ul><li>translform:translateZ(px): 仅仅是在Z轴上移动（用perspective辅助才能看到效果）</li><li>translate3d(x, y, z)：在 3D 空间中平移，<code>z</code> 值决定深度方向。</li></ul><h4 id="（3）perspective-：透视"><a href="#（3）perspective-：透视" class="headerlink" title="（3）perspective ：透视"></a>（3）perspective ：透视</h4><p>perspective绝当观察者与Z平面的距离，值越小3D效果越明显。</p><p>⚠️只有设置到父容器上才有效</p><h4 id="（4）transform-origin变换基点"><a href="#（4）transform-origin变换基点" class="headerlink" title="（4）transform-origin变换基点"></a>（4）transform-origin变换基点</h4><p><code>transform-origin</code> 定义元素进行变换的基准点。</p><p>🐱语法：transform-origin: x-axis y-axis z-axis;</p><p>🐱默认值：transform-origin:50% 50% 0;（也可以只写两个值）</p><p>🐱单位：可以是百分比、em、px等具体的值，也可以是top、right、bottom、left和center这样的关键词。</p><p>100%   50%：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027203753029.png" alt="image-20241027203753029" style="zoom:50%;" /><p>50%   0：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027203958956.png" alt="image-20241027203958956" style="zoom:50%;" /><h4 id="（5）backface-visibility：背面可见性"><a href="#（5）backface-visibility：背面可见性" class="headerlink" title="（5）backface-visibility：背面可见性"></a>（5）backface-visibility：背面可见性</h4><p>在 3D 旋转时，如果元素旋转至背面，可以通过 <code>backface-visibility</code> 控制其是否可见。</p><ul><li><code>visible</code>：默认值，背面可见。</li><li><code>hidden</code>：背面不可见。</li></ul><h4 id="（6）动画效果"><a href="#（6）动画效果" class="headerlink" title="（6）动画效果"></a>（6）动画效果</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.element</span> &#123;<br>  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.element</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.27-</title>
    <link href="/2024/10/27/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.27-/"/>
    <url>/2024/10/27/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.27-/</url>
    
    <content type="html"><![CDATA[<p>最近背八股，刷题刷的少了🫠</p><span id="more"></span><h2 id="2024-10-27"><a href="#2024-10-27" class="headerlink" title="2024&#x2F;10&#x2F;27"></a>2024&#x2F;10&#x2F;27</h2><h3 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h3><h4 id="（1）缺失的第一个正数"><a href="#（1）缺失的第一个正数" class="headerlink" title="（1）缺失的第一个正数"></a>（1）缺失的第一个正数</h4><blockquote><p>给你一个未排序的整数数组 <code>nums</code> ，请你找出其中没有出现的最小的正整数。</p><p>请你实现时间复杂度为 <code>O(n)</code> 并且只使用常数级别额外空间的解决方案。</p></blockquote><p>方法：原地哈希（时间复杂度O（n），空间复杂度：只用到原数组）</p><h5 id="方法一：标记"><a href="#方法一：标记" class="headerlink" title="方法一：标记"></a>方法一：标记</h5><ul><li>第一次遍历：使得所有不在【1，N】区间的数都变得大于N。<ul><li>如果一个数字已经大于N，就不需要管，于是只需要把负数和0变成N+1</li></ul></li><li>第二次遍历，将所有<strong>绝对值</strong>在【1，N】区间的数字，其绝对值|x|-1位置的数字变成负数</li><li>第三次遍历，返回第一个不是负数的数的下标。如果都为整数，返回N+1</li></ul><p>注意位置0对应数字1，依次类推。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">firstMissingPositive</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>       <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>          <span class="hljs-keyword">if</span>(nums[i]&lt;=<span class="hljs-number">0</span>)<br>             nums[i]=n+<span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>          <span class="hljs-type">int</span> num=<span class="hljs-built_in">abs</span>(nums[i]);<br>          <span class="hljs-keyword">if</span>(num&gt;=<span class="hljs-number">1</span>&amp;&amp;num&lt;=n)<br>             nums[num<span class="hljs-number">-1</span>]=-<span class="hljs-built_in">abs</span>(nums[num<span class="hljs-number">-1</span>]);<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>          <span class="hljs-keyword">if</span>(nums[i]&gt;<span class="hljs-number">0</span>)<br>             <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> n+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="方法二：置换"><a href="#方法二：置换" class="headerlink" title="方法二：置换"></a>方法二：置换</h5><p>想要把数组恢复成，数字x在x-1的位置上这样的形式。</p><ul><li><p>第一次遍历，如果数字x在【1，N】区间，就将它与x-1位置的元素交换</p><ul><li>如果交换后的元素还在【1，N】区间，就继续交换</li><li>如果发现x和x-1的位置相同，说明已经交换过，无需交换</li></ul></li><li><p>第二次遍历，如果发现x位置的元素不是x+1，就可以返回x+1</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">firstMissingPositive</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">while</span>(nums[i]&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]&lt;=n&amp;&amp;nums[nums[i]<span class="hljs-number">-1</span>]!=nums[i])&#123;<br>                <span class="hljs-built_in">swap</span>(nums[nums[i]<span class="hljs-number">-1</span>],nums[i]);<br>            &#125; <br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i]!=i+<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        <span class="hljs-keyword">return</span> n+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二、DFS"><a href="#二、DFS" class="headerlink" title="二、DFS"></a>二、DFS</h3><h4 id="（1）-单词搜索"><a href="#（1）-单词搜索" class="headerlink" title="（1） 单词搜索"></a>（1）<a href="https://leetcode.cn/problems/word-search/"> 单词搜索</a></h4><blockquote><p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; path=&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">exist</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m=board.<span class="hljs-built_in">size</span>(),n=board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> l=word.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">auto</span> dfs=[&amp;](<span class="hljs-keyword">auto</span> &amp;&amp;dfs,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> k)-&gt;<span class="hljs-type">bool</span>&#123;<br>            <span class="hljs-keyword">if</span>(board[i][j]!=word[k])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(k==l<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            board[i][j]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> q=<span class="hljs-number">0</span>;q&lt;<span class="hljs-number">4</span>;q++)&#123;<br>                <span class="hljs-type">int</span> ni=i+path[q][<span class="hljs-number">0</span>],nj=j+path[q][<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(ni&gt;=<span class="hljs-number">0</span>&amp;&amp;ni&lt;m&amp;&amp;nj&gt;=<span class="hljs-number">0</span>&amp;&amp;nj&lt;n&amp;&amp;board[ni][nj])&#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(dfs,ni,nj,k+<span class="hljs-number">1</span>))<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            board[i][j]=word[k];<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(dfs,i,j,<span class="hljs-number">0</span>))&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="三、树"><a href="#三、树" class="headerlink" title="三、树"></a>三、树</h3><h4 id="（1）计算所有路径和"><a href="#（1）计算所有路径和" class="headerlink" title="（1）计算所有路径和"></a>（1）计算所有路径和</h4><blockquote><p>自己定义树节点类。计算根节点到每个叶子结点的路径和，返回一个数组。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-type">int</span> val;<br>   std::vector&lt;TreeNode*&gt; children;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calculatePathSums</span><span class="hljs-params">(TreeNode* node,<span class="hljs-type">int</span> currentSum,std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; pathSums)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(!node) <span class="hljs-keyword">return</span>;<br>   <br>   currentSum+=node-&gt;val;<br>   <br>   <span class="hljs-keyword">if</span>(node-&gt;children.<span class="hljs-built_in">empty</span>())&#123;<br>      pathSums.<span class="hljs-built_in">push_back</span>(currentSum);<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">for</span>(TreeNode* child : node-&gt;children)&#123;<br>         <span class="hljs-built_in">calculatePathSums</span>(child,currentSum,pathSums);<br>      &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">getRootToLeafSums</span><span class="hljs-params">(TreeNode* root)</span></span>&#123;<br>   vector&lt;<span class="hljs-type">int</span>&gt; pathSums;<br>   <span class="hljs-built_in">calculatePathSums</span>(root,<span class="hljs-number">0</span>,pathSums);<br>   <span class="hljs-keyword">return</span> pathSums;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-10-30"><a href="#2024-10-30" class="headerlink" title="2024&#x2F;10&#x2F;30"></a>2024&#x2F;10&#x2F;30</h2><h3 id="一、哈希表"><a href="#一、哈希表" class="headerlink" title="一、哈希表"></a>一、哈希表</h3><h4 id="（1）连续的子数组和"><a href="#（1）连续的子数组和" class="headerlink" title="（1）连续的子数组和"></a>（1）<a href="https://leetcode.cn/problems/continuous-subarray-sum/">连续的子数组和</a></h4><blockquote><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，如果 <code>nums</code> 有一个 <strong>好的子数组</strong> 返回 <code>true</code> ，否则返回 <code>false</code>：</p><p>一个 <strong>好的子数组</strong> 是：</p><ul><li>长度 <strong>至少为 2</strong> ，且子数组元素总和为 <code>k</code> 的倍数。</li></ul><p><strong>注意</strong>：</p><ul><li><strong>子数组</strong> 是数组中 <strong>连续</strong> 的部分。</li><li>如果存在一个整数 <code>n</code> ，令整数 <code>x</code> 符合 <code>x = n * k</code> ，则称 <code>x</code> 是 <code>k</code> 的一个倍数。<code>0</code> <strong>始终</strong> 视为 <code>k</code> 的一个倍数。</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">checkSubarraySum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;nums,<span class="hljs-type">int</span> k)</span></span>&#123;<br>   <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>      sum[i]=sum[i<span class="hljs-number">-1</span>]+nums[i];<br>   &#125;<br>   unordered_set&lt;<span class="hljs-type">int</span>&gt; set;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++) &#123;<br>      set.<span class="hljs-built_in">insert</span>(sum[i<span class="hljs-number">-2</span>]%k);<br>      <span class="hljs-keyword">if</span>(set.<span class="hljs-built_in">count</span>(sum[i]%k))&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）快乐数"><a href="#（2）快乐数" class="headerlink" title="（2）快乐数"></a>（2）<a href="https://leetcode.cn/problems/happy-number/">快乐数</a></h4><blockquote><p><strong>「快乐数」</strong> 定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li><li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li></ul><p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p></blockquote><h5 id="1、哈希表法"><a href="#1、哈希表法" class="headerlink" title="1、哈希表法"></a>1、哈希表法</h5><ul><li>最终会得到 1。</li><li>最终会进入循环。</li><li>值会越来越大，最后接近无穷大。（不用处理）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123; <br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>      <span class="hljs-type">int</span> totalSum=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>         <span class="hljs-type">int</span> d=n%<span class="hljs-number">10</span>;<br>         n=n/<span class="hljs-number">10</span>;<br>         totalSum+=d*d;<br>      &#125;<br>      <span class="hljs-keyword">return</span> totalSum;<br>   &#125;<br>   <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; seen;<br>        <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">1</span>&amp;&amp;!<span class="hljs-built_in">seenContains</span>(n))&#123;<br>           seen.<span class="hljs-built_in">Add</span>(n);<br>           n=<span class="hljs-built_in">getNext</span>(n);<br>        &#125;<br>       <span class="hljs-keyword">return</span> n==<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、快慢指针法"><a href="#2、快慢指针法" class="headerlink" title="2、快慢指针法"></a>2、快慢指针法</h5><p>（想到了判断循环链表）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>   <span class="hljs-type">int</span> slowRunner=n;<br>   <span class="hljs-type">int</span> fastRunner=<span class="hljs-built_in">getNext</span>(n);<br>   <span class="hljs-keyword">while</span>(fastRunner!=<span class="hljs-number">1</span>&amp;&amp;fastRunner!=slowRunner)&#123;<br>      slowRunner=<span class="hljs-built_in">getNext</span>(slowRunner);<br>      fastRunner=<span class="hljs-built_in">getNext</span>(<span class="hljs-built_in">getNext</span>(fastRunner));<br>   &#125;<br>   <span class="hljs-keyword">return</span> f<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="二、回溯"><a href="#二、回溯" class="headerlink" title="二、回溯"></a>二、回溯</h3><h4 id="（1）非递减子序列"><a href="#（1）非递减子序列" class="headerlink" title="（1）非递减子序列"></a>（1）<a href="https://leetcode.cn/problems/non-decreasing-subsequences/">非递减子序列</a></h4><blockquote><p>给你一个整数数组 <code>nums</code> ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>   vector&lt;<span class="hljs-type">int</span>&gt; temp;<br>   vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; ans;<br>   <br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cur,<span class="hljs-type">int</span> last,vector&lt;<span class="hljs-type">int</span>&gt;&amp;nums)</span></span>&#123;<br>      <span class="hljs-keyword">if</span>(cur==nums.<span class="hljs-built_in">size</span>())&#123;<br>         <span class="hljs-keyword">if</span>(temp.<span class="hljs-built_in">size</span>()&gt;=<span class="hljs-number">2</span>)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(temp);<br>         &#125;<br>         <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span>(nums[cur]&gt;=last) &#123;<br>         temp.<span class="hljs-built_in">push_back</span>(nums[cur]);<br>         <span class="hljs-built_in">dfs</span>(cur+<span class="hljs-number">1</span>,nums[cur],nums);<br>         temp.<span class="hljs-built_in">pop_back</span>();<br>      &#125;<br>      <span class="hljs-keyword">if</span>(nums[cur]!=last)&#123;<br>         <span class="hljs-built_in">dfs</span>(cur+<span class="hljs-number">1</span>,last,nums);<br>      &#125;<br>   &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">findSubsequences</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>       <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,INT_MIN,nums);<br>       <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="三、面试题"><a href="#三、面试题" class="headerlink" title="三、面试题"></a>三、面试题</h3><p>（1）最长的快乐字符串</p><blockquote><p>要求编写一个算法来生成“最长的快乐字符串”，即一个不包含 <code>&quot;aaa&quot;</code>, <code>&quot;bbb&quot;</code> 或 <code>&quot;ccc&quot;</code> 子串的字符串。给定三个整数 <code>a</code>、<code>b</code> 和 <code>c</code>，表示字母 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code> 和 <code>&#39;c&#39;</code> 的最大数量，你需要构造最长满足条件的字符串。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">LongHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span>&#123;<br>   vector&lt;pair&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt;&gt; count=&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>,a&#125;,&#123;<span class="hljs-string">&#x27;b&#x27;</span>,b&#125;,&#123;<span class="hljs-string">&#x27;c&#x27;</span>,c&#125;&#125;;<br>   string result;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>      count.<span class="hljs-built_in">sort</span>(count.<span class="hljs-built_in">begin</span>(),count.<span class="hljs-built_in">end</span>(),[](<span class="hljs-type">const</span> pair&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; a,<span class="hljs-type">const</span> pair &lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; b)&#123;<span class="hljs-keyword">return</span> a.second&lt;b.second&#125;);<br>      <span class="hljs-type">bool</span> added=<span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;p:count)&#123;<br>         <span class="hljs-type">int</span> c=p.second;<br>         <span class="hljs-type">char</span> ch=p.first;<br>         <span class="hljs-keyword">if</span>(c==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>         &#125;<br>         <span class="hljs-type">int</span> n=result.<span class="hljs-built_in">size</span>();<br>         <span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">2</span>&amp;&amp;result[n<span class="hljs-number">-1</span>]==ch&amp;&amp;result[n<span class="hljs-number">-2</span>]==ch)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>         &#125;<br>         result+=ch;<br>         p.second--;<br>         added=<span class="hljs-literal">true</span>;<br>         <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span>(!added) <span class="hljs-keyword">break</span>;    <br>   &#125;<br>   <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-10-31"><a href="#2024-10-31" class="headerlink" title="2024&#x2F;10&#x2F;31"></a>2024&#x2F;10&#x2F;31</h2><h3 id="一、区间"><a href="#一、区间" class="headerlink" title="一、区间"></a>一、区间</h3><h4 id="（1）-汇总区间"><a href="#（1）-汇总区间" class="headerlink" title="（1） 汇总区间"></a>（1）<a href="https://leetcode.cn/problems/summary-ranges/"> 汇总区间</a></h4><blockquote><p>给定一个  <strong>无重复元素</strong> 的 <strong>有序</strong> 整数数组 <code>nums</code> 。</p><p>返回 <em><strong>恰好覆盖数组中所有数字</strong> 的 <strong>最小有序</strong> 区间范围列表</em> 。也就是说，<code>nums</code> 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 <code>nums</code> 的数字 <code>x</code> 。</p><p>列表中的每个区间范围 <code>[a,b]</code> 应该按如下格式输出：</p><ul><li><code>&quot;a-&gt;b&quot;</code> ，如果 <code>a != b</code></li><li><code>&quot;a&quot;</code> ，如果 <code>a == b</code></li></ul></blockquote><p>主要是学一下官解的优雅。思路肯定都有，但是如何能做到代码既正确又简洁呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">summaryRanges</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>       <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>       <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>       vector&lt;string&gt; res;<br>       <span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>          <span class="hljs-type">int</span> left=i;<br>          i++;<br>          <span class="hljs-keyword">while</span>(i&lt;n&amp;&amp;nums[i]==nums[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>)&#123;<br>             i++;<br>          &#125;<br>          <span class="hljs-type">int</span> right=i<span class="hljs-number">-1</span>;<br>          string tmp=<span class="hljs-built_in">to_string</span>(nums[left]);<br>          <span class="hljs-keyword">if</span>(left&lt;right)&#123;<br>             tmp.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>             tmp.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">to_string</span>(nums[right]));<br>          &#125;<br>          res.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">move</span>(tmp));<br>       &#125;<br>       <span class="hljs-keyword">return</span> res;<br>    &#125; <br>&#125;;<br></code></pre></td></tr></table></figure><p>第一、官解的写法不需要把最后一个区间在循环结束后放入向量中。</p><p>第二、<code>std::move</code> 将 <code>temp</code> 转换为右值引用，告诉编译器：不再需要 <code>temp</code> 的数据，可以直接“搬走”它的资源（如字符串内容的指针）。</p><p>通过“移动”而不是“拷贝”，避免了额外的内存分配，减少了不必要的数据复制，从而提升性能。在移动完成后，<code>temp</code> 处于“空”状态，里面的内容可能被清空或无效。因此，移动后的 <code>temp</code> 不应再被使用。</p><h4 id="（2）-合并区间"><a href="#（2）-合并区间" class="headerlink" title="（2） 合并区间"></a>（2）<a href="https://leetcode.cn/problems/merge-intervals/"> 合并区间</a></h4><p>跟上一题思路一模一样，就就懒得说了</p><h4 id="（3）插入区间"><a href="#（3）插入区间" class="headerlink" title="（3）插入区间"></a>（3）<a href="https://leetcode.cn/problems/insert-interval/">插入区间</a></h4><blockquote><p>给你一个 <strong>无重叠的</strong> <em>，</em>按照区间起始端点排序的区间列表 <code>intervals</code>，其中 <code>intervals[i] = [starti, endi]</code> 表示第 <code>i</code> 个区间的开始和结束，并且 <code>intervals</code> 按照 <code>starti</code> 升序排列。同样给定一个区间 <code>newInterval = [start, end]</code> 表示另一个区间的开始和结束。</p><p>在 <code>intervals</code> 中插入区间 <code>newInterval</code>，使得 <code>intervals</code> 依然按照 <code>starti</code> 升序排列，且区间之间不重叠（如果有必要的话，可以合并区间）。返回插入之后的 <code>intervals</code>。<strong>注意</strong> 你不需要原地修改 <code>intervals</code>。你可以创建一个新数组然后返回它。</p></blockquote><p>（试图原地修改结果出bug了，还是老老实实地一个一个插入新数组吧）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">insert</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; intervals, vector&lt;<span class="hljs-type">int</span>&gt;&amp; newInterval) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; ans;<br>        <span class="hljs-type">int</span> n=intervals.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> l=newInterval[<span class="hljs-number">0</span>],r=newInterval[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">bool</span> isDone=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> interval:intervals)&#123;<br>            <span class="hljs-keyword">if</span>(interval[<span class="hljs-number">0</span>]&gt;r)&#123;<br>                <span class="hljs-keyword">if</span>(!isDone)&#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(&#123;l,r&#125;);<br>                    isDone=<span class="hljs-number">1</span>;<br>                &#125;<br>                ans.<span class="hljs-built_in">push_back</span>(interval);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(interval[<span class="hljs-number">1</span>]&lt;l)&#123;<br>                ans.<span class="hljs-built_in">push_back</span>(interval);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                l=<span class="hljs-built_in">min</span>(l,interval[<span class="hljs-number">0</span>]);<br>                r=<span class="hljs-built_in">max</span>(r,interval[<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!isDone) ans.<span class="hljs-built_in">push_back</span>(&#123;l,r&#125;);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2024-11-1"><a href="#2024-11-1" class="headerlink" title="2024&#x2F;11&#x2F;1"></a>2024&#x2F;11&#x2F;1</h2><h3 id="一、区间-1"><a href="#一、区间-1" class="headerlink" title="一、区间"></a>一、区间</h3><h4 id="（1）用最少数量的箭引爆气球"><a href="#（1）用最少数量的箭引爆气球" class="headerlink" title="（1）用最少数量的箭引爆气球"></a>（1）<a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">用最少数量的箭引爆气球</a></h4><blockquote><p>跟合并区间很像。就是很多区间，合并完得到多少个的感觉。。。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMinArrowShots</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(points.<span class="hljs-built_in">begin</span>(),points.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> l=points[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],r=points[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> point:points)&#123;<br>            <span class="hljs-keyword">if</span>(point[<span class="hljs-number">0</span>]&lt;=r)&#123;<br>                l=<span class="hljs-built_in">max</span>(l,point[<span class="hljs-number">0</span>]);<br>                r=<span class="hljs-built_in">min</span>(r,point[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                cnt++;<br>                l=point[<span class="hljs-number">0</span>];<br>                r=point[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二、栈"><a href="#二、栈" class="headerlink" title="二、栈"></a>二、栈</h3><h4 id="（1）逆波兰表达式求值"><a href="#（1）逆波兰表达式求值" class="headerlink" title="（1）逆波兰表达式求值"></a>（1）<a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">逆波兰表达式求值</a></h4><blockquote><p>逆波兰表达式严格遵循「从左到右」的运算。计算逆波兰表达式的值时，使用一个栈存储操作数，从左到右遍历逆波兰表达式，进行如下操作：</p><ul><li><p>如果遇到操作数，则将操作数入栈；</p></li><li><p>如果遇到运算符，则将两个操作数出栈，其中先出栈的是右操作数，后出栈的是左操作数，使用运算符对两个操作数进行运算，将运算得到的新操作数入栈。</p></li></ul><p>整个逆波兰表达式遍历完毕之后，栈内只有一个元素，该元素即为逆波兰表达式的值。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; stk;<br>       <span class="hljs-type">int</span> n=tokens.<span class="hljs-built_in">size</span>();<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>          string&amp; token=tokens[i];<br>          <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isNumber</span>(token))&#123;<br>             stk.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">stoi</span>(token));<br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>             <span class="hljs-type">int</span> num2=stk.<span class="hljs-built_in">top</span>();stk.<span class="hljs-built_in">pop</span>();<br>             <span class="hljs-type">int</span> num1=stk.<span class="hljs-built_in">top</span>();stk.<span class="hljs-built_in">pop</span>();<br>             <span class="hljs-keyword">switch</span>(token[<span class="hljs-number">0</span>])&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>: stk.<span class="hljs-built_in">push</span>(nums1+nums2);<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>: stk.<span class="hljs-built_in">push</span>(nums1-nums2);<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>: stk.<span class="hljs-built_in">push</span>(nums1*nums2);<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>: stk.<span class="hljs-built_in">push</span>(nums1/nums2);<span class="hljs-keyword">break</span>;<br>             &#125;<br>          &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> stk.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）基本计算器-II"><a href="#（2）基本计算器-II" class="headerlink" title="（2）基本计算器 II"></a>（2）<a href="https://leetcode.cn/problems/basic-calculator-ii/">基本计算器 II</a></h4><blockquote><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p><p>整数除法仅保留整数部分。你可以假设给定的表达式总是有效的。所有中间结果将在 <code>[-231, 231 - 1]</code> 的范围内。</p></blockquote><ul><li>这里仅给出将运算式转换为逆波兰表达式的部分。</li><li>遇到数字就放入输出中，遇到运算符先压入栈中，如果栈不为空且栈顶元素优先级大于等于当前运算符就把栈顶元素放入输出（保证计算的正确性）。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getPriority</span><span class="hljs-params">(<span class="hljs-type">char</span> op)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&#x27;-&#x27;</span>||op==<span class="hljs-string">&#x27;+&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&#x27;*&#x27;</span>||op==<span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isOperator</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> c==<span class="hljs-string">&#x27;+&#x27;</span>||c==<span class="hljs-string">&#x27;-&#x27;</span>||c==<span class="hljs-string">&#x27;*&#x27;</span>||c==<span class="hljs-string">&#x27;/&#x27;</span>;<br>&#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toPostfix</span><span class="hljs-params">(string&amp; s)</span> </span>&#123;<br>   stack&lt;<span class="hljs-type">char</span>&gt; ops;<br>   vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:s)&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(c))&#123;<br>         ans.<span class="hljs-built_in">push_back</span>(c);<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isOperator</span>(c))&#123;<br>         <span class="hljs-keyword">while</span>(!ops.<span class="hljs-built_in">empty</span>()&amp;&amp;<span class="hljs-built_in">getPriority</span>(ops.<span class="hljs-built_in">top</span>())&gt;=<span class="hljs-built_in">getPriority</span>(c))&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(ops.<span class="hljs-built_in">top</span>());<br>            ops.<span class="hljs-built_in">pop</span>();<br>         &#125;<br>         ops.<span class="hljs-built_in">push</span>(c);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">while</span>(!ops.empty)&#123;<br>      ans.<span class="hljs-built_in">push_back</span>(ops.<span class="hljs-built_in">top</span>());<br>      ops.<span class="hljs-built_in">pop</span>();<br>   &#125;<br>   <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、滑动窗口"><a href="#三、滑动窗口" class="headerlink" title="三、滑动窗口"></a>三、滑动窗口</h3><h4 id="（1）串联所有单词的子串"><a href="#（1）串联所有单词的子串" class="headerlink" title="（1）串联所有单词的子串"></a>（1）<a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/">串联所有单词的子串</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findSubstring</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">empty</span>()||words.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> &#123;&#125;;<br>       <span class="hljs-type">int</span> wn=words[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>       <span class="hljs-type">int</span> n=words.<span class="hljs-built_in">size</span>();<br>       <span class="hljs-type">int</span> m=s.<span class="hljs-built_in">size</span>();<br>       unordered_map&lt;string,<span class="hljs-type">int</span>&gt; count;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> string&amp; word: words)<br>          count[word]++;<br>       vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nw;i++)&#123;<br>          <span class="hljs-type">int</span> l=i,r=i;<br>          unordered_map&lt;string,<span class="hljs-type">int</span>&gt; curCount;<br>          <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>          <br>          <span class="hljs-keyword">while</span>(r+nw&lt;=m) &#123;<br>             string w=s.<span class="hljs-built_in">substr</span>(r,nw);<br>             r+=n;<br>             curCount[w]++;<br>             cnt++;<br>             <br>             <span class="hljs-keyword">while</span>(curCount[w]&gt;count[w]) &#123;<br>                string lw=s.<span class="hljs-built_in">substr</span>(l,nw);<br>                l+=n;<br>                curCount[lw]--;<br>                cnt--;<br>             &#125;<br>          &#125;<br>          <br>          <span class="hljs-keyword">if</span>(cnt==nw)&#123;<br>             res.<span class="hljs-built_in">push_back</span>(l);<br>          &#125;<br>       &#125;<br>       <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结-手写实现</title>
    <link href="/2024/10/26/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/10/26/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>Promise、任务调度器、LRU缓存、深拷贝、new</p><span id="more"></span><h4 id="（1）手写Promise"><a href="#（1）手写Promise" class="headerlink" title="（1）手写Promise"></a>（1）手写Promise</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPromise</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">executor</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=<span class="hljs-string">&quot;pending&quot;</span>;  <span class="hljs-comment">//初始状态为pending</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>=undifined;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>=undifined;<br>   <span class="hljs-comment">//存储then中的成功和失败回调</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledCallbacks</span>=[];<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>=[];<br>      <br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">resolve</span>=(<span class="hljs-params">value</span>)=&gt;&#123;<br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>===<span class="hljs-string">&quot;pending&quot;</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=<span class="hljs-string">&quot;fulfilled&quot;</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>=value;<br>            <span class="hljs-comment">//执行所有成功的回调函数</span><br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callback</span>=&gt;</span><span class="hljs-title function_">callback</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>))<br>         &#125;<br>      &#125;;<br>      <br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">reject</span>=(<span class="hljs-params">reason</span>)=&gt;&#123;<br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>===<span class="hljs-string">&quot;pending&quot;</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=<span class="hljs-string">&quot;rejected&quot;</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>=reason;<br>            <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callback</span>=&gt;</span><span class="hljs-title function_">callback</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>))<br>         &#125;<br>      &#125;;<br>      <span class="hljs-comment">//捕捉executor执行中的错误，并调用reject</span><br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-title function_">executor</span>(resolve,reject);<br>      &#125;<span class="hljs-keyword">catch</span>(error)&#123;<br>         <span class="hljs-title function_">reject</span>(error);<br>      &#125;<br>   &#125;<br>   <br>   <span class="hljs-title function_">then</span>(<span class="hljs-params">onFulfilled,onRejected</span>)&#123;<br>      <span class="hljs-comment">//如果成功的回调函数没有传递，则设置一个默认函数，直接返回值</span><br>      onFulfilled=<span class="hljs-keyword">typeof</span> onFulfilled===<span class="hljs-string">&quot;function&quot;</span>?<span class="hljs-attr">onFulfilled</span>:<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>value<br>      <span class="hljs-comment">//如果失败的回调函数没有传递，则设置一个默认函数，抛出错误</span><br>      onRejected=<span class="hljs-keyword">typeof</span> onRejected===<span class="hljs-string">&quot;function&quot;</span>?<span class="hljs-attr">onRejected</span>:<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br>         <span class="hljs-keyword">throw</span> reason&#125;<br>      <br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>===<span class="hljs-string">&quot;fulfilled&quot;</span>)&#123;<br><span class="hljs-comment">//异步执行回调</span><br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-keyword">try</span>&#123;<br>                  <span class="hljs-keyword">const</span> result=<span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>                  <span class="hljs-title function_">resolve</span>(result);<br>               &#125;<span class="hljs-keyword">catch</span>(error)&#123;<br>                  <span class="hljs-title function_">reject</span>(error);<br>               &#125;<br>            &#125;)；<br>         &#125;<br>         <br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>===<span class="hljs-string">&quot;rejected&quot;</span>)&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-keyword">try</span>&#123;<br>                  <span class="hljs-keyword">const</span> reason=<span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>                  <span class="hljs-title function_">reject</span>(reason);<br>               &#125;<span class="hljs-keyword">catch</span>(error)&#123;<br>                  <span class="hljs-title function_">reject</span>(error);<br>               &#125;<br>            &#125;);<br>         &#125;<br>         <br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>===<span class="hljs-string">&quot;pending&quot;</span>)&#123;<br>            <span class="hljs-comment">//将成功回调和失败回调存储起来，等待状态改变后调用</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                  <span class="hljs-keyword">try</span>&#123;<br>                     <span class="hljs-keyword">const</span> result=<span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>                     <span class="hljs-title function_">resolve</span>(result);<br>                  &#125;<span class="hljs-keyword">catch</span>(error)&#123;<br>                     <span class="hljs-title function_">reject</span>(error);<br>                  &#125;<br>               &#125;);<br>            &#125;)；<br>            <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                  <span class="hljs-keyword">try</span>&#123;<br>                     <span class="hljs-keyword">const</span> reason=<span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>                     <span class="hljs-title function_">reject</span>(reason);<br>                  &#125;<span class="hljs-keyword">catch</span>(error)&#123;<br>                     <span class="hljs-title function_">reject</span>(error);<br>                  &#125;<br>               &#125;);<br>            &#125;);<br>         &#125; <br>      &#125;);<br>   &#125;<br>   <br>   <span class="hljs-keyword">catch</span>(onRejected)&#123;<br>      <span class="hljs-comment">//调用then方法，只传递失败的回调</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(<span class="hljs-literal">null</span>,onRejected);<br>   &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）手写任务调度器"><a href="#（2）手写任务调度器" class="headerlink" title="（2）手写任务调度器"></a>（2）手写任务调度器</h4><blockquote><p>支持按照指定时间间隔执行任务，以及暂停、恢复和取消任务。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskScheduler</span> &#123;<br>   <span class="hljs-comment">//this.tasks是一个Map实例，用于存储调度器的任务</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();  <span class="hljs-comment">//初始化</span><br>   &#125;<br>   <span class="hljs-comment">//添加任务</span><br>   <span class="hljs-title function_">addTask</span>(<span class="hljs-params">taskName,callback,interval</span>)&#123;<br>      <span class="hljs-comment">//如果任务名已经存在，不可添加</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">has</span>(taskName))&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`This task has already exited`</span>);<br>         <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-comment">//任务对象</span><br>      <span class="hljs-keyword">const</span> task = &#123;<br>         callback,   <span class="hljs-comment">//运行函数</span><br>         interval,   <span class="hljs-comment">//时间间隔</span><br>         <span class="hljs-attr">timer</span>: <span class="hljs-literal">null</span>,   <span class="hljs-comment">//由于需要访问callback，所以在下面建立</span><br>         <span class="hljs-attr">isPaused</span>: <span class="hljs-literal">false</span>,   <span class="hljs-comment">//是否被暂停</span><br>      &#125;;<br>      <br>      task.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>         <span class="hljs-keyword">if</span>(!task.<span class="hljs-property">isPaused</span>) &#123;<br>            task.<span class="hljs-title function_">callback</span>();  <span class="hljs-comment">//只有没被暂停才会执行</span><br>         &#125;<br>      &#125;,interval);<br>      <span class="hljs-comment">//在Map中添加一个新的条目</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">set</span>(taskName,task);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Task <span class="hljs-subst">$&#123;taskName&#125;</span> has been added`</span>) ;<br>   &#125;<br>   <br>   <span class="hljs-title function_">pauseTask</span>(<span class="hljs-params">taskName</span>) &#123;<br>      <span class="hljs-keyword">const</span> task=<span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">get</span>(taskName);<br>      <span class="hljs-keyword">if</span>(task)&#123;<br>         task.<span class="hljs-property">isPaused</span>=<span class="hljs-literal">true</span>;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Task <span class="hljs-subst">$&#123;taskName&#125;</span> is paused`</span>);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Task <span class="hljs-subst">$&#123;taskName&#125;</span> doesn&#x27;t exited`</span>);<br>      &#125;<br>   &#125;<br>   <br>   <span class="hljs-title function_">resumeTask</span>(<span class="hljs-params">taskName</span>)&#123;<br>      <span class="hljs-keyword">const</span> task=<span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">get</span>(taskName);<br>      <span class="hljs-keyword">if</span>(task)&#123;<br>         task.<span class="hljs-property">isPaused</span>=<span class="hljs-literal">false</span>;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Task <span class="hljs-subst">$&#123;taskName&#125;</span> is unpaused`</span>);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Task <span class="hljs-subst">$&#123;taskName&#125;</span> doesn&#x27;t exited`</span>);<br>      &#125;     <br>   &#125;<br>   <br>   <span class="hljs-title function_">cancelTask</span>(<span class="hljs-params">taskName</span>)&#123;<br>      <span class="hljs-keyword">const</span> task=<span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">get</span>(taskName);<br>      <span class="hljs-keyword">if</span>(task)&#123;<br>         <span class="hljs-built_in">clearInterval</span>(task.<span class="hljs-property">timer</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">delete</span>(taskName);<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Task <span class="hljs-subst">$&#123;taskName&#125;</span> is canceled`</span>);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Task <span class="hljs-subst">$&#123;taskName&#125;</span> doesn&#x27;t exited`</span>);<br>      &#125;<br>   &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）手写LRU"><a href="#（3）手写LRU" class="headerlink" title="（3）手写LRU"></a>（3）手写LRU</h4><blockquote><p>LRU缓存的特点是，当缓存达到容量限制时，最少被使用的缓存项会被移除。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">capacity</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">capacity</span>=capacity;  <span class="hljs-comment">//缓存容量</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>   &#125;<br>   <span class="hljs-comment">//获取缓存</span><br>   <span class="hljs-title function_">getCache</span>(<span class="hljs-params">key</span>) &#123;<br>      <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">has</span>(key))&#123;<br>         <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;   <span class="hljs-comment">//不存在该缓存</span><br>      &#125;<br>      <br>      <span class="hljs-keyword">const</span> value=<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">get</span>(key);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">delete</span>(key);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">set</span>(key,value);  <span class="hljs-comment">//重新插入以更新顺序</span><br>      <br>      <span class="hljs-keyword">return</span> value;  <span class="hljs-comment">//返回value</span><br>   &#125;<br>   <span class="hljs-comment">//设置缓存</span><br>   <span class="hljs-title function_">put</span>(<span class="hljs-params">key,value</span>) &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">has</span>(key))&#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">delete</span>(key);   <span class="hljs-comment">//如果已经存在该缓存，删除旧值</span><br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">size</span>&gt;=<span class="hljs-variable language_">this</span>.<span class="hljs-property">capacity</span>)&#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>);<br>      &#125;<span class="hljs-comment">//删除的是cache中第一个值，也就是最久未使用的那个</span><br>      <br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">set</span>(ke,value);<br>   &#125;   <br>&#125;<br><br><span class="hljs-comment">//示例</span><br><span class="hljs-keyword">const</span> lruCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LRUCache</span>(<span class="hljs-number">2</span>);<br><br></code></pre></td></tr></table></figure><h5 id="Map-keys"><a href="#Map-keys" class="headerlink" title="Map.keys()"></a>Map.keys()</h5><p><code>this.cache.keys()</code>这个方法返回一个迭代器（Iterator），用于遍历 <code>Map</code> 中所有的键。这个迭代器是按插入顺序生成的；</p><p><code>next()</code>是迭代器的方法，用于获取迭代器的下一个值。调用 <code>next()</code> 方法会返回一个对象，包含两个属性：</p><ul><li>value：下一个键的值。</li><li>done：一个布尔值，表示迭代器是否已完成。</li></ul><p><strong>通用性</strong>：任何 <code>Map</code> 对象都可以使用 <code>.keys()</code> 方法，无论其中存储的键是什么类型（字符串、数字、对象等）。</p><p><strong>返回的迭代器</strong>：这个迭代器的行为是统一的，能够通过 <code>next()</code> 方法逐个访问键，并在遍历完成时返回一个 <code>&#123; done: true &#125;</code> 的对象。</p><h4 id="（4）手写深拷贝"><a href="#（4）手写深拷贝" class="headerlink" title="（4）手写深拷贝"></a>（4）手写深拷贝</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj,hash=<span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) &#123;<br>   <span class="hljs-comment">//处理基本数据类型</span><br><span class="hljs-keyword">if</span>(obj===<span class="hljs-literal">null</span>||<span class="hljs-keyword">typeof</span> obj!=<span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> obj;<br>   <span class="hljs-comment">//处理Date</span><br>   <span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj);<br>   <span class="hljs-comment">//处理RegExp</span><br>   <span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj);<br>   <span class="hljs-comment">//检测是否已经处理过</span><br>   <span class="hljs-keyword">if</span>(hash.<span class="hljs-title function_">has</span>(obj)) <span class="hljs-keyword">return</span> hash.<span class="hljs-title function_">get</span>(obj);<br>   <span class="hljs-comment">//判断是数组还是对象</span><br>   <span class="hljs-keyword">const</span> cloneObj=<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj)?[]:&#123;&#125;;<br>   <span class="hljs-comment">//确保不会产生循环调用</span><br>   hash.<span class="hljs-title function_">set</span>(obj,cloneObj);<br>   <span class="hljs-comment">//如果对象/数组中的值还是对象，还要继续对其进行深拷贝</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">if</span>(obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>         cloneObj[key]=<span class="hljs-title function_">deepClone</span>(obj[key],hash);<br>      &#125;<br>   &#125;<br>   <br>   <span class="hljs-keyword">return</span> cloneObj;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>hasOwnProperty</code> 方法用于检查 <code>obj</code> 是否具有指定的属性 <code>key</code>。这是为了确保只拷贝对象的自有属性（即直接在该对象上定义的属性），而不包括继承自原型链的属性。</li><li>例如，假设有一个对象 <code>obj</code>，它继承了某些属性，但我们只想拷贝自己定义的属性，使用 <code>hasOwnProperty</code> 可以过滤掉那些继承的属性。</li></ul><h4 id="（5）手写new"><a href="#（5）手写new" class="headerlink" title="（5）手写new"></a>（5）手写new</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>创建一个新的对象：空对象</li><li>设置原型：将新对象的原型指向构造函数的原型</li><li>绑定this：将构造函数的this绑定到新创建的对象上</li><li>执行构造函数：调用构造函数，并将新对象作为上下文（this）</li><li>返回对象：如果构造函数返回了一个对象，则返回该对象；否则返回新创建的对象</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myNew</span>(<span class="hljs-params">cunstructor,...args</span>) &#123;<br>   <span class="hljs-keyword">const</span> obj=&#123;&#125;;<br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj,constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>   <span class="hljs-keyword">const</span> result=constructor.<span class="hljs-title function_">apply</span>(obj,args);<br>   <span class="hljs-keyword">return</span> (result&amp;&amp;<span class="hljs-keyword">typeof</span> result===<span class="hljs-string">&#x27;object&#x27;</span>)?<span class="hljs-attr">result</span>:obj;<br>&#125;<br><br><span class="hljs-comment">//示例：定义一个构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>) &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>&#125;<br><br><span class="hljs-keyword">const</span> alice=<span class="hljs-title function_">myNew</span>(<span class="hljs-title class_">Person</span>,<span class="hljs-string">&quot;Alice&quot;</span>,<span class="hljs-number">20</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alice.<span class="hljs-property">name</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alice <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>); <br></code></pre></td></tr></table></figure><h4 id="（6）写一个重复执行的函数"><a href="#（6）写一个重复执行的函数" class="headerlink" title="（6）写一个重复执行的函数"></a>（6）写一个重复执行的函数</h4><h5 id="1、方法一：使用setInterval"><a href="#1、方法一：使用setInterval" class="headerlink" title="1、方法一：使用setInterval"></a>1、方法一：使用setInterval</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">repeatFunction</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;函数被重复执行&quot;</span>);<br>&#125;<br><span class="hljs-comment">//每隔一秒执行一次</span><br><span class="hljs-keyword">const</span> intervalId=<span class="hljs-built_in">setInterval</span>(repeatFunction,<span class="hljs-number">1000</span>);<br><span class="hljs-comment">//如果需要在一定时间后停止，可以使用setTimeout</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>   <span class="hljs-built_in">clearInterval</span>(intervalId);<br>&#125;,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><h5 id="2、setTimeout递归调用"><a href="#2、setTimeout递归调用" class="headerlink" title="2、setTimeout递归调用"></a>2、setTimeout递归调用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">repeatFunction</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;函数被重复执行&quot;</span>)；<br>   <span class="hljs-built_in">setTimeout</span>(repeatFunction,<span class="hljs-number">1000</span>);<br>&#125;<br><span class="hljs-comment">//开始执行</span><br><span class="hljs-title function_">repeatFunction</span>();<br><span class="hljs-comment">//如果需要在一定时间后停止，可以设置条件变量</span><br><span class="hljs-keyword">let</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> maxCount=<span class="hljs-number">5</span>; <span class="hljs-comment">//最多执行五次</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">repeatWithLimit</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">if</span>(count&lt;maxCount)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>      count++;<br>      <span class="hljs-built_in">setTimeout</span>(repeatWithLimit,<span class="hljs-number">1000</span>);<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（7）写函数统计页面上所有的DOM元素，以对象的形式返回"><a href="#（7）写函数统计页面上所有的DOM元素，以对象的形式返回" class="headerlink" title="（7）写函数统计页面上所有的DOM元素，以对象的形式返回"></a>（7）写函数统计页面上所有的DOM元素，以对象的形式返回</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">countDOMElements</span>(<span class="hljs-params"></span>) &#123;<br>   <br>   <span class="hljs-keyword">const</span> allElements=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br>   <span class="hljs-keyword">const</span> elementCount=&#123;&#125;;<br>   <br>   allElements.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">element</span>)=&gt;</span>&#123;<br>      <span class="hljs-keyword">const</span> tagName=element.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>();<br>      <span class="hljs-keyword">if</span>(elementCount[tagName])&#123;<br>         elementCount[tagName]++;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>         elementCount[tagName]=<span class="hljs-number">1</span>;<br>      &#125;<br>   &#125;);<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（8）数组拍平"><a href="#（8）数组拍平" class="headerlink" title="（8）数组拍平"></a>（8）数组拍平</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">customFlat</span>(<span class="hljs-params">arr,depth=<span class="hljs-number">1</span></span>)&#123;<br>   <span class="hljs-keyword">if</span>(depth&lt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">slice</span>();<br>   <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc,cur</span>)=&gt;</span>&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(cur))&#123;<br>         <span class="hljs-keyword">return</span> acc.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">custmFlat</span>(cur,depth-<span class="hljs-number">1</span>));<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-keyword">return</span> acc.<span class="hljs-title function_">concat</span>(cur);<br>      &#125;<br>   &#125;,[]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（9）函数柯里化"><a href="#（9）函数柯里化" class="headerlink" title="（9）函数柯里化"></a>（9）函数柯里化</h4><p>函数柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn,args=[]</span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-comment">//使用rest合并当前已经存储的参数和新传入的参数</span><br>      <span class="hljs-keyword">let</span> rest=[...args,...<span class="hljs-variable language_">arguments</span>];<br>      <span class="hljs-comment">//检查合并参数的数量是否小于目标函数的参数数量</span><br>      <span class="hljs-keyword">if</span>(rest.<span class="hljs-property">length</span>&lt;fn.<span class="hljs-property">length</span>)&#123;<br>         <span class="hljs-comment">//如果数量不足，递归调用curry，继续收集参数</span><br>         <span class="hljs-keyword">return</span> curry.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,fn,rest);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-comment">//如果参数足够，调用目标函数并返回结果</span><br>         <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,rest);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（10）sum-1-2-3"><a href="#（10）sum-1-2-3" class="headerlink" title="（10）sum(1)(2)(3)"></a>（10）sum(1)(2)(3)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...args</span>)&#123;<br>   <span class="hljs-keyword">const</span> total=args.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc,cur</span>)=&gt;</span>acc+cur,<span class="hljs-number">0</span>);<br>   <span class="hljs-keyword">const</span> <span class="hljs-title function_">inner</span>=(<span class="hljs-params">...newArgs</span>)=&gt;&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">sum</span>(total+newArgs.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc,cur</span>)=&gt;</span>acc+cur,<span class="hljs-number">0</span>));<br>   &#125;;<br>   inner.<span class="hljs-property">value</span>=<span class="hljs-function">()=&gt;</span>total;<br>   <span class="hljs-keyword">return</span> inner;<br>&#125;<br></code></pre></td></tr></table></figure><p>限定每次调用参数只有一个：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">num</span>)&#123;<br>   <span class="hljs-keyword">const</span> <span class="hljs-title function_">inner</span>=(<span class="hljs-params">nextNum</span>)=&gt;&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">sum</span>(num+nextNum);<br>   &#125;;<br>   inner.<span class="hljs-property">value</span>=<span class="hljs-function">()=&gt;</span>num;<br>   <span class="hljs-keyword">return</span> inner;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（11）实现数组去重"><a href="#（11）实现数组去重" class="headerlink" title="（11）实现数组去重"></a>（11）实现数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">uniq</span>(<span class="hljs-params">arry</span>)&#123;<br>   <span class="hljs-keyword">return</span> [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arry)];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">uniq</span>(<span class="hljs-params">arry</span>)&#123;<br>   <span class="hljs-keyword">let</span> result=[];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;arry.<span class="hljs-property">length</span>;i++)&#123;<br>      <span class="hljs-keyword">if</span>(!result.<span class="hljs-title function_">includes</span>(arry[i]))&#123;<br>         result.<span class="hljs-title function_">push</span>(arry[i]);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（12）实现计时器"><a href="#（12）实现计时器" class="headerlink" title="（12）实现计时器"></a>（12）实现计时器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span>=&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>=<span class="hljs-number">0</span>;<br>   &#125;<br>   <span class="hljs-title function_">increase</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>+=<span class="hljs-number">1</span>;&#125;<br>   <span class="hljs-title function_">decrease</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>-=<span class="hljs-number">1</span>;&#125;<br>   <span class="hljs-title function_">getTime</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> ttime&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（13）蛇形打印树的节点"><a href="#（13）蛇形打印树的节点" class="headerlink" title="（13）蛇形打印树的节点"></a>（13）蛇形打印树的节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>&#123;<br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>=value;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span>=<span class="hljs-literal">null</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">right</span>=<span class="hljs-literal">null</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">zigzagLevelOrder</span>(<span class="hljs-params">root</span>)&#123;<br>   <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span>[];<br>   <span class="hljs-keyword">const</span> result=[];<br>   <span class="hljs-keyword">const</span> currentStack=[root];<br>   <span class="hljs-keyword">const</span> nextStack;<br>   <span class="hljs-keyword">let</span> leftToRight=<span class="hljs-literal">true</span>;<br>   <br>   <span class="hljs-keyword">while</span>(currentStack.<span class="hljs-property">length</span>&gt;<span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">const</span> levelValues=[];<br>      <span class="hljs-keyword">while</span> (currentStack.<span class="hljs-property">length</span>&gt;<span class="hljs-number">0</span>)&#123;<br>         <span class="hljs-keyword">const</span> node=currentStack.<span class="hljs-title function_">pop</span>();<br>         levelValues.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">value</span>);<br>         <br>         <span class="hljs-keyword">if</span>(leftToRight)&#123;<br>            <span class="hljs-keyword">if</span>(node.<span class="hljs-property">left</span>) nextStack.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">left</span>);<br>            <span class="hljs-keyword">if</span>(node.<span class="hljs-property">right</span>) nextStack.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">right</span>);<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(node.<span class="hljs-property">right</span>) nextStack.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">right</span>);<br>            <span class="hljs-keyword">if</span>(node.<span class="hljs-property">left</span>) nextStack.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">left</span>);<br>         &#125;<br>      &#125;<br>      result.<span class="hljs-title function_">push</span>(levelValues);<br>      [currentStack,nextStack]=[nextStack,currentStack];<br>      leftToRight=!leftToRight;<br>   &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结分支-缓存</title>
    <link href="/2024/10/26/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93%E5%88%86%E6%94%AF-%E7%BC%93%E5%AD%98/"/>
    <url>/2024/10/26/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93%E5%88%86%E6%94%AF-%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>详细总结web缓存和HTTP缓存</p><span id="more"></span><h4 id="（1）HTTP缓存—-强缓存和协商缓存"><a href="#（1）HTTP缓存—-强缓存和协商缓存" class="headerlink" title="（1）HTTP缓存—-强缓存和协商缓存"></a>（1）HTTP缓存—-强缓存和协商缓存</h4><blockquote><p>浏览器每次发起请求都会先在浏览器缓存中查找该请求的结果以及缓存标识</p><p>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</p></blockquote><h5 id="缓存可以解决什么问题："><a href="#缓存可以解决什么问题：" class="headerlink" title="缓存可以解决什么问题："></a>缓存可以解决什么问题：</h5><ul><li>减少不必要的网络传输，节约带宽</li><li>更快的加载界面</li><li>减少服务器负载，避免服务器过载的情况出现</li></ul><p>缺点：占用内存</p><blockquote><p>CSS、媒体文件、字体文件、CDN加载的资源</p></blockquote><h5 id="🦆强缓存（从内存-磁盘中读取）"><a href="#🦆强缓存（从内存-磁盘中读取）" class="headerlink" title="🦆强缓存（从内存&#x2F;磁盘中读取）"></a>🦆强缓存（从内存&#x2F;磁盘中读取）</h5><blockquote><p>从内存读取的缓存更快</p></blockquote><p>🔸定义</p><ul><li>强缓存是在资源未过期的情况下，直接使用缓存中的资源，而不需要与服务器进行任何交互。这种缓存机制通过<strong>HTTP响应头</strong>来设置资源的<strong>过期时间</strong>，通常使用<code>Cache-Control</code> 和 <code>Expires</code> 头来控制。</li></ul><p>🔸工作原理</p><ul><li>当浏览器请求资源时查看强缓存是否有效。如果有效，浏览器直接使用缓存的资源，而不会向服务器发送请求；如果缓存已过期，浏览器会重新向服务器请求资源。</li></ul><p>🔸相关HTTP响应头</p><p>eg：Cache-Control: max-age&#x3D;10（从第一次请求资源时开始，往后10秒内再次请求就直接从内存中读取，不需要与服务器做任何交互）</p><ul><li><p><strong>Cache-Control</strong>：设置缓存的策略。如max-age（缓存的最大有效时间）和public&#x2F;private（资源的可以被浏览器缓存也可以被代理服务器缓存&#x2F;只能浏览器）。</p><ul><li>no-cache：强制进行协商缓存</li><li>no-store：禁止所有缓存</li><li><strong>多条属性使用逗号分隔</strong></li></ul></li><li><p><strong>Expires</strong>：指定资源过期的具体时间（在HTTP&#x2F;1.0中常用，<strong>HTTP&#x2F;1.1推荐使用Cache-Control</strong>）（<em>过度依赖本地时间，未考虑本地时间和服务器时间不同步的情况</em>）</p></li></ul><h5 id="🦢协商缓存"><a href="#🦢协商缓存" class="headerlink" title="🦢协商缓存"></a>🦢协商缓存</h5><blockquote><p>动态内容、频繁更新的API接口返回的数据；敏感数据</p></blockquote><p>🐔基于last-modified的协商缓存</p><ul><li><p>第一次请求</p><ul><li><p>首先需要在服务器端读出文件修改时间</p></li><li><p>将此修改时间赋给响应头的last-modified字段</p></li><li><p>最后设置Cache-Control：no-cache</p></li></ul></li><li><p>之后的每一次请求</p><ul><li>当客户端读取到<code>last-modified</code>的时候，会在下一次请求头中携带<code>If-Modified-Since</code> ，这个的值就是上面的修改时间。</li><li>服务器收到事件后再次读取该资源的修改时间，做对比，如果相等说明未被修改，就返回一个304响应，表示可以直接读取，否则返回新的资源并更新修改时间到<code>last-modified</code>。</li></ul></li></ul><p>缺点：</p><ul><li>如果仅仅更新文件名也会导致缓存失效</li><li>如果文件在极短时间内完成修改，由于文件修改最小单位是秒，会导致文件修改时间不变</li></ul><p>🐔基于ETag的协商缓存（HTTP1.1开始）</p><blockquote><p>文件指纹：文件打包后输出的文件名的后缀</p></blockquote><ul><li>第一次请求资源的时候，服务端读取文件并计算出文件指纹，将文件指纹放在响应头的Etag字段中跟资源一起返回给客户端</li><li>第二次请求资源的时候，客户端自动从缓存种读取上一次返回的Etag也就是文件指纹，并赋给请求头的If-None-Match字段，让上一次的文件指纹跟随请求一起回到服务端</li><li>服务端拿到上一次文件指纹，和目标资源的指纹进行对比，如果完全吻合，返回304状态码和空的响应体；如果不吻合说明文件被更改，将新的文件指纹重新存储到响应头的Etag并返回给客户端</li></ul><p>计算开销大，不是Last-Modified的完全替代方案</p><h5 id="已经设置为强缓存的文件想转化为协商缓存："><a href="#已经设置为强缓存的文件想转化为协商缓存：" class="headerlink" title="已经设置为强缓存的文件想转化为协商缓存："></a>已经设置为强缓存的文件想转化为协商缓存：</h5><ul><li>清除浏览器的缓存</li><li>修改文件的URL（早JS文件的引入中加入查询参数：版本号或者时间戳；修改文件名）</li><li>Ctrl+F5强制刷新界面</li><li>浏览器的开发者工具F12设置禁用缓存选项</li></ul><h4 id="（2）Cookie和Session"><a href="#（2）Cookie和Session" class="headerlink" title="（2）Cookie和Session"></a>（2）Cookie和Session</h4><blockquote><p>Cookie通过在客户端记录信息确定用户身份，Session在服务端记录信息确定用户身份</p></blockquote><h5 id="🦜Cookie"><a href="#🦜Cookie" class="headerlink" title="🦜Cookie"></a>🦜Cookie</h5><blockquote><p>由于HTTP协议是无连接的协议，一旦数据交换完毕，客户与服务端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。</p></blockquote><p>Cookie的工作原理就是服务器在客户端请求服务器时，如果需要记住用户状态就给客户端颁发一个Cookie（通行证），浏览器保存Cookie，当再次请求的时候，把请求网址和Cookie一起提交给服务器。服务器检查该Cookie就可以辨认用户状态。</p><p>🪶特点：</p><ul><li>一旦创建成功，名称无法修改</li><li>每个Cookie大小不能超过4kb</li><li>在请求新的页面时会自动被发送过去</li><li>两种保存方式：浏览器内存和客户端硬盘</li></ul><p>🪶生存周期：</p><p>Cookie在生成时会被指定一个Expire值，这就是它的生存周期，超过周期Cookie会被自动删除。如果设置为负值，则关闭浏览器就会失效，浏览器也不会以任何形式保存该Cookie；如果设置为0，表示删除该Cookie。<strong>默认为-1</strong> 。</p><p>🪶缺陷：</p><ul><li>安全性无法得到保障。收到跨站点脚本攻击时，脚本会读取该站点所有Cookie内容。</li><li>浏览器可以禁用Cookie</li></ul><p>🪶典型应用</p><ul><li>记住用户偏好，进行个性化设置</li><li>购物车内容</li><li>跟踪用户行为（搜索记录等），推送广告</li></ul><p>🪶字段</p><ul><li>Name：cookie的名称</li><li>Value：cookie的值，对于认证cookie，value值包括web服务器所提供的访问令牌</li><li>Size： cookie的大小</li><li>Path：可以访问此cookie的页面路径。 比如domain是abc.com，path是&#x2F;test，那么只有&#x2F;test路径下的页面可以读取此cookie。（子路径可以，‘&#x2F;’路径不可以）</li><li><strong>domain</strong>：用于指定cookie的可用域名，设置后，这个cookie会对指定的域及其所有指定的子域有效。如果未指定，默认是设置cookie的主机名。</li><li>Secure： 指定是否使用HTTPS安全协议发送Cookie。使用HTTPS安全协议，可以保护Cookie在浏览器和Web服务器间的传输过程中不被窃取和篡改。该方法也可用于Web站点的身份鉴别，即在HTTPS的连接建立阶段，浏览器会检查Web网站的SSL证书的有效性。但是基于兼容性的原因（比如有些网站使用自签署的证书）在检测到SSL证书无效时，浏览器并不会立即终止用户的连接请求，而是显示安全风险信息，用户仍可以选择继续访问该站点。</li><li><strong>Expires&#x2F;Max-size</strong> ： 此cookie的超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</li></ul><h5 id="🐦‍⬛Session"><a href="#🐦‍⬛Session" class="headerlink" title="🐦‍⬛Session"></a>🐦‍⬛Session</h5><blockquote><p>Session机制通过检查服务器上的“客户明细表”来确认客户身份。</p></blockquote><p>Session是服务器端使用的一种记录客户端状态的机制。客户端访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是Session。相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表即可。</p><p>🪽特点：</p><ul><li>服务端会保存多个客户端的Session，各客户的Session彼此独立，互不可见。</li><li>使用起来比Cookie方便安全（不会暴露给客户端），但是会对服务器造成压力</li><li>服务器会向客户端发送sessionID存储到Cookie中，session包含sessionID、用户信息和记录。再次访问时找到发送的Cookie中的sessionID，就可以找到对应的session</li><li>子窗口会公用父窗口的Cookie</li><li>存储容量由服务器的处理能力和存储空间决定</li></ul><p>🪽生命周期</p><p>创建—&gt;存储—&gt;使用—&gt;销毁（到期或关闭浏览器或用户登出）</p><p>🪽URL重写</p><p>对客户端不支持Cookie的解决方案。将Session的id信息重写到URL地址中，服务器可以解析重写后的URL获取SessionID。</p><p>🪽适用场景</p><p>存储敏感信息（登陆状态、用户权限）和需要服务器控制的会话信息</p><h4 id="（3）webStorage本地存储"><a href="#（3）webStorage本地存储" class="headerlink" title="（3）webStorage本地存储"></a>（3）webStorage本地存储</h4><h5 id="🦜localStorage"><a href="#🦜localStorage" class="headerlink" title="🦜localStorage"></a>🦜localStorage</h5><blockquote><p>HTML5引入的新特性。适合大信息量存储</p></blockquote><p>🪶优点：</p><ul><li>大小：5MB</li><li>持久存储，不会随着页面关闭而消失；除非主动清理，否则永久存在</li><li>仅存储在本地，不会像Cookie一样每次HTTP请求都会被携带</li></ul><p>🪶缺点：</p><ul><li>存在浏览器兼容问题，IE8以下的浏览器不支持</li><li>如果浏览器设置为隐私模式，就无法读取到LocalStorage</li><li>受到同源策略的限制（<strong>LocalStorage的数据只能在相同来源的页面之间共享</strong>，不同来源的网站即使在同一浏览器中运行，也无法相互访问对方的LocalStorage数据。）</li></ul><p>🪶常用API：</p><ul><li>localStorage.setItem(“key”,”value”);  保存数据</li><li>let data&#x3D;localStorage.getItem(“key”);获取数据</li><li>localStorage.removeItem(“key”);删除数据</li><li>localStorage.clear();删除所有数据</li><li>localStorage.key(index);获取某个索引的key</li></ul><p>🪶使用场景：</p><ul><li>有些网站具有换肤功能，存储换肤信息；</li><li>存储浏览信息和不长变动的个人信息</li><li>可以在表单填写未完成时保存数据，避免用户意外刷新或关闭页面导致信息丢失</li></ul><h5 id="🐦‍⬛sessionStorage"><a href="#🐦‍⬛sessionStorage" class="headerlink" title="🐦‍⬛sessionStorage"></a>🐦‍⬛sessionStorage</h5><blockquote><p>HTML5引入的新特性，适合用于仅在会话（session）期间生效的数据存储</p></blockquote><p>🪽和localStorage对比</p><ul><li>SessionStorage和LocalStorage都在本地进行数据存储；大小一样</li><li>SessionStorage也有同源策略的限制，但是SessionStorage有一条更加严格的限制，SessionStorage只有在同一浏览器的同一窗口下才能够共享；</li><li>LocalStorage和SessionStorage都不能被爬虫爬取；</li><li>刷新界面时不会删除，但是关闭窗口或标签页时会被删除</li></ul><p>🪽常用API和local一样</p><p>🪽使用场景和session差不多</p><h4 id="（4）token"><a href="#（4）token" class="headerlink" title="（4）token"></a>（4）token</h4><p>Token 是一种用于身份验证的机制，通常以 JSON Web Token（JWT）形式存在。它由服务器生成并发送给客户端，客户端在后续请求中发送该 Token。</p><p><strong>存储方式</strong>：通常在客户端存储，可以放在 Cookie、localStorage 或 sessionStorage 中。</p><p><strong>生命周期</strong>：可以设置过期时间，Token 可以是短期（如访问 Token）和长期（如刷新 Token）。</p><p><strong>安全性</strong>：Token 通常经过签名，确保数据的完整性和有效性。</p><p>可以存储较大的数据量</p><h5 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h5><p>RESTful API 身份验证和授权。</p><p>分布式系统和微服务架构，Token 可以在不同服务间共享。</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.25</title>
    <link href="/2024/10/25/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.25/"/>
    <url>/2024/10/25/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.25/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="2024-10-25"><a href="#2024-10-25" class="headerlink" title="2024&#x2F;10&#x2F;25"></a>2024&#x2F;10&#x2F;25</h2><h4 id="（1）哈希表"><a href="#（1）哈希表" class="headerlink" title="（1）哈希表"></a>（1）哈希表</h4><h5 id="1、最长连续序列"><a href="#1、最长连续序列" class="headerlink" title="1、最长连续序列"></a>1、<a href="https://leetcode.cn/problems/longest-consecutive-sequence/">最长连续序列</a></h5><blockquote><p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p></blockquote><p>我的蹩脚解法：（时间复杂度O(nlogn)）（但是也过了。。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestConsecutive</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; ans;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:nums)&#123;<br>        ans.<span class="hljs-built_in">insert</span>(i);  <span class="hljs-comment">//插入操作的时间复杂度为O(logn)</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:ans)&#123;<br>        <span class="hljs-keyword">if</span>(ans.<span class="hljs-built_in">count</span>(i<span class="hljs-number">-1</span>))<br>            cnt++;<br>        <span class="hljs-keyword">else</span><br>            cnt=<span class="hljs-number">1</span>;<br>        res=<span class="hljs-built_in">max</span>(cnt,res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestConsecutive</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    unordered_set&lt;<span class="hljs-type">int</span>&gt; ans;  <span class="hljs-comment">//基于哈希表实现，插入动作的时间复杂度是O(1)</span><br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:nums)&#123;<br>        ans.<span class="hljs-built_in">insert</span>(i); <span class="hljs-comment">//去重</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:ans)&#123;<span class="hljs-comment">//只要i-1存在就说明不是连续序列的开始，直接跳过</span><br>        <span class="hljs-keyword">if</span>(!ans.<span class="hljs-built_in">count</span>(i<span class="hljs-number">-1</span>))&#123;  <span class="hljs-comment">//找到连续序列的开始</span><br>            <span class="hljs-type">int</span> cnt=<span class="hljs-number">1</span>,j=i;<br>            <span class="hljs-keyword">while</span>(ans.<span class="hljs-built_in">count</span>(j+<span class="hljs-number">1</span>))&#123;<br>                cnt++;<br>                j++;<br>            &#125;<br>            res=<span class="hljs-built_in">max</span>(res,cnt);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）单调队列"><a href="#（2）单调队列" class="headerlink" title="（2）单调队列"></a>（2）单调队列</h4><h5 id="1、滑动窗口最大值"><a href="#1、滑动窗口最大值" class="headerlink" title="1、滑动窗口最大值"></a>1、<a href="https://leetcode.cn/problems/sliding-window-maximum/">滑动窗口最大值</a></h5><blockquote><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 数组。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>       vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>       deque&lt;<span class="hljs-type">int</span>&gt; res;  <span class="hljs-comment">//单调队列，队首元素最大。（维护滑动窗口内的最大值，存储的是下标）</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>          <span class="hljs-keyword">while</span>(!res.<span class="hljs-built_in">empty</span>()&amp;&amp;nums[res.<span class="hljs-built_in">back</span>()]&lt;nums[i])&#123;<br>             res.<span class="hljs-built_in">pop_back</span>();  <span class="hljs-comment">//找到它应该在的位置。把小于它的元素都弹出</span><br>          &#125;<br>          res.<span class="hljs-built_in">push_back</span>(i);  <span class="hljs-comment">//放置</span><br>          <span class="hljs-keyword">if</span>(i-res.front&gt;=k)&#123;<br>             res.<span class="hljs-built_in">pop_front</span>();  <span class="hljs-comment">//如果队首已经不在滑动窗口内，弹出</span><br>          &#125;<br>          <span class="hljs-keyword">if</span>(i&gt;=k<span class="hljs-number">-1</span>)&#123;<br>             ans.<span class="hljs-built_in">push_back</span>(nums[res.<span class="hljs-built_in">front</span>()]);  <span class="hljs-comment">//放置该窗口内的最大值</span><br>          &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（3）多重组合计数"><a href="#（3）多重组合计数" class="headerlink" title="（3）多重组合计数"></a>（3）多重组合计数</h4><p>假设有编号 1到n 的扑克牌，每种编号的扑克牌各有四张。那么问题等价于从 4n 张牌中选取 m 张不同组合的数量，且每种编号最多只能选四张。</p><p>这道问题使用多重组合计数来解决。在多重组合计数中，可以通过动态规划或组合数学来计算方案</p><h5 id="1、动态规划"><a href="#1、动态规划" class="headerlink" title="1、动态规划"></a>1、动态规划</h5><p>定义一个二位动态规划数组<code>dp[i][j]</code>，表示在前i种牌（编号为1到i）种选出j张牌的组合数。</p><p>🎃状态转移方程：</p><p>对于每种编号的牌，可以选0-4张，因此状态转移方程为</p><p>🔺<code>dp[i][j]=dp[i-1][j]+dp[i-1][j-1]+dp[i-1][j-2]+dp[i-1][j-3]+dp[i-1][j-4]</code></p><p><code>dp[i-1][j-k]</code>表示在不超过j张牌的情况下，从i-1编号种选择j-k张。</p><p>🎃初始化：</p><ul><li><code>dp[0][0]=1</code>  表示不选任何牌的组合数为1；</li></ul><p>🎃边界条件：</p><ul><li>当j&lt;k时，<code>dp[i-1][j-k]</code>为0（初始化为0）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">const</span> MOD=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">PokerNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span> </span>&#123;<br>       vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">dp</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br>       dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>             <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=<span class="hljs-number">4</span>;k++)&#123;<br>                <span class="hljs-keyword">if</span>(j&gt;=k)&#123;<br>                   dp[i][j]+=dp[i<span class="hljs-number">-1</span>][j-k];<br>                   dp%=MOD<br>                &#125; <br>             &#125;<br>          &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> dp[n][m];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、组合数学"><a href="#2、组合数学" class="headerlink" title="2、组合数学"></a>2、组合数学</h5><p>前面我是能看懂，怎么通过这个数学思路得到代码的，我是很迷惑的</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241025225809801.png" alt="image-20241025225809801"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countCombinations</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(m + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 初始条件，选择0张牌的组合数为1种</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;  <span class="hljs-comment">// 对每种牌进行循环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">0</span>; --j) &#123;  <span class="hljs-comment">// 倒序遍历总选择数量</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">4</span>; ++k) &#123;  <span class="hljs-comment">// 对每种牌最多选四张</span><br>                <span class="hljs-keyword">if</span> (j &gt;= k) &#123;<br>                    dp[j] = (dp[j] + dp[j - k]) % MOD;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dp[m];  <span class="hljs-comment">// 返回选择m张牌的组合数</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）博弈论"><a href="#（4）博弈论" class="headerlink" title="（4）博弈论"></a>（4）博弈论</h4><blockquote><p>牛牛和朵朵轮流从任意一堆石头中移走一颗石头，移动之前所有石头为零或者移完之后如果任意两堆石头的个数相等，当前玩家就会输掉比赛。</p></blockquote><p>因此，可以考虑将石头数量的<strong>奇偶性</strong>和<strong>先手后手</strong>结合起来推理胜负。</p><p>我们可以利用 <strong>异或操作</strong>（Nim博弈的基本策略）来简化判断：</p><ul><li>将每堆石头的数量进行异或，若结果为0，表示朵朵可以采取制胜策略，牛牛必输；</li><li>若异或结果非0，表示牛牛有必胜策略。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> xor_sum = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 异或和</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    cin &gt;&gt; tmp<br>    xor_sum ^= tmp;<br>&#125;<br><br><span class="hljs-comment">// 根据异或和判断胜负</span><br><span class="hljs-keyword">if</span> (xor_sum == <span class="hljs-number">0</span>) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;woman&quot;</span> &lt;&lt; endl;  <span class="hljs-comment">// 牛牛输</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;man&quot;</span> &lt;&lt; endl;    <span class="hljs-comment">// 牛牛赢</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）快速幂"><a href="#（5）快速幂" class="headerlink" title="（5）快速幂"></a>（5）快速幂</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">fast_pow</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b, <span class="hljs-type">long</span> <span class="hljs-type">long</span> p)</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>    a %= p;  <span class="hljs-comment">// 防止初始的a大于p</span><br>    <br>    <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  <span class="hljs-comment">// 如果 b 是奇数</span><br>            result = (result * a) % p;  <span class="hljs-comment">// 累乘当前的 a</span><br>        a = (a * a) % p;  <span class="hljs-comment">// 平方 a</span><br>        b &gt;&gt;= <span class="hljs-number">1</span>;  <span class="hljs-comment">// 右移 b，相当于 b = b / 2</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络+操作系统八股总结</title>
    <link href="/2024/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C+%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C+%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>备份一下机组知识，从0背操作系统😇</p><span id="more"></span><h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><h3 id="（1）网络协议"><a href="#（1）网络协议" class="headerlink" title="（1）网络协议"></a>（1）网络协议</h3><h4 id="1、域名解析"><a href="#1、域名解析" class="headerlink" title="1、域名解析"></a>1、域名解析</h4><p><a href="https://blog.csdn.net/weixin_45629285/article/details/122969104?ops_request_misc=%7B%22request_id%22:%2296398E92-1CAD-4366-B044-D699C8D0F77D%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=96398E92-1CAD-4366-B044-D699C8D0F77D&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-2-122969104-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90&spm=1018.2226.3001.4187">多张图带你彻底搞懂DNS域名解析过程_dns解析的过程是怎么样的-CSDN博客</a></p><p><strong>域名系统作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</strong></p><h5 id="🦥递归查询"><a href="#🦥递归查询" class="headerlink" title="🦥递归查询"></a>🦥递归查询</h5><p>主机首先向其<strong>本地域名服务器</strong>进行递归查询，本地服务器收到递归查询委托后，向<strong>根域名服务器</strong>进行递归查询，根域名接着向<strong>顶级域名服务器</strong>递归查询，顶级域名向<strong>权限域名服务器</strong>查询。</p><p>查询到对应的IP后，结果会在之前受委托的各域名服务器间传递，最后传回用户主机。</p><h5 id="🦥迭代查询"><a href="#🦥迭代查询" class="headerlink" title="🦥迭代查询"></a>🦥迭代查询</h5><p>（主机向本地域名服务器进行的是递归查询）</p><p>本地服务器开始发送迭代查询，收到查询的服务器要么给出所要查询的IP地址，要么告诉本地服务器下一步应该找哪个域名服务器进行查询，让本地服务器进行后续的查询。</p><h5 id="🦥高速缓存"><a href="#🦥高速缓存" class="headerlink" title="🦥高速缓存"></a>🦥高速缓存</h5><p>为了提高DNS的查询效率，减轻根域名服务器的负荷和减少因特网上DNS查询的报文数量，在域名服务器中使用高速缓存。用以存放最近查询过的域名以及从何处获得域名映射信息的记录。</p><ul><li>为每项高速缓存设置计时器并删除超过合理时间的项</li><li>主机也需要维护高速缓存</li></ul><h4 id="2、如何判断两个IP地址处于同一个网络"><a href="#2、如何判断两个IP地址处于同一个网络" class="headerlink" title="2、如何判断两个IP地址处于同一个网络"></a>2、如何判断两个IP地址处于同一个网络</h4><p>将两个IP地址和相同的子网掩码做按位与运算，如果结果相同说明在同一网络。</p><h4 id="3、MAC地址的作用"><a href="#3、MAC地址的作用" class="headerlink" title="3、MAC地址的作用"></a>3、MAC地址的作用</h4><blockquote><p>MAC地址是每个网络接口卡（NIC）制造时分配的一个唯一标识符。它通常以16进制格式表示，并由六组两位数字组成，例如 <code>00:1A:2B:3C:4D:5E</code>。分为单播、广播和多播地址，位于数据链路层。</p></blockquote><h5 id="🐰设备的唯一标识："><a href="#🐰设备的唯一标识：" class="headerlink" title="🐰设备的唯一标识："></a><strong>🐰设备的唯一标识</strong>：</h5><p>每个网络接口卡（NIC）都拥有一个唯一的MAC地址，用于在局域网中唯一标识设备。这使得网络能够准确地识别和区分不同的设备。</p><h5 id="🐰数据链路层通信："><a href="#🐰数据链路层通信：" class="headerlink" title="🐰数据链路层通信："></a>🐰数据链路层通信：</h5><p>以太网帧使用源和目的MAC地址来确定数据包的发送者和接收者。这样可以在同一网络段内实现设备间的直接通信。</p><h5 id="🐰局域网内的数据转发"><a href="#🐰局域网内的数据转发" class="headerlink" title="🐰局域网内的数据转发"></a>🐰局域网内的数据转发</h5><p>交换机使用MAC地址来构建MAC地址表（也称为转发表），以决定如何将数据包转发到特定的端口。这样可以提高网络的效率和速度。</p><h5 id="🐰地址解析协议"><a href="#🐰地址解析协议" class="headerlink" title="🐰地址解析协议"></a>🐰地址解析协议</h5><p>当设备需要通过IP地址发送数据时，它会使用ARP协议将目标IP地址解析为MAC地址。这允许网络设备找到其他设备并进行有效通信。</p><h5 id="🐰网络安全"><a href="#🐰网络安全" class="headerlink" title="🐰网络安全"></a>🐰网络安全</h5><p>在某些安全机制中，MAC地址可以用作访问控制列表（ACL）的一部分，限制哪些设备可以连接到网络。</p><h5 id="🐰多播和广播通信"><a href="#🐰多播和广播通信" class="headerlink" title="🐰多播和广播通信"></a>🐰多播和广播通信</h5><p>MAC地址的多播和广播功能允许将数据发送给一组设备或网络中的所有设备，而不仅仅是单个设备。例如，广播地址 <code>FF:FF:FF:FF:FF:FF</code> 可用于向网络中的所有设备发送消息。</p><h5 id="🐰网络监控和管理"><a href="#🐰网络监控和管理" class="headerlink" title="🐰网络监控和管理"></a>🐰网络监控和管理</h5><p>网络管理员可以使用MAC地址进行设备管理、监控和故障排除。通过分析MAC地址，管理员可以识别出异常流量和潜在的安全问题。</p><h5 id="🐰虚拟局域网"><a href="#🐰虚拟局域网" class="headerlink" title="🐰虚拟局域网"></a>🐰虚拟局域网</h5><p>在VLAN配置中，MAC地址可以帮助实现不同VLAN之间的通信管理，以便有效地划分和管理网络流量。</p><h4 id="4、0-RTT连接"><a href="#4、0-RTT连接" class="headerlink" title="4、0-RTT连接"></a>4、0-RTT连接</h4><blockquote><p>0-RTT（Zero Round Trip Time）握手是一种网络协议的优化技术，主要用于加快连接建立的过程。它允许客户端在建立连接时就发送数据，而不需要等待传统的握手过程完成，从而显著减少延迟。0-RTT通常与QUIC协议结合使用。</p></blockquote><p>🐶握手过程</p><ul><li><strong>之前的连接</strong>：客户端与服务器在之前的会话中成功建立过连接，并且服务器提供了相应的0-RTT支持。</li><li><strong>Session Ticket</strong>：在之前的连接中，服务器发送给客户端一个“会话票据”（Session Ticket），包含了会话状态的信息。</li><li><strong>客户端发送数据</strong>：在建立新连接时，客户端使用之前的会话票据立即发送数据，而不需要等待完整的握手完成。</li><li><strong>服务器验证</strong>：服务器接收到客户端的0-RTT数据后，可以使用会话票据验证客户端的身份，并响应相应的数据。</li><li><strong>握手完成</strong>：即使在发送数据的同时，握手仍在后台进行，最终完成后，连接就建立成功。</li></ul><p>🐶优点：</p><ul><li><strong>减少延迟</strong>：0-RTT可以显著降低建立连接的延迟，特别是在高延迟的网络环境中。</li><li><strong>更快的应用响应</strong>：由于可以在握手期间发送数据，应用程序可以更快地响应用户操作，提高用户体验。</li><li><strong>效率提升</strong>：对于需要频繁建立连接的应用（如移动设备或高频率的请求），0-RTT可以显著提升性能。</li></ul><p>🐶缺点：</p><ul><li><strong>重放攻击风险</strong>：由于客户端在握手之前就发送了数据，这可能使得某些类型的重放攻击变得更容易，尤其是当传输的数据不是一次性的。</li><li><strong>安全性考量</strong>：使用0-RTT时，服务器需要对会话票据进行安全管理，以防止滥用。</li><li><strong>数据完整性</strong>：由于客户端在握手完成之前就发送了数据，服务器必须小心处理这些数据，以确保在验证身份之前不处理任何敏感操作。</li></ul><h4 id="5、包过滤防火墙"><a href="#5、包过滤防火墙" class="headerlink" title="5、包过滤防火墙"></a>5、包过滤防火墙</h4><blockquote><p>一种通过检查网络数据包的头部信息，根据预设的规则来决定是否允许数据包通过的防火墙类型。它工作在<strong>网络层</strong>（OSI 模型的第三层），对数据包的 <strong>IP 地址</strong>、<strong>端口号</strong>、<strong>协议</strong>等信息进行过滤。是最早的一种防火墙类型，也是目前最简单、性能最高的防火墙之一。</p></blockquote><p><strong>缺乏上下文</strong>：包过滤防火墙只检查单个数据包，无法感知连接的状态或上下文，容易受到某些攻击，如 IP 欺骗。</p><p><strong>灵活性差</strong>：无法深入到应用层进行过滤，无法对内容进行检查，只能基于 IP、端口和协议进行粗粒度过滤。</p><p><strong>容易被绕过</strong>：如果攻击者知道某些开放的端口，可能通过伪装包绕过包过滤规则。</p><h4 id="6、ARP协议"><a href="#6、ARP协议" class="headerlink" title="6、ARP协议"></a>6、ARP协议</h4><blockquote><p>ARP（Address Resolution Protocol，地址解析协议） 是用于将<strong>IP地址</strong>解析为<strong>MAC地址</strong>的协议。它在局域网（LAN）中非常常用，特别是在IPv4环境中，用来帮助主机在网络中找到其他主机的硬件地址，以实现数据的正确传输。<strong>工作在数据链路层（网络接口层）</strong></p></blockquote><h5 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h5><ul><li>当一台主机想要与同一个局域网中的另一台主机通信时，发起通信的主机已经知道对方的 IP 地址（如 192.168.1.2），但是并不知道对方的 MAC 地址。</li><li>这时，发起通信的主机会在网络上广播一个 <strong>ARP 请求</strong>，请求中包含了自己知道的目标主机的 IP 地址，目的是询问“谁拥有这个 IP 地址？”。</li><li>网络中的每个主机都会收到这个 ARP 请求包，但只有目标 IP 地址匹配的主机会回应一个 <strong>ARP 回复</strong>，并告知自己的 MAC 地址。</li><li>发起通信的主机接收到 ARP 回复后，将目标 IP 地址和 MAC 地址缓存到自己的 <strong>ARP 缓存表</strong> 中，以便后续的通信不需要再次发送 ARP 请求。</li></ul><h5 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h5><ul><li>ARP 请求：广播消息，查询目标 IP 地址对应的 MAC 地址。<ul><li>包含发起主机的IP地址和MAC地址，以及目标主机的IP地址</li></ul></li><li>ARP 响应：目标主机接收到请求后，单播回复自己的 MAC 地址。<ul><li>包含发起主机和目标主机的IP地址和MAC地址</li></ul></li></ul><h5 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h5><ul><li>局域网范围：ARP是基于广播的协议，工作在局域网（同一子网中），无法跨网段工作。</li><li>ARP欺骗：由于ARP没有验证机制，容易受到ARP欺骗攻击。攻击者可以伪造ARP相应包，将自身MAC地址和目标IP地址绑定，从而窃听或劫持网络通信。</li></ul><h4 id="7、GET和POST的区别"><a href="#7、GET和POST的区别" class="headerlink" title="7、GET和POST的区别"></a>7、GET和POST的区别</h4><h5 id="🐸GET"><a href="#🐸GET" class="headerlink" title="🐸GET"></a>🐸GET</h5><ul><li>用于从服务器获取数据</li><li>请求参数通过URL的查询字符串传递，通常在URL末尾？开始，以key&#x3D;value的形式</li><li>适合传递少量数据</li><li>由于请求参数在URL中可见，不适合传递敏感信息</li><li>请求可以被缓存，以提高性能</li><li>幂等的，即多次请求相同的 URL 应返回相同的结果，而不改变服务器状态。</li></ul><h5 id="🐸POST"><a href="#🐸POST" class="headerlink" title="🐸POST"></a>🐸POST</h5><ul><li>用于向服务器发送数据（例如提交表单数据）</li><li>请求参数放在请求体中</li><li>可以发送大量数据，几乎没有大小限制（具体取决于服务器）</li><li>相对来说更安全，但仍然需要通过 HTTPS 加密传输以确保安全。</li><li>通常不会被缓存，因为通常涉及更改服务器的状态</li><li>不是幂等的，重复提交相同的 POST 请求可能会导致不同的结果，例如多次创建相同的资源。</li></ul><h3 id="（2）HTTP协议"><a href="#（2）HTTP协议" class="headerlink" title="（2）HTTP协议"></a>（2）HTTP协议</h3><h4 id="1、Header"><a href="#1、Header" class="headerlink" title="1、Header"></a>1、Header</h4><blockquote><p>在HTTP（超文本传输协议）中，<strong>Header（头部）</strong>用于在客户端和服务器之间传递额外的元数据。HTTP请求和响应都包含头部，头部由多个键值对组成，格式为：<code>键: 值</code>。</p></blockquote><h5 id="通用头部"><a href="#通用头部" class="headerlink" title="@通用头部"></a>@通用头部</h5><p>适用于请求和响应，提供协议层面的通用信息，不针对具体的资源或内容。</p><ul><li>**<code>Date</code>**：指示请求或响应发送的日期和时间。</li><li>**<code>Connection</code>**：控制连接的类型，常见值为 <code>keep-alive</code>（保持连接）和 <code>close</code>（关闭连接）。</li><li>**<code>Cache-Control</code>**：用于控制缓存策略，如 <code>no-cache</code>、<code>max-age</code> 等。</li></ul><h5 id="请求头部"><a href="#请求头部" class="headerlink" title="@请求头部"></a>@请求头部</h5><p>用于发送客户端请求时，传递与客户端、请求资源、客户端希望的响应格式等相关的信息。</p><ul><li>**<code>Host</code>**：指定服务器主机名和端口号，表示请求的目标主机（例如 <code>Host: www.example.com</code>）。</li><li>**<code>User-Agent</code>**：描述发出请求的客户端（如浏览器或其他应用程序）的类型和版本（例如 <code>User-Agent: Mozilla/5.0</code>）。</li><li>**<code>Accept</code>**：表示客户端可以处理的内容类型，如 <code>Accept: text/html</code>、<code>application/json</code> 等。</li><li>**<code>Authorization</code>**：用于提供身份验证信息，常用于 <code>Bearer</code>、<code>Basic</code> 等认证机制（例如 <code>Authorization: Bearer &lt;token&gt;</code>）。</li><li>**<code>Cookie</code>**：用于在请求中传递存储在客户端的Cookie（例如 <code>Cookie: sessionId=abcd1234</code>）。</li></ul><h5 id="响应头部"><a href="#响应头部" class="headerlink" title="@响应头部"></a>@响应头部</h5><p>用于传递服务器的响应元数据，告知客户端如何处理响应的附加信息。</p><ul><li>**<code>Server</code>**：表示响应是由哪个服务器或服务器软件处理的（例如 <code>Server: Apache/2.4.41</code>）。</li><li>**<code>Set-Cookie</code>**：用于服务器指示客户端存储Cookie（例如 <code>Set-Cookie: sessionId=abcd1234; Path=/; Secure; HttpOnly</code>）。</li><li>**<code>Location</code>**：用于重定向，指示客户端应重新请求的URL（例如 <code>Location: https://www.example.com/new-page</code>）。</li><li>**<code>WWW-Authenticate</code>**：用于定义客户端需要使用的认证方式（例如 <code>WWW-Authenticate: Basic realm=&quot;Access to the site&quot;</code>）。</li></ul><h5 id="实体头部"><a href="#实体头部" class="headerlink" title="@实体头部"></a>@实体头部</h5><p>描述资源的元数据，提供有关实体主体的信息。</p><ul><li>**<code>Content-Type</code>**：表示响应内容的类型和编码（如 <code>Content-Type: text/html; charset=UTF-8</code>）。</li><li>**<code>Content-Length</code>**：表示响应体的字节长度（如 <code>Content-Length: 348</code>）。</li><li>**<code>Content-Encoding</code>**：指定实体内容的压缩方式，如 <code>gzip</code>、<code>deflate</code> 等。</li><li>**<code>Last-Modified</code>**：指示资源最后修改的时间，用于缓存验证和条件请求（如 <code>Last-Modified: Tue, 15 Nov 2022 12:45:26 GMT</code>）。</li><li>**<code>ETag</code>**：给资源分配的唯一标识符，常用于缓存机制和版本控制（如 <code>ETag: &quot;abc123&quot;</code>）。</li></ul><h4 id="2、各个版本"><a href="#2、各个版本" class="headerlink" title="2、各个版本"></a>2、各个版本</h4><h5 id="🌑HTTP-0-9"><a href="#🌑HTTP-0-9" class="headerlink" title="🌑HTTP&#x2F;0.9"></a>🌑HTTP&#x2F;0.9</h5><p>◾请求方式：仅支持GET请求</p><p>◾无HTTP头部：无法发送和接收请求响应头</p><p>◾只能传输HTML：无法传输其他格式的数据，如图片、视频等</p><p>🔻简单的单项协议，用于获取网页</p><p>🔻仅支持HTML内容的传输，页面响应的灵活性很差</p><h5 id="🌒HTTP-1-0"><a href="#🌒HTTP-1-0" class="headerlink" title="🌒HTTP&#x2F;1.0"></a>🌒HTTP&#x2F;1.0</h5><p>🔹请求头和响应头：支持发送和接收头信息，包括 <code>Content-Type</code>、<code>Content-Length</code> 等</p><p>🔹支持不同的数据类型：可以传输图片、文本、视频等</p><p>🔹状态码：引入了状态码（如 <code>200 OK</code>、<code>404 Not Found</code>）来表示请求的结果。</p><p>🔹短连接：每个请求&#x2F;响应之后连接关闭，即每次请求资源时都会新建一个TCP连接。</p><p>🔻短连接模式，效率低，每次请求需要建立和关闭连接，增加了延迟。</p><h5 id="🌓HTTP-1-1"><a href="#🌓HTTP-1-1" class="headerlink" title="🌓HTTP&#x2F;1.1"></a>🌓HTTP&#x2F;1.1</h5><p>🔷持久连接（Keep-alive）：<strong>默认启用持久连接</strong>，允许复用TCP连接以减少连接建立的开销，大大提高了性能。</p><p>🔷分块传输编码：允许服务器在不确定相应内容长度的情况下开始发送响应，支持动态生成内容。</p><p>🔷缓存机制：引入了Cache-Control、ETag等头部，支持更好的缓存控制和验证</p><p>🔷虚拟主机：允许多个域名共享同一IP地址，解决了早期IP地址不足的问题（Host字段）</p><p>🔷带宽优化：增加了压缩、范围请求等机制，以便更好地利用带宽</p><p>🔷管道化（Pipelining）：允许在同一TCP连接上并发发送多个请求，但服务器必须按照顺序返回响应。（虽有这个机制，但是由于实现复杂，使用较少）</p><p>🔻虽然支持持久连接，但同一连接中仍然存在“队头阻塞”（Head of Line Blocking）问题，一个请求的响应需要等到前一个请求完成后才能处理。</p><h5 id="🌔HTTP-2"><a href="#🌔HTTP-2" class="headerlink" title="🌔HTTP&#x2F;2"></a>🌔HTTP&#x2F;2</h5><p>💠二进制传输：将消息格式从1.1的纯文本转换为二进制，解析更加高效、灵活</p><p>💠多路复用：同一个TCP连接上可以并发多个请求和响应，一个连接同时处理多流</p><p>💠头部压缩：使用专门的算法对HTTP头部进行压缩，减少带宽占用，提高传输效率</p><p>💠服务器推送：服务器可以在客户端未请求时主动推送相关资源，减少页面加载时间</p><p>💠流优先级：允许客户端指定不同请求的优先级，优化资源传输顺序</p><p>🔻多路复用的实现依赖于单一的TCP连接，当TCP丢包时，所有流的传输都可能受到影响。</p><h5 id="🌕HTTP-3"><a href="#🌕HTTP-3" class="headerlink" title="🌕HTTP&#x2F;3"></a>🌕HTTP&#x2F;3</h5><p>🔶基于UDP的QUIC协议：HTTP&#x2F;3 在QUIC协议上运行，QUIC 是一种在用户态实现的快速、低延迟传输协议，解决了TCP的队头阻塞问题。</p><p>🔶减少延迟：由于QUIC集成了TLS，握手过程比TCP快，连接建立的延迟显著降低</p><p>🔶多路复用改进：(基于UDP)即使某个数据包丢失其他流也不受影响，提高整体传输效率</p><p>🔶0-RTT连接建立：QUIC允许在某些情况下进行0-RTT握手，进一步减少延迟</p><p>🔺更高的传输效率和更低的延迟，适用于现代网络的需求，特别是在移动网络和高延迟环境下的表现出色。</p><h4 id="3、HTTP和HTTPS的区别"><a href="#3、HTTP和HTTPS的区别" class="headerlink" title="3、HTTP和HTTPS的区别"></a>3、HTTP和HTTPS的区别</h4><h5 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h5><ul><li>数据以明文形式传输，任何在传输过程中拦截数据的攻击者都可以查看和修改信息。</li><li>没有身份验证机制，无法验证服务器的身份，用户无法确定自己访问是合法网站。</li><li>由于没有加密和解密过程，HTTP 的传输速度相对较快。</li><li>不再被搜索引擎优先考虑，可能会影响网站的搜索排名。</li><li>默认使用端口 80</li></ul><h5 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h5><ul><li>通过 SSL&#x2F;TLS 协议加密传输的数据，确保数据在传输过程中不被第三方窃取或篡改。这使得 HTTPS 更加安全，能够保护用户的隐私和敏感信息。</li><li>在发送数据之前，客户端和服务器之间会进行安全连接的握手，生成加密密钥以确保通信的安全性。</li><li>通过证书验证服务器身份，用户可以查看证书信息，确保与合法的网站进行通信。只有受信任的证书颁发机构（CA）签发的证书才能被浏览器接受。</li><li>加密和解密会消耗一些性能，尤其是在握手和密钥交换阶段，可能会稍微增加延迟。但现代硬件和优化技术使得这种性能差距逐渐缩小。</li><li>搜索引擎（如 Google）更倾向于优先考虑使用 HTTPS 的网站，认为它们更安全。此外，用户在访问 HTTPS 网站时，通常会看到浏览器中的安全锁图标，增加用户的信任感。</li><li>默认使用端口 443。</li></ul><h4 id="4、HTTPS的握手过程"><a href="#4、HTTPS的握手过程" class="headerlink" title="4、HTTPS的握手过程"></a>4、HTTPS的握手过程</h4><p>TCP连接会先建立好。</p><blockquote><p>基于<strong>SSL（安全套接层）或 TLS（传输层安全性）</strong></p></blockquote><h5 id="1️⃣客户端发送“Hello”"><a href="#1️⃣客户端发送“Hello”" class="headerlink" title="1️⃣客户端发送“Hello”"></a>1️⃣客户端发送“Hello”</h5><ul><li>协议版本：客户端支持的最高版本</li><li>随机数：用于密钥生成</li><li>支持的加密套件：客户端支持的加密算法列表</li><li>压缩方法：客户端支持的压缩算法（如果有）</li></ul><h5 id="2️⃣服务器回复“Hello”"><a href="#2️⃣服务器回复“Hello”" class="headerlink" title="2️⃣服务器回复“Hello”"></a>2️⃣服务器回复“Hello”</h5><ul><li>协议版本：服务器选择的协议版本。</li><li>随机数：服务器随机生成的数值。</li><li>选择的加密套件：服务器选择的加密算法。</li><li>选择的压缩方法：服务器选择的压缩算法（如果有）。</li></ul><h5 id="3️⃣服务器向客户端发送SSL-TLS证书"><a href="#3️⃣服务器向客户端发送SSL-TLS证书" class="headerlink" title="3️⃣服务器向客户端发送SSL&#x2F;TLS证书"></a>3️⃣服务器向客户端发送SSL&#x2F;TLS证书</h5><ul><li>服务器的公钥。</li><li>证书颁发机构（CA）的信息。</li><li>证书的有效期等。</li></ul><h5 id="4️⃣服务器Hello-Done"><a href="#4️⃣服务器Hello-Done" class="headerlink" title="4️⃣服务器Hello Done"></a>4️⃣服务器Hello Done</h5><p>表示服务器Hello消息已经结束，客户端可以开始处理服务器的消息</p><h5 id="5️⃣客户端密钥交换"><a href="#5️⃣客户端密钥交换" class="headerlink" title="5️⃣客户端密钥交换"></a>5️⃣客户端密钥交换</h5><p>客户端生成一个称为“预主密钥”的随机数，并用服务器的公钥对其进行加密。然后客户端将加密后的预主密钥发送给服务器。</p><h5 id="6️⃣密钥生成"><a href="#6️⃣密钥生成" class="headerlink" title="6️⃣密钥生成"></a>6️⃣密钥生成</h5><p>客户端和服务器都是用预主密钥和之前交换的随机数生成会话密钥（对称密钥）。对称密钥用于后续的数据加密和解密。</p><h5 id="7️⃣完成握手"><a href="#7️⃣完成握手" class="headerlink" title="7️⃣完成握手"></a>7️⃣完成握手</h5><p>客户端完成：客户端发送一条消息表示握手完成，消息会使用会话密钥加密</p><p>服务器完成：服务器收到客户端的消息后也发送加密消息</p><h5 id="8️⃣安全通信开始"><a href="#8️⃣安全通信开始" class="headerlink" title="8️⃣安全通信开始"></a>8️⃣安全通信开始</h5><p>完成握手后，客户端和服务器之间的通信将会使用会话密钥加密。此时，数据传输的机密性和完整性得到保障。</p><h3 id="（3）跨域"><a href="#（3）跨域" class="headerlink" title="（3）跨域"></a>（3）跨域</h3><blockquote><p>跨域（Cross-Origin）是指浏览器处于安全性考虑，阻止来自不同域的网页请求资源。跨域请求通常由浏览器的同源策略（Same-Origin Policy）引起。浏览器默认只允许同源请求。</p></blockquote><h4 id="1、同源请求"><a href="#1、同源请求" class="headerlink" title="1、同源请求"></a>1、同源请求</h4><p>规定只有<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>都相同的两个页面，才能共享资源或进行请求。</p><h5 id="为什么会有跨域限制？"><a href="#为什么会有跨域限制？" class="headerlink" title="为什么会有跨域限制？"></a>为什么会有跨域限制？</h5><p>跨域限制的主要目的是<strong>保护用户数据</strong>，避免一些恶意网站或脚本未经授权访问用户在其他网站上的敏感信息。例如：</p><ul><li><strong>CSRF 攻击（跨站请求伪造）</strong>：攻击者伪造用户请求，利用用户的身份在合法网站上执行未授权操作。</li><li><strong>数据泄露</strong>：攻击者可能利用跨域访问，获取用户的敏感信息。</li></ul><h5 id="跨域的场景："><a href="#跨域的场景：" class="headerlink" title="跨域的场景："></a>跨域的场景：</h5><ul><li>Ajax 请求：前端通过 XMLHttpRequest 或 <code>fetch</code> API 向不同源的服务器发送请求。</li><li>前端和服务器分开部署，接口请求需要跨域</li><li>页面中的资源加载：比如通过 <code>&lt;img&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;link&gt;</code> 标签加载外部资源时，可能涉及跨域。</li><li>跨域嵌套的页面：通过 <code>&lt;iframe&gt;</code> 嵌套不同域的页面时会受到限制。</li></ul><h4 id="2、CORS"><a href="#2、CORS" class="headerlink" title="2、CORS"></a>2、CORS</h4><blockquote><p>Cross-Origin Resource Sharing（跨域资源共享）事最常用的解决跨域问题的机制。服务器通过设置特定的响应头，允许浏览器访问来自不同源的资源。</p></blockquote><ul><li>当浏览器发起跨域请求时，会自动添加Origin请求头，标记请求的来源。</li><li>如果服务器允许该跨域请求，会发出以下响应头。</li></ul><h5 id="🔹常见的响应头："><a href="#🔹常见的响应头：" class="headerlink" title="🔹常见的响应头："></a>🔹常见的响应头：</h5><ul><li>Access-Control-Allow-Origin：允许的源，可以是具体的域名（如 <code>http://example.com</code>），也可以是 <code>*</code>（允许所有域）。</li><li>Access-Control-Allow-Methods：允许的 HTTP 方法（如 <code>GET</code>、<code>POST</code>、<code>PUT</code> 等）。</li><li>Access-Control-Allow-Headers：允许的请求头（如 Content-Type、Authorization）。</li><li>Access-Control-Allow-Credentials：是否允许发送凭证（如 Cookies）。</li></ul><h5 id="🔹CORS请求类型"><a href="#🔹CORS请求类型" class="headerlink" title="🔹CORS请求类型"></a>🔹CORS请求类型</h5><ul><li>简单请求：如GET和POST，且请求头比较简单（如Content-Type：text&#x2F;plain），这种请求头不需要预检。</li><li>预检请求：非简单请求，浏览器会先发送一个OPTIONS请求，询问服务器是否允许当前跨域请求。服务器相应允许后，才会发送实际的请求。</li></ul><h5 id="🔹示例"><a href="#🔹示例" class="headerlink" title="🔹示例"></a>🔹示例</h5><ul><li>前端请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://api.com/data&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data));<br></code></pre></td></tr></table></figure><ul><li>API服务器的响应</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Access-Control-Allow-Origin</span><span class="hljs-punctuation">: </span>http://frontend.com<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;some data&quot;</span><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><h5 id="🔹注意："><a href="#🔹注意：" class="headerlink" title="🔹注意："></a>🔹注意：</h5><ul><li>如果希望允许凭据（如Cookies）随请求一起发送，必须明确指定允许的域名，而不是*</li></ul><h4 id="3、JSONP（JSON-with-Padding）"><a href="#3、JSONP（JSON-with-Padding）" class="headerlink" title="3、JSONP（JSON with Padding）"></a>3、JSONP（JSON with Padding）</h4><blockquote><p>早期的跨域解决方案，适用于只进行GET请求的场景。</p></blockquote><h5 id="🔸工作方式"><a href="#🔸工作方式" class="headerlink" title="🔸工作方式"></a>🔸工作方式</h5><p>前端通过动态创建<code>&lt;script&gt;</code>标签向服务器发送请求，服务器返回一段JavaScript代码，其中包含了一个函数调用。该函数是由前端提前定义好的，服务器返回的数据作为该函数的参数。</p><h5 id="🔸示例"><a href="#🔸示例" class="headerlink" title="🔸示例"></a>🔸示例</h5><ul><li>前端代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleResponse</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span><br><span class="language-javascript">   &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://api.example.com/data?callback=handleResponse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>服务器返回的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">handleReponse</span>(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;)<br></code></pre></td></tr></table></figure><p>通过这种方式前端就可以绕过同源策略成功获取跨域数据。</p><h5 id="🔸缺点"><a href="#🔸缺点" class="headerlink" title="🔸缺点"></a>🔸缺点</h5><p>只能用于GET请求，存在风险，容易受到XSS攻击</p><h4 id="4、Websocket协议"><a href="#4、Websocket协议" class="headerlink" title="4、Websocket协议"></a>4、Websocket协议</h4><blockquote><p>Wedsocket协议是一种在客户端（浏览器）和服务器之间进行全双工通信的协议，它允许双方在单个持久连接的基础上，进行双向的数据传输。与传统的HTTP协议不同，Websocket不是基于请求-响应模式的，而是可以在连接建立后，双方随时主动发消息。这使得它适合实时应用，如聊天、游戏、实时数据推送。</p></blockquote><h5 id="🦄特点："><a href="#🦄特点：" class="headerlink" title="🦄特点："></a>🦄特点：</h5><ul><li>Websocket 不受同源策略影响，只要服务器端支持，无需任何配置就支持跨域。</li><li>双向通信（Full-Duplex)： 允许服务器和客户端同时发送和接收数据，而不必等待对方发起请求</li><li>低延迟：由于只需要进行一次初始握手，并且链接一旦建立变持续存在，后续的数据传输不需要重新建立连接，因此可以减少延迟。</li><li>节省带宽：通信报文头部比HTTP端，后续的消息交换只需要很少的协议头数据</li><li>持久连接：连接一旦建立便会一直保持，除非客户端&#x2F;服务器主动关闭连接或发生错误</li></ul><h5 id="🦄与HTTP的关系"><a href="#🦄与HTTP的关系" class="headerlink" title="🦄与HTTP的关系"></a>🦄与HTTP的关系</h5><p>并非取代HTTP，而是建立在HTTP协议之上。握手成功后接管。</p><ul><li>握手：它的握手是通过标准的HTTP&#x2F;1.1请求来完成的，客户端发起的HTTP请求带有Upgrade：websocket头部，表示请求服务器升级协议。</li><li>HTTP&#x2F;2：由于HTTP&#x2F;2采用多路复用流的方式，与Websocket的单连接设计不兼容</li></ul><h5 id="🦄优缺点"><a href="#🦄优缺点" class="headerlink" title="🦄优缺点"></a>🦄优缺点</h5><p>优点：高效、实时、占用资源少</p><p>缺点：不支持断线重连（HTTP会自动发起新请求）、防火墙兼容问题（非标准HTTP通信）</p><h3 id="（4）常见的网络攻击"><a href="#（4）常见的网络攻击" class="headerlink" title="（4）常见的网络攻击"></a>（4）常见的网络攻击</h3><p><a href="https://github.com/YvetteLau/Blog/issues/29">【面试篇】寒冬求职之你必须要懂的Web安全 · Issue #29 · YvetteLau&#x2F;Blog</a></p><h4 id="1、XSS攻击（跨站脚本攻击）"><a href="#1、XSS攻击（跨站脚本攻击）" class="headerlink" title="1、XSS攻击（跨站脚本攻击）"></a>1、XSS攻击（跨站脚本攻击）</h4><p>攻击者将恶意的脚本代码注入到受信任的网站中，其他用户在访问时执行这些恶意脚本，从而被攻击者窃取会话信息、用户数据等。</p><p>本质：恶意代码没有经过过滤，与网站的正常代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行；由于直接在用户的终端执行，恶意代码可以直接获取用户用户的信息，利用这些信息冒充用户向网站发起攻击者定义的请求。</p><h5 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h5><ul><li>对所有用户输入进行严格的验证和过滤。可以使用白名单策略，只允许特定格式或内容的输入。</li><li>将敏感信息（如会话 cookie）设置为 HttpOnly，这样 JavaScript 无法访问这些 cookie。</li><li>设置 Secure 标志，确保 cookie 仅通过 HTTPS 传输。</li><li>使用现代的前端框架</li></ul><h4 id="2、CSRF攻击（跨站请求伪造）"><a href="#2、CSRF攻击（跨站请求伪造）" class="headerlink" title="2、CSRF攻击（跨站请求伪造）"></a>2、CSRF攻击（跨站请求伪造）</h4><p>攻击者诱使已经登陆的用户访问恶意网站或者链接，从而在用户不知情的情况下以用户身份执行未经授权的操作。</p><ul><li>使用 CSRF 令牌：为每个表单生成唯一的 CSRF 令牌，并在请求中验证该令牌。</li><li>检查 Referer 头：验证请求的来源，以确保请求来自合法的页面。</li><li>同源策略：确保敏感操作只能从同源域进行。</li></ul><h4 id="3、中间人攻击"><a href="#3、中间人攻击" class="headerlink" title="3、中间人攻击"></a>3、中间人攻击</h4><p>HTTPS 中间人攻击（Man-in-the-Middle Attack, MITM）是一种网络攻击方式，攻击者通过在用户和网站之间插入自己，从而拦截和操纵通信数据。尽管 HTTPS（超文本传输安全协议）提供了加密和安全性，但如果攻击者能够控制某些网络条件，依然可以实施中间人攻击。</p><p><strong>SSL Stripping</strong>：</p><ul><li>攻击者将 HTTPS 请求转换为 HTTP 请求，使用户与网站之间的连接不再加密，从而能够拦截数据。</li></ul><p><strong>Wi-Fi 热点攻击</strong>：</p><ul><li>攻击者设置伪造的 Wi-Fi 热点，诱使用户连接，从而监控用户的网络流量。</li></ul><p><strong>DNS Spoofing</strong>：</p><ul><li>攻击者通过伪造 DNS 响应将用户引导到恶意网站，尽管该网站看起来与原网站相同。</li></ul><h2 id="二、操作系统"><a href="#二、操作系统" class="headerlink" title="二、操作系统"></a>二、操作系统</h2><h3 id="（1）进程调度"><a href="#（1）进程调度" class="headerlink" title="（1）进程调度"></a>（1）进程调度</h3><h4 id="1、阻塞和就绪"><a href="#1、阻塞和就绪" class="headerlink" title="1、阻塞和就绪"></a>1、阻塞和就绪</h4><h5 id="🐅阻塞状态"><a href="#🐅阻塞状态" class="headerlink" title="🐅阻塞状态"></a>🐅阻塞状态</h5><p>进程处于阻塞状态时，表示它正在<strong>等待某个事件的发生</strong>，通常是等待 I&#x2F;O 操作完成、信号量、条件变量或资源的释放。通常是因为请求的资源不可用（等待磁盘读写、网络数据接收）。</p><p>一旦等待的时间发生，阻塞的进程会被唤醒，转变为就绪状态，等待CPU资源的分配。</p><h5 id="🐆就绪状态"><a href="#🐆就绪状态" class="headerlink" title="🐆就绪状态"></a>🐆就绪状态</h5><p>进程处于就绪状态时，表示它已经准备好可以运行，<strong>等待 CPU 分配时间片</strong>。通常是一个准备执行的进程已经获得了所有所需的资源，但是由于<strong>CPU正在被其他进程使用</strong>，所以处于就绪状态。</p><h4 id="2、进程和线程和协程"><a href="#2、进程和线程和协程" class="headerlink" title="2、进程和线程和协程"></a>2、进程和线程和协程</h4><p><strong>线程</strong>是进程中的一个执行流，<strong>是程序执行的最小单元</strong>。每个线程都拥有自己的栈、寄存器、和程序计数器，但它们共享进程的资源（如内存和文件描述符）。</p><p><strong>进程</strong>是系统中资源分配的基本单位，而线程是程序执行的基本单位。</p><p>一个进程可以包含多个线程，这些线程可以并发执行。</p><p>线程之间的创建、销毁和切换的开销通常比进程更小，因此线程通常被认为是更轻量级的执行单位。</p><p><strong>协程</strong>是一种协作式的多任务处理机制，它允许程序在执行过程中挂起（暂停）某个任务，然后在需要的时候恢复该任务的执行。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241024163236109.png" alt="image-20241024163236109"></p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP八股总结</title>
    <link href="/2024/10/23/CPP%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/23/CPP%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>备份一下遇到的CPP知识</p><span id="more"></span><h2 id="CPP"><a href="#CPP" class="headerlink" title="CPP"></a>CPP</h2><h3 id="（1）数据结构"><a href="#（1）数据结构" class="headerlink" title="（1）数据结构"></a>（1）数据结构</h3><blockquote><p>data structure引入：在电脑中，变量存储在<strong>RAM</strong>（Random Access Memory，随机存取存储器）中。（随机存储，容易丢失，高速访问）</p></blockquote><blockquote><p>插入、删除、遍历、查找、排序、访问是对各种数据结构的操作。</p></blockquote><h4 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h4><blockquote><p>lookup：O(1) ; push：O(1) ; insert：O(n) ; delete：O(n)</p></blockquote><p>定义数组元素初始值时，数组可以不指定初始数组长度。</p><p><code>int arr3[] = &#123; 100,90,80,70,60,50,40,30,20,10 &#125;;</code></p><p>数组长度：<code>sizeof（arr）</code></p><p>二维数组的长度：行数：<code>sizeof（arr）</code> ；列数：<code>sizeof（arr[0]）</code></p><p>、</p><h4 id="、unordered-set"><a href="#、unordered-set" class="headerlink" title="、unordered_set"></a>、unordered_set</h4><h5 id="🐦特点"><a href="#🐦特点" class="headerlink" title="🐦特点"></a>🐦特点</h5><p>无序性：元素不按照特定顺序存储。与 <code>set</code> 不同，<code>unordered_set</code> 不保证元素的排列顺序，元素的顺序与插入顺序无关。</p><p>唯一性：<code>unordered_set</code> 中的每个元素都是唯一的，即不能有重复元素。如果尝试插入重复元素，插入操作会被忽略。</p><p>底层实现：<code>unordered_set</code> 使用哈希表（hash table）作为底层数据结构，因此它在插入、查找和删除元素时平均时间复杂度为 O(1)，但在最坏情况下可能降到 O(N)。</p><p>需要哈希函数：<code>unordered_set</code> 需要一个哈希函数来计算元素的哈希值。对于内置类型（如整数、字符串等），STL 提供了默认的哈希函数。</p><h5 id="🐦操作"><a href="#🐦操作" class="headerlink" title="🐦操作"></a>🐦操作</h5><p>插入：insert（value）</p><p>查找：find（value）</p><p>删除：erase（value）</p><p>清空：clear（）</p><p>返回元素数量：size（）</p><h4 id="、哈希表"><a href="#、哈希表" class="headerlink" title="、哈希表"></a>、哈希表</h4><ul><li>声明：<code>unordered_map&lt;int,int&gt; hashtable;</code></li><li>查找：<code>auto it=hashtable.find(target-nums[i]);</code></li></ul><p><code>it-&gt;second：</code>值 ；<code>it-&gt;first：</code>键</p><h4 id="、大根堆"><a href="#、大根堆" class="headerlink" title="、大根堆"></a>、大根堆</h4><p>特点：父节点比任意子节点都大。</p><p>构建过程：</p><ul><li>将无序数组依次插入完全二叉树中。</li><li>从最后一个非叶子的子节点开始，找到它子节点的最大值，如果大于它就和它交换，就这样一直交换到根节点。</li><li>再从根节点下的节点开始这样交换。</li></ul><h4 id="、双向队列"><a href="#、双向队列" class="headerlink" title="、双向队列"></a>、双向队列</h4><h4 id="、map"><a href="#、map" class="headerlink" title="、map"></a>、map</h4><h3 id="（2）算法"><a href="#（2）算法" class="headerlink" title="（2）算法"></a>（2）算法</h3><h4 id="1、Dijkstra（迪杰斯特拉）算法"><a href="#1、Dijkstra（迪杰斯特拉）算法" class="headerlink" title="1、Dijkstra（迪杰斯特拉）算法"></a>1、Dijkstra（迪杰斯特拉）算法</h4><blockquote><p>用于求解带权有向图的最短路径问题</p></blockquote><p>🎃在构造算法的时候需要两个辅助数组：</p><ul><li>dist[]：记录从源点V0到其他各顶点的<strong>当前</strong>最短路径长度。初始值：若V0到Vi有直接路径，则dist[i]为这两个顶点边上的权值，否则置为∞。</li><li>path[]：记录从原点到各顶点之间最短路径的前驱节点。（在算法结束时，可以根据其值追溯V0到Vi的最短路径）。初始值：-1。</li></ul><p>在计算的时候维护一个集合S，初始值为V0。</p><p>每一次从<strong>V-S</strong>的顶点中选出最小的dist[i]，并把相应Vi放入S中。根据Vi可以直达的顶点j（也需在<strong>V-S</strong>中），计算相应路径长度，如果小于当前的dist[j]，就更新其值，并设其前驱节点为i。</p><p>当V中的顶点已全部在S中，就结束算法。</p><h4 id="2、散列表的平均查找成功-失败长度"><a href="#2、散列表的平均查找成功-失败长度" class="headerlink" title="2、散列表的平均查找成功&#x2F;失败长度"></a>2、散列表的平均查找成功&#x2F;失败长度</h4><blockquote><p>解决哈希冲突的常见方法：链地址法；开放地址法。</p></blockquote><h5 id="🐦链地址法"><a href="#🐦链地址法" class="headerlink" title="🐦链地址法"></a>🐦链地址法</h5><p>查找成功平均长度：</p><ul><li>设查找到每个位置的概率为p0。</li><li>查找到第n层就成功的概率为p0*第n层元素个数（Pn）。</li><li>平均长度&#x3D;<code>P1*1+P2*2+P3*3...+Pn*n</code></li></ul><p>查找失败平均长度：</p><ul><li>不知道零层到底算不算……存疑</li></ul><h5 id="🐦开放地址法"><a href="#🐦开放地址法" class="headerlink" title="🐦开放地址法"></a>🐦开放地址法</h5><blockquote><p>装填&#x2F;负载因子：散列表中已经装填的元素数&#x2F;散列表总长度</p></blockquote><p>（对于函数为<code>H(Key)=(Key*3)%7</code>，哈希地址只能是0-6）</p><p>查找成功平均长度：</p><ul><li>对于每个数，从开始的地址一直查到它的距离相加。最后除以7。</li></ul><p>查找失败平均长度：</p><ul><li>从0-6的地址开始依次向后，直到找到空位置的距离相加。最后除以7。</li></ul><h4 id="3、排序"><a href="#3、排序" class="headerlink" title="3、排序"></a>3、排序</h4><p><a href="https://blog.csdn.net/weixin_43914593/article/details/134621725">＜蓝桥杯软件赛＞零基础备赛20周–第8周第1讲–十大排序-CSDN博客</a></p><h4 id="4、二分"><a href="#4、二分" class="headerlink" title="4、二分"></a>4、二分</h4><p><a href="https://blog.csdn.net/weixin_43914593/article/details/134986095">＜蓝桥杯软件赛＞零基础备赛20周–第10周–二分_蓝桥杯20周csdn-CSDN博客</a></p><h3 id="（3）其他知识点"><a href="#（3）其他知识点" class="headerlink" title="（3）其他知识点"></a>（3）其他知识点</h3><h4 id="1、i-和-i的区别"><a href="#1、i-和-i的区别" class="headerlink" title="1、i++和++i的区别"></a>1、i++和++i的区别</h4><p>i++先赋值再自增，++i先自增再赋值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>i = i++;<br><span class="hljs-type">int</span> j = i++;<br><span class="hljs-type">int</span> k = i + ++i * i++;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;i = &quot;</span> + i);    <span class="hljs-comment">//4</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;j = &quot;</span> + j);    <span class="hljs-comment">//1</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;k = &quot;</span> + k);    <span class="hljs-comment">//11(2+3*3)</span><br></code></pre></td></tr></table></figure><h4 id="2、std-vector"><a href="#2、std-vector" class="headerlink" title="2、std::vector&lt;int&gt;()"></a>2、<code>std::vector&lt;int&gt;()</code></h4><p><code>ans=cnt==numCourses?ans:std::vector&lt;int&gt;();</code></p><p>如果要返回空数组，不能直接写[]或者{}，而是要按照上面的语法写</p><h4 id="3、设计模式"><a href="#3、设计模式" class="headerlink" title="3、设计模式"></a>3、设计模式</h4><p><a href="https://blog.csdn.net/A1342772/article/details/91349142?ops_request_misc=%7B%22request_id%22:%22AFEAC980-6427-4EB1-9C54-51C82761BBBA%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=AFEAC980-6427-4EB1-9C54-51C82761BBBA&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-91349142-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F&spm=1018.2226.3001.4187">23 种设计模式详解（全23种）_23种设计模式-CSDN博客</a></p><h4 id="4、stoi"><a href="#4、stoi" class="headerlink" title="4、stoi"></a>4、stoi</h4><p>用于将字符串转化为数字</p><p><strong>stoi（str，pos，base）</strong></p><ul><li>pos可以定义从某个位置开始转化</li><li>base可以指定转化为多少进制，直接写数字就可以了</li></ul><p>与此相对的是to_string，它用于把各种数值类型转化为字符串</p><h4 id="5、replace"><a href="#5、replace" class="headerlink" title="5、replace"></a>5、replace</h4><p>用于在指定范围内替换指定的元素，通常与vector，string配合使用。</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结-JS（持续更新）</title>
    <link href="/2024/10/23/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-JS/"/>
    <url>/2024/10/23/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-JS/</url>
    
    <content type="html"><![CDATA[<p>记录一下在笔试或面试中的八股知识。融合一下其他人总结的。</p><span id="more"></span><p><strong>是谁还不知道在vscode安装Code Running拓展就可以无痛跑js、c++等代码🥹</strong></p><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><h4 id="0、ES6新特性"><a href="#0、ES6新特性" class="headerlink" title="0、ES6新特性"></a>0、ES6新特性</h4><h5 id="⭕块级作用域"><a href="#⭕块级作用域" class="headerlink" title="⭕块级作用域"></a>⭕块级作用域</h5><ul><li><code>let</code>：用于声明块级作用域的变量。</li><li><code>const</code>：用于声明常量，一旦赋值后不能更改。</li></ul><h5 id="⭕箭头函数"><a href="#⭕箭头函数" class="headerlink" title="⭕箭头函数"></a>⭕箭头函数</h5><h5 id="⭕模板字符串"><a href="#⭕模板字符串" class="headerlink" title="⭕模板字符串"></a>⭕模板字符串</h5><h5 id="⭕解构赋值"><a href="#⭕解构赋值" class="headerlink" title="⭕解构赋值"></a>⭕解构赋值</h5><p>解构赋值允许从数组或对象中提取值，并赋值给变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> [a, b] = arr;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b); <span class="hljs-comment">// 输出: 1 2</span><br><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">const</span> &#123; x, y &#125; = obj;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y); <span class="hljs-comment">// 输出: 1 2</span><br></code></pre></td></tr></table></figure><h5 id="⭕默认参数"><a href="#⭕默认参数" class="headerlink" title="⭕默认参数"></a>⭕默认参数</h5><p>如果没有值或者传入了未定义的值，默认参数允许形式参数使用默认值初始化</p><h5 id="⭕剩余参数和扩展运算符"><a href="#⭕剩余参数和扩展运算符" class="headerlink" title="⭕剩余参数和扩展运算符"></a>⭕剩余参数和扩展运算符</h5><p>剩余参数可以将不确定数量的参数组合为数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...numbers</span>) &#123;<br>    <span class="hljs-keyword">return</span> numbers.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, curr</span>) =&gt;</span> acc + curr, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">// 输出: 10</span><br></code></pre></td></tr></table></figure><p>拓展运算符可以展开数组或对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> newNums = [...nums, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newNums); <span class="hljs-comment">// 输出: [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h5 id="⭕Promise"><a href="#⭕Promise" class="headerlink" title="⭕Promise"></a>⭕Promise</h5><p>处理异步操作的新方法，允许更清晰地处理成功和失败的结果。</p><h5 id="⭕类（Class）"><a href="#⭕类（Class）" class="headerlink" title="⭕类（Class）"></a>⭕类（Class）</h5><p>引入类的概念，使得创建对象的方式更加清晰。</p><h5 id="⭕模块（Module）"><a href="#⭕模块（Module）" class="headerlink" title="⭕模块（Module）"></a>⭕模块（Module）</h5><p>ES6 提供了模块化的支持，可以使用 <code>export</code> 和 <code>import</code> 语句导出和导入模块。</p><h4 id="0、JS语言特性"><a href="#0、JS语言特性" class="headerlink" title="0、JS语言特性"></a>0、JS语言特性</h4><h5 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h5><p>JS是一种弱类型的语言，变量可以在运行时动态改变类型。</p><h5 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h5><p>JS采用原型链的方式实现继承。</p><p>对象可以通过原型（<code>__proto__</code>）链接到其他对象，从而共享属性和方法</p><h5 id="一等函数"><a href="#一等函数" class="headerlink" title="一等函数"></a>一等函数</h5><p>函数在JS中是“一等公民”，可以被赋值给变量、作为参数传递和作为返回值</p><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>JS中可以实现闭包，指函数可以记住其外部作用域的变量，即使在外部函数已经返回后</p><h5 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h5><p>JS支持异步编程，通过回调函数、Promise和async&#x2F;await处理异步操作</p><h5 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h5><p>JS是事件驱动的，特别是在浏览器环境中，用户交互（如点击、键盘输入等）会触发事件处理程序。</p><h4 id="1、console-info"><a href="#1、console-info" class="headerlink" title="1、console.info()"></a>1、<code>console.info()</code></h4><p><code>console.info()</code> 是 JavaScript 中 <code>console</code> 对象的一个方法，用于在浏览器的开发者工具控制台中输出信息。它的功能类似于 <code>console.log()</code>，但通常用于记录信息级别的日志。</p><h4 id="2、帮你彻底搞懂JS中的prototype、-proto-与constructor（图解）-js-prototype-constructor-CSDN博客"><a href="#2、帮你彻底搞懂JS中的prototype、-proto-与constructor（图解）-js-prototype-constructor-CSDN博客" class="headerlink" title="2、帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）_js prototype constructor-CSDN博客"></a>2、<a href="https://blog.csdn.net/cc18868876837/article/details/81211729?ops_request_misc=%7B%22request_id%22:%224D358ECD-189D-47AA-BE6C-CED4356284C6%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=4D358ECD-189D-47AA-BE6C-CED4356284C6&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81211729-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=prototype&spm=1018.2226.3001.4187">帮你彻底搞懂JS中的prototype、__proto__与constructor（图解）_js prototype constructor-CSDN博客</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 判断 p 是否为 Person 的实例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;sunshine&#x27;</span>)<br>p <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 这里的 p 是 Person 函数构造出来的，所以顺着 p 的原型链可以找到 Object 的构造函数</span><br>p.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br>p.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="proto"><a href="#proto" class="headerlink" title="_ _ proto _ _"></a>_ _ proto _ _</h5><p>是每个对象的内部属性，它指向对象的原型。（任何通过构造函数创建的对象都会有一个__ proto __属性，指向其构造函数的prototype属性）</p><p>当访问对象属性的时候，如果对象没有这个属性，js会查找其__ proto __指向的对象，依次类推，直到找到该属性或达到原型链的顶端（即Object.prototype）</p><p>现在js中，建议使用Object.getPrototypeOf(obj)来获取对象的原型</p><h5 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h5><p>是函数对象的属性，用于定义实例化对象的原型。</p><p>当你向构造函数的prototype添加属性或者方法时，所有通过该构造函数创建的实例都可以访问这些属性或者方法。</p><h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h5><p>是每个对象的属性，指向创建该对象的构造函数。当通过构造函数创建一个对象时，该对象的constructor指向该构造函数。</p><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><p>原型链解决的是继承的问题。</p><p>每个对象都有一个原型，通过dunder proto指向其原型对象，从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向null。这种关系被称为原型链，通过原型链，一个对象可以拥有定义在其他对象中的属性和方法。</p><h4 id="3、Object-assign详解-CSDN博客"><a href="#3、Object-assign详解-CSDN博客" class="headerlink" title="3、Object.assign详解-CSDN博客"></a>3、<a href="https://blog.csdn.net/guxin_duyin/article/details/88916106?ops_request_misc=%7B%22request_id%22:%2251FF465A-6E67-41F2-8FBC-8D29316BCA96%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=51FF465A-6E67-41F2-8FBC-8D29316BCA96&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-88916106-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=object.assign&spm=1018.2226.3001.4187">Object.assign详解-CSDN博客</a></h4><p> <strong><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</strong></p><h4 id="4、看这一篇就够了！-Ajax详解-ajax解析-CSDN博客"><a href="#4、看这一篇就够了！-Ajax详解-ajax解析-CSDN博客" class="headerlink" title="4、看这一篇就够了！-Ajax详解_ajax解析-CSDN博客"></a>4、<a href="https://blog.csdn.net/Oriental_/article/details/104863762?ops_request_misc=%7B%22request_id%22:%22B4AF4373-CC0B-4840-A14D-AA79FED7133B%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=B4AF4373-CC0B-4840-A14D-AA79FED7133B&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-104863762-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=ajax&spm=1018.2226.3001.4187">看这一篇就够了！-Ajax详解_ajax解析-CSDN博客</a></h4><h4 id="5、数据类型"><a href="#5、数据类型" class="headerlink" title="5、数据类型"></a>5、数据类型</h4><p><a href="https://blog.csdn.net/weixin_45811256/article/details/127572573?ops_request_misc=%7B%22request_id%22:%22B81D8FB6-F82B-4874-AF5C-8493977CAD29%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=B81D8FB6-F82B-4874-AF5C-8493977CAD29&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-13-127572573-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95&spm=1018.2226.3001.4187">js中判断数据类型的几种实用方法_js判断类型-CSDN博客</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Boolean</span>([]); <span class="hljs-comment">//true</span><br><span class="hljs-title class_">Number</span>([]); <span class="hljs-comment">//0</span><br><span class="hljs-title class_">Number</span>(&#123;&#125;); <span class="hljs-comment">// NaN</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><p><strong>typeof NaN&#x3D;Number</strong></p><p><strong>NaN!&#x3D;&#x3D;NaN</strong> （Not a Number）</p><p>做减法运算时，有一个是NaN结果就是NaN。</p><p>isNaN()会先将参数转为Number 类型，再判断是否为NaN。</p><ul><li><code>console.log(isNaN(&#39;&#39;));//false</code></li></ul><h4 id="5-1、原始类型和引用类型在函数中的行为"><a href="#5-1、原始类型和引用类型在函数中的行为" class="headerlink" title="5.1、原始类型和引用类型在函数中的行为"></a>5.1、原始类型和引用类型在函数中的行为</h4><p>（没见到有人总结，那我自己浅总结一下吧）</p><p>原始数据类型由于传入的是值的拷贝，所以不会影响外部变量，不详细说了</p><p>由于引用数据类型在函数中是按照引用传递的，所以在函数中直接修改是可能会影响到外部的值的，所以下面来具体情况具体分析一下。</p><h5 id="😕直接修改内部属性的值"><a href="#😕直接修改内部属性的值" class="headerlink" title="😕直接修改内部属性的值"></a>😕直接修改内部属性的值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">modifyReference</span>(<span class="hljs-params">array, object</span>) &#123;<br>    array.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br>    object.<span class="hljs-property">key</span> = <span class="hljs-string">&quot;new value&quot;</span>;<br>&#125;<br><br><span class="hljs-title function_">modifyReference</span>(arr, obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr, obj); <span class="hljs-comment">// 输出: [1, 2, 3, 4] &#123; key: &quot;new value&quot; &#125;</span><br></code></pre></td></tr></table></figure><p>可以看出这样是可以修改外部变量的。</p><h5 id="🙂重新赋值"><a href="#🙂重新赋值" class="headerlink" title="🙂重新赋值"></a>🙂重新赋值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reassignReference</span>(<span class="hljs-params">array, object</span>) &#123;<br>    array = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]; <span class="hljs-comment">// 重新赋值为新数组</span><br>    object = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;new value&quot;</span> &#125;; <span class="hljs-comment">// 重新赋值为新对象</span><br>&#125;<br><br><span class="hljs-title function_">reassignReference</span>(arr, obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr, obj); <span class="hljs-comment">// 输出: [1, 2, 3] &#123; key: &quot;value&quot; &#125;</span><br></code></pre></td></tr></table></figure><p>重新赋值后产生的新变量只在函数作用域中有效，不会影响到外部的arr和obj</p><h5 id="🙂Object-freeze"><a href="#🙂Object-freeze" class="headerlink" title="🙂Object.freeze"></a>🙂Object.freeze</h5><p>可以冻结对象或数组，使其属性不可更改，但是其子属性仍旧可以更改。也就是说，如果一个对象里包含另一个对象，还是可以修改那个对象的值的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">info</span>: &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj)<br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;李四&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)    <span class="hljs-comment">// &#123;info: &#123;a: 1, b: 2&#125;,name: &quot;张三&quot;&#125;</span><br>obj.<span class="hljs-property">info</span>.<span class="hljs-property">a</span> = <span class="hljs-number">66</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">info</span>)   <span class="hljs-comment">// &#123;a: 66, b: 2&#125;</span><br></code></pre></td></tr></table></figure><h5 id="🙂深拷贝"><a href="#🙂深拷贝" class="headerlink" title="🙂深拷贝"></a>🙂深拷贝</h5><p>深拷贝的对象被修改不会影响原对象，而浅拷贝会。</p><h4 id="5-2、数组类型详解"><a href="#5-2、数组类型详解" class="headerlink" title="5.2、数组类型详解"></a>5.2、数组类型详解</h4><ul><li>JavaScript 数组是<strong>可调整大小</strong>的，并且可以**包含不同的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">数据类型</a>**。（当不需要这些特征时，可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Typed_arrays">类型化数组</a>。）</li><li>JavaScript 数组不是关联数组，因此，<strong>不能使用任意字符串作为索引</strong>访问数组元素，但必须使用非负整数（或它们各自的字符串形式）作为索引访问。</li><li>JavaScript 数组的<a href="https://zh.wikipedia.org/zh-cn/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E7%9A%84%E7%B7%A8%E8%99%9F">索引从 0 开始</a>：数组的第一个元素在索引 <code>0</code> 处，第二个在索引 <code>1</code> 处，以此类推，最后一个元素是数组的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/length"><code>length</code></a> 属性减去 <code>1</code> 的值。</li><li>JavaScript <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E5%A4%8D%E5%88%B6%E6%95%B0%E7%BB%84">数组复制操作</a>创建<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Shallow_copy">浅拷贝</a>。（<em>所有</em> JavaScript 对象的标准内置复制操作都会创建浅拷贝，而不是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Deep_copy">深拷贝</a>）。</li></ul><h5 id="定义和创建"><a href="#定义和创建" class="headerlink" title="定义和创建"></a>定义和创建</h5><ul><li><p>数组字面量方法：<code>const fruits = [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;];</code></p></li><li><p>Array构造函数：</p><ul><li><p><code>new Array(1, 2, 3)</code>（ [ 1 , 2 , 3 ] ）</p></li><li><p><code>new Array(5)</code>（长度为5的空数组）</p></li></ul></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split"><code>String.prototype.split()</code></a>：<code>const fruits3 = &quot;Apple, Banana&quot;.split(&quot;, &quot;);</code></p></li></ul><h4 id="5-2、String类型"><a href="#5-2、String类型" class="headerlink" title="5.2、String类型"></a>5.2、String类型</h4><h4 id="6、JSON-stringfy和JSON-parse"><a href="#6、JSON-stringfy和JSON-parse" class="headerlink" title="6、JSON.stringfy和JSON.parse"></a>6、JSON.stringfy和JSON.parse</h4><p>🐼<code>JSON.stringfy</code></p><blockquote><p>JSON.stringify(value[, replacer[, space]])</p></blockquote><ul><li>用途：将 JavaScript 对象转换为 JSON 字符串，方便存储和传输。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">job</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">&quot;reading&quot;</span>, <span class="hljs-string">&quot;traveling&quot;</span>] &#125;;<br><span class="hljs-keyword">const</span> jsonString = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonString); <br><span class="hljs-comment">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:null,&quot;hobbies&quot;:[&quot;reading&quot;,&quot;traveling&quot;]&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>特殊行为</p><ul><li><p><code>undefined</code>：在对象中，值为 <code>undefined</code> 的属性会被忽略。</p></li><li><p>函数：如果对象包含函数，函数会被忽略。</p></li><li><p><code>symbol</code>：如果对象包含 <code>symbol</code> 类型的属性，属性会被忽略。</p></li><li><p><code>null</code>：会被保留，转换为 JSON 字符串中的 <code>null</code>。</p></li><li><p>数组：会被正常序列化。</p></li></ul></li></ul><p>🐻‍❄️<code>JSON.parse</code></p><blockquote><p>JSON.parse(text[, reviver])</p></blockquote><ul><li><p>用途：将 JSON 字符串解析为 JavaScript 对象，方便在程序中使用。</p></li><li><p>特殊行为：</p><ul><li><p><code>null</code>：解析字符串 <code>&quot;null&quot;</code> 会返回 <code>null</code>。</p></li><li><p>不支持 <code>undefined</code>：如果 JSON 字符串包含 <code>undefined</code>，解析会失败。</p></li><li><p>错误处理：如果传入的字符串不是有效的 JSON，<code>JSON.parse</code> 会抛出错误。</p></li></ul></li></ul><h4 id="7、V8垃圾回收"><a href="#7、V8垃圾回收" class="headerlink" title="7、V8垃圾回收"></a>7、V8垃圾回收</h4><blockquote><p>V8 是 Google 开发的高性能 JavaScript 引擎，广泛应用于 Chrome 浏览器和 Node.js。V8 的垃圾回收机制（Garbage Collection, GC）旨在自动管理内存，以确保不再使用的对象能够被清除，从而释放内存空间。</p></blockquote><h5 id="🕊️基本概念"><a href="#🕊️基本概念" class="headerlink" title="🕊️基本概念"></a>🕊️基本概念</h5><ul><li>垃圾回收：指的是自动释放不再使用的内存空间，防止内存泄漏和提高内存使用效率。</li><li>根对象：包括全局对象、活动函数的局部变量等，垃圾回收的起点。</li></ul><h5 id="🕊️回收机制"><a href="#🕊️回收机制" class="headerlink" title="🕊️回收机制"></a>🕊️回收机制</h5><ul><li><p>标记-清除</p><ul><li><p>标记阶段：从根对象开始遍历所有可达对象，并标记它们为“存活”</p></li><li><p>清除阶段：扫描堆内存，将未被标记的对象（不可达对象）清除，释放内存</p></li></ul></li><li><p>分代收集</p><ul><li>V8 将内存分为两个主要区域：<strong>新生代</strong>（Young Generation）和<strong>老生代</strong>（Old Generation）。</li><li>新生代中的对象是短暂的，频繁进行垃圾回收；老生代中的对象则相对长寿，收集频率较低。</li></ul></li><li><p>新生代垃圾回收</p><ul><li><strong>Scavenge 算法</strong>：使用复制算法，在新生代中，活着的对象会从一个内存区域复制到另一个区域，释放原来的区域内存。可以快速清理不再使用的对象。</li></ul></li><li><p>老生代垃圾回收</p><ul><li><strong>Mark-Sweep 和 Mark-Compact</strong>：在老生代中，V8 会使用标记-清除和标记-压缩算法。标记-压缩会整理存活对象，以消除内存碎片。</li></ul></li></ul><h5 id="🕊️垃圾回收的触发"><a href="#🕊️垃圾回收的触发" class="headerlink" title="🕊️垃圾回收的触发"></a>🕊️垃圾回收的触发</h5><ul><li>内存压力：当内存使用达到一定阈值时，触发垃圾回收。</li><li>手动触发：在 Node.js 中可以通过 <code>global.gc()</code> 手动触发垃圾回收（需启动时加上 <code>--expose-gc</code> 标志）。</li></ul><h5 id="🕊️优化"><a href="#🕊️优化" class="headerlink" title="🕊️优化"></a>🕊️优化</h5><blockquote><p>减少停顿时间和内存使用</p></blockquote><ul><li>增量回收：将回收过程分成多个小步骤，减少长时间的停顿。</li><li>并行回收：在多线程环境中，部分垃圾回收过程可以并行进行，以提高效率。</li></ul><h4 id="8、防抖和节流"><a href="#8、防抖和节流" class="headerlink" title="8、防抖和节流"></a>8、防抖和节流</h4><blockquote><p><strong>防抖（Debounce）</strong>和<strong>节流（Throttle）</strong>是两种常用的性能优化技术，主要用于控制函数执行的频率，尤其是在处理高频事件（如滚动、输入、窗口大小变化等）时。</p></blockquote><h5 id="🐻‍❄️防抖："><a href="#🐻‍❄️防抖：" class="headerlink" title="🐻‍❄️防抖："></a>🐻‍❄️防抖：</h5><p>防抖是一种延迟执行的技术，用于确保事件处理函数在一段时间内不会被频繁调用，只有在事件停止触发后，防抖函数才会执行一次。（如用户输入时只有停止输入后再进行搜索）</p><p>工作原理：</p><ul><li>当事件被触发时，防抖函数会启动一个计数器。</li><li>如果在计数器到期之前事件被再次触发，计数器将被重置。</li><li>只有在事件停止触发超过设定时间后，事件处理函数才会被调用。</li></ul><p>应用场景：</p><ul><li>输入框的变化；</li><li>窗口调整大小；</li></ul><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn,delay</span>) &#123;<br>   <span class="hljs-keyword">let</span> timer;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>)&#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timer);<br>      timer=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>         fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args);<br>      &#125;,delay);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="🐨节流："><a href="#🐨节流：" class="headerlink" title="🐨节流："></a>🐨节流：</h5><p>节流是一种控制函数执行频率的技术，用于确保事件处理函数在一定时间间隔内只被调用一次。（如用户滚动界面时控制频率，API请求时限制请求频率）。</p><p>工作原理：</p><ul><li>节流函数在时间触发时会立即执行，并且在设定的时间间隔内，不管事件触发多少次都不会再执行。在时间间隔结束后，下一次事件触发时函数会再次执行。</li></ul><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn,interval</span>)&#123;<br>   <span class="hljs-keyword">let</span> lastTime=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>      <span class="hljs-keyword">const</span> now=<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>      <span class="hljs-keyword">if</span>(now-lastTime&gt;=interval)&#123;<br>         lastTime=now;<br>         fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9、call、apply、bind"><a href="#9、call、apply、bind" class="headerlink" title="9、call、apply、bind"></a>9、call、apply、bind</h4><h5 id="🦔this"><a href="#🦔this" class="headerlink" title="🦔this"></a>🦔this</h5><p><code>this</code> 指的是当前执行上下文的对象。它的值取决于<strong>函数是如何调用的</strong>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>    <span class="hljs-attr">greet</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//this指向person对象</span><br>person.<span class="hljs-title function_">greet</span>(); <span class="hljs-comment">// 输出 &quot;Hello, Alice&quot;</span><br><span class="hljs-comment">//this指向默认的全局对象。在浏览器中是window对象，在Node.js中是global对象</span><br><span class="hljs-keyword">const</span> greetFn=person.<span class="hljs-property">greet</span>;<br><span class="hljs-title function_">greetFn</span>();   <span class="hljs-comment">//输出 &quot;Hello, undefined&quot; 或 &quot;Hello, [global object]&quot;</span><br></code></pre></td></tr></table></figure><h5 id="🦔call、apply、bind的作用"><a href="#🦔call、apply、bind的作用" class="headerlink" title="🦔call、apply、bind的作用"></a>🦔call、apply、bind的作用</h5><p>它们的作用是显式地设置函数执行时的<code>this</code>值。简单来说：</p><ul><li>call：立即调用函数，参数一个个传递</li><li>apply：立即调用函数，参数以数组的形式传递</li><li>bind：不立即调用函数，而是返回一个可以稍后再调用的新函数，可以固定<code>this</code>和部分参数</li></ul><h5 id="🦔call"><a href="#🦔call" class="headerlink" title="🦔call"></a>🦔call</h5><p>允许调用一个函数并明确指定函数内部this的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">fn.<span class="hljs-title function_">call</span>(thisArg, arg1, arg2, ...);<br></code></pre></td></tr></table></figure><ul><li><code>thisArg</code>：指定 <code>this</code> 的值。</li><li><code>arg1, arg2, ...</code>：传给函数的参数，一个一个传递。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person1 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>    <span class="hljs-attr">greet</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">greeting</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(greeting + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> person2 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span> &#125;;<br><br><span class="hljs-comment">// 使用 call 方法来调用 greet 并改变 this 指向</span><br>person1.<span class="hljs-property">greet</span>.<span class="hljs-title function_">call</span>(person2, <span class="hljs-string">&#x27;Hi&#x27;</span>); <span class="hljs-comment">// 输出 &quot;Hi, Bob&quot;</span><br></code></pre></td></tr></table></figure><h5 id="🦔apply"><a href="#🦔apply" class="headerlink" title="🦔apply"></a>🦔apply</h5><p>和call的唯一区别是传递参数的方式不同，apply<strong>使用数组</strong>来传递参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">fn.<span class="hljs-title function_">apply</span>(thisArg, [argsArray]);<br></code></pre></td></tr></table></figure><h5 id="🦔bind"><a href="#🦔bind" class="headerlink" title="🦔bind"></a>🦔bind</h5><p>bind不会立即调用函数，而是<strong>返回一个新的函数</strong>，并且这个新的函数中的 <code>this</code> 已经被固定了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newFn=fn.<span class="hljs-title function_">bind</span>(thisArg,arg1,arg2,...)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用 bind 方法</span><br><span class="hljs-keyword">const</span> greetBob = person1.<span class="hljs-property">greet</span>.<span class="hljs-title function_">bind</span>(person2, <span class="hljs-string">&#x27;Hi&#x27;</span>);<br><br><span class="hljs-comment">// greetBob 现在是一个新的函数，并且 this 始终指向 person2</span><br><span class="hljs-title function_">greetBob</span>(); <span class="hljs-comment">// 输出 &quot;Hi, Bob&quot;</span><br><br><span class="hljs-built_in">setTimeout</span>(greetBob, <span class="hljs-number">1000</span>); <span class="hljs-comment">// 一秒后输出 &quot;Hi, Bob&quot;</span><br></code></pre></td></tr></table></figure><p>即使在异步调用中，this也指向person2。</p><h4 id="10、闭包"><a href="#10、闭包" class="headerlink" title="10、闭包"></a>10、闭包</h4><p>简单来说，闭包就是<strong>一个函数以及他对外部变量的引用</strong>，这个函数能够”<strong>记住</strong>“它创建时的环境（作用域）。即使这个函数执行完成，或者它被传递到其他地方执行，他仍然可以访问在定义时的作用域中的变量。</p><h5 id="🕸️特性："><a href="#🕸️特性：" class="headerlink" title="🕸️特性："></a>🕸️特性：</h5><ul><li>函数嵌套函数</li><li>函数内部可以引用函数外部的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul><h5 id="🕸️优点"><a href="#🕸️优点" class="headerlink" title="🕸️优点"></a>🕸️优点</h5><ul><li>保护函数内的变量安全，实现封装，防止变量流入其他环境发生命名冲突。</li><li>在回调函数和事件处理函数中非常常用，它可以保留对当前作用域的访问</li><li>可以访问和保留外部函数作用域中的变量</li><li>可以帮助解决异步回调中变量值的保存问题</li><li>在早期 JavaScript 版本（ES6 之前）中没有 <code>let</code> 和 <code>const</code> 来创建块级作用域，但闭包可以用来模拟这种行为。</li></ul><h5 id="🕸️缺点"><a href="#🕸️缺点" class="headerlink" title="🕸️缺点"></a>🕸️缺点</h5><ul><li>如果不小心滥用闭包，可能会导致内存泄漏，因为闭包会持有对外部变量的引用，使这些变量不会被垃圾回收。</li><li>对于闭包的滥用，代码的可读性可能会下降，维护起来更复杂。</li></ul><h4 id="11、setTimeout-和-setInterval"><a href="#11、setTimeout-和-setInterval" class="headerlink" title="11、setTimeout 和 setInterval"></a>11、setTimeout 和 setInterval</h4><h5 id="🍁setTimeout"><a href="#🍁setTimeout" class="headerlink" title="🍁setTimeout"></a>🍁setTimeout</h5><p>在一定时间之后执行<strong>一次</strong>代码，接收两个参数：回调函数和delay（等待时间）</p><ul><li>取消：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> timeoutId = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;This will not be shown&quot;</span>);<br>&#125;, <span class="hljs-number">3000</span>);<br><br><span class="hljs-built_in">clearTimeout</span>(timeoutId); <span class="hljs-comment">// 在计时结束前取消</span><br></code></pre></td></tr></table></figure><h5 id="🍁setInterval"><a href="#🍁setInterval" class="headerlink" title="🍁setInterval"></a>🍁setInterval</h5><p>每隔一段时间<strong>重复</strong>执行代码。</p><ul><li>取消：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;This will be shown repeatedly every 2 seconds&quot;</span>);<br>&#125;, <span class="hljs-number">2000</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">clearInterval</span>(intervalId); <span class="hljs-comment">// 在 6 秒后取消 `setInterval`</span><br>&#125;, <span class="hljs-number">6000</span>);<br></code></pre></td></tr></table></figure><h5 id="🍁注意"><a href="#🍁注意" class="headerlink" title="🍁注意"></a>🍁注意</h5><ul><li><strong>精度问题</strong>：<code>setTimeout</code> 和 <code>setInterval</code> 的精度不高。尽管你设定了一个 1000 毫秒的延迟，实际执行时间可能会有一些误差，尤其在 JavaScript 的事件循环中，如果前面的任务阻塞了主线程，定时器的执行会被延后。</li><li><strong>setInterval 的问题</strong>：如果某次定时任务的执行时间超过了间隔时间，可能会导致下一个任务的执行时间被推迟，从而出现定时不准的情况。因此在有些情况下（例如要控制任务的精度），递归使用 <code>setTimeout</code> 是更好的选择。</li><li><strong>递归 setTimeout 优于 setInterval</strong>：若需要在每次定时任务完成之后再进行下一次任务时，使用递归 <code>setTimeout</code> 更好，因为它可以确保上一次任务完成后再开始下一次。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">repeatTask</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Task executed&quot;</span>);<br>      <span class="hljs-title function_">repeatTask</span>(); <span class="hljs-comment">//再次调用</span><br>   &#125;，<span class="hljs-number">1000</span>)；<br>&#125;<br><span class="hljs-title function_">repeatTask</span>()<br></code></pre></td></tr></table></figure><h4 id="12、Promise"><a href="#12、Promise" class="headerlink" title="12、Promise"></a>12、Promise</h4><blockquote><p><code>Promise</code> 是 JavaScript 中处理<strong>异步操作</strong>的一种方式。它提供了一种更清晰、结构化的方式来处理异步任务的结果，避免了回调地狱问题，并且让代码更易读易维护。</p></blockquote><h5 id="☀️什么是Promise"><a href="#☀️什么是Promise" class="headerlink" title="☀️什么是Promise"></a>☀️什么是Promise</h5><p>Promise是一个代表异步操作的对象。有三种状态：</p><ul><li>Pending（待定）：初始状态，操作未完成</li><li>Fulfilled（已兑现）：操作成功完成，并返回了一个值</li><li>Rejected（已拒绝）：操作失败，返回了一个拒绝（错误）原因</li></ul><p> Promise <strong>不可变</strong>：Promise 的状态一旦从 Pending 转为 Fulfilled 或 Rejected 就不会再改变</p><h5 id="🌤️基本用法"><a href="#🌤️基本用法" class="headerlink" title="🌤️基本用法"></a>🌤️基本用法</h5><p>通过Promise构造函数来创建一个Promise实例。构造函数接受一个执行器函数（executor），该函数有两个参数：</p><ul><li>resolve：当异步操作成功时调用，将 Promise 状态改为 Fulfilled。</li><li>reject：当异步操作失败时调用，将 Promise 状态改为 Rejected。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>   <span class="hljs-keyword">let</span> success=<span class="hljs-literal">true</span>;<br>   <br>   <span class="hljs-keyword">if</span>(success)&#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;Task succeeded&quot;</span>);<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;Task failed&quot;</span>);<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="🌥️方法"><a href="#🌥️方法" class="headerlink" title="🌥️方法"></a>🌥️方法</h5><ul><li>.then：用于指定成功时的回调函数。</li><li>.catch：用于指定失败时的回调函数</li><li>finally：无论成功失败都执行；主要用于执行一些清理操作。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">promise<br>   .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Success&quot;</span>: value);<br>   &#125;)<span class="hljs-comment">//可以添加处理失败的情况，但是不常用</span><br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error&quot;</span>: error);<br>&#125;)<br>.<span class="hljs-title function_">finally</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Operation complete&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="☁️链式调用"><a href="#☁️链式调用" class="headerlink" title="☁️链式调用"></a>☁️链式调用</h5><blockquote><p>自动封装：如果在.then()中返回一个普通值，它会被自动封装成一个新的Promise</p></blockquote><p>当一个then返回一个新的promise的时候，可以继续在后面调用then进行处理。后续的.then()会等待这个promise解决后再执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>);<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><br>promise<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">// 输出 1</span><br>    <span class="hljs-keyword">return</span> value + <span class="hljs-number">1</span>; <span class="hljs-comment">// 返回 2</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">newValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue); <span class="hljs-comment">// 输出 2</span><br>    <span class="hljs-keyword">return</span> newValue + <span class="hljs-number">1</span>; <span class="hljs-comment">// 返回 3</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">finalValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(finalValue); <span class="hljs-comment">// 输出 3</span><br>  &#125;);<br></code></pre></td></tr></table></figure><h5 id="🌧️常用静态方法"><a href="#🌧️常用静态方法" class="headerlink" title="🌧️常用静态方法"></a>🌧️常用静态方法</h5><ul><li>Promise.all()</li></ul><p>接收一个包含多个Promise的数组（或可迭代对象），并返回一个新的Promise。当所有Promise都成功时返回的状态才会是Fulfilled，并且所有Promise的结果会以数组形式返回。如果有一个Promise失败，返回的状态就会立即变成Rejected，并返回失败的原因。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise1=<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> promise2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span><span class="hljs-built_in">setTimeout</span>(resolve,<span class="hljs-number">1000</span>,<span class="hljs-number">2</span>));<br><span class="hljs-keyword">const</span> promise3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span><span class="hljs-built_in">setTimeout</span>(resolve,<span class="hljs-number">2000</span>,<span class="hljs-number">3</span>));<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([promise1,promise2,promise3]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">values</span>)=&gt;</span>&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(values); <span class="hljs-comment">//[1,2,3]</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>Promise.any()</li></ul><p>任何一个promise兑现时兑现，全部被拒绝时才会拒绝</p><ul><li>Promise.race()</li></ul><p>也接收一个包含多个Promise的数组，但只要其中一个Promise解决或拒绝，就返回结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;first&quot;</span>));<br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve,<span class="hljs-number">500</span>,<span class="hljs-string">&quot;second&quot;</span>));<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([promise1, promise2]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">// &quot;second&quot; (因为 promise2 更快解决)</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>Promise.allSettled()</li></ul><p>当所有 Promise 都完成（无论是成功还是失败）时，返回的 Promise 状态才会是Fulfilled。与 <code>Promise.all()</code> 不同的是，它不会在有一个 Promise 失败时立即失败，而是等到所有 Promise 都完成之后，返回每个 Promise 的状态和结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;error&quot;</span>);<br><span class="hljs-keyword">const</span> promise3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">1000</span>, <span class="hljs-number">3</span>));<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>([promise1, promise2, promise3]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">results</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>  <span class="hljs-comment">// [</span><br>  <span class="hljs-comment">//   &#123; status: &#x27;fulfilled&#x27;, value: 1 &#125;,</span><br>  <span class="hljs-comment">//   &#123; status: &#x27;rejected&#x27;, reason: &#x27;error&#x27; &#125;,</span><br>  <span class="hljs-comment">//   &#123; status: &#x27;fulfilled&#x27;, value: 3 &#125;</span><br>  <span class="hljs-comment">// ]</span><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="🌈其他（有些不解）"><a href="#🌈其他（有些不解）" class="headerlink" title="🌈其他（有些不解）"></a>🌈其他（有些不解）</h5><ul><li><code>promise.then().then().then()</code> 结构使得错误能够被捕获并集中处理，任何一个 <code>then</code> 中的错误都会被链中的 <code>catch</code> 捕获。</li><li>使用 <code>new Promise((resolve, reject) =&gt; &#123; ... &#125;)</code> 允许你在定义异步操作的过程中控制 Promise 的状态，成功和失败的状态可以直接通过调用 <code>resolve</code> 和 <code>reject</code> 来管理，从而实现代码的截断。</li></ul><h4 id="13、深拷贝和浅拷贝"><a href="#13、深拷贝和浅拷贝" class="headerlink" title="13、深拷贝和浅拷贝"></a>13、深拷贝和浅拷贝</h4><h5 id="🦛浅拷贝"><a href="#🦛浅拷贝" class="headerlink" title="🦛浅拷贝"></a>🦛浅拷贝</h5><blockquote><p>对象的<strong>浅拷贝</strong>是属性与拷贝的源对象属性共享相同的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Object_reference">引用</a>（指向相同的底层值）的副本。因此，当你更改源对象或副本时，也可能导致另一个对象发生更改。与之相比，在<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Deep_copy">深拷贝</a>中，源对象和副本是完全独立的。</p></blockquote><p>对于浅拷贝，只有顶层属性被复制，而不是嵌套对象的值。因此：</p><ul><li>对副本的顶层属性的重新赋值不会影响源对象。</li><li>对副本的嵌套对象属性的重新赋值会影响源对象。</li></ul><p>在 JavaScript 中，所有标准内置对象复制操作（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax">扩展语法</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"><code>Array.prototype.concat()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"><code>Array.prototype.slice()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from"><code>Array.from()</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"><code>Object.assign()</code></a>）都创建浅拷贝，而不是深拷贝。</p><p>除此之外，这些也是浅拷贝</p><ul><li>使用拓展运算符：const shallowCopy &#x3D; { …obj1 }</li><li>直接相等：obj1&#x3D;obj2</li></ul><h5 id="🦛深拷贝"><a href="#🦛深拷贝" class="headerlink" title="🦛深拷贝"></a>🦛深拷贝</h5><p>定义深拷贝：</p><ol><li>它们不是同一个对象（<code>o1 !== o2</code>）。</li><li><code>o1</code> 和 <code>o2</code> 的属性具有相同的名称且顺序相同。</li><li>它们的属性的值是彼此的深拷贝。</li><li>它们的原型链是结构等价的。</li></ol><ul><li>方法一：JSON.parse(JSON.stringify())<ul><li>对象的属性是函数时无法拷贝</li><li>原型链上的属性无法拷贝</li><li>无法处理Date&#x2F;RegExp这种复杂类型</li><li>会忽略Symbol和undefined</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ingredients_list = [<span class="hljs-string">&quot;noodles&quot;</span>, &#123; <span class="hljs-attr">list</span>: [<span class="hljs-string">&quot;eggs&quot;</span>, <span class="hljs-string">&quot;flour&quot;</span>, <span class="hljs-string">&quot;water&quot;</span>] &#125;];<br><span class="hljs-keyword">let</span> ingredients_list_deepcopy = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(ingredients_list));<br></code></pre></td></tr></table></figure><ul><li>方法二：structuredClone()（支持Date等复杂类型）</li><li>方法三：Lodash的_.cloneDeep（不支持DOM节点等特定对象）</li></ul><h4 id="14、箭头函数"><a href="#14、箭头函数" class="headerlink" title="14、箭头函数"></a>14、箭头函数</h4><ul><li>箭头函数没有独立的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this"><code>this</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments"><code>arguments</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super"><code>super</code></a> <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Binding">绑定</a>，并且不可被用作<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Method">方法</a>。</li><li>箭头函数不能用作<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Constructor">构造函数</a>。使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new"><code>new</code></a> 调用它们会引发 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError"><code>TypeError</code></a>。它们也无法访问 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target"><code>new.target</code></a> 关键字。</li><li>箭头函数不能在其主体中使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/yield"><code>yield</code></a>，也不能作为生成器函数创建。</li></ul><p>以下三种情况访问this不会输出undefined：</p><h5 id="🦤在类中使用箭头函数"><a href="#🦤在类中使用箭头函数" class="headerlink" title="🦤在类中使用箭头函数"></a>🦤在类中使用箭头函数</h5><p>在类的方法中定义箭头函数，箭头函数会继承类实例的 <code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>=value;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">func</span>=<span class="hljs-function">()=&gt;</span>&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>      &#125;<br>   &#125;<br>&#125;<br><span class="hljs-keyword">const</span> instance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>(<span class="hljs-number">42</span>);<br>instance.<span class="hljs-title function_">func</span>();   <span class="hljs-comment">//输出42</span><br></code></pre></td></tr></table></figure><h5 id="🦤在另一个函数的作用域中定义箭头函数"><a href="#🦤在另一个函数的作用域中定义箭头函数" class="headerlink" title="🦤在另一个函数的作用域中定义箭头函数"></a>🦤在另一个函数的作用域中定义箭头函数</h5><p>如果在一个函数内定义箭头函数，<code>this</code> 将指向该函数的上下文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">value</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>   &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> fun=<span class="hljs-title function_">func</span>(<span class="hljs-number">42</span>);<br><span class="hljs-title function_">fun</span>();   <span class="hljs-comment">//输出42</span><br></code></pre></td></tr></table></figure><h5 id="🦤在-setTimeout-中使用箭头函数"><a href="#🦤在-setTimeout-中使用箭头函数" class="headerlink" title="🦤在 setTimeout 中使用箭头函数"></a>🦤在 setTimeout 中使用箭头函数</h5><p>如果在 <code>setTimeout</code> 等异步函数中使用箭头函数，它会继承 <code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj=&#123;<br>   <span class="hljs-attr">value</span>: <span class="hljs-number">42</span>,<br>   <span class="hljs-attr">func</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>      &#125;,<span class="hljs-number">1000</span>);<br>   &#125;<br>&#125;<br>obj.<span class="hljs-title function_">func</span>();  <span class="hljs-comment">//一秒后输出42</span><br></code></pre></td></tr></table></figure><h4 id="15、如何判断是数组"><a href="#15、如何判断是数组" class="headerlink" title="15、如何判断是数组"></a>15、如何判断是数组</h4><ul><li>Array.isArray() （最推荐的方法，返回true&#x2F;false）</li><li>instanceof（arr instanceof Array）（返回true&#x2F;false）</li><li>Object.prototype.toString.call()</li><li>constructor（arr.constructor&#x3D;&#x3D;&#x3D;Array）（返回true&#x2F;false）</li></ul><h4 id="16、for-in和for-of和forEach"><a href="#16、for-in和for-of和forEach" class="headerlink" title="16、for in和for of和forEach"></a>16、for in和for of和forEach</h4><h5 id="🐥for-in"><a href="#🐥for-in" class="headerlink" title="🐥for in"></a>🐥for in</h5><p><code>for...in</code> 用于遍历对象的可枚举属性，包括对象自身的属性和继承自原型链的属性。</p><ul><li><code>for...in</code> 循环会遍历对象的所有可枚举属性，包括继承的属性。</li><li>使用 <code>hasOwnProperty</code> 方法可以避免遍历原型链上的属性。</li><li>不建议用 <code>for...in</code> 遍历数组，因为它会遍历数组的索引，且不保证顺序。</li></ul><h5 id="🐥for-of"><a href="#🐥for-of" class="headerlink" title="🐥for of"></a>🐥for of</h5><p><code>for...of</code> 用于遍历可迭代对象（如数组、字符串、Map、Set 等），获取其值。</p><ul><li><code>for...of</code> 只会遍历可迭代对象的值，不会遍历对象的属性。</li><li>适合用于数组、字符串等数据结构的遍历。</li></ul><h5 id="🐥forEach"><a href="#🐥forEach" class="headerlink" title="🐥forEach"></a>🐥forEach</h5><p>是一种迭代方法，按照索引升序为数组中的每个元素调用一次提供的callbackFn函数。它总是返回undefined，而不能链式调用。（不会在空槽上调用）</p><p>除非抛出异常，否则没有办法停止或中断 <code>forEach()</code> 循环。如果有这样的需求，则不应该使用 <code>forEach()</code> 方法。</p><p><code>forEach()</code> 期望的是一个同步函数，它不会等待 Promise 兑现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ratings = [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sumFunction</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">a, b</span>) =&gt; a + b;<br><br>ratings.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">async</span> (rating) =&gt; &#123;<br>  sum = <span class="hljs-keyword">await</span> <span class="hljs-title function_">sumFunction</span>(sum, rating);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum);<br><span class="hljs-comment">// 期望的输出：14</span><br><span class="hljs-comment">// 实际的输出：0</span><br></code></pre></td></tr></table></figure><h4 id="17、async-await"><a href="#17、async-await" class="headerlink" title="17、async&#x2F;await"></a>17、async&#x2F;await</h4><p><code>async</code>：用于声明一个函数为异步函数。异步函数会返回一个 <code>Promise</code>，即使函数内部没有明确返回 <code>Promise</code>，JavaScript 也会自动将其转换为 <code>Promise</code>。（不一定要和await一起）</p><p><code>await</code>：用于等待一个 <code>Promise</code> 被解决（fulfilled）或被拒绝（rejected）。**<code>await</code> 只能在 <code>async</code> 函数内部使用**。</p><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchData</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;错误:&quot;</span>, error);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">getData</span>();<br></code></pre></td></tr></table></figure><h5 id="结合promise"><a href="#结合promise" class="headerlink" title="结合promise"></a>结合promise</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchAllData</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> [data1, data2] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.example.com/data1&#x27;</span>),<br>            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.example.com/data2&#x27;</span>)<br>        ]);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1, data2);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;错误:&quot;</span>, error);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">fetchAllData</span>();<br></code></pre></td></tr></table></figure><h4 id="18、arguments"><a href="#18、arguments" class="headerlink" title="18、arguments"></a>18、arguments</h4><blockquote><p><code>arguments</code> 是一个<strong>类数组对象</strong>，代表传递给函数的所有参数。它在函数内部可用，用于访问函数的参数，无论参数是如何传递的</p></blockquote><h5 id="🦩基本用法"><a href="#🦩基本用法" class="headerlink" title="🦩基本用法"></a>🦩基本用法</h5><p>在函数内部，可以使用 <code>arguments</code> 关键字来访问传入的参数。<code>arguments</code> 是一个类似数组的对象，但不是数组，因此没有数组的方法，比如 <code>push</code>、<code>pop</code> 等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">exampleFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 打印所有传入的参数</span><br>&#125;<br><br><span class="hljs-title function_">exampleFunction</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 输出: [1, 2, 3, &quot;hello&quot;]</span><br></code></pre></td></tr></table></figure><h5 id="🦩转换为数组"><a href="#🦩转换为数组" class="headerlink" title="🦩转换为数组"></a>🦩转换为数组</h5><ul><li>使用Array.from：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">exampleFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> argsArray = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(argsArray); <span class="hljs-comment">// [1,2,3]</span><br>&#125;<br><span class="hljs-title function_">exampleFunction</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><ul><li>使用拓展运算符：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">exampleFunction</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args); <br>&#125;<br><span class="hljs-title function_">exampleFunction</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="19、this的指向和绑定规则"><a href="#19、this的指向和绑定规则" class="headerlink" title="19、this的指向和绑定规则"></a>19、this的指向和绑定规则</h4><h5 id="🐥全局上下文"><a href="#🐥全局上下文" class="headerlink" title="🐥全局上下文"></a>🐥全局上下文</h5><p>在全局作用域中，<code>this</code> 指向全局对象：</p><ul><li>在浏览器中，<code>this</code> 指向 <code>window</code> 对象。</li><li>在 Node.js 中，<code>this</code> 指向 <code>global</code> 对象。</li></ul><h5 id="🐥函数调用"><a href="#🐥函数调用" class="headerlink" title="🐥函数调用"></a>🐥函数调用</h5><p>在普通函数中调用 <code>this</code>，它指向调用该函数的对象。如果函数是通过对象调用的，<code>this</code> 指向该对象；如果是全局调用，<code>this</code> 指向全局对象（在严格模式下为 <code>undefined</code>）。</p><h5 id="🐥对象方法"><a href="#🐥对象方法" class="headerlink" title="🐥对象方法"></a>🐥对象方法</h5><p>当一个方法被调用时，<code>this</code> 指向调用该方法的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>  <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;;<br><br>person.<span class="hljs-title function_">greet</span>(); <span class="hljs-comment">// 输出 &quot;Hello, Alice&quot;</span><br></code></pre></td></tr></table></figure><h5 id="🐥构造函数"><a href="#🐥构造函数" class="headerlink" title="🐥构造函数"></a>🐥构造函数</h5><p>当通过new关键字调用构造函数的时候，this指向新创建的实例对象</p><h5 id="🐥箭头函数"><a href="#🐥箭头函数" class="headerlink" title="🐥箭头函数"></a>🐥箭头函数</h5><p>箭头函数没有自己的this，他从外部上下文（定义时的上下文）继承this的值</p><h5 id="🐥call、apply、bind"><a href="#🐥call、apply、bind" class="headerlink" title="🐥call、apply、bind"></a>🐥call、apply、bind</h5><p> <code>call</code>、<code>apply</code> 和 <code>bind</code> 方法来显式地绑定 <code>this</code> 的指向。</p><h5 id="🐥事件处理程序"><a href="#🐥事件处理程序" class="headerlink" title="🐥事件处理程序"></a>🐥事件处理程序</h5><p>在事件处理程序中，<code>this</code> 通常指向触发事件的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> button=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myButton&#x27;</span>);<br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);   <span class="hljs-comment">//指向button元素</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="🐥严格模式"><a href="#🐥严格模式" class="headerlink" title="🐥严格模式"></a>🐥严格模式</h5><ul><li>未绑定的 <code>this</code> 在函数中会是 <code>undefined</code>，而不是全局对象。</li><li>如果希望在函数中访问 <code>this</code>，应该将其作为对象的方法调用，或者使用 <code>bind</code> 进行绑定。局部变量不会影响 <code>this</code> 的上下文。</li></ul><h4 id="20、如何解决script标签阻碍DOM的解析"><a href="#20、如何解决script标签阻碍DOM的解析" class="headerlink" title="20、如何解决script标签阻碍DOM的解析"></a>20、如何解决script标签阻碍DOM的解析</h4><h5 id="🐵使用defer属性"><a href="#🐵使用defer属性" class="headerlink" title="🐵使用defer属性"></a>🐵使用defer属性</h5><p>当在 <code>&lt;script&gt;</code> 标签中添加 <code>defer</code> 属性时，浏览器会在 HTML 解析完成后再执行脚本。此时，DOM 已经构建完成，因此可以安全地操作 DOM。</p><h5 id="🐵将-标签放在-的底部："><a href="#🐵将-标签放在-的底部：" class="headerlink" title="🐵将 &lt;script&gt; 标签放在 &lt;body&gt; 的底部："></a>🐵<strong>将 &lt;<code>script</code>&gt; 标签放在 <code>&lt;body&gt;</code> 的底部</strong>：</h5><p>将脚本放在 <code>&lt;body&gt;</code> 标签的结束标签之前，这样可以确保在执行脚本时，DOM 已经构建完成。</p><h4 id="21、变量提升"><a href="#21、变量提升" class="headerlink" title="21、变量提升"></a>21、变量提升</h4><p>指的是变量和函数声明在代码执行之前被提升到其所在的作用域的顶部。这意味着无论你在代码的哪个位置声明变量，JavaScript 在执行代码时都会将其提升到该作用域的顶部。</p><h5 id="🐎基本原理"><a href="#🐎基本原理" class="headerlink" title="🐎基本原理"></a>🐎基本原理</h5><ul><li>变量声明：在 JavaScript 中，只有变量的声明会被提升，而赋值不会被提升。</li><li>函数提升：函数声明也会被提升，允许在函数声明之前调用该函数。</li></ul><h5 id="🐎变量提升"><a href="#🐎变量提升" class="headerlink" title="🐎变量提升"></a>🐎变量提升</h5><p>由于只有声明被提升而赋值没有，所以输出的是undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 输出: undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 输出: 10</span><br></code></pre></td></tr></table></figure><p>使用let和const声明的变量不会被提升到顶部，访问他们会导致暂时性死区，即在生命之前访问变量会抛出错误。</p><h5 id="🐎函数提升"><a href="#🐎函数提升" class="headerlink" title="🐎函数提升"></a>🐎函数提升</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">greet</span>(); <span class="hljs-comment">// 输出: &quot;Hello, world!&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用函数表达式（如将函数赋值给一个变量），则不会提升该变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// 报错: TypeError: foo is not a function</span><br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Function expression&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="22、模板字符串"><a href="#22、模板字符串" class="headerlink" title="22、模板字符串"></a>22、模板字符串</h4><ul><li>模板字符串允许在 <code>$&#123;&#125;</code> 中插入变量或表达式，构成动态内容（会自动运算）</li><li>可以直接编写多行字符串，无需添加换行符 <code>\n</code> 或使用 <code>+</code> 拼接</li><li>在模板字符串中可以直接调用函数，将返回值嵌入字符串</li><li>模板字符串中可以嵌套其他模板字符串，形成动态构建内容</li></ul><h4 id="23、getter和setter"><a href="#23、getter和setter" class="headerlink" title="23、getter和setter"></a>23、getter和setter</h4><h5 id="🐣getter"><a href="#🐣getter" class="headerlink" title="🐣getter"></a>🐣getter</h5><p>get语法将对象属性绑定到查询该属性时将被调用的函数。（有时需要动态访问计算属性的值，或者需要反应内部变量的状态，而不需要显示方法调用，可以用getter实现）</p><ul><li>它不能与另一个 <code>get</code> 或具有相同属性的数据条目同时出现在一个对象字面量中（不允许使用 <code>&#123; get x() &#123; &#125;, get x() &#123; &#125; &#125;</code> 和 <code>&#123; x: ..., get x() &#123; &#125; &#125;</code>）。</li><li>getter 延迟计算值的成本，直到需要此值，如果不需要，你就不用支付成本。该值是在第一次调用 getter 时计算的，然后被缓存，因此后续访问返回缓存值而不重新计算它。这意味着你不应该为你希望更改其值的属性使用懒 getter，因为 getter 不会重新计算该值。</li><li>可以使用delete操作符删除一个getter：delete obj.getter</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj=&#123;<br>   <span class="hljs-attr">log</span>: [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>],<br>   <span class="hljs-keyword">get</span> <span class="hljs-title function_">latest</span>() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">log</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">log</span>.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>];<br>   &#125;,<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">latest</span>);  <span class="hljs-comment">//&#x27;c&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="🐣setter"><a href="#🐣setter" class="headerlink" title="🐣setter"></a>🐣setter</h5><p>当尝试设置属性时，**<code>set</code>** 语法将对象属性绑定到要调用的函数。</p><p>在 javascript 中，如果试着改变一个属性的值，那么对应的 setter 将被执行。setter 经常和 getter 连用以创建一个伪属性。不可能在具有真实值的属性上同时拥有一个 setter 器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> lan=&#123;<br>   <span class="hljs-keyword">set</span> <span class="hljs-title function_">current</span>(<span class="hljs-params">name</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">log</span>.<span class="hljs-title function_">push</span>(name);<br>   &#125;,<br>   <span class="hljs-attr">log</span>: [],<br>&#125;<br>lan.<span class="hljs-property">current</span>=<span class="hljs-string">&quot;EN&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lan.<span class="hljs-property">log</span>);<br></code></pre></td></tr></table></figure><h4 id="24、Generator和yield"><a href="#24、Generator和yield" class="headerlink" title="24、Generator和yield"></a>24、Generator和yield</h4><p>生成器和yield是用于处理异步编程和迭代的工具。生成器是一种特殊类型的函数，可以在执行过程中暂停，并在稍后继续执行。</p><h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><p>是用function*定义的函数，返回一个生成器对象，该对象用于控制函数的执行</p><h5 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h5><p>yield关键字用于暂停函数的执行并返回一个值。每当生成器遇到yield1语句，都会返回yield后面的值，并暂停执行，直到生成器的next()方法被调用。</p><h4 id="25、async-await"><a href="#25、async-await" class="headerlink" title="25、async&#x2F;await"></a>25、async&#x2F;await</h4><p>是generator的语法糖。WHY？</p><ul><li>async函数内置执行器，函数调用后会立即执行；Generator里需要配合next模块使用</li><li>更好的语义，async表示有异步操作，await表示紧跟在后面的表达式需要等待结果</li><li>返回值是promise。generator返回的是迭代器</li></ul><h4 id="26、requestAnimationFrame"><a href="#26、requestAnimationFrame" class="headerlink" title="26、requestAnimationFrame"></a>26、requestAnimationFrame</h4><p>在它之前，我们使用setTimeout&#x2F;setInterval来编写JS动画。</p><p>编写动画的关键是循环间隔的设置，一方面循环间隔足够段，动画效果才能显得平滑流畅；另一方面，循环间隔要足够长，才能保证浏览器有能力渲染产生的变化。1000ms&#x2F;60</p><p>setTimeout&#x2F;setInterval有一个显著的缺点在于，时间是不精确的，只能保证延时或者间隔不小于设定的时间。因为它们只是把任务添加到了任务队列中，但是如果前面的任务还没有执行完成，就必须要等待。</p><p>requestAnimationFrame采用的是系统时间间隔，可以保持最佳绘制效率，不会因为间隔果断导致过度绘制，增加开销，也不会因为间隔过长导致动画卡顿不流畅。可以让各种王爷动画有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。</p><p>优点：</p><p>不需要设置时间，采用系统时间间隔，达到最佳动画效果</p><p>会把每一帧所有的DOM操作集中起来，再一次重绘或回流中完成</p><p>如果运行在后台或隐藏的<code>&lt;iframe&gt;</code>里，会被暂停调用以提升性能</p><h4 id="27、ES6和CommonJS的差异"><a href="#27、ES6和CommonJS的差异" class="headerlink" title="27、ES6和CommonJS的差异"></a>27、ES6和CommonJS的差异</h4><h5 id="🐄导入导出方式"><a href="#🐄导入导出方式" class="headerlink" title="🐄导入导出方式"></a>🐄导入导出方式</h5><ul><li>ES6使用import&#x2F;export关键字处理导入导出，default关键字处理默认导出</li><li>CommonJS使用require&#x2F;module.exports用于导入和导出</li></ul><h5 id="🐄加载机制"><a href="#🐄加载机制" class="headerlink" title="🐄加载机制"></a>🐄加载机制</h5><ul><li>ES6基于静态加载，在编译时就确定依赖关系，import会被提升，在文件顶部执行</li><li>CommonJS基于动态加载，只有代码执行到require时才会加载模块（同步加载）</li></ul><h5 id="🐄执行顺序和作用域"><a href="#🐄执行顺序和作用域" class="headerlink" title="🐄执行顺序和作用域"></a>🐄执行顺序和作用域</h5><ul><li>ES6：每个模块都有独立的顶层作用域，不会污染全局作用域<ul><li>自动启动严格模式，顶层this指向undefined</li><li>如果多个模块引用同一个模块，会被缓存且加载一次</li></ul></li><li>CommonJSthis指向当前模块，也有上述缓存机制</li></ul><h5 id="🐄使用场景"><a href="#🐄使用场景" class="headerlink" title="🐄使用场景"></a>🐄使用场景</h5><ul><li>ES6更适合在现代浏览器中使用</li><li>CommonJS主要用于Node.js环境，适合服务器端开发</li></ul><h5 id="🐄兼容性"><a href="#🐄兼容性" class="headerlink" title="🐄兼容性"></a>🐄兼容性</h5><ul><li>ES6如果在Node.js中使用需要开启“type：module”或者将文件扩展名设置为.mjs</li><li>CommonJS：Node.js默认支持CommonJS模块</li></ul><h4 id="28、事件代理"><a href="#28、事件代理" class="headerlink" title="28、事件代理"></a>28、事件代理</h4><p>通过将事件处理程序添加到父级元素来管理多个子元素的事件，而不是给每个子元素分别绑定事件。可以提高性能，尤其是在动态添加或删除子元素的情况下。</p><h5 id="💦原理"><a href="#💦原理" class="headerlink" title="💦原理"></a>💦原理</h5><p>利用的是事件冒泡。当一个元素上的事件触发时，事件会从目标元素逐级向上冒泡到父级元素，直到document或者window为止。事件代理的机制是将事件处理程序绑定在一个父级容器上，事件触发时，通过父容器捕获事件，并通过判断事件目标（event.target）来确定触发的实际子元素。</p><h5 id="💦实例"><a href="#💦实例" class="headerlink" title="💦实例"></a>💦实例</h5><p>假设有一个列表，每个列表项都需要响应点击事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以将事件监听器放在列表的父容器，而不是单独给每个li单独绑定事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> list=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;list&#x27;</span>);<br>list.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>   <span class="hljs-keyword">if</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span>===<span class="hljs-string">&quot;li&quot;</span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Click&quot;</span>);<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果动态添加元素到列表，新的子元素也会响应同样的实践</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newItem=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>newItem.<span class="hljs-property">textContent</span>=<span class="hljs-string">&#x27;Item4&#x27;</span>;<br>list.<span class="hljs-title function_">appendChild</span>(newItem);<br></code></pre></td></tr></table></figure><h4 id="29、代码分析"><a href="#29、代码分析" class="headerlink" title="29、代码分析"></a>29、代码分析</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>   getName = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)&#125;;<br>   <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;<br><span class="hljs-title class_">Foo</span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)&#125;;<br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)&#125;;<br><span class="hljs-keyword">var</span> getName = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)&#125;;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">getName</span>();<br><span class="hljs-title function_">getName</span>();<br><span class="hljs-title class_">Foo</span>().<span class="hljs-title function_">getName</span>();<br><span class="hljs-title function_">getName</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">getName</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>().<span class="hljs-title function_">getName</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>().<span class="hljs-title function_">getName</span>();<br></code></pre></td></tr></table></figure><h4 id="30、JS执行上下文栈和作用域链"><a href="#30、JS执行上下文栈和作用域链" class="headerlink" title="30、JS执行上下文栈和作用域链"></a>30、JS执行上下文栈和作用域链</h4><h5 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h5><p>是当前JS代码被解析和执行时所在的环境的抽象概念，JS中运行任何代码都是在执行上下文中运行。分为：全局执行上下文和函数执行上下文。</p><p>执行上下文创建过程中，需要做：</p><ul><li>创建变量对象：初始化函数的参数args，提升函数声明和变量声明</li><li>创建作用域链</li><li>确定this的值</li></ul><h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><p>作用域负责收集和维护由所有声明的标识符（变量）组成的一系列查询，并实施一套严格的规则确定当前执行的代码对这些标识符的访问权限。</p><p>分为：</p><ul><li>全局作用域：代码中任何地方都可以访问（最外层的变量）；在整个程序中始终存在直到页面或者脚本关闭；浏览器中是window对象的属性，node环境中是global对象的</li><li>函数作用域：在函数中定义的变量只在函数内部有效</li><li>块级作用域：在{}大括号内声明的变量和常量（使用let、const声明）仅在快内部有效，外部无法访问。（避免变量在循环或条件语句中意外污染全局作用域）</li></ul><h5 id="执行上下文栈（即执行栈）"><a href="#执行上下文栈（即执行栈）" class="headerlink" title="执行上下文栈（即执行栈）"></a>执行上下文栈（即执行栈）</h5><p>也叫调用栈，用于存储在代码执行期间创建的所有执行上下文</p><ul><li>首次运行JS代码的时候，会创建一个全局的执行上下文并Push到当前的执行栈中，每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶</li><li>当栈顶的函数运行完成后，对应的函数执行上下文会从执行栈Pop出，上下文的控制权将移动到当前执行栈的下一个执行上下文。</li></ul><h5 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h5><p>从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到就宣布放弃。这种一层一层的关系就是作用域链。</p><h4 id="、事件循环"><a href="#、事件循环" class="headerlink" title="、事件循环"></a>、事件循环</h4><blockquote><p>JavaScript 的事件循环（Event Loop）是理解其异步行为和非阻塞特性的核心概念。事件循环使得 JavaScript 能够处理事件和异步操作，尽管它是单线程的。</p></blockquote><p><strong>事件循环机制确保了 JavaScript 的异步执行能力，使其能够在单线程环境下有效地处理事件和异步任务。</strong></p><p>JavaScript 有一个基于<strong>事件循环</strong>的运行时模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。这个模型与其他语言中的模型截然不同，比如 C 和 Java。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241029125906648.png" alt="image-20241029125906648" style="zoom:67%;" /><h5 id="🔺执行栈"><a href="#🔺执行栈" class="headerlink" title="🔺执行栈"></a>🔺执行栈</h5><p>JS使用执行栈来管理执行上下文；</p><p>当函数被调用时，会被推入栈顶；当函数执行完成后，会从栈中弹出。</p><h5 id="🔺任务队列"><a href="#🔺任务队列" class="headerlink" title="🔺任务队列"></a>🔺任务队列</h5><p>当异步操作完成（如setTimeout、事件监听等），相关的回调函数会被放入任务队列；</p><p>任务队列是用于存放等待执行的任务的队列。</p><h5 id="🔺微任务队列"><a href="#🔺微任务队列" class="headerlink" title="🔺微任务队列"></a>🔺微任务队列</h5><p>微任务队列用于处理更高优先级的任务，通常包括Promise的回调函数。</p><p>微任务队列的执行优先级高于任务队列。</p><h5 id="🐡事件循环的工作原理"><a href="#🐡事件循环的工作原理" class="headerlink" title="🐡事件循环的工作原理"></a>🐡事件循环的工作原理</h5><ul><li><p>执行栈检查：</p><ul><li>如果执行栈为空，事件循环会检查微任务队列</li></ul></li><li><p>处理微任务：</p><ul><li>如果微任务队列不为空，事件循环会从微任务队列中取出任务并执行，直到微任务队列为空</li></ul></li><li><p>处理任务：</p><ul><li>之后，事件循环会从任务队列中取出一个任务并执行</li></ul></li><li><p>重复循环：</p><ul><li>重复以上步骤，直到所有任务和微任务都被执行完毕</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;,<span class="hljs-number">0</span>);<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br>&#125;)<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>   <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<br>   &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>输出： 2 4 3 5 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">try</span>&#123;<br>   <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>      <span class="hljs-keyword">throw</span>(<span class="hljs-number">1</span>);<br>   &#125;,<span class="hljs-number">0</span>)<br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：2 undifined（由于异步，没catch到错误）</p><p>队列：</p><ul><li>JS运行时包含一个待处理消息的消息队列。每一个消息都关联着用以处理这个消息的回调函数。在事件循环期间的某个时刻，运行时会开始处理最先进入队列的消息。被处理的消息会移出队列，并作为输入参数来调用与之关联的函数。正如前面提到的，调用一个函数总是会为其创造一个新的栈帧。</li><li>函数的处理会一直到执行栈再次为空为止，然后事件循环将会处理队列中的下一个消息（如果还有的话）。</li></ul><p><strong>每一个消息完整地执行后，其他消息才会被执行。</strong></p><p>当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码，才能修改这个函数操作的数据。</p><p>在浏览器里，每当一个事件发生并且有一个事件监听器绑定在该事件上时，一个消息就会被添加进消息队列。如果没有事件监听器，这个事件将会丢失。所以当一个带有点击事件处理器的元素被点击时，就会像其他事件一样产生一个类似的消息。然而，一些事件同步发生，没有产生消息——例如，通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/click"><code>click</code></a> 方法模拟的点击。</p><p>函数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout"><code>setTimeout()</code></a> 接受的前两个参数：一个是待加入队列的消息，一个是时间值（可选，默认为 0）。这个<em>时间值</em>代表了消息被实际加入到队列的最小延迟时间。如果队列中没有其他消息并且栈为空，在这段延迟时间过去之后，消息会被马上处理。然而，如果有其他消息，<code>setTimeout()</code> 消息必须等待其他消息处理完。因此第二个参数仅仅表示<em>最少</em>延迟时间，而非<em>确切</em>的等待时间。</p><p>以 0 为第二参数调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout"><code>setTimeout()</code></a> 并不表示在 0 毫秒后就调用回调函数。</p><p>其等待的时间取决于队列里待处理的消息数量。在下面的例子中，<code>&quot;这是一条消息&quot;</code> 将会在回调获得处理之前输出到控制台，这是因为延迟参数是运行时处理请求所需的<em>最小</em>等待时间，但并不保证是<em>准确</em>的等待时间。</p><p>基本上，<code>setTimeout()</code> 需要等待当前队列中所有的消息都处理完毕之后才能执行，即使已经超出了由第二参数所指定的时间</p><p>JavaScript 的事件循环模型与许多其他语言不同的一个非常有趣的特性是，它永不阻塞。处理 I&#x2F;O 通常通过事件和回调来执行，所以当应用程序正等待一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API">IndexedDB</a> 查询返回或者一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/fetch"><code>fetch()</code></a> 请求返回时，它仍然可以处理其他事情，比如用户输入。</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端八股总结-CSS+HTML+页面渲染（持续更新）</title>
    <link href="/2024/10/23/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-CSS+HTML+%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/"/>
    <url>/2024/10/23/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%80%BB%E7%BB%93-CSS+HTML+%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<p>CSS+HTML</p><span id="more"></span><p><a href="https://codepen.io/pen%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8">https://codepen.io/pen在线编辑器</a></p><h3 id="（1）CSS"><a href="#（1）CSS" class="headerlink" title="（1）CSS"></a>（1）CSS</h3><h4 id="0、CSS3增加的新特性"><a href="#0、CSS3增加的新特性" class="headerlink" title="0、CSS3增加的新特性"></a>0、CSS3增加的新特性</h4><ul><li>2d，3d变换</li><li>Transition, animation</li><li>媒体查询</li><li>新的单位（rem, vw，vh 等）</li><li>圆角（border-radius），阴影（box-shadow），对文字加特效（text-shadow），线性渐变（gradient），</li><li>旋转（transform）</li><li>rgba</li></ul><h3 id="1、outline-width"><a href="#1、outline-width" class="headerlink" title="1、outline-width"></a>1、outline-width</h3><blockquote><p>用于设置元素外轮廓线的宽度。它通常与 <code>outline</code> 结合使用，用来绘制围绕元素的轮廓线，但不会影响元素的布局（即不会占据空间）。</p></blockquote><p>🐦属性值：</p><ul><li>medium：默认值，表示中等宽度的轮廓线</li><li>thin：较细</li><li>thick：较粗</li><li><code>&lt;length&gt;</code>：可以设置具体的长度值。</li></ul><p><strong>注意</strong>：</p><ul><li><code>outline-width</code> 必须与 <code>outline-style</code> 一起使用，否则轮廓线不会显示。</li><li>与 <code>border</code> 不同，<code>outline</code> 不会影响元素的尺寸，也不会改变文档的布局。</li></ul><h4 id="2、长度单位"><a href="#2、长度单位" class="headerlink" title="2、长度单位"></a>2、长度单位</h4><h5 id="绝对单位"><a href="#绝对单位" class="headerlink" title="@绝对单位"></a>@绝对单位</h5><blockquote><p>表示的是固定的值，常用于打印媒体或者需要精确布局的场景。在屏幕设备上可能有不一致的显示效果，因为设备的分辨率各不相同。pt（磅）：1pt &#x3D; 1&#x2F;72 英寸，常用于打印。pc（派卡）：1pc &#x3D; 12pt，用于印刷领域。cm（厘米）：厘米，用于精确布局或印刷。mm（毫米）：毫米，同样适用于印刷或精确布局。in（英寸<strong>）</strong>：1in &#x3D; 2.54 厘米，常用于打印输出。</p></blockquote><ul><li><strong>px（像素）</strong>：屏幕上的一个物理像素。最常用的单位。</li></ul><h5 id="相对单位"><a href="#相对单位" class="headerlink" title="@相对单位"></a>@相对单位</h5><blockquote><p>相对单位依赖于其他属性值（如父元素的字体大小、视口大小等），因此更适合响应式设计。</p></blockquote><p>🐦与字体相关：</p><ul><li><strong>em</strong>：相对于父元素的字体大小。1em 表示父元素的字体大小，2em 则是父字体大小的两倍。比如，如果父元素的字体大小是 16px，1em &#x3D; 16px。</li><li><strong>rem（根元素的 em）</strong>：相对于根元素（通常是 <code>&lt;html&gt;</code>）的字体大小。它避免了 <code>em</code> 的嵌套影响，常用于构建响应式布局。例如，如果 <code>&lt;html&gt;</code> 的字体大小是 16px，那么 1rem 就是 16px。</li></ul><p>🐦与视口相关：</p><ul><li><strong>vw（视口宽度）</strong>：1vw 等于视口宽度的 1%。假设视口宽度是 1000px，1vw 就是 10px。</li><li><strong>vh（视口高度）</strong>：1vh 等于视口高度的 1%。例如，如果视口高度是 900px，那么 1vh 就是 9px。</li><li><strong>vmin</strong>：视口的宽度和高度中较小的那个值的 1%。例如，视口宽度为 1200px，高度为 800px，1vmin &#x3D; 8px。</li><li><strong>vmax</strong>：视口的宽度和高度中较大的那个值的 1%。以宽度 1200px、高度 800px 为例，1vmax &#x3D; 12px。</li></ul><h4 id="3、链接的伪类顺序"><a href="#3、链接的伪类顺序" class="headerlink" title="3、链接的伪类顺序"></a>3、链接的伪类顺序</h4><blockquote><p>我们使用伪类来表示链接的不同状态，如 <code>:link</code>、<code>:visited</code>、<code>:hover</code> 和 <code>:active</code>。这些伪类应按以下顺序进行定义，以确保正确的样式应用</p></blockquote><ul><li><strong><code>:link</code></strong> — 未访问的链接状态（默认状态）。</li><li><strong><code>:visited</code></strong> — 已访问的链接状态</li><li><strong><code>:hover</code></strong> — 当鼠标悬停在链接上时的状态。</li><li><strong><code>:active</code></strong> — 链接被点击时的状态。</li></ul><h4 id="4、清除浮动"><a href="#4、清除浮动" class="headerlink" title="4、清除浮动"></a>4、清除浮动</h4><blockquote><p>在 CSS 中，浮动（<code>float</code>）是一种常见的布局方式，但使用浮动时容易出现父元素高度塌陷的问题（即父元素无法包裹子元素）。要解决这个问题，需要<strong>清除浮动</strong>。</p></blockquote><h5 id="🌸使用clear属性"><a href="#🌸使用clear属性" class="headerlink" title="🌸使用clear属性"></a>🌸使用clear属性</h5><p>给浮动元素之后的元素加上clear属性可以避免浮动元素影响后续布局。</p><p>clear属性有三个值：<code>🔸clear: left;🔸clear: right;🔸clear: both;</code></p><h5 id="🌸给父元素添加overflow属性"><a href="#🌸给父元素添加overflow属性" class="headerlink" title="🌸给父元素添加overflow属性"></a>🌸给父元素添加overflow属性</h5><p>常见的值是auto或hidden，这样可以自动清除浮动并让父元素包裹住浮动的子元素。</p><h5 id="🌸clearfix"><a href="#🌸clearfix" class="headerlink" title="🌸clearfix"></a>🌸clearfix</h5><ul><li>给父元素添加clearfix的样式类；</li><li>使用伪元素::after，创建一个内容为空、显示为块级元素的子元素，并设置clear: both</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="🌸使用flexbox或grid布局"><a href="#🌸使用flexbox或grid布局" class="headerlink" title="🌸使用flexbox或grid布局"></a>🌸使用flexbox或grid布局</h5><p>在现代 CSS 布局中，推荐使用 <code>flexbox</code> 或 <code>grid</code> 来替代浮动布局。这些新布局方式不仅能避免浮动带来的问题，还能实现更灵活的布局效果。</p><h4 id="5、相对定位和绝对定位"><a href="#5、相对定位和绝对定位" class="headerlink" title="5、相对定位和绝对定位"></a>5、相对定位和绝对定位</h4><h5 id="🌝相对定位（仍在文档流）"><a href="#🌝相对定位（仍在文档流）" class="headerlink" title="🌝相对定位（仍在文档流）"></a>🌝相对定位（仍在文档流）</h5><p><code>position: relative</code></p><p>相对定位是相当于元素自己在文档中的<strong>正常位置</strong>进行偏移的。也就是说，当元素是相对定位并通过top、right、bottom、left属性进行偏移，元素仍然<strong>占据原来的空间</strong>，只是视觉上被移动了。其他的元素仍然按照他原始的位置进行布局。（不会影响其他元素）</p><h5 id="🌞绝对定位（脱离文档流）"><a href="#🌞绝对定位（脱离文档流）" class="headerlink" title="🌞绝对定位（脱离文档流）"></a>🌞绝对定位（脱离文档流）</h5><p><code>position: absolute</code></p><p>绝对定位的元素是相对于<strong>最近的已定位的祖先元素</strong>（即设置了<code>position: relative</code>、<code>absolute</code> 或 <code>fixed</code> 的祖先元素）进行定位的。如果没有已经定位的祖先元素，那么该元素将相对于视口（浏览器窗口）进行定位。元素<strong>不占据原本的空间</strong>，不影响其他元素，也不被影响。</p><h4 id="6、position"><a href="#6、position" class="headerlink" title="6、position"></a>6、position</h4><h5 id="🦥static（默认属性）"><a href="#🦥static（默认属性）" class="headerlink" title="🦥static（默认属性）"></a>🦥static（默认属性）</h5><p>当设置为static时，left&#x2F;right&#x2F;top&#x2F;bottom&#x2F;z-index属性无效。</p><p>和相对定位的元素重叠时，只要相对定位的元素z-index大于零就会显示在上方，否则是下方</p><h5 id="🦥relative"><a href="#🦥relative" class="headerlink" title="🦥relative"></a>🦥relative</h5><h5 id="🦥absolute（见上）"><a href="#🦥absolute（见上）" class="headerlink" title="🦥absolute（见上）"></a>🦥absolute（见上）</h5><h5 id="🦥fixed"><a href="#🦥fixed" class="headerlink" title="🦥fixed"></a>🦥fixed</h5><p>脱离文档流，不为元素预留空间。一般情况下相对于屏幕视口发生偏移，元素的位置在屏幕滚动的时候不会改变。</p><p>🔺transform属性会改变position: fixed的参照对象，即fixed元素会相对于其第一个具有transform属性的祖先元素发生偏移。</p><h5 id="🦥sticky"><a href="#🦥sticky" class="headerlink" title="🦥sticky"></a>🦥sticky</h5><p>粘性定位，可以被认为是relative和fixed的混合。在跨越特定阈值前为相对定位，之后为固定定位。也就是说它会让元素在页面滚动时如同在正常文档流中，但是滚动到特定位置时就会固定在屏幕上。（阈值：指定的top、right、bottom、left其中之一，都不指定就和static一样）</p><p>它的阈值是相对于它最近的滚动祖先来定义，它的作用域也是它的第一个非static父元素内（也就是粘性布局的效果只在该父元素内表现出来，如果这个祖先元素不再可见（即完全滚动出视口），那么粘性元素也将不再固定在视口中）</p><h4 id="7、overflow"><a href="#7、overflow" class="headerlink" title="7、overflow"></a>7、overflow</h4><blockquote><p>overflow意为溢出容器</p></blockquote><h5 id="🐯属性值"><a href="#🐯属性值" class="headerlink" title="🐯属性值"></a>🐯属性值</h5><ul><li>visible：超出容器内容也显示（默认）</li><li>hidden：将超出容器的部分隐藏</li><li>auto：自动设置滚动条，如果垂直溢出就会出现垂直滚动条，水平溢出亦然</li><li>scoll：不管溢出与否都会出现滚动条</li><li>overflow-x，overflow-y可单独设置两个方向的滚动条</li></ul><h5 id="🐯作用"><a href="#🐯作用" class="headerlink" title="🐯作用"></a>🐯作用</h5><p>🔸解决margin-top的传递问题</p><p>子元素的margin-top会把父元素一起带下来（即使得父元素上方也出现margin），给父元素加overflow:hidden就可以解决。</p><p>🔸清除浮动带来的影响：父元素高度塌陷</p><h4 id="8、white-space"><a href="#8、white-space" class="headerlink" title="8、white-space"></a>8、white-space</h4><p>属性：</p><ul><li>normal：默认值。合并空白并在必要时换行。</li><li>nowrap：合并空白，文本不会换行。</li><li>pre：保留空白和换行。文本不会换行。</li><li>pre-wrap：保留空白，文本会在必要时换行。</li><li>pre-line：合并空白，保留换行符，并在必要时换行。</li></ul><h4 id="9、display"><a href="#9、display" class="headerlink" title="9、display"></a>9、display</h4><h5 id="🦥block："><a href="#🦥block：" class="headerlink" title="🦥block："></a>🦥block：</h5><p>元素会生成一个块级框，独占一整行，前后有换行</p><ul><li>可设置width和height</li><li>如<code>&lt;div&gt;  &lt;p&gt;   &lt;h1&gt;</code>默认都是块级盒子</li></ul><h5 id="🦥inline："><a href="#🦥inline：" class="headerlink" title="🦥inline："></a>🦥inline：</h5><p>行内样式，元素不会生成框，而是和其它元素在同一行显示</p><ul><li>只占据其内容的宽度，无法设置 <code>width</code> 和 <code>height</code>。</li><li>可以应用 <code>padding</code> 和 <code>margin</code>（但在某些情况下可能会影响布局）。</li><li>常用于 <code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code> 等元素。</li></ul><h5 id="🦥inline-block"><a href="#🦥inline-block" class="headerlink" title="🦥inline-block"></a>🦥inline-block</h5><p>结合了块级和行内元素的特性：元素在同一行内显示，但是可以设置width和height</p><p>如图：虽然显示在一行，但是有间隙，因为在写标签结束后会顺手打回车，就相当于空白符，通常情况下多个连续的空白符会合并成一个。这就是显示间隙的原因。</p><p>如果想要没有间隙，一可以改用float，二可以在父元素样式设置font-size：0；（但是子元素中的字也不会显示了…）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027191028769.png" alt="image-20241027191028769" style="zoom:50%;" /><h5 id="🦥flex、grid、none、table、teble-row（表格行）、table-cell（单元表格）、list-item"><a href="#🦥flex、grid、none、table、teble-row（表格行）、table-cell（单元表格）、list-item" class="headerlink" title="🦥flex、grid、none、table、teble-row（表格行）、table-cell（单元表格）、list-item"></a>🦥flex、grid、none、table、teble-row（表格行）、table-cell（单元表格）、list-item</h5><h4 id="9-1、如何给行内元素设置高度"><a href="#9-1、如何给行内元素设置高度" class="headerlink" title="9.1、如何给行内元素设置高度"></a>9.1、如何给行内元素设置高度</h4><ul><li>将行内元素转化为行内块元素</li><li>将行内元素设置为浮动元素</li><li>将行内元素设置为绝对定位</li><li>将行内元素包裹在flex父容器中</li></ul><h4 id="10、float"><a href="#10、float" class="headerlink" title="10、float"></a>10、float</h4><h5 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h5><ul><li><code>none</code>（默认）：不浮动，元素保持在文档流中。</li><li><code>left</code>：元素浮动到左侧，紧贴父容器的左边界。</li><li><code>right</code>：元素浮动到右侧，紧贴父容器的右边界。</li><li><code>inherit</code>：从父元素继承 <code>float</code> 的值。</li></ul><h5 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h5><ul><li>脱离文档流：浮动元素会从正常文档流中移除，不会影响后面的非浮动元素的布局。</li><li>影响后续元素：后续的非浮动元素会围绕浮动元素进行排列，但不会被浮动元素覆盖。</li><li>浮动对齐：多个浮动元素可以在同一行排列（如果宽度允许的话），否则它们会换行。</li></ul><h5 id="与inline-block对比"><a href="#与inline-block对比" class="headerlink" title="与inline-block对比"></a>与inline-block对比</h5><ul><li><p>float是默认无边距的</p></li><li><p>元素在排列的时候会有些错乱，而inline-block相对较整齐</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027192311738.png" alt="image-20241027192311738" style="zoom: 33%; float: left" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027192423307.png" alt="image-20241027192423307" style="zoom:50%;float: left" /></p><h4 id="11、margin"><a href="#11、margin" class="headerlink" title="11、margin"></a>11、margin</h4><blockquote><p>用来设置元素外边距的属性，通过控制元素四周的空白区域来调整元素之间的间距,主要用于影响布局，避免元素直接相连或重叠</p></blockquote><h5 id="简写和单边"><a href="#简写和单边" class="headerlink" title="简写和单边"></a>简写和单边</h5><ul><li>四个值：上、右、下、左</li><li>三个值：上、左右、下</li><li>两个值、上下、左右</li></ul><p>也可以单独控制每个方向的：margin-top&#x2F;right&#x2F;bottom&#x2F;left</p><h5 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h5><p>常用于<strong>水平</strong>居中对齐</p><ul><li>水平居中：<code>margin: 0  auto;</code>（前提是元素有宽度）</li></ul><h5 id="负值margin"><a href="#负值margin" class="headerlink" title="负值margin"></a>负值margin</h5><p>可以拉近或重叠元素，适用于一些特殊布局</p><h5 id="外边距折叠"><a href="#外边距折叠" class="headerlink" title="外边距折叠"></a>外边距折叠</h5><p>在某些情况下，相邻元素的垂直 <code>margin</code> 会发生折叠，即两个元素之间的总 <code>margin</code> 不等于两者之和，而是其中的较大值。例如：</p><ul><li>如果一个元素的 <code>margin-bottom</code> 是 <code>20px</code>，另一个紧接着的元素 <code>margin-top</code> 是 <code>15px</code>，则两者间距为 <code>20px</code>，而不是 <code>35px</code>。</li></ul><p>规则：</p><ul><li>设定浮动或者绝对定位的元素不会发生外边距折叠</li><li>仅在垂直方向（上下）发生折叠，水平方向不会折叠。</li><li>父子元素的 <code>margin</code> 也可能会折叠（如父元素没有 <code>border</code>、<code>padding</code> 或 <code>overflow: hidden;</code> 等）。</li></ul><h5 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h5><p>使用百分比时，不论上下左右的边距都是是<strong>相对于父元素的宽度</strong>来定义，和padding一样。</p><h4 id="12、padding"><a href="#12、padding" class="headerlink" title="12、padding"></a>12、padding</h4><p>和margin基本一致。但是不会发生折叠问题，而且背景会填充到padding区域(margin不会</p><h4 id="13、IE盒模型"><a href="#13、IE盒模型" class="headerlink" title="13、IE盒模型"></a>13、IE盒模型</h4><p>与普通盒模型的差异在于元素的 <code>width</code> 和 <code>height</code> 属性是指包括内边距（padding）和边框（border）在内的总宽度和高度。这意味着：<strong>内容区域</strong>的实际宽度和高度会小于 <code>width</code> 和 <code>height</code> 的值，因为内边距和边框会占用部分空间。</p><p>为了兼容IE盒模型，可以在CSS中使用box-sizing属性。</p><ul><li>content-box：默认值，符合标准盒模型</li><li>border-box：将内边距和边框包含在width和height内，和IE保持一致</li></ul><h4 id="14、border"><a href="#14、border" class="headerlink" title="14、border"></a>14、border</h4><blockquote><p>用于为元素添加边框的属性，它可以用于<strong>任何块级元素和行内元素</strong>，增加视觉效果和结构感。边框的样式、宽度和颜色都可以独立设置。</p></blockquote><h5 id="🐆属性组成"><a href="#🐆属性组成" class="headerlink" title="🐆属性组成"></a>🐆属性组成</h5><ul><li>border-width（长度值或者关键字都可）、border-style、border-color<ul><li>或者用单个border属性同时设置3个：<code>border: 2px solid red</code></li></ul></li><li>border-top、border-right、border-bottom、border-left（四个方向单独设置）</li><li>border-radius</li></ul><h5 id="🐆边框样式"><a href="#🐆边框样式" class="headerlink" title="🐆边框样式"></a>🐆边框样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">none</span>：没有边框     solid：实线边框    dotted：点状边框    dashed：虚线边框 <br>double：双线边框   groove：凹槽边框   ridge：凸起边框     inset：内嵌边框<br>outset：外嵌边框<br></code></pre></td></tr></table></figure><h5 id="🐆border-radius"><a href="#🐆border-radius" class="headerlink" title="🐆border-radius"></a>🐆border-radius</h5><p><code>border-radius:30px 20px 30px 10px</code>：（顺时针）左上、右上、右下、左下</p><p> <code>border-radius:30px 50px 10px</code>：左上、右下左下、右下</p><p><code>border-radius:90px 50px</code>：左上右下、右上左下</p><p>属性值可以是px（表示圆角的半径）、%、em</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027211917493.png" alt="image-20241027211917493" style="zoom:50%;" /><h4 id="15、transtion"><a href="#15、transtion" class="headerlink" title="15、transtion"></a>15、transtion</h4><blockquote><p>用于定义元素在状态变化时的过渡效果。通过设置 <code>transition</code>，可以在元素的某些 CSS 属性值发生变化时，平滑地过渡到新值，从而增强用户体验。</p></blockquote><p>🦧<code>transition</code> 属性通常包含以下几个部分：</p><ol><li><strong>属性名</strong>：要过渡的 CSS 属性，例如 <code>background-color</code>、<code>transform</code> 等。</li><li><strong>过渡持续时间</strong>：过渡效果持续的时间，例如 <code>0.3s</code>（表示 300 毫秒）。</li><li><strong>过渡效果</strong>：过渡的速度曲线，可以是 <code>ease</code>、<code>linear</code>、<code>ease-in</code>、<code>ease-out</code>、<code>ease-in-out</code> 等。</li><li><strong>延迟时间</strong>：在开始过渡之前的等待时间，例如 <code>0.2s</code>。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: blue;<br>    <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.3s</span> ease <span class="hljs-number">0.2s</span>, transform <span class="hljs-number">0.5s</span> ease-in-out;<br>&#125;<br><br><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，当鼠标悬停在 <code>.box</code> 元素上时，背景颜色会隔0.2秒后在 0.3 秒内从蓝色变为红色，同时元素会在 0.5 秒内放大 1.2 倍。这些变化会以平滑的过渡效果显示出来。</p><p>🦧过渡曲线属性的含义</p><ul><li>ease：这是<strong>默认值</strong>。动画开始时慢，中间加速，结束时慢。给人一种自然的感觉。</li><li>linear：动画以恒定的速度进行，没有加速或减速。整个动画的速度保持一致。</li><li>ease-in：动画开始时慢，随着时间的推移逐渐加速。适用于想要强调开始时的轻柔效果的场景。</li><li>ease-out：动画开始时以恒定速度进行，但在接近结束时逐渐减速。适用于需要强调结束时的柔和效果。</li><li>ease-in-out：动画开始和结束时都慢，中间加速。结合了 <code>ease-in</code> 和 <code>ease-out</code> 的特性，使得整个动画过程更加平滑。</li></ul><h4 id="16、生成三角形"><a href="#16、生成三角形" class="headerlink" title="16、生成三角形"></a>16、生成三角形</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;triangle&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;style&gt;<br><span class="hljs-selector-class">.triangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">border-style</span>: solid;<br>    <span class="hljs-attribute">border-color</span>: transparent <span class="hljs-number">#0099CC</span> transparent transparent;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>); <span class="hljs-comment">/*顺时针旋转90°*/</span>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027095932583.png" alt="image-20241027095932583" style="zoom:50%;" /><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;triangle&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;style&gt;<br><span class="hljs-selector-class">.triangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span> <span class="hljs-number">50px</span> <span class="hljs-number">100px</span> <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">border-style</span>: solid;<br>    <span class="hljs-attribute">border-color</span>: transparent transparent <span class="hljs-number">#0099CC</span> transparent;&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241027100123381.png" alt="image-20241027100123381" style="zoom:50%;" /><h4 id="17、继承"><a href="#17、继承" class="headerlink" title="17、继承"></a>17、继承</h4><h5 id="🐰默认继承父元素样式的属性："><a href="#🐰默认继承父元素样式的属性：" class="headerlink" title="🐰默认继承父元素样式的属性："></a>🐰默认继承父元素样式的属性：</h5><blockquote><p>大部分布局相关的属性（如 <code>margin</code>、<code>padding</code>、<code>border</code>、<code>width</code>、<code>height</code> 等）默认是不可继承的。</p></blockquote><ul><li>文本相关：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">🔸<span class="hljs-attribute">color</span>         🔸<span class="hljs-attribute">font-family</span>   🔸<span class="hljs-attribute">font-size</span>    🔸<span class="hljs-attribute">font-style</span>   <br>🔸<span class="hljs-attribute">font-weight</span>   🔸<span class="hljs-attribute">font-weight</span>   🔸<span class="hljs-attribute">text-align</span>(文本对齐方式)       <br>🔸<span class="hljs-attribute">white-space</span>   🔸<span class="hljs-attribute">word-spacing</span>  🔸<span class="hljs-attribute">text-indent</span>(文本缩进)<br>🔸<span class="hljs-attribute">text-transform</span>（文本转换，大小写等）    <br></code></pre></td></tr></table></figure><ul><li>列表相关</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">🔸<span class="hljs-built_in">list-style(列表样式)</span>            🔸<span class="hljs-built_in">list-style-position</span>    <br>🔸<span class="hljs-built_in">list-style-type(列表类型)</span>       🔸<span class="hljs-built_in">list-style-image(列表项的图像)</span><br></code></pre></td></tr></table></figure><ul><li>表格相关</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">🔸<span class="hljs-attribute">border-collapse</span>(表格边框合并方式)  🔸<span class="hljs-attribute">border-spacing</span>(表格单元格之间的距离)<br>🔸<span class="hljs-selector-tag">caption</span><span class="hljs-built_in">-side</span>(标题位置)            🔸<span class="hljs-attribute">empty-cells</span>(空单元格的显示方式)<br></code></pre></td></tr></table></figure><ul><li>其他</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">🔸<span class="hljs-attribute">visibility</span>(元素的可见性)      🔸<span class="hljs-attribute">counter-increment</span> <br>🔸<span class="hljs-attribute">quotes</span>(引用样式，引号)        🔸<span class="hljs-attribute">counter-reset</span><br>🔸<span class="hljs-attribute">direction</span>(文本方向)          🔸<span class="hljs-attribute">text-decoration</span>(文本装饰，如下划线)<br></code></pre></td></tr></table></figure><h5 id="🐰强制继承"><a href="#🐰强制继承" class="headerlink" title="🐰强制继承"></a>🐰强制继承</h5><p>即将属性值写为<strong>inherit</strong></p><h4 id="18、使元素消失的方法"><a href="#18、使元素消失的方法" class="headerlink" title="18、使元素消失的方法"></a>18、使元素消失的方法</h4><h5 id="🐣display-none"><a href="#🐣display-none" class="headerlink" title="🐣display: none"></a>🐣display: none</h5><p>隐藏对应的元素，在文档中不再给它分配空间</p><h5 id="🐣visibility-hidden"><a href="#🐣visibility-hidden" class="headerlink" title="🐣visibility: hidden"></a>🐣visibility: hidden</h5><p>隐藏对应的元素，但是在文档布局中仍保留原来的空间，但是不会触发已绑定事件</p><h5 id="🐣opacity-0"><a href="#🐣opacity-0" class="headerlink" title="🐣opacity: 0"></a>🐣opacity: 0</h5><p>不会改变页面布局，可以触发已绑定事件（能继承，rgba不能）</p><h5 id="🐣z-index-1"><a href="#🐣z-index-1" class="headerlink" title="🐣z-index: -1"></a>🐣z-index: -1</h5><p>隐藏在body下面</p><h4 id="19、画一条0-5px的线"><a href="#19、画一条0-5px的线" class="headerlink" title="19、画一条0.5px的线"></a>19、画一条0.5px的线</h4><blockquote><p>浏览器会对小于1px的数值进行四舍五入处理</p></blockquote><h5 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;line&quot;&gt;&lt;<span class="hljs-selector-tag">div</span>&gt;<br><br><span class="hljs-selector-class">.line</span>&#123;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">1px</span>;<br>   <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">0.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="伪元素叠加"><a href="#伪元素叠加" class="headerlink" title="伪元素叠加"></a>伪元素叠加</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;line&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br><span class="hljs-selector-class">.line</span> &#123;<br>   <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.line</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-class">.line</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>   <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">/*必须设置此值伪元素才会显示*/</span><br>   <span class="hljs-attribute">display</span>: block;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">1px</span>;  <span class="hljs-comment">/*两条线的高度*/</span><br>&#125;<br><br><span class="hljs-selector-class">.line</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>   <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">1.5px</span>;  <span class="hljs-comment">/*两条线重叠，变成0.5px*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="20、gradient"><a href="#20、gradient" class="headerlink" title="20、gradient"></a>20、gradient</h4><blockquote><p>在 CSS 中，<code>gradient</code>（渐变）是用来生成一组平滑过渡的颜色效果，通常用于背景色、按钮、边框等装饰。CSS 提供了三种主要类型的渐变：线性渐变（<code>linear-gradient</code>）、径向渐变（<code>radial-gradient</code>）和锥形渐变（<code>conic-gradient</code>）。</p></blockquote><p>可以叠加多个渐变，以逗号隔开</p><h5 id="🦉线性渐变"><a href="#🦉线性渐变" class="headerlink" title="🦉线性渐变"></a>🦉线性渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(方向, 颜色<span class="hljs-number">1</span>, 颜色<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><ul><li>方向：可以是角度（如 <code>45deg</code>）或关键词（如 <code>to right</code> 表示从左到右）。</li><li>颜色：可以设置多个颜色，并用百分比控制过渡位置。</li></ul><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red, blue);<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028095156314.png" alt="image-20241028095156314" style="zoom:50%;" /><h5 id="🦉径向渐变"><a href="#🦉径向渐变" class="headerlink" title="🦉径向渐变"></a>🦉径向渐变</h5><p>径向渐变是从中心向外逐渐扩展的颜色过渡，形成一个圆形或椭圆形的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(形状 大小 at 位置, 颜色<span class="hljs-number">1</span>, 颜色<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><ul><li>形状：可以是 <code>circle</code>（圆形）或 <code>ellipse</code>（椭圆形）。</li><li>大小：控制渐变的范围，常用的值有 <code>closest-side</code>、<code>farthest-corner</code> 等。</li><li>位置：设置渐变的起始位置，默认为中心 <code>center</code>。</li></ul><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle farthest-side at center, yellow, green);<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028095557144.png" alt="image-20241028095557144" style="zoom:50%;" /><h5 id="🦉锥形渐变"><a href="#🦉锥形渐变" class="headerlink" title="🦉锥形渐变"></a>🦉锥形渐变</h5><p>锥形渐变是围绕中心点的角度变化渐变，颜色像蛋糕切片一样依次环绕，通常用于饼图效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">conic-gradient</span>(from 角度, 颜色<span class="hljs-number">1</span>, 颜色<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><ul><li>角度：起始角度，默认从顶部开始。</li><li>颜色：可以设置多个颜色以环绕中心点分布。</li></ul><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">conic-gradient</span>(from <span class="hljs-number">0</span>, pink, yellow, cyan);<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241028100018692.png" alt="image-20241028100018692" style="zoom:50%;" /><h4 id="21、box-shadow"><a href="#21、box-shadow" class="headerlink" title="21、box-shadow"></a>21、box-shadow</h4><blockquote><p>用于给元素添加阴影效果的属性，它能够让元素产生视觉层次感，使页面更具立体感。<code>box-shadow</code> 属性支持多层阴影效果，也可以实现内阴影。</p></blockquote><h4 id="22、text-shadow"><a href="#22、text-shadow" class="headerlink" title="22、text-shadow"></a>22、text-shadow</h4><h4 id="23、-import和link"><a href="#23、-import和link" class="headerlink" title="23、@import和link"></a>23、@import和link</h4><h5 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h5><blockquote><p><code>@import</code> 是 CSS 规则，可以在 CSS 文件中使用，也可以在 <code>&lt;style&gt;</code> 标签内使用。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;styles.css&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>可以在一个 CSS 文件中引入其他 CSS 文件。</li><li>引入的样式表在其后面的样式之前加载。</li><li>使用 <code>@import</code> 会导致额外的 HTTP 请求，可能影响页面加载性能。</li><li>只支持在 CSS 文件中使用，不能在 HTML 文件中直接使用。</li></ul><h5 id="link"><a href="#link" class="headerlink" title="link"></a>link</h5><blockquote><p><code>&lt;link&gt;</code> 是 HTML 标签，通常放在 <code>&lt;head&gt;</code> 部分，用于引入外部样式表。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>能够在 HTML 中直接引用 CSS 文件。</li><li>支持多个 <code>&lt;link&gt;</code> 标签，可以在页面加载时并行请求多个样式表，有利于提高加载性能。</li><li><code>&lt;link&gt;</code> 提供了更多的属性，例如 <code>rel</code>、<code>media</code>、<code>sizes</code> 等，可以控制样式的应用范围和条件。</li></ul><h4 id="24、rel和href"><a href="#24、rel和href" class="headerlink" title="24、rel和href"></a>24、rel和href</h4><blockquote><p>HTML 中 <code>&lt;link&gt;</code> 标签的两个重要属性</p></blockquote><h5 id="rel"><a href="#rel" class="headerlink" title="rel"></a>rel</h5><ul><li><p>全称：<code>rel</code> 是 “relationship” 的缩写。</p></li><li><p>表示：用于定义当前文档与被链接文档之间的关系。</p></li><li><p>常见值：</p><ul><li><p><code>stylesheet</code>：表示链接的文档是样式表。</p></li><li><p><code>icon</code>：表示链接的是网站的图标。</p></li><li><p><code>preload</code>：表示提前加载资源。</p></li><li><p><code>alternate</code>：表示替代文档，例如不同语言或版本。</p></li></ul></li></ul><h5 id="href"><a href="#href" class="headerlink" title="href"></a>href</h5><p>全称：<code>href</code> 是 “hypertext reference” 的缩写。</p><p>表示：用于指定被链接文档的 URL。</p><p>作用：它指向要链接的资源的位置，通常是外部文件的路径（如 CSS 文件、图标等）。</p><h4 id="25、优化方法"><a href="#25、优化方法" class="headerlink" title="25、优化方法"></a>25、优化方法</h4><h4 id="26、animation-动画效果"><a href="#26、animation-动画效果" class="headerlink" title="26、animation(动画效果)"></a>26、animation(动画效果)</h4><blockquote><p><code>animation</code> 属性用于为元素创建动画效果。它可以定义动画的持续时间、重复次数、延迟等</p></blockquote><h5 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h5><p>指定动画的名称，对应 <code>@keyframes</code> 定义的动画。</p><h5 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h5><p>动画的持续时间，即动画从开始到结束所需的时间。</p><h5 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h5><p>控制动画的速度变化曲线，常见值有 <code>linear</code>、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code>、<code>ease-in-out</code>，或者使用 <code>cubic-bezier</code> 自定义</p><h5 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h5><p>动画开始之前的延迟时间。</p><h5 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h5><p>动画的播放次数，可以是数字（如 <code>1</code>、<code>3</code>）或 <code>infinite</code>（无限次循环）</p><h5 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h5><p>设置动画的方向，可选值：</p><ul><li><code>normal</code>：按定义的顺序播放。</li><li><code>reverse</code>：反方向播放。</li><li><code>alternate</code>：交替正向和反向播放。</li><li><code>alternate-reverse</code>：交替反向和正向播放。</li></ul><h5 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h5><p>控制动画在播放前或结束后是否保持样式。</p><ul><li><code>none</code>：不保留动画效果。</li><li><code>forwards</code>：保持动画结束时的样式。</li><li><code>backwards</code>：保持动画开始时的样式。</li><li><code>both</code>：在动画前后都保留样式。</li></ul><h5 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h5><p>控制动画的播放状态，可以是 <code>running</code>（播放）或 <code>paused</code>（暂停）。</p><h4 id="27、如何实现垂直居中"><a href="#27、如何实现垂直居中" class="headerlink" title="27、如何实现垂直居中"></a>27、如何实现垂直居中</h4><h5 id="🐌flex"><a href="#🐌flex" class="headerlink" title="🐌flex"></a>🐌flex</h5><p>align-items</p><h5 id="🐌grid"><a href="#🐌grid" class="headerlink" title="🐌grid"></a>🐌grid</h5><p>place-items</p><h5 id="🐌绝对定位"><a href="#🐌绝对定位" class="headerlink" title="🐌绝对定位"></a>🐌绝对定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.absolute-content</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute; <span class="hljs-comment">/* 设置为绝对定位 */</span><br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>; <span class="hljs-comment">/* 移动到父元素中间 */</span><br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>; <span class="hljs-comment">/* 移动到父元素中间 */</span><br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>); <span class="hljs-comment">/* 向上和向左移动自身高度和宽度的一半 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="28、行内元素水平居中"><a href="#28、行内元素水平居中" class="headerlink" title="28、行内元素水平居中"></a>28、行内元素水平居中</h4><p>使用text-align控制文本居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;inline-container&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">span</span> class=&quot;inline-box&quot;&gt;居中内容&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br><br><span class="hljs-selector-class">.inline-container</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: center;         <span class="hljs-comment">/* 水平居中 */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;             <span class="hljs-comment">/* 设置容器高度 */</span><br>&#125;<br><br><span class="hljs-selector-class">.inline-box</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;      <span class="hljs-comment">/* 设置为行内块元素以应用宽高 */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;             <span class="hljs-comment">/* 设置盒子高度 */</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;              <span class="hljs-comment">/* 设置盒子宽度 */</span><br>    <span class="hljs-attribute">background-color</span>: lightyellow; <span class="hljs-comment">/* 背景颜色 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（2）HTML"><a href="#（2）HTML" class="headerlink" title="（2）HTML"></a>（2）HTML</h3><h4 id="0、HTML5新特性"><a href="#0、HTML5新特性" class="headerlink" title="0、HTML5新特性"></a>0、HTML5新特性</h4><h5 id="🔥新的语义化标签"><a href="#🔥新的语义化标签" class="headerlink" title="🔥新的语义化标签"></a>🔥新的语义化标签</h5><ul><li>article 独立的内容</li><li>aside：侧边栏</li><li>header：头部</li><li>nav：导航</li><li>section：文档中的一小节</li><li>footer：页脚</li><li>mark（默认黄色背景）</li></ul><h5 id="🔥画布Canvas-API"><a href="#🔥画布Canvas-API" class="headerlink" title="🔥画布Canvas API"></a>🔥画布Canvas API</h5><h5 id="🔥地理API"><a href="#🔥地理API" class="headerlink" title="🔥地理API"></a>🔥地理API</h5><h5 id="🔥-localStorage、sessionStorage"><a href="#🔥-localStorage、sessionStorage" class="headerlink" title="🔥 localStorage、sessionStorage"></a>🔥 localStorage、sessionStorage</h5><h5 id="🔥websocket、webworker"><a href="#🔥websocket、webworker" class="headerlink" title="🔥websocket、webworker"></a>🔥websocket、webworker</h5><h5 id="🔥拖拽释放（Drag-and-drop）API"><a href="#🔥拖拽释放（Drag-and-drop）API" class="headerlink" title="🔥拖拽释放（Drag and drop）API"></a>🔥拖拽释放（Drag and drop）API</h5><h5 id="🔥音视频API（audio，video）"><a href="#🔥音视频API（audio，video）" class="headerlink" title="🔥音视频API（audio，video）"></a>🔥音视频API（audio，video）</h5><h5 id="🔥表单控件，calendar，date，time，email，url"><a href="#🔥表单控件，calendar，date，time，email，url" class="headerlink" title="🔥表单控件，calendar，date，time，email，url"></a>🔥表单控件，calendar，date，time，email，url</h5><h4 id="1、语义化的理解"><a href="#1、语义化的理解" class="headerlink" title="1、语义化的理解"></a>1、语义化的理解</h4><ul><li>让页面的内容结构化，便于对浏览器和搜索引擎解析</li><li>即使没有CSS的情况下也可以以一种文档的格式显示，容易阅读</li><li>搜索引擎的爬虫依赖HTML标记来确认上下文和各个关键字的权重，利于SEO</li></ul><h4 id="2、内联框架"><a href="#2、内联框架" class="headerlink" title="2、内联框架"></a>2、内联框架</h4><blockquote><p>内联框架（Inline Frame），通常用 <code>&lt;iframe&gt;</code> 标签表示，是一种在当前HTML文档中嵌入另一个HTML文档的方式。</p></blockquote><p>🐣<strong>特性和优劣：</strong></p><ul><li><p>🔹嵌入内容：可以轻松地在网页中嵌入其他网页、视频、地图等多媒体内容，用户无需离开当前页面。</p></li><li><p>🔹独立文档（内容分离）：内联框架中的内容是独立的，与父文档的CSS和JavaScript隔离，避免了样式和脚本冲突。</p></li><li><p>🔸跨域问题：嵌入的内容可能受<strong>同源策略</strong>影响，导致无法访问内联框架中的文档内容。</p></li><li><p>🔸性能开销：使用内联框架可能导致性能问题，因为每个框架都是一个独立的文档，增加了加载和渲染的开销。</p></li><li><p>🔸SEO影响：搜索引擎可能对内联框架中的内容抓取不佳。</p></li><li><p>🔸安全问题：嵌入的网页可能会被恶意攻击者用于钓鱼或注入恶意代码的攻击。</p></li></ul><p>🐣<strong>属性：</strong></p><ul><li><code>src</code>：指定要加载的文档URL。</li><li><code>width</code> 和 <code>height</code>：设置框架的宽度和高度。</li><li><code>sandbox</code>：应用一系列限制以提高安全性。</li><li><code>allow</code>：控制允许的功能，如使用摄像头、麦克风等。</li></ul><h4 id="3、BFC"><a href="#3、BFC" class="headerlink" title="3、BFC"></a>3、BFC</h4><blockquote><p>Block Formatting Contexts</p></blockquote><p>属于普通流，即元素按照其在HTML中的位置至上而下布局。在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则被渲染成一个完整的新行。除非另外指定，否则所有元素默认都是普通流定位。</p><ul><li>BFC 是一种独立的区域，在这个区域内，元素的布局不会影响外部的元素，而外部的布局也不会影响到内部的元素。</li><li>BFC 可以包裹内部的浮动元素，防止它们从容器中溢出，导致布局问题</li><li>在 BFC 内部，垂直方向的 margin 不会与外部的 margin 合并</li></ul><p>只要元素满足下面任意条件即可触发BFC特性</p><ul><li>body 根元素</li><li>浮动元素：float除了none以外的值</li><li>绝对定位元素：absolute、fixed</li><li>display：inline-block、table-cells、flex&#x2F;grid</li><li>overflow除了visable以外的值</li></ul><h4 id="4、href和src"><a href="#4、href和src" class="headerlink" title="4、href和src"></a>4、href和src</h4><ul><li>**<code>href</code>**：用于链接到其他文档或资源，通常用于创建导航或样式引用。</li><li>**<code>src</code>**：用于嵌入和加载外部资源，如图像、脚本和内联框架。</li></ul><h4 id="5、readonly和disabled"><a href="#5、readonly和disabled" class="headerlink" title="5、readonly和disabled"></a>5、readonly和disabled</h4><h5 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h5><ul><li>作用：让输入框内容变成只读状态，用户不能修改其内容。</li><li>可提交表单：带有 <code>readonly</code> 的输入框内容<strong>可以提交</strong>到服务器。</li><li>外观：在大多数浏览器中，<code>readonly</code> 不会改变输入框的样式，用户仍可以选中和复制内容。</li></ul><h5 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h5><ul><li>作用：将输入框禁用，用户无法点击、获取焦点或输入内容。</li><li>不可提交表单：带有 <code>disabled</code> 属性的输入框内容<strong>不会被提交</strong>到服务器。</li><li>外观：大多数浏览器会将 <code>disabled</code> 状态的输入框样式变灰，且用户无法选中或复制内容</li></ul><h3 id="（3）页面渲染"><a href="#（3）页面渲染" class="headerlink" title="（3）页面渲染"></a>（3）页面渲染</h3><h4 id="1、网页的生成过程"><a href="#1、网页的生成过程" class="headerlink" title="1、网页的生成过程"></a>1、网页的生成过程</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work">渲染页面：浏览器的工作原理 - Web 性能 | MDN</a></p><p>🐽DNS解析：</p><ul><li>用户在浏览器中输入URL，浏览器会像域名服务器发起DNS查询请求，得到IP地址。</li></ul><p>🐽TCP握手和HTTPS握手：</p><ul><li>浏览器通过TCP三次握手与服务器建立连接，接着进行HTTPS握手，也叫TLS协商。</li></ul><p>🐽请求和响应：</p><ul><li>建立好连接后，浏览器会代表用户发送一个GET请求，服务器接收到请求后，查找对应的资源（如HTML文件、CSS文件、JavaScript文件等），并将其作为HTTP响应发送回浏览器。</li></ul><p>🐽解析HTML：</p><ul><li>浏览器接收到HTML文档后，开始解析。HTML被解析为<strong>DOM（文档对象模型）树</strong>，每个元素对应树中的一个节点。</li></ul><p>🐽解析CSS：</p><ul><li>浏览器会同时解析CSS文件，生成<strong>CSSOM（CSS对象模型）树</strong>。这棵树描述了所有样式和它们如何应用于DOM节点。</li></ul><p>🐽执行JavaScript：</p><ul><li>如果页面中包含JavaScript，浏览器会在合适的时机（通常是解析到<code>&lt;script&gt;</code>标签时）执行脚本。JavaScript可以操作DOM和CSSOM，从而可能导致重新布局和重绘。</li></ul><p>🐽构建渲染树：</p><ul><li>浏览器结合DOM树和CSSOM树，生成<strong>渲染树</strong>。渲染树只包含需要在屏幕上显示的元素和其样式。</li></ul><p>🐽布局（Flow）：</p><ul><li>浏览器计算渲染树中每个节点的确切位置和大小，完成布局过程。</li></ul><p>🐽绘制（Paint）：</p><ul><li>浏览器将渲染树中的内容绘制到屏幕上。这一过程涉及将元素的视觉样式渲染为像素。</li></ul><p>🐽页面交互：</p><ul><li>用户与页面的交互（如点击、输入等）会触发事件，可能导致进一步的DOM更新、重排和重绘。</li></ul><h4 id="2、重绘（Repaint）和重排（Reflow）"><a href="#2、重绘（Repaint）和重排（Reflow）" class="headerlink" title="2、重绘（Repaint）和重排（Reflow）"></a>2、重绘（Repaint）和重排（Reflow）</h4><blockquote><p>重排一定会引起重绘，而重绘不一定会导致重排。</p></blockquote><h5 id="🐇重绘："><a href="#🐇重绘：" class="headerlink" title="🐇重绘："></a>🐇重绘：</h5><p>当元素的外观（如颜色、背景等）发生变化，但其几何形状（大小和位置）不变时，浏览器会执行重绘。重绘是一个较轻的操作，因为只需要重新绘制受影响的部分。</p><p>🔸相对较快，影响较小，但频繁的重绘仍然可能导致性能问题。</p><h5 id="🐇重排："><a href="#🐇重排：" class="headerlink" title="🐇重排："></a>🐇重排：</h5><p>当元素的几何形状（如大小、位置）发生变化时，浏览器会执行重排。重排是一个更重的操作，因为它可能会影响文档中其他元素的位置和布局，需要重新计算页面的几何形状。</p><p>如：改变元素的宽度、高度、边距、填充或添加&#x2F;删除DOM元素。</p><p>🔸性能开销更大，因为它涉及更复杂的计算，特别是在复杂布局中。</p><h5 id="🐇如何优化？"><a href="#🐇如何优化？" class="headerlink" title="🐇如何优化？"></a>🐇如何优化？</h5><ul><li><p>减少重绘：</p><ul><li><p>使用CSS类：通过切换CSS类而不是单独修改样式，减少频繁的样式变化。</p></li><li><p>使用CSS动画：尽量使用CSS动画和过渡，而非JavaScript，CSS引擎在处理动画时更高效。</p></li><li><p>合并样式改变：在一次重绘中，尽量合并多个样式改变，而不是逐个改变。</p></li></ul></li><li><p>减少重排：</p><ul><li>批量DOM操作：尽量将多次DOM操作合并为一次，例如使用文档片段（DocumentFragment）或将元素的可见性设置为<code>display: none</code>，进行修改后再显示。</li><li>避免频繁访问布局属性：尽量减少访问可能引发重排的属性（如<code>offsetWidth</code>、<code>clientHeight</code>等），可以将需要的值存储在变量中，避免多次读取。</li><li>使用绝对或固定定位：对于不需要重新布局的元素，使用绝对定位（<code>position: absolute</code>）可以减少重排。</li><li>避免使用表格布局：使用现代的CSS布局（如Flexbox或Grid）可以更好地控制布局并减少重排。</li><li>监听事件优化：使用事件委托而不是在每个元素上单独添加事件监听器，以减少内存占用和重排。</li></ul></li></ul><h4 id="3、DocumentFragment"><a href="#3、DocumentFragment" class="headerlink" title="3、DocumentFragment"></a>3、DocumentFragment</h4><blockquote><p><code>DocumentFragment</code> 是一个轻量级的容器，用于在文档中临时存储和操作一组节点。它在处理DOM操作时非常有用，因为它可以帮助减少重绘和重排的次数。</p></blockquote><ul><li><strong>轻量级</strong>：<code>DocumentFragment</code> 本身并不是文档的一部分，所以对它的操作不会引发重排或重绘。</li><li><strong>临时存储</strong>：可以将多个节点添加到 <code>DocumentFragment</code> 中，进行批量处理。</li><li><strong>高效插入</strong>：将 <code>DocumentFragment</code> 插入到DOM中时，所有包含的节点会一次性添加，从而减少DOM操作的开销。</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个 DocumentFragment</span><br><span class="hljs-keyword">const</span> fragment = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createDocumentFragment</span>();<br><br><span class="hljs-comment">// 创建多个元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> newElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    newElement.<span class="hljs-property">textContent</span> = <span class="hljs-string">`Item <span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>`</span>;<br>    fragment.<span class="hljs-title function_">appendChild</span>(newElement); <span class="hljs-comment">// 将元素添加到 DocumentFragment 中</span><br>&#125;<br><br><span class="hljs-comment">// 一次性将 DocumentFragment 插入到 DOM 中</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;container&#x27;</span>).<span class="hljs-title function_">appendChild</span>(fragment);<br><br></code></pre></td></tr></table></figure><h4 id="4、preload、prefetch-和-prerender"><a href="#4、preload、prefetch-和-prerender" class="headerlink" title="4、preload、prefetch 和 prerender"></a>4、preload、prefetch 和 prerender</h4><blockquote><p><code>&lt;link rel=&quot;preload/prefecth/prerender&quot; href=&quot;&quot; as=&quot;&quot;&gt;</code></p></blockquote><h5 id="🐕preload"><a href="#🐕preload" class="headerlink" title="🐕preload"></a>🐕preload</h5><p>目的：用于优先加载当前页面所需的<strong>关键资源</strong>（如CSS、JS、图像等），确保在页面渲染时，这些资源已准备就绪。</p><ul><li>加快页面加载：确保用户在访问页面时，不会因为缺少关键资源而等待，从而提升用户体验。</li><li>优化渲染：特别适用于需要即时显示的内容，比如关键图像、样式或JavaScript文件。</li></ul><p><strong>高优先级</strong></p><h5 id="🦮prefetch"><a href="#🦮prefetch" class="headerlink" title="🦮prefetch"></a>🦮prefetch</h5><p>目的：用于在用户当前页面浏览时，提前加载下一个可能会访问的页面或资源（如图像、样式）。（浏览器会在空闲时间加载 <code>prefetch</code> 指定的资源，不会干扰当前页面的加载。）</p><ul><li>减少等待时间：在用户导航到下一个页面时，减少加载时间，提供更顺畅的体验。</li><li>利用空闲时间：通过在用户当前操作的上下文中加载下一个可能需要的资源，优化整体性能。</li></ul><p><strong>低优先级</strong></p><h5 id="🐕‍🦺prerender"><a href="#🐕‍🦺prerender" class="headerlink" title="🐕‍🦺prerender"></a>🐕‍🦺prerender</h5><p>目的：在后台完全渲染一个页面（通常用于用户很可能会访问的页面），使其在用户访问时几乎立即可见。（资源消耗较大，因为需要加载和渲染整个界面）</p><p>提供即时体验：用户导航到预渲染的页面时，几乎可以立即看到内容，消除了加载时间。</p><p>资源消耗：由于预渲染涉及完整页面的加载和渲染，可能会消耗较多的带宽和计算资源。</p><p><strong>高优先级</strong></p><h4 id="5、图片懒加载"><a href="#5、图片懒加载" class="headerlink" title="5、图片懒加载"></a>5、图片懒加载</h4><h4 id="6、优化"><a href="#6、优化" class="headerlink" title="6、优化"></a>6、优化</h4><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><ul><li>使用语义化HTML标签</li><li>给图片加上正确的宽高，减少页面的重排</li><li>使用正确的闭合标签</li><li>使用link导入而不是@import导入</li></ul><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><ul><li>尽量避免使用表达式</li><li>把同类图片合并成一张，减少图片请求</li><li>减少查询层级</li><li></li></ul><h5 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h5><ul><li>避免频繁操作DOM</li><li><code>&lt;script&gt;</code>标签放在最下方或者加上defer&#x2F;async关键字</li><li>删除注释</li></ul><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><ul><li>尽量合并和压缩CSS、JS文件，减少文件传输时间</li><li>使用CDN加速，使用户从离自己最近的服务器下载文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.22</title>
    <link href="/2024/10/22/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.22/"/>
    <url>/2024/10/22/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.22/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span><h2 id="2024-10-22"><a href="#2024-10-22" class="headerlink" title="2024&#x2F;10&#x2F;22"></a>2024&#x2F;10&#x2F;22</h2><h4 id="（1）回溯"><a href="#（1）回溯" class="headerlink" title="（1）回溯"></a>（1）回溯</h4><h5 id="1、全排列"><a href="#1、全排列" class="headerlink" title="1、全排列"></a>1、<a href="https://leetcode.cn/problems/permutations/">全排列</a></h5><p><strong>方法一</strong>：建立数组记录是否已经在排列中。</p><p>通过递归 Lambda 表达式的方式定义了 <code>dfs</code> 函数。这种写法的重点是允许你在 Lambda 表达式中递归调用自己。</p><ul><li>这里 <code>dfs</code> 是 Lambda 表达式的第一个参数，<code>auto&amp;&amp;</code> 是一种<strong>万能引用</strong>（Universal Reference）。这样做的目的是允许 Lambda 表达式递归调用自己。由于 Lambda 没有函数名，如果你想在内部递归调用自己，就需要显式传递自己给自己。</li><li>这个部分表示<strong>捕获列表</strong>。<code>&amp;</code> 表示捕获外部作用域的所有变量（通过引用）。这允许 Lambda 表达式在函数内部访问并修改外部变量。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; res;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">path</span><span class="hljs-params">(n)</span>,<span class="hljs-title">on_path</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">auto</span> dfs=[&amp;](<span class="hljs-keyword">auto</span>&amp;&amp; dfs,<span class="hljs-type">int</span> i)&#123;<br>            <span class="hljs-keyword">if</span>(i==n)&#123;<br>                res.<span class="hljs-built_in">emplace_back</span>(path);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(!on_path[j])&#123;<br>                    on_path[j]=<span class="hljs-number">1</span>;<br>                    path[i]=nums[j];<br>                    <span class="hljs-built_in">dfs</span>(dfs,i+<span class="hljs-number">1</span>);<br>                    on_path[j]=<span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(dfs,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res; <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法二：（看不大懂咧）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; res, vector&lt;<span class="hljs-type">int</span>&gt;&amp; output, <span class="hljs-type">int</span> first, <span class="hljs-type">int</span> len)</span></span>&#123;<br>        <span class="hljs-comment">// 所有数都填完了</span><br>        <span class="hljs-keyword">if</span> (first == len) &#123;<br>            res.<span class="hljs-built_in">emplace_back</span>(output);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = first; i &lt; len; ++i) &#123;<br>            <span class="hljs-comment">// 动态维护数组</span><br>            <span class="hljs-built_in">swap</span>(output[i], output[first]);<br>            <span class="hljs-comment">// 继续递归填下一个数</span><br>            <span class="hljs-built_in">backtrack</span>(res, output, first + <span class="hljs-number">1</span>, len);<br>            <span class="hljs-comment">// 撤销操作</span><br>            <span class="hljs-built_in">swap</span>(output[i], output[first]);<br>        &#125;<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; res;<br>        <span class="hljs-built_in">backtrack</span>(res, nums, <span class="hljs-number">0</span>, (<span class="hljs-type">int</span>)nums.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、子集"><a href="#2、子集" class="headerlink" title="2、子集"></a>2、<a href="https://leetcode.cn/problems/subsets/">子集</a></h5><blockquote><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p></blockquote><p>⚠️错误示范：</p><ul><li>res没有初始化成有一个空子集，循环直接结束，over。</li><li>遍历的时候直接修改了res的长度，遍历会持续继续下去不会停止。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:nums)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j:res)&#123;<br>            j.<span class="hljs-built_in">push_back</span>(i);<br>            res.<span class="hljs-built_in">push_back</span>(j);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>🔸<strong>方法一</strong>：（正确版）</p><p>首先初始化成一个含有空子集的向量（注意题目空子集也是子集）。然后每次遍历nums数组，再遍历当前的res数组，将res数组中的向量添加进num中的元素后再添加进res中，这样就可以保证每个子集都被涵盖到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res=&#123;&#123;&#125;&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:nums)&#123;<br>            <span class="hljs-type">int</span> n=res.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                vector&lt;<span class="hljs-type">int</span>&gt; tmp=res[j];<br>                tmp.<span class="hljs-built_in">push_back</span>(i);<br>                res.<span class="hljs-built_in">push_back</span>(tmp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法二、三时间复杂度更高，就不赘述了。</p><h5 id="3、组合总和"><a href="#3、组合总和" class="headerlink" title="3、组合总和"></a>3、<a href="https://leetcode.cn/problems/combination-sum/">组合总和</a></h5><blockquote><p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个。</p></blockquote><p>🔸方法一：选或不选</p><p>从数组的第零个数开始遍历，有两种选择：</p><ul><li>不选这个数，直接开始遍历下一个数。</li><li>选择这个数，dfs第二个参数表示还差多少凑够。减去这个数的大小后，继续从这个数遍历，表示可以继续选这个数。</li></ul><p>遍历后需要”恢复现场“，也就是把这个数再弹走。</p><p>如果num&#x3D;&#x3D;0表示这个序列可行；如果i已经等于数组长度或者num&lt;0表示不用再继续遍历。</p><p>✅剪枝：将数组排序，如果在递归的时候发现num&lt;当前元素，那么由于后面的数字会更大，就不需遍历了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combinationSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; candidates, <span class="hljs-type">int</span> target) &#123;<br>        range::<span class="hljs-built_in">sort</span>(candidates);<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>        vector&lt;<span class="hljs-type">int</span>&gt; path;<br>        <span class="hljs-keyword">auto</span> dfs=[&amp;](<span class="hljs-keyword">auto</span>&amp;&amp; dfs,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> num)&#123;<br>            <span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;<br>                res.<span class="hljs-built_in">push_back</span>(path);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i==candidates.<span class="hljs-built_in">size</span>()|| num&lt;candidate[i])&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-built_in">dfs</span>(dfs,i+<span class="hljs-number">1</span>,num);<br><br>            path.<span class="hljs-built_in">push_back</span>(candidates[i]);<br>            <span class="hljs-built_in">dfs</span>(dfs,i,num-candidates[i]);<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(dfs,<span class="hljs-number">0</span>,target);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="4、括号生成"><a href="#4、括号生成" class="headerlink" title="4、括号生成"></a>4、<a href="https://leetcode.cn/problems/generate-parentheses/">括号生成</a></h5><blockquote><p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p></blockquote><p>思路很简单：</p><p>如果括号数等于指定个数就不继续dfs；</p><p>右括号数小于左括号数的时候才能填右括号（括号需要合法）；</p><p>基于上条右括号数小于等于左括号，故而只需判断l&lt;n的情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        vector&lt;string&gt; res;<br>        string ans;<br>        <span class="hljs-keyword">auto</span> dfs=[&amp;](<span class="hljs-keyword">auto</span>&amp;&amp; dfs,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)&#123;<br>            <span class="hljs-keyword">if</span>(l==n&amp;&amp;r==n)&#123;<br>                res.<span class="hljs-built_in">push_back</span>(ans);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(l&lt;n)&#123;<br>                ans+=<span class="hljs-string">&#x27;(&#x27;</span>;<br>                <span class="hljs-built_in">dfs</span>(dfs,l+<span class="hljs-number">1</span>,r);<br>                ans.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(r&lt;l)&#123;<br>                ans+=<span class="hljs-string">&#x27;)&#x27;</span>;<br>                <span class="hljs-built_in">dfs</span>(dfs,l,r+<span class="hljs-number">1</span>);<br>                ans.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(dfs,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）二分法"><a href="#（2）二分法" class="headerlink" title="（2）二分法"></a>（2）二分法</h4><h5 id="1、-寻找旋转排序数组中的最小值"><a href="#1、-寻找旋转排序数组中的最小值" class="headerlink" title="1、 寻找旋转排序数组中的最小值"></a>1、<a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/"> 寻找旋转排序数组中的最小值</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=n<span class="hljs-number">-1</span>,mid;<br>        <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>            mid=l+(r-l)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;nums[r])&#123;<br>                l=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;nums[r])&#123;<br>                r=mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[mid];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.19</title>
    <link href="/2024/10/19/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.19/"/>
    <url>/2024/10/19/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.19/</url>
    
    <content type="html"><![CDATA[<h2 id="2024-10-19"><a href="#2024-10-19" class="headerlink" title="2024&#x2F;10&#x2F;19"></a>2024&#x2F;10&#x2F;19</h2><h4 id="（1）数组操作"><a href="#（1）数组操作" class="headerlink" title="（1）数组操作"></a>（1）数组操作</h4><h5 id="1、使二进制数组全部等于-1-的最少操作次数-I"><a href="#1、使二进制数组全部等于-1-的最少操作次数-I" class="headerlink" title="1、使二进制数组全部等于 1 的最少操作次数 I"></a>1、<a href="https://leetcode.cn/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i/">使二进制数组全部等于 1 的最少操作次数 I</a></h5><blockquote><p>给你一个二进制数组 <code>nums</code> 。</p><p>你可以对数组执行以下操作 <strong>任意</strong> 次（也可以 0 次）：</p><ul><li>选择数组中 <strong>任意连续</strong> 3 个元素，并将它们 <strong>全部反转</strong> 。</li></ul><p><strong>反转</strong> 一个元素指的是将它的值从 0 变 1 ，或者从 1 变 0 。</p><p>请你返回将 <code>nums</code> 中所有元素变为 1 的 <strong>最少</strong> 操作次数。如果无法全部变成 1 ，返回 -1 。</p></blockquote><p>思路：遇见0就翻转，从左至右模拟，一直到倒数第三个元素，这样得到的结果就是最小的。如果模拟到最后，剩下两个元素不为1，就说明没办法。</p><p><strong>二进制运算符号：</strong></p><ul><li><p>&amp;：按位与</p></li><li><p>|：按位或</p></li><li><p>^：按位异或（利用这个符号，异或1可以对每一位取反）</p></li><li><p>~：按位取反</p></li><li><p>&lt;&lt;：左移（相当于*2，右边补零）</p></li><li><p><code>&gt;&gt;</code>：右移（相当于&#x2F;2，向下取整）</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minOperations</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-2</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">0</span>)&#123;<br>                nums[i+<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>                nums[i+<span class="hljs-number">2</span>]^=<span class="hljs-number">1</span>;<br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[n<span class="hljs-number">-2</span>]&amp;&amp;nums[n<span class="hljs-number">-1</span>]?cnt:<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、使二进制数组全部等于-1-的最少操作次数-II"><a href="#2、使二进制数组全部等于-1-的最少操作次数-II" class="headerlink" title="2、使二进制数组全部等于 1 的最少操作次数 II"></a>2、<a href="https://leetcode.cn/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-ii/">使二进制数组全部等于 1 的最少操作次数 II</a></h5><blockquote><p>选择数组中 <strong>任意</strong> 一个下标 <code>i</code> ，并将从下标 <code>i</code> 开始一直到数组末尾 <strong>所有</strong> 元素 <strong>反转</strong> 。</p></blockquote><p>有了上一题的启发，这一题很好模拟。从前往后和从后往前都一样。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minOperations</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]^nums[i<span class="hljs-number">-1</span>])&#123;<br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]?cnt:cnt+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）栈模拟"><a href="#（2）栈模拟" class="headerlink" title="（2）栈模拟"></a>（2）栈模拟</h4><h5 id="1、字符串解码"><a href="#1、字符串解码" class="headerlink" title="1、字符串解码"></a>1、<a href="https://leetcode.cn/problems/decode-string/">字符串解码</a></h5><blockquote><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。（注意可以嵌套[]）</p></blockquote><p>由于有嵌套，直接模拟很不好模拟，单栈法感觉没有双栈法清晰，所以这里只记录双栈法，比较容易理解。</p><p>num：存储遇到左括号前的数字（<strong>数字与’[‘一一对应</strong>）</p><p>currentS：存储遇到左括号前的字符串（也就是括号里的字符串要加到的地方）</p><p>怎么模拟呢？</p><ul><li>当遇到<code>数字</code>的时候，计算数字的大小（<strong>注意数字可能有好几位</strong>），k是截至上一位数字得到的值，然后到这一位需要十进制相加运算。</li><li>当遇到<code>&#39;[&#39;</code>的时候，意味着需要<strong>存储前面的数字和字符串</strong>了，方便后面弹栈出[]内的字符串时与之相加。<strong>存储后k和currentString需要归0</strong>。</li><li>当遇到<code>&#39;]&#39;</code>的时候，意味着可以将’[]’内的字符串与栈顶的字符串做相加了，按照数字的个数做相应相加，<strong>得到的结果继续使用currentString存储</strong>。</li><li>当遇到的是小写字母，就直接用它加到currentString上即可。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">decodeString</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; num;<br>        stack&lt;string&gt; currentS;<br>        string currentString;<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:s)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(c))&#123;<br>                k=<span class="hljs-number">10</span>*k+c-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                num.<span class="hljs-built_in">push</span>(k);<br>                currentS.<span class="hljs-built_in">push</span>(currentString);<br>                k=<span class="hljs-number">0</span>;<br>                currentString=<span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;]&#x27;</span>)&#123;<br>                <span class="hljs-type">int</span> times=num.<span class="hljs-built_in">top</span>();<br>                num.<span class="hljs-built_in">pop</span>();<br>                string cur=currentS.<span class="hljs-built_in">top</span>();<br>                currentS.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">while</span>(times)&#123;<br>                    cur+=currentString;<br>                    times--;<br>                &#125;<br>                currentString=cur;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                currentString+=c;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> currentString;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、每日温度"><a href="#2、每日温度" class="headerlink" title="2、每日温度"></a>2、<a href="https://leetcode.cn/problems/daily-temperatures/">每日温度</a></h5><blockquote><p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p></blockquote><p>（我写的跟官解尊的一模一样，除了我的代码更冗余，难道说四个月前的记忆还留在我脑海里？？）</p><p><strong>单调栈</strong>：（存储的是下标）</p><p>如果栈非空且当前元素大于栈顶元素作为下标的温度，就一直弹栈。并且开始记录栈顶的下标的天数差。最后再push进入当前下标。</p><ul><li>由于有<code>!tem.empty()</code>的条件，所以不需要在一开始push进0下标；</li><li>由于vector会每个值初始化为0，所以不需要特地取出还留在栈里的元素把它们的值赋为0。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=t.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">up</span><span class="hljs-params">(n)</span></span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; tem;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">while</span>(!tem.<span class="hljs-built_in">empty</span>()&amp;&amp;t[i]&gt;t[tem.<span class="hljs-built_in">top</span>()])&#123;<br>                up[tem.<span class="hljs-built_in">top</span>()]=i-tem.<span class="hljs-built_in">top</span>();<br>                tem.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            tem.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> up;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="3、柱状图中最大的矩形"><a href="#3、柱状图中最大的矩形" class="headerlink" title="3、柱状图中最大的矩形"></a>3、<a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">柱状图中最大的矩形</a></h5><blockquote><p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p></blockquote><p>思路：</p><ul><li><p>遍历每个下标，分别记录其左边离他最近的小于它高度的下标和右边离他最近的小于它高度的下标。（这一步需要用到单调栈）（分别使用<code>left[i]</code>和<code>right[i]</code>记录）</p></li><li><p>再次遍历，对于每个下标，以它作为高度能计算的最大面积就是：</p><ul><li><code>height[i]*(right[i]-left[i]-1)</code></li></ul></li></ul><p>那么如何计算两个下标数组呢？</p><p>我们可以这样模拟：</p><ul><li>遍历，如果栈不为空且当前元素小于栈顶元素，就记录它的下标为栈顶下标的右边最近小元素。<code>right[mono_stack.top()] = i;</code>并且弹栈继续比较。</li><li>如果栈为空，就说明当前下标的左边没有比它更小的元素，于是记录<code>left[i]=-1</code>；不然就说明栈顶元素是第一个小于它高度的下标。</li><li>最后把当前的下标压入栈中。</li></ul><p>注意将right数组的所有值均初始化为n，因为在遍历中一定可以记录left数组，却不一定能记录到right数组。有可能右边没有比当前元素小的值，初始化为n就免去了麻烦。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">largestRectangleArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = heights.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left</span><span class="hljs-params">(n)</span>, <span class="hljs-title">right</span><span class="hljs-params">(n, n)</span></span>;<br>        <br>        stack&lt;<span class="hljs-type">int</span>&gt; mono_stack;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">while</span> (!mono_stack.<span class="hljs-built_in">empty</span>() &amp;&amp; heights[mono_stack.<span class="hljs-built_in">top</span>()] &gt;= heights[i]) &#123;<br>                right[mono_stack.<span class="hljs-built_in">top</span>()] = i;<br>                mono_stack.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            left[i] = (mono_stack.<span class="hljs-built_in">empty</span>() ? <span class="hljs-number">-1</span> : mono_stack.<span class="hljs-built_in">top</span>());<br>            mono_stack.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            ans = <span class="hljs-built_in">max</span>(ans, (right[i] - left[i] - <span class="hljs-number">1</span>) * heights[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）二分法"><a href="#（2）二分法" class="headerlink" title="（2）二分法"></a>（2）二分法</h4><h5 id="1、在排序数组中查找元素的第一个和最后一个位置"><a href="#1、在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="1、在排序数组中查找元素的第一个和最后一个位置"></a>1、<a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">在排序数组中查找元素的第一个和最后一个位置</a></h5><blockquote><p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p></blockquote><p>我的办法是先用二分法找到目标元素，然后再依次向左向右找到边界。但是评论区有人说这种办法在最坏的情况下复杂度是O(n)，遂看官方的办法：两次二分法。第一次找到第一个&gt;&#x3D;target的元素，第二次找到第一个大于target的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123; <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target, <span class="hljs-type">bool</span> lower)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = (<span class="hljs-type">int</span>)nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, ans = (<span class="hljs-type">int</span>)nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>           <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>           <span class="hljs-keyword">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target))&#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>                ans = mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> leftIdx = <span class="hljs-built_in">binarySearch</span>(nums, target, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">int</span> rightIdx = <span class="hljs-built_in">binarySearch</span>(nums, target, <span class="hljs-literal">false</span>) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (leftIdx &lt;= rightIdx &amp;&amp; rightIdx &lt; nums.<span class="hljs-built_in">size</span>() &amp;&amp; nums[leftIdx] == target &amp;&amp; nums[rightIdx] == target) &#123;<br>            <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;leftIdx, rightIdx&#125;;<br>        &#125; <br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、搜索旋转排序数组"><a href="#2、搜索旋转排序数组" class="headerlink" title="2、搜索旋转排序数组"></a>2、<a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">搜索旋转排序数组</a></h5><blockquote><p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p><p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p><p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p><p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p></blockquote><p>思路：每次进行二分，mid左右两边的序列一定有一个是有序的。于是可以看target在不在有序的部分。如果在就在有序的部分查找，否则就在无序的部分查找。</p><p>如何判断有序？如果左边有序那么既然left&lt;&#x3D;mid就一定有nums[left]&lt;&#x3D;nums[mid]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>            <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]==target) <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">if</span>(nums[l]&lt;=nums[mid])&#123;<br>                (nums[l]&lt;=target&amp;&amp;target&lt;nums[mid])?r=mid<span class="hljs-number">-1</span>:l=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                (nums[mid]&lt;target&amp;&amp;target&lt;=nums[r])?l=mid+<span class="hljs-number">1</span>:r=mid<span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.16</title>
    <link href="/2024/10/16/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.16/"/>
    <url>/2024/10/16/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.16/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span><h2 id="2024-10-16"><a href="#2024-10-16" class="headerlink" title="2024&#x2F;10&#x2F;16"></a>2024&#x2F;10&#x2F;16</h2><p>测评*n，剪秋我的头好痛</p><h4 id="（1）链表"><a href="#（1）链表" class="headerlink" title="（1）链表"></a>（1）链表</h4><h5 id="1、-合并两个有序链表"><a href="#1、-合并两个有序链表" class="headerlink" title="1、 合并两个有序链表"></a>1、<a href="https://leetcode.cn/problems/merge-two-sorted-lists/"> 合并两个有序链表</a></h5><ul><li>递归</li></ul><p>重点：考虑当前应该做的事，不要深究下一次、再下一次递归如何。</p><p>考虑当前时刻，后面的链表已经合并，现在到了list1和list2节点。那就是哪个节点的值比较小，就将这个节点合并到后面链接的节点上。然后是结束递归的条件：节点遍历完之后直接return 该节点。这样还不用分情况讨论两个链表是否为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* list1, ListNode* list2)</span> </span>&#123;      <br>        <span class="hljs-keyword">if</span>(list1==<span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> list2;<br>        <span class="hljs-keyword">if</span>(list2==<span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> list1;<br>        <span class="hljs-keyword">if</span>(list1-&gt;val&lt;=list2-&gt;val) &#123;<br>            list1-&gt;next=<span class="hljs-built_in">mergeTwoLists</span>(list1-&gt;next,list2);<br>            <span class="hljs-keyword">return</span> list1;<br>        &#125;<br>        list2-&gt;next=<span class="hljs-built_in">mergeTwoLists</span>(list2-&gt;next,list1);<br>        <span class="hljs-keyword">return</span> list2;    <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>迭代</li></ul><p>设置哨兵节点，方便最后返回连接好的链表。</p><p>pre节点负责每次去连接下一个节点，所以注意<strong>每次循环后pre&#x3D;pre-&gt;next</strong>。</p><p>最后最多只剩下一个链表有剩余节点未连接，直接把pre接过去即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* list1, ListNode* list2)</span> </span>&#123;      <br>        ListNode *prehead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>        ListNode *pre=prehead;<br>        <span class="hljs-keyword">while</span>(list1&amp;&amp;list2)&#123;<br>            <span class="hljs-keyword">if</span>(list1-&gt;val&lt;=list2-&gt;val)&#123;<br>                pre-&gt;next=list1;<br>                list1=list1-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                pre-&gt;next=list2;<br>                list2=list2-&gt;next;<br>            &#125;<br>            pre=pre-&gt;next;<br>        &#125;<br>        pre-&gt;next=list2?list2:list1;<br>        <span class="hljs-keyword">return</span> prehead-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）数组"><a href="#（2）数组" class="headerlink" title="（2）数组"></a>（2）数组</h4><h5 id="1、最小元素和最大元素的最小平均值"><a href="#1、最小元素和最大元素的最小平均值" class="headerlink" title="1、最小元素和最大元素的最小平均值"></a>1、<a href="https://leetcode.cn/problems/minimum-average-of-smallest-and-largest-elements/">最小元素和最大元素的最小平均值</a></h5><blockquote><p>你有一个初始为空的浮点数数组 <code>averages</code>。另给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，其中 <code>n</code> 为偶数。</p><p>你需要重复以下步骤 <code>n / 2</code> 次：</p><ul><li>从 <code>nums</code> 中移除 <strong>最小</strong> 的元素 <code>minElement</code> 和 <strong>最大</strong> 的元素 <code>maxElement</code>。</li><li>将 <code>(minElement + maxElement) / 2</code> 加入到 <code>averages</code> 中。</li></ul><p>返回 <code>averages</code> 中的 <strong>最小</strong> 元素。</p></blockquote><p>这道题很简单，主要的点在于整型和浮点数的转化。以及除法运算在最后才做，避免每次循环都要做一次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">minimumAverage</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>；<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> ans=INT_MAX;<br>        <span class="hljs-keyword">while</span>(i&lt;n/<span class="hljs-number">2</span>)&#123;<br>            ans=<span class="hljs-built_in">min</span>(ans,nums[i]+nums[n<span class="hljs-number">-1</span>-i]);<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans/<span class="hljs-number">2.0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.15</title>
    <link href="/2024/10/15/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.15/"/>
    <url>/2024/10/15/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.15/</url>
    
    <content type="html"><![CDATA[<p>昨天复习前端，今天继续刷题；学点不熟悉的：树、链表、图。</p><span id="more"></span><h2 id="2024-10-15"><a href="#2024-10-15" class="headerlink" title="2024&#x2F;10&#x2F;15"></a>2024&#x2F;10&#x2F;15</h2><p>笔试*2</p><h4 id="（1）链表"><a href="#（1）链表" class="headerlink" title="（1）链表"></a>（1）链表</h4><h5 id="1、相交链表"><a href="#1、相交链表" class="headerlink" title="1、相交链表"></a>1、<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">相交链表</a></h5><blockquote><p>寻找相交节点</p></blockquote><p>方法：缝合两个链表，总能找到。</p><h5 id="2、反转链表"><a href="#2、反转链表" class="headerlink" title="2、反转链表"></a>2、<a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></h5><p>迭代法灵活用好三个链表节点：pre，cur，next</p><p>递归法一看就头晕，再抄一遍加深印象！！！</p><p>（理解题解中的一句话，就是假设链表的其余部分已经被反转，那么如何解决它前面的部分）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241015153437445.png" alt="image-20241015153437445" style="zoom:67%;" /><p>注意最开头的那个节点的下一个节点必须指向nullptr。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span>(!head|!head-&gt;next)<br>          <span class="hljs-keyword">return</span> head;<br>       ListNode* newHead=<span class="hljs-built_in">reverseList</span>(head-&gt;next);<br>       head-&gt;next-&gt;next=head;<br>       head-&gt;next=<span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="3、回文链表"><a href="#3、回文链表" class="headerlink" title="3、回文链表"></a>3、<a href="https://leetcode.cn/problems/palindrome-linked-list/">回文链表</a></h5><blockquote><p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code>;否则，返回 <code>false</code> 。</p></blockquote><ul><li>方法一：遍历一次之后栈存储节点值，时空均为O(n)</li><li>方法二：快慢指针，翻转前面一半的链表，慢指针向前，当前指针向后依次比较。空O(1)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head||!head-&gt;next)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        ListNode *pre=<span class="hljs-literal">nullptr</span>,*cur=<span class="hljs-literal">nullptr</span>,*slow=head,*fast=head;<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-literal">nullptr</span>&amp;&amp;fast-&gt;next!=<span class="hljs-literal">nullptr</span>)&#123;<br>            cur=slow;<br>            slow=slow-&gt;next;<br>            fast=fast-&gt;next-&gt;next;<br>            cur-&gt;next=pre;<br>            pre=cur;<br>        &#125; <br>        <span class="hljs-keyword">if</span>(fast)   <span class="hljs-comment">//对应的是奇数个节点的情况，此时需要跳过中间节点。</span><br>            slow=slow-&gt;next;<br>        <span class="hljs-keyword">while</span>(slow)&#123;<br>            <span class="hljs-keyword">if</span>(slow-&gt;val!=pre-&gt;val)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            slow=slow-&gt;next;<br>            pre=pre-&gt;next;<br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我试图在最后比较的时候就去翻转前面的链表，但是出错了……还是得最后比完再翻</p><ul><li>方法三：递归，时空均为O(n)</li></ul><p>首先要知道链表也可以从后往前遍历，方法是：。。迭代。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">void</span> <span class="hljs-title">printListNode</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == null)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">printListNode</span>(head-&gt;next);<br>    cout&lt;&lt;head.val&lt;&lt;endl;;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以思路就是，运用这个迭代的思想，让头跟尾比较。</p><h5 id="4、环形链表"><a href="#4、环形链表" class="headerlink" title="4、环形链表"></a>4、<a href="https://leetcode.cn/problems/linked-list-cycle/">环形链表</a></h5><blockquote><p>检测是否存在环</p></blockquote><ul><li>哈希表法</li></ul><p>记住存储的是节点就可。（不是数据！！！）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        unordered_set&lt;ListNode*&gt; res;<br>       ListNode *tmp=head;<br>        <span class="hljs-keyword">while</span> (tmp) &#123;<br>            <span class="hljs-keyword">if</span> (seen.<span class="hljs-built_in">count</span>(tmp)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            seen.<span class="hljs-built_in">insert</span>(tmp);<br>            tmp = tmp-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>快慢指针法</li></ul><p>（为什么我想到了快慢指针，也想到了判断它们是否相等来判断是否有环，但是就是没想到究竟如何实现嘞。。）</p><p>原理：如果有环，快指针进入环中之后慢慢地就会甚至在慢指针后，但是最后一定能追上慢指针。「Floyd 判圈算法」（又称龟兔赛跑算法）；如果没环，fast指针就会先到达最后。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head||!head-&gt;next) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        ListNode *slow=head,*fast=head-&gt;next;<br>        <span class="hljs-keyword">while</span>(slow!=fast)&#123;<br>            <span class="hljs-keyword">if</span>(!fast-&gt;nexr||!fast)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            slow=slow-&gt;next;<br>            fast=fast-&gt;next-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="5、环形链表-II"><a href="#5、环形链表-II" class="headerlink" title="5、环形链表 II"></a>5、<a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表 II</a></h5><blockquote><p>找到链表上环的起始点，没有返回null</p></blockquote><ul><li>哈希表法</li><li>快慢指针（都从head开始）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241015170856734.png" alt="image-20241015170856734"></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS课程3-分支：从MDN网站学CSS</title>
    <link href="/2024/10/14/HTML+CSS%E8%AF%BE%E7%A8%8B3-%E5%88%86%E6%94%AF%EF%BC%9A%E4%BB%8EMDN%E7%BD%91%E7%AB%99%E5%AD%A6CSS/"/>
    <url>/2024/10/14/HTML+CSS%E8%AF%BE%E7%A8%8B3-%E5%88%86%E6%94%AF%EF%BC%9A%E4%BB%8EMDN%E7%BD%91%E7%AB%99%E5%AD%A6CSS/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span><p>⭕<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference">CSS 参考 - CSS：层叠样式表 | MDN (mozilla.org)</a>：包含绝大部分CSS属性</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>（天哪，MDN网站上的知识点太全了，有种知识欲爆棚的感觉）</p><h4 id="（1）零碎"><a href="#（1）零碎" class="headerlink" title="（1）零碎"></a>（1）零碎</h4><ul><li>CSS中属性的值可以以函数的形式出现。<ul><li><code>calc()</code>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform"><code>transform</code></a> 的不同取值（eg：rotate）</li></ul></li><li>@media规则用来创建媒体查询，根据视口宽度来改变样式。</li><li>简写属性：<ul><li>padding（border、margin）：上、右、下、左</li><li>background：color、image、position、repeat、attachment</li></ul></li></ul><blockquote><p>一个没有在 CSS 简写属性中指定的值会恢复到它的初始值。这意味着 CSS 简写属性中的省略可以<strong>覆盖之前设置的值</strong>。</p></blockquote><h4 id="（2）CSS是怎么工作的？"><a href="#（2）CSS是怎么工作的？" class="headerlink" title="（2）CSS是怎么工作的？"></a>（2）CSS是怎么工作的？</h4><blockquote><p>当浏览器遇到识别不了的选择器或者属性，都会直接跳过然后去识别下一个</p></blockquote><ol><li>浏览器载入 HTML 文件（比如从网络上获取）。</li><li>将 HTML 文件转化成一个 DOM（Document Object Model），DOM 是文件在计算机内存中的表现形式。</li><li>接下来，浏览器会拉取该 HTML 相关的大部分资源，比如嵌入到页面的图片、视频和 CSS 样式。JavaScript 则会稍后进行处理。</li><li>浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id 等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id 选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。</li><li>上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。</li><li>网页展示在屏幕上（这一步被称为着色）。</li></ol><h3 id="二、CSS基础"><a href="#二、CSS基础" class="headerlink" title="二、CSS基础"></a>二、CSS基础</h3><h4 id="（1）CSS选择器"><a href="#（1）CSS选择器" class="headerlink" title="（1）CSS选择器"></a>（1）CSS选择器</h4><blockquote><p>选择器是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式。选择器选择的元素叫“选择器的对象”。</p></blockquote><h5 id="1、选择器列表"><a href="#1、选择器列表" class="headerlink" title="1、选择器列表"></a>1、选择器列表</h5><p>当有多个使用相同样式的CSS选择器，那么它们可以被混编为一个选择器列表。</p><p>⚠️当组合起来的选择器中有一个无效（存在语法错误），会造成整条规则失效。</p><h5 id="2、类型选择器"><a href="#2、类型选择器" class="headerlink" title="2、类型选择器"></a>2、类型选择器</h5><p>也叫标签名选择器或元素选择器，因为它在文档中选择了一个HTML标签&#x2F;元素的缘故。</p><h5 id="3、全局选择器"><a href="#3、全局选择器" class="headerlink" title="3、全局选择器"></a>3、全局选择器</h5><p>尽量不要使用，除了一些特殊情况：</p><p>比如我们想选择所有<code>&lt;artical&gt;</code>元素的第一子元素：<code>artical :first-child</code></p><p>这条语句很容易跟<code>artical:first-child</code>混合，他的意思是选择作为其父元素的第一个子元素的 <code>&lt;article&gt;</code> 元素。这意味着它只在 <code>&lt;article&gt;</code> 本身是某个父元素的第一个子元素时应用。</p><p>因此可以使用全局选择器：<code>artical *:first-child</code></p><h5 id="4、类选择器（-）"><a href="#4、类选择器（-）" class="headerlink" title="4、类选择器（.）"></a>4、类选择器（.）</h5><p>指向特定元素的类：<code>span.highlight</code></p><p>多个类被应用的时候指向一个元素：<code>.notebox.danger</code>（某个元素的类包含所有这些类会被选择）</p><h5 id="5、ID选择器（-）"><a href="#5、ID选择器（-）" class="headerlink" title="5、ID选择器（#）"></a>5、ID选择器（#）</h5><p>语法和类选择器一样。一个文档同个id只能用一次。</p><h5 id="6、伪类选择器（-）"><a href="#6、伪类选择器（-）" class="headerlink" title="6、伪类选择器（:）"></a>6、伪类选择器（:）</h5><blockquote><p>用于选择处于特定状态的元素，比如当它们是这一类型的第一个元素时，或者是当鼠标指针悬浮在元素上面的时候。它们表现得会像是你向你的文档的某个部分应用了一个类一样，帮你在你的标记文本中减少多余的类，让你的代码更灵活、更易于维护。<strong>不加空格</strong></p></blockquote><p>:label: 简单伪类：</p><ul><li>:first-child、:last-child：选择第一个&#x2F;最后一个子元素</li><li>:only-child：选择没有人和兄弟元素的元素。</li><li>:invalid：选择任何未通过验证的<code>&lt;form&gt; &lt;fieldset&gt; &lt;input&gt;</code>或其他表单元素（用于为用户显示字段错误）</li><li>:nth-child<ul><li>number：选择第number个元素。可用于为表格的col设置样式。</li><li>even&#x2F;odd：偶数&#x2F;奇数</li><li>An+B：n为正整数或0，A、B为整数，A不为0。</li><li><code>of &lt;selector&gt;</code>，传递选择器参数，可以选择与该选择器匹配的第n个元素。这个方法可以用于修复表格条纹。（表格一般颜色呈条纹状宜阅读，但是如果有一行被隐藏颜色就会被打乱）<code>.fixed &gt; tbody &gt; tr:nth-child(even of :not([hidden]))</code></li></ul></li></ul><p>:label:用户行为伪类：</p><ul><li>:hover：只会在用户将指针挪到元素上的时候才会激活，一般就是链接元素。</li><li>:focus：只会在用户使用键盘控制，选定元素的时候激活。</li></ul><h5 id="7、伪元素选择器（-）"><a href="#7、伪元素选择器（-）" class="headerlink" title="7、伪元素选择器（#）"></a>7、伪元素选择器（#）</h5><blockquote><p>表现得是像你往标记文本中加入全新 HTML 元素一样，而不是向现有的元素上应用类</p></blockquote><p>::first-line</p><h5 id="、存否和值选择器"><a href="#、存否和值选择器" class="headerlink" title="、存否和值选择器"></a>、存否和值选择器</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241019212625221.png" alt="image-20241019212625221"></p><h5 id="子字符串匹配选择器"><a href="#子字符串匹配选择器" class="headerlink" title="子字符串匹配选择器"></a>子字符串匹配选择器</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241019212736368.png" alt="image-20241019212736368"></p><p>🔸大小写不敏感：在闭合括号前加“i” : <code>li[class^=&quot;a&quot; i]</code></p><h5 id="1、包含选择符的选择器"><a href="#1、包含选择符的选择器" class="headerlink" title="1、包含选择符的选择器"></a>1、包含选择符的选择器</h5><p>仅仅是在两个选择器间加上一个空格。该选择器将选择<li>内部的所有<em>元素，也就是<li>的后代。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">em</span> &#123;<br>  <span class="hljs-attribute">color</span>: rebeccapurple;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、相邻选择符"><a href="#2、相邻选择符" class="headerlink" title="2、相邻选择符"></a>2、相邻选择符</h5>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS课程2-分支：从MDN网站学HTML</title>
    <link href="/2024/10/14/HTML+CSS%E8%AF%BE%E7%A8%8B2-%E5%88%86%E6%94%AF%EF%BC%9A%E4%BB%8EMDN%E7%BD%91%E7%AB%99%E5%AD%A6HTML/"/>
    <url>/2024/10/14/HTML+CSS%E8%AF%BE%E7%A8%8B2-%E5%88%86%E6%94%AF%EF%BC%9A%E4%BB%8EMDN%E7%BD%91%E7%AB%99%E5%AD%A6HTML/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span><h3 id="一、HTML基础知识"><a href="#一、HTML基础知识" class="headerlink" title="一、HTML基础知识"></a>一、HTML基础知识</h3><h4 id="（1）文档与网站架构"><a href="#（1）文档与网站架构" class="headerlink" title="（1）文档与网站架构"></a>（1）文档与网站架构</h4><h5 id="1、文档的基本组成部分"><a href="#1、文档的基本组成部分" class="headerlink" title="1、文档的基本组成部分"></a>1、文档的基本组成部分</h5><blockquote><p>每个页面上只能用一次 <code>&lt;main&gt;</code>，且直接位于<boby>中。最好不要把它嵌套进其他元素。<code>&lt;section&gt;</code> 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。<code>&lt;aside&gt;</code>包含一些间接信息（术语条目、作者简介、相关链接，等等）。</p></blockquote><ul><li><code>&lt;header&gt;</code> ：页眉</li><li><code>&lt;nav&gt;</code>：导航栏</li><li><code>&lt;main&gt;</code>：主内容。主内容中还可以有各种子内容区段，可用<code>&lt;artical&gt;、&lt;section&gt;</code>和<code>&lt;div&gt;</code>等元素表示。</li><li><code>&lt;aside&gt;</code>：侧边栏，经常嵌套在<code>&lt;main&gt;</code>中。</li><li><code>&lt;footer&gt;</code>：页脚</li></ul><h5 id="2、其他标签"><a href="#2、其他标签" class="headerlink" title="2、其他标签"></a>2、其他标签</h5><blockquote><p>div 元素非常便利但容易被滥用。由于它们没有语义值，会使 HTML 代码变得混乱。要小心使用，只有在没有更好的语义方案时才选择它，而且要尽可能少用，否则文档的升级和维护工作会非常困难。</p></blockquote><p><code>&lt;br&gt;</code> 可在段落中进行换行；<code>&lt;br&gt;</code> 是唯一能够生成多个短行结构（例如邮寄地址或诗歌）的元素。（MDN编辑人员怎么颠颠的，如下图，笑死我了）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241014165347592.png" alt="image-20241014165347592" style="zoom: 50%;" /><p><code>&lt;hr&gt;</code> 元素在文档中生成一条水平分割线，表示文本中主题的变化（例如话题或场景的改变）。一般就是一条水平的直线。例如：</p><p>（我受不了了，这里面的草图也太“草”了，好随意😂😂）</p><h4 id="（2）HTML调试"><a href="#（2）HTML调试" class="headerlink" title="（2）HTML调试"></a>（2）HTML调试</h4><blockquote><p>HTML 本身不容易出现语法错误，因为浏览器是以宽松模式运行的，这意味着即使出现语法错误浏览器依然会继续运行。浏览器通常都有内建规则来解析书写错误的标记，所以即使与预期不符，页面仍可显示出来。</p></blockquote><p>让界面通过<a href="https://validator.w3.org/">The W3C Markup Validation Service</a>，由W3C创立并维护的标记验证服务。</p><h5 id="W3C-的主要职责包括："><a href="#W3C-的主要职责包括：" class="headerlink" title="W3C 的主要职责包括："></a>W3C 的主要职责包括：</h5><ol><li><strong>制定和推广网络标准</strong>：W3C 为 HTML、CSS、XML、SVG、DOM 等核心网络技术制定了标准，这些技术确保了万维网的开放性和可访问性。</li><li><strong>确保互操作性</strong>：通过发布标准，W3C 确保不同的浏览器、设备和平台可以正确处理和显示网页内容。</li><li><strong>支持网络无障碍设计</strong>：W3C 还特别关注使得互联网可被所有人使用，包括残障人士（如通过 WCAG 标准）。</li><li><strong>开发安全性和隐私性相关技术</strong>：确保网络用户数据的隐私和安全。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241014170623771.png" alt="image-20241014170623771"></p><h3 id="二、多媒体与嵌入"><a href="#二、多媒体与嵌入" class="headerlink" title="二、多媒体与嵌入"></a>二、多媒体与嵌入</h3><h4 id="（1）HTML中的图像"><a href="#（1）HTML中的图像" class="headerlink" title="（1）HTML中的图像"></a>（1）HTML中的图像</h4><blockquote><p>未经许可<em>，</em>绝不要将 <code>src</code> 属性指向其他网站上的图像。这被称为“热链接（hotlinking）”。大多数人认为这是不道德的，因为这会导致每当有人访问你的页面，都会有另一些不知情的人为图像交付带宽费用。这也导致你无法掌控图像，图像有可能在你不知情的情况下，被删除或替换为尴尬的内容。</p></blockquote><h5 id="1、大小设置"><a href="#1、大小设置" class="headerlink" title="1、大小设置"></a>1、大小设置</h5><p>HTML 属性：用于指定图片的原始尺寸（height和width），帮助浏览器预留空间，提升布局稳定性。防止出现CLS：累计布局偏移。</p><p>不要用 HTML 属性调整大小：因为这可能导致图片模糊或变形，且浪费带宽。</p><p>使用 <strong>CSS</strong> 调整图片大小：更灵活，可以配合响应式设计，而不会影响图片的质量或性能。</p><p>正确的图片处理：在将图片上传到网页之前，应使用图像编辑器将其调整为合适的大小，以避免过大的图片影响加载速度。</p><h5 id="2、title"><a href="#2、title" class="headerlink" title="2、title"></a>2、title</h5><p>给图片指定title特性可以让鼠标悬停时显示出title内容。</p><p>但是<code>title</code> 有很多无障碍问题，这些问题主要是基于这样一个事实，即屏幕阅读器的支持并不完善，除此之外大多数浏览器都不会显示它，除非你将鼠标悬停在上面</p><h5 id="3、说明文字"><a href="#3、说明文字" class="headerlink" title="3、说明文字"></a>3、说明文字</h5><p>HTML专门提供了这样的语义容器，旨在说明文字和图片之间的关联。（不一定仅是图片）</p><p><code>&lt;figcaption&gt;</code>元素告诉浏览器和辅助技术工具，这段说明文字描述了<code>&lt;figure&gt;</code>元素的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/dinosaur.jpg&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;The head and torso of a dinosaur skeleton;</span></span><br><span class="hljs-string"><span class="hljs-tag">            it has a large head with long sharp teeth&quot;</span> /&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span><br>    A T-Rex on display in the Manchester University Museum.<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4、许可"><a href="#4、许可" class="headerlink" title="4、许可"></a>4、许可</h5><p>自由许可的图片网站：<a href="https://picryl.com/">https://picryl.com/</a>和<a href="https://thenounproject.com/">https://thenounproject.com/</a></p><p>绘制图像：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">Canvas API - Web API | MDN (mozilla.org)</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG">SVG：可缩放矢量图形 | MDN (mozilla.org)</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API">WebGL：web 中的 2D 的 3D 图形 - Web API | MDN (mozilla.org)</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API">WebRTC API - Web API | MDN (mozilla.org)</a></p><h4 id="（2）音频和视频"><a href="#（2）音频和视频" class="headerlink" title="（2）音频和视频"></a>（2）音频和视频</h4><h5 id="1、元素"><a href="#1、元素" class="headerlink" title="1、&lt;video&gt;元素"></a>1、<code>&lt;video&gt;</code>元素</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;rabbit320.webm&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    你的浏览器不支持 HTML 视频。可点击<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;rabbit320.mp4&quot;</span>&gt;</span>此链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>观看。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>src：指向你想要嵌入到网页中的视频资源</li><li>controls：使用 <code>controls</code> 属性来让视频或音频包含浏览器自带的控制界面，或者使用适当的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement">JavaScript API</a> 构建自己的界面。（对于患有癫痫的人来说很重要）</li><li><code>&lt;p&gt;</code>内的内容：这个叫做<strong>后备内容</strong>，当浏览器不支持 <code>&lt;video&gt;</code> 元素的时候，就会显示这段内容，借此我们能够对旧的浏览器提供回退。你可以添加任何后备内容，在这个例子中我们提供了一个指向这个视频文件的链接，从而使用户至少可以访问到这个文件，而不会局限于浏览器的支持。</li></ul><h5 id="2、使用多个播放源提高兼容性"><a href="#2、使用多个播放源提高兼容性" class="headerlink" title="2、使用多个播放源提高兼容性"></a>2、使用多个播放源提高兼容性</h5><blockquote><p>容器格式定义了构成媒体文件的音频轨道和视频轨道的储存结构，其中还包含描述这个媒体文件的元数据，以及使用什么编解码器对其通道进行编码等等。</p></blockquote><ul><li>WebM 容器通常包括了 Vorbis 或 Opus 音频和 VP8&#x2F;VP9 视频。这在所有的现代浏览器中都支持，除了某些老版本浏览器。</li><li>MP4 容器通常包括 AAC 或 MP3 音频和 H.264 视频。这在所有的现代浏览器中都支持。</li><li>Ogg 容器倾向于使用 Vorbis 音频和 Theora 视频。其在 Firefox 和 Chrome 当中受到完美的支持，不过这个容器已经被更强大的 WebM 格式所取代。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;rabbit320.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;rabbit320.webm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/webm&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你的浏览器不支持此视频。可点击<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;rabbit320.mp4&quot;</span>&gt;</span>此链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>观看<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>移除src属性，而是添加几个单独的source元素，分别指向各自的资源。浏览器会检查<code>&lt;source&gt;</code>元素，并且播放第一个与其自身 codec 相匹配的媒体。</p><blockquote><p>WebM 和 MP4 这两种格式在目前已经足够，只要视频支持这两种格式，那么其在大多数平台和浏览器上都能正确播放。</p></blockquote><p>建议添加type属性，它包含了<code>&lt;source&gt;</code>中指定的MIME类型，同时浏览器也会通过检查这个属性来迅速的跳过那些不支持的格式。如果你没有添加 <code>type</code> 属性，浏览器会尝试加载每一个文件，直到找到一个能正确播放的格式，但是这样会消耗掉大量的时间和资源。</p><blockquote><p>Multipurpose Internet Mail Extensions，多用途互联网邮件扩展，不仅用于电子邮件系统，还广泛应用于 HTTP 协议中，用来描述网络传输中文件的类型或格式</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.13</title>
    <link href="/2024/10/13/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.13/"/>
    <url>/2024/10/13/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.13/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span><h2 id="2024-10-13"><a href="#2024-10-13" class="headerlink" title="2024&#x2F;10&#x2F;13"></a>2024&#x2F;10&#x2F;13</h2><h4 id="（1）最长递增子序列"><a href="#（1）最长递增子序列" class="headerlink" title="（1）最长递增子序列"></a>（1）<a href="https://leetcode.cn/problems/longest-increasing-subsequence/">最长递增子序列</a></h4><blockquote><p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p></blockquote><h5 id="1、动态规划法"><a href="#1、动态规划法" class="headerlink" title="1、动态规划法"></a>1、动态规划法</h5><p>维护一个dp数组，dp[i]表示以nums[i]做结尾的最长连续递增子序列长度。</p><p>外循环遍历数组的所有元素，内循环遍历在这个元素之前的元素，如果此元素大于之前的元素，则说明可以形成一个递增子序列。于是就可以做max比较确定dp[i]的大小。</p><p>最后遍历dp数组找到最长的长度。</p><p>时间复杂度：<strong>O（n^2）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[j]&lt;nums[i])&#123;<br>                    dp[i]=<span class="hljs-built_in">max</span>(dp[i],dp[j]+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-built_in">max_element</span>(dp.<span class="hljs-built_in">begin</span>(),dp.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、贪心＋二分查找"><a href="#2、贪心＋二分查找" class="headerlink" title="2、贪心＋二分查找"></a>2、贪心＋二分查找</h5><p>维护一个向量数组vec。这个数组的特点是：里面的<strong>元素保持严格递增</strong>，并且<strong>vec的长度</strong>是到nums[i]时，前面的<strong>最长递增子序列的长度</strong>。但是vec中的元素<strong>不一定是正确的子序列</strong>。</p><p>令<code>len=1；vec[len]=nums[0];</code> </p><p>怎么贪心呢？就是直接遍历数组，有两种情况：</p><ul><li><p>如果nums[i]大于vec中最大的元素vec[len]，那么就直接把它放置入vec中，同时增加len的大小，即<code>vec[++len]=nums[i];</code></p></li><li><p>否则的话，就找到vec中第一个大于它的元素，并将它的值替换过去。这样既没有改变vec的长度（没有错误），也可以使得维护了一个能容纳更大元素的序列。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>(),len=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vec</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        vec[<span class="hljs-number">1</span>]=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&gt;vec[len])&#123;<br>                vec[++len]=nums[i];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,r=len,pos=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>                    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span>(vec[mid]&lt;nums[i])&#123;<br>                        <br>                        l=mid+<span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        pos=mid;<br>                        r=mid<span class="hljs-number">-1</span>;<br>                    &#125;<br>                &#125;<br>                vec[pos]=nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> len;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）动态规划"><a href="#（2）动态规划" class="headerlink" title="（2）动态规划"></a>（2）动态规划</h4><h5 id="1、-乘积最大子数组"><a href="#1、-乘积最大子数组" class="headerlink" title="1、 乘积最大子数组"></a>1、<a href="https://leetcode.cn/problems/maximum-product-subarray/"> 乘积最大子数组</a></h5><blockquote><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的非空连续 子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。测试用例的答案是一个 <strong>32-位</strong> 整数。</p></blockquote><p>重点：不仅要维护最大值，还要维护最小值，因为有负数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> minF=nums[<span class="hljs-number">0</span>], maxF=nums[<span class="hljs-number">0</span>], n=nums.<span class="hljs-built_in">size</span>(),ans=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-type">int</span> mi=minF,mx=maxF;<br>            minF=<span class="hljs-built_in">min</span>(mi*nums[i],<span class="hljs-built_in">min</span>(mx*nums[i],nums[i]));<br>            maxF=<span class="hljs-built_in">max</span>(mi*nums[i],<span class="hljs-built_in">max</span>(mx*nums[i],nums[i]));<br>            ans=<span class="hljs-built_in">max</span>(ans,maxF);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（3）图论"><a href="#（3）图论" class="headerlink" title="（3）图论"></a>（3）图论</h4><h5 id="1、无向图的连通数"><a href="#1、无向图的连通数" class="headerlink" title="1、无向图的连通数"></a>1、无向图的连通数</h5><blockquote><p>依次删除无向图中的点，依次返回其中的连通数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//dfs: 依次访问此节点连接的节点，并继续dfs。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(unordered_map &lt;<span class="hljs-type">int</span> ,vector&lt;<span class="hljs-type">int</span>&gt; &gt; ball,<span class="hljs-type">int</span> j,vector&lt;<span class="hljs-type">bool</span>&gt;&amp; num)</span></span>&#123;<br>    num[j]=<span class="hljs-literal">true</span>;  <span class="hljs-comment">//注意一开始要赋值true！！！！</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ball[j].<span class="hljs-built_in">size</span>();i++)&#123; <br>        <span class="hljs-keyword">if</span>(num[ball[j][i]]==<span class="hljs-literal">false</span>)   <span class="hljs-comment">//注意这里只遍历未访问过的点！！！！！！！</span><br>            <span class="hljs-built_in">dfs</span>(ball,ball[j][i],num);   <span class="hljs-comment">//节点下标要搞清楚</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    unordered_map &lt;<span class="hljs-type">int</span> ,vector&lt;<span class="hljs-type">int</span>&gt; &gt;  <span class="hljs-built_in">ball</span>(n+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span>(m)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        ball[u].<span class="hljs-built_in">push_back</span>(v);<br>        ball[v].<span class="hljs-built_in">push_back</span>(u);<br>        m--;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=n)&#123;<br>        ball[i]=&#123;&#125;;  <span class="hljs-comment">//不用删除含有它的节点的向量中的它</span><br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-built_in">num</span>(n+<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>);  <span class="hljs-comment">//起始值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(num[j]==<span class="hljs-literal">false</span>)&#123;<br>                cnt++;  <span class="hljs-comment">//更新个数</span><br>                <span class="hljs-built_in">dfs</span>(ball,j,num);<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;cnt&lt;&lt;endl;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（4）数组"><a href="#（4）数组" class="headerlink" title="（4）数组"></a>（4）数组</h4><h5 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h5><blockquote><p>给定一个数组，每次操作可以将相邻的两个值正负翻转，可以做无限次操作，问数组中所有元素累加起来的最大值。</p></blockquote><p>这道题理清思路好简单，就是看负数是不是奇数个，如果是偶数个，就是返回所有值加在一起（也就是一定能够每个值都变成正的），如果是奇数个,那么一定会留下负数。所以直接用绝对值相加后的值减去所有数最小的绝对值*2。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; nums)</span></span>&#123;<br>   <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>,mx=INT_MAX,ans=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>      ans+=<span class="hljs-built_in">abs</span>(nums[i]);<br>      mi=<span class="hljs-built_in">min</span>(mi,<span class="hljs-built_in">abs</span>(nums[i]));<br>      <span class="hljs-keyword">if</span>(nums[i]&lt;<span class="hljs-number">0</span>)&#123;<br>         cnt++;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> cnt%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>?ans:ans-mi*<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.12</title>
    <link href="/2024/10/12/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.12/"/>
    <url>/2024/10/12/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.12/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span><h2 id="2024-10-12"><a href="#2024-10-12" class="headerlink" title="2024&#x2F;10&#x2F;12"></a>2024&#x2F;10&#x2F;12</h2><h4 id="（1）贪心"><a href="#（1）贪心" class="headerlink" title="（1）贪心"></a>（1）贪心</h4><h5 id="1、加油站"><a href="#1、加油站" class="headerlink" title="1、加油站"></a>1、<a href="https://leetcode.cn/problems/gas-station/">加油站</a></h5><blockquote><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p></blockquote><p>思路：每个加油站的汽油数减去开往下一个加油站的消耗数，就是这一站能剩余的汽油数。如果加起来小于0就说明一定不能环路一周。如果可以，由于题目说开始的加油站的编号唯一，则到达那个加油站前，累计的剩余汽油数一定是最少的。否则这一站出发一定会到不了后面的某一站。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">canCompleteCircuit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; gas, vector&lt;<span class="hljs-type">int</span>&gt;&amp; cost)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=gas.<span class="hljs-built_in">size</span>(),cnt=<span class="hljs-number">0</span>,min_g=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            cnt+=gas[i]-cost[i];<br>            <span class="hljs-keyword">if</span>(cnt&lt;min_g)&#123;<br>                min_g=cnt;<br>                ans=i+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt&lt;<span class="hljs-number">0</span>?<span class="hljs-number">-1</span>:ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、分发糖果"><a href="#2、分发糖果" class="headerlink" title="2、分发糖果"></a>2、<a href="https://leetcode.cn/problems/candy/">分发糖果</a></h5><blockquote><p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 <code>1</code> 个糖果。</li><li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li></ul><p>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> 。</p></blockquote><p><strong>需要考虑两边！！！！</strong></p><p>这个思路很简单聪明：就是维护两个数组分别代表从左、右遍历后每个人分发的糖果数。起始每个人糖果数均为1，如果大于前一个人的糖果数，则比前一个人多一个。最后比较左右遍历的数组中每个小孩的糖果数，较大的那个值才能满足条件。这样累加起来是满足条件并且需要准备的糖果最少。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; ratings)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=ratings.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left</span><span class="hljs-params">(n,<span class="hljs-number">1</span>)</span>,<span class="hljs-title">right</span><span class="hljs-params">(n,<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>            <span class="hljs-keyword">if</span>(ratings[i]&gt;ratings[i<span class="hljs-number">-1</span>])<br>                left[i]=left[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(ratings[i]&gt;ratings[i+<span class="hljs-number">1</span>])&#123;<br>                right[i]=right[i+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>            &#125;<br>            cnt+=<span class="hljs-built_in">max</span>(left[i],right[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt+<span class="hljs-built_in">max</span>(left[n<span class="hljs-number">-1</span>],right[n<span class="hljs-number">-1</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）广度优先搜索"><a href="#（2）广度优先搜索" class="headerlink" title="（2）广度优先搜索"></a>（2）广度优先搜索</h4><h5 id="1、课程表"><a href="#1、课程表" class="headerlink" title="1、课程表"></a>1、<a href="https://leetcode.cn/problems/course-schedule/">课程表</a></h5><blockquote><p>你这个学期必须选修 <code>numCourses</code> 门课程，记为 <code>0</code> 到 <code>numCourses - 1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 先修课程按数组 <code>prerequisites</code> 给出，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示如果要学习课程 <code>ai</code> 则 <strong>必须</strong> 先学习课程 <code>bi</code> 。</p><ul><li>例如，先修课程对 <code>[0, 1]</code> 表示：想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> 。</li></ul><p>请你判断是否可能完成所有课程的学习？如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">step</span><span class="hljs-params">(numCourses,<span class="hljs-number">0</span>)</span></span>;   <span class="hljs-comment">//存储每个课程依赖的先修课程数（度数）</span><br>        unordered_map&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt; &gt; map;   <span class="hljs-comment">//键：被依赖的课程    值：被它依赖的课程集合</span><br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;   <span class="hljs-comment">//计算一共能修多少节课</span><br>       <span class="hljs-comment">//遍历依赖数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> pre:prerequisites)&#123;<br>            step[pre[<span class="hljs-number">0</span>]]++;   <span class="hljs-comment">//更新度数</span><br>            map[pre[<span class="hljs-number">1</span>]].<span class="hljs-built_in">push_back</span>(pre[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//更新依赖该课程的课程清单</span><br>        &#125;<br>       <br>        queue &lt;<span class="hljs-type">int</span>&gt; zero;  <span class="hljs-comment">//放置零度课程，也就是可以直接修读的课程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numCourses;i++)<br>            <span class="hljs-keyword">if</span>(!step[i])<br>                zero.<span class="hljs-built_in">push</span>(i);<br>       <br>        <span class="hljs-keyword">while</span>(!zero.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-type">int</span> select=zero.<span class="hljs-built_in">front</span>();   <br>            zero.<span class="hljs-built_in">pop</span>();   <span class="hljs-comment">//出队列，表示修读本课程</span><br>            cnt++;       <span class="hljs-comment">//更新已修读课程数</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> cur: map[select])&#123;   <span class="hljs-comment">//在修读的课程的依赖课程清单中遍历</span><br>                <span class="hljs-keyword">if</span>(--step[cur]==<span class="hljs-number">0</span>)    <span class="hljs-comment">//把要依赖此修读课程的课程的度数减一，并判断此时它的度数是否清零</span><br>                    zero.<span class="hljs-built_in">push</span>(cur);   <span class="hljs-comment">//如果它的度数清零则也将它加入零度课程数组</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt==numCourses;     <span class="hljs-comment">//如果最后修读的课程数不满总课程数说明无法修完，返回-1</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（3）回溯"><a href="#（3）回溯" class="headerlink" title="（3）回溯"></a>（3）回溯</h4><h5 id="1、电话号码的字母组合"><a href="#1、电话号码的字母组合" class="headerlink" title="1、电话号码的字母组合"></a>1、<a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">电话号码的字母组合</a></h5><blockquote><p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。给出数字到字母的映射如下（与电话按键相同）。注意 0、1 不对应任何字母。</p></blockquote><p><strong>注意：</strong></p><ul><li><code>digits</code>是字符串，映射到数字时要减去<code>&#39;0&#39;</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-comment">//按顺序存储2-9代表的字符串</span><br>    string MAPPING[<span class="hljs-number">10</span>] = &#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>, <span class="hljs-string">&quot;mno&quot;</span>, <span class="hljs-string">&quot;pqrs&quot;</span>, <span class="hljs-string">&quot;tuv&quot;</span>, <span class="hljs-string">&quot;wxyz&quot;</span>&#125;;<br>    <br>    <span class="hljs-comment">// 定义一个成员函数来替代 lambda 实现递归</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; digits, <span class="hljs-type">int</span> i, string&amp; path, vector&lt;string&gt;&amp; ans)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (i == digits.<span class="hljs-built_in">length</span>()) &#123; <span class="hljs-comment">// 递归结束条件</span><br>            ans.<span class="hljs-built_in">emplace_back</span>(path); <span class="hljs-comment">// 将完整的路径加入结果集</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : MAPPING[digits[i] - <span class="hljs-string">&#x27;0&#x27;</span>]) &#123; <span class="hljs-comment">// 遍历数字对应的字母</span><br>            path[i] = c; <span class="hljs-comment">// 放入当前的字母</span><br>            <span class="hljs-built_in">dfs</span>(digits, i + <span class="hljs-number">1</span>, path, ans); <span class="hljs-comment">// 递归处理下一个数字</span><br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">letterCombinations</span><span class="hljs-params">(string digits)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = digits.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;&#125;; <span class="hljs-comment">// 如果输入为空，返回空的 vector</span><br>        &#125;<br>        vector&lt;string&gt; ans;<br>        <span class="hljs-function">string <span class="hljs-title">path</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// 初始化 path，长度为 n</span><br>        <span class="hljs-built_in">dfs</span>(digits, <span class="hljs-number">0</span>, path, ans); <span class="hljs-comment">// 调用递归函数</span><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>（）？</p><blockquote><p>给一个数组，只含有0或者1，求最大的连续的0的个数；注意：有一次机会可以将数字翻转（1变成0，或者0变成1）。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaxConsecutiveZeros</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-type">int</span> maxCount = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 记录最大连续0的数量</span><br>    <span class="hljs-type">int</span> zeroCount = <span class="hljs-number">0</span>;       <span class="hljs-comment">// 当前连续0的数量</span><br>    <span class="hljs-type">int</span> flipZeroCount = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 翻转1后的连续0数量</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">0</span>) &#123;<br>            zeroCount++;      <span class="hljs-comment">// 当前连续0计数增加</span><br>            flipZeroCount++;  <span class="hljs-comment">// 翻转后的连续0计数也增加</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当遇到1时，尝试翻转这个1</span><br>            flipZeroCount = zeroCount + <span class="hljs-number">1</span>; <span class="hljs-comment">// 翻转后的连续0数量是当前zeroCount + 1</span><br>            zeroCount = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 翻转后，重置当前的连续0计数器</span><br>        &#125;<br>        maxCount = <span class="hljs-built_in">max</span>(maxCount, flipZeroCount); <span class="hljs-comment">// 更新最大连续0的个数</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> maxCount;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.11</title>
    <link href="/2024/10/11/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.11/"/>
    <url>/2024/10/11/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.11/</url>
    
    <content type="html"><![CDATA[<p>今天主要复习双指针法和贪心算法</p><span id="more"></span><h2 id="2024-10-11"><a href="#2024-10-11" class="headerlink" title="2024&#x2F;10&#x2F;11"></a>2024&#x2F;10&#x2F;11</h2><h4 id="（1）-接雨水"><a href="#（1）-接雨水" class="headerlink" title="（1） 接雨水"></a>（1）<a href="https://leetcode.cn/problems/trapping-rain-water/"> 接雨水</a></h4><blockquote><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p></blockquote><p>（刷过一遍的题果然比较好上手🙂‍↕️🙂‍↕️）</p><h5 id="1、动态规划法"><a href="#1、动态规划法" class="headerlink" title="1、动态规划法"></a>1、动态规划法</h5><p>思路：遍历数组，得到两个向量数组<code>left</code>和<code>right</code>，<code>left[i]</code>和<code>right[i]</code>分别存储左边、右边的最大值（包括自己本身）。然后再遍历一次数组，在<code>i</code>处两个向量数组的最小值减去本身的高度就是这一格能接到的雨水量。（思路理清了这道题就变得十分简单了）</p><p>至于哪里需要动态规划，那就是在找最大值的时候了，需要用一个数组来维护。</p><p><strong>注意</strong>：边界判断、下标处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> tmp,cnt;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; h)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=h.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left</span><span class="hljs-params">(n)</span>,<span class="hljs-title">right</span><span class="hljs-params">(n)</span></span>;<br>        left[<span class="hljs-number">0</span>]=h[<span class="hljs-number">0</span>],right[n<span class="hljs-number">-1</span>]=h[n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            left[i]=<span class="hljs-built_in">max</span>(left[i<span class="hljs-number">-1</span>],h[i]);<br>            right[n-i<span class="hljs-number">-1</span>]=<span class="hljs-built_in">max</span>(right[n-i],h[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>            tmp=<span class="hljs-built_in">min</span>(left[i],right[i])-h[i];<br>            cnt+=tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、单调栈法"><a href="#2、单调栈法" class="headerlink" title="2、单调栈法"></a>2、单调栈法</h5><p>单调栈：单调栈内存储的是下标。如果该下标高度小于栈顶，入栈；否则开始计算两个下标之间可以接的雨水量。</p><p>看着代码我能理解，但是我肯定是想不到的。。。。。不想干了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> cnt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; h)</span> </span>&#123;<br>   stack&lt;<span class="hljs-type">int</span>&gt; r;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h.<span class="hljs-built_in">size</span>();i++)&#123;<br>      <span class="hljs-keyword">while</span>(!r.<span class="hljs-built_in">empty</span>()&amp;&amp;h[r.<span class="hljs-built_in">top</span>()]&lt;h[i])&#123;<br>         <span class="hljs-type">int</span> cur=r.<span class="hljs-built_in">top</span>();<br>         r.<span class="hljs-built_in">pop</span>();<br>         <span class="hljs-keyword">if</span>(r.<span class="hljs-built_in">empty</span>())<br>            <span class="hljs-keyword">break</span>;<br>         cnt+=(<span class="hljs-built_in">min</span>(h[r.<span class="hljs-built_in">top</span>()],h[i])-h[cur])*(i-r.<span class="hljs-built_in">top</span>()<span class="hljs-number">-1</span>);<br>      &#125;<br>      r.<span class="hljs-built_in">push</span>(i);<br>   &#125;<br>   <span class="hljs-keyword">return</span> cnt;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、双指针法"><a href="#3、双指针法" class="headerlink" title="3、双指针法"></a>3、双指针法</h5><p>（这又是什么天才的构思。。。）</p><p>使用双指针法的目的是降低空间复杂度，思路和动态规划差不多，但是更加聪明。</p><p>首先维护两个指针，<code>left</code>从<code>0</code>开始，<code>right</code>从<code>n-1</code>开始；</p><p>再维护两个最大值：<code>leftMax</code>和<code>rightMax</code>，分别表示左边的最大值和右边的最大值。</p><p>上面动态规划之所以要使用数组去维护最大值，是因为还要进行一次遍历去得到能接到的总雨水值，所以需要比较各个位置的左边最大值和右边最大值。但是双指针法的思路是：</p><p>指针从两边往中间靠拢，在没有相遇的时候：</p><ul><li>如果<code>h[left]</code>&lt;<code>h[right]</code>，那么这个位置的左边最大值就一定小于右边最大值。因此这里可以接到的雨水量就一定是<code>leftMax-h[left]</code>。</li><li>相反，<code>h[left]</code>&gt;&#x3D;<code>h[right]</code>，这里接到的雨水量就一定是<code>rightMax-h[right]</code>。</li></ul><p><strong>注意：</strong></p><ul><li>如果算的是左边的雨水量，<code>left++</code>，反之<code>right--</code>。</li><li>注意维护<code>leftMax</code>和<code>rightMax</code></li><li>如果指针相遇，说明已经计算完了雨水量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; h)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=h.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> leftMax=h[<span class="hljs-number">0</span>],rightMax=h[n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            leftMax=<span class="hljs-built_in">max</span>(leftMax,h[left]);<br>            rightMax=<span class="hljs-built_in">max</span>(rightMax,h[right]);<br>            <span class="hljs-keyword">if</span>(h[left]&lt;h[right])&#123;<br>                cnt+=leftMax-h[left];<br>                left++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                cnt+=rightMax-h[right];<br>                right--;<br>            &#125;<br>        &#125;        <br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）双指针法"><a href="#（2）双指针法" class="headerlink" title="（2）双指针法"></a>（2）双指针法</h4><h5 id="1、合并两个有序数组"><a href="#1、合并两个有序数组" class="headerlink" title="1、合并两个有序数组"></a>1、<a href="https://leetcode.cn/problems/merge-sorted-array/">合并两个有序数组</a></h5><blockquote><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p></blockquote><p>m、n分别从两个数组中最后一个（非零）数字向前遍历，比较大小，选取大的数字放在nums1数组末尾。记得更新指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>            <span class="hljs-type">int</span> i=m+n<span class="hljs-number">-1</span>;<br>            m--,n--;<br>            <span class="hljs-keyword">while</span>(n&gt;=<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(m&gt;=<span class="hljs-number">0</span>&amp;&amp;nums1[m]&gt;nums2[n])&#123;<br>                    nums1[i--]=nums1[m--];<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    nums1[i--]=nums2[n--];<br>                &#125;<br>            &#125;<br>        &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、移除元素"><a href="#2、移除元素" class="headerlink" title="2、移除元素"></a>2、<a href="https://leetcode.cn/problems/remove-element/">移除元素</a></h5><blockquote><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p><p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p><ul><li>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。</li><li>返回 <code>k</code>。</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> right=<span class="hljs-number">0</span>;right&lt;nums.<span class="hljs-built_in">size</span>();right++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[right]!=val)&#123;<br>                nums[left]=nums[right];<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>有时候真的很嫉妒别人的彩花。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241011155931521.png" alt="image-20241011155931521"></p><h5 id="3、删除有序数组中的重复项"><a href="#3、删除有序数组中的重复项" class="headerlink" title="3、删除有序数组中的重复项"></a>3、<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">删除有序数组中的重复项</a></h5><blockquote><p>原地删除，顺序保持一致，数组非严格递增排序。</p></blockquote><p>真让我学到东西了😁</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> right=<span class="hljs-number">1</span>;right&lt;nums.<span class="hljs-built_in">size</span>();right++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[right]&gt;nums[right<span class="hljs-number">-1</span>])&#123;<br>                nums[left++]=nums[right];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="4、删除有序数组中的重复项-II"><a href="#4、删除有序数组中的重复项-II" class="headerlink" title="4、删除有序数组中的重复项 II"></a>4、<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/">删除有序数组中的重复项 II</a></h5><blockquote><p>给你一个有序数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p></blockquote><p>（脑子，你醒醒啊脑子！！！！！！）</p><p>（一开始蠢头瓜脑地真的删元素了。。。于是就跳不出循环了。）</p><p>思路：快慢指针。啊啊啊啊讲不清楚，为什么双指针这么令人小脑萎缩。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span>(right&lt;n)&#123;<br>            <span class="hljs-keyword">if</span>(nums[right]!=nums[left])&#123;<br>                nums[left+<span class="hljs-number">2</span>]=nums[right];<br>                left++;<br>            &#125;<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left+<span class="hljs-number">2</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>为什么别人的算法如此优雅：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> </span>&#123;<br>       <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>           <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">2</span> || num &gt; nums[i - <span class="hljs-number">2</span>]) &#123;<br>               nums[i++] = num;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> i;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为||是短路操作符，所以才不会担心i&lt;2时导致nums[i-2]发生数组越界错误。</p><h4 id="（3）贪心"><a href="#（3）贪心" class="headerlink" title="（3）贪心"></a>（3）贪心</h4><h5 id="1、跳跃游戏"><a href="#1、跳跃游戏" class="headerlink" title="1、跳跃游戏"></a>1、<a href="https://leetcode.cn/problems/jump-game/">跳跃游戏</a></h5><blockquote><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p></blockquote><p>我的做法：</p><p>思路是维护一个数组表示每一格是否能达到；如果前一格能达到且能跳跃的格数大于0，就说明能跳到这一格。然后要更新这一格能跳到的最大格数。</p><p>有空间复杂度！！！！！！！！！！！！！！！！！！！！！</p><p>而且最后那个三元运算符根本不需要。。。max就行了。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canJump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,<span class="hljs-literal">false</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            dp[i]=dp[i<span class="hljs-number">-1</span>]&amp;&amp;nums[i<span class="hljs-number">-1</span>]&gt;<span class="hljs-number">0</span>;<br>            nums[i]=nums[i]&lt;nums[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>?nums[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>:nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>官方做法：</p><p>维护两个值：</p><ul><li>i：表示走到的长度；k：表示目前能达到的最大长度。</li></ul><p>现在的位置加上现在能跳跃的距离与k比较取最大值赋给k。</p><p>如果i&lt;k，则说明无法达到，直接返回false，循环结束后返回true。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canJump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(k&lt;i)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            k=<span class="hljs-built_in">max</span>(nums[k]+i,k);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241011185134467.png" alt="image-20241011185134467"></p><h5 id="2、跳跃游戏-II"><a href="#2、跳跃游戏-II" class="headerlink" title="2、跳跃游戏 II"></a>2、<a href="https://leetcode.cn/problems/jump-game-ii/">跳跃游戏 II</a></h5><blockquote><p>求到达最后位置的最小跳跃次数</p></blockquote><p>笑死，用dp做怎么反而简单点。。就是性能好差啊，时间复杂度和空间复杂度都击败5%的人。。。😅😅😅😅😅有点离谱了哈。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241011191526487.png" alt="image-20241011191526487" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,INT_MAX)</span></span>;<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[j]&gt;=i-j)&#123;<br>                    dp[i]=<span class="hljs-built_in">min</span>(dp[j]+<span class="hljs-number">1</span>,dp[i]);<br>                    nums[i]=<span class="hljs-built_in">max</span>(nums[i],nums[j]-i+j);<br>                &#125;       <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>看了一眼贪心算法的解法幡然醒悟！！！！！！！！（果然够贪心）</p><p>有一个人的比喻我觉得很贴切，就是把起点和终点比喻成河的两岸，从这边到对岸，需要搭桥，维护两个值：上次搭的桥能到达的最大距离；在到达最大距离之前能搭的桥的最大距离。</p><h5 id="3、划分字母区间"><a href="#3、划分字母区间" class="headerlink" title="3、划分字母区间"></a>3、<a href="https://leetcode.cn/problems/partition-labels/">划分字母区间</a></h5><blockquote><p>给你一个字符串 <code>s</code> 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。</p><p>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 <code>s</code> 。</p><p>返回一个表示每个字符串片段的长度的列表。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241011201043664.png" alt="image-20241011201043664" style="zoom:50%;" /><p>为什么为什么这居然能够转换成和上道题几乎一样的思路！！！！！！</p><p><strong>合并区间类</strong>：</p><ul><li>首先！有一个天才的思路，就是找到每个字母它最后出现的位置，维护一个数组。</li><li>然后维护两个值：1、start：这次区间开始的地方；2、这次区间结束的地方。</li><li>结束的区间怎么算？由于一个字符必须集中在同一个区间，因此结束的位置是，还没到结束位置时，每个字符结束位置的最大值，等到<code>i</code>真的走到了这个最大值，这个区间才算真的结束了。</li><li>根据这样的算法计算，最后得到的就是能划分的最多的数量。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">partitionLabels</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">word</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; num;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>            word[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]=<span class="hljs-built_in">max</span>(word[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>],i);<br>        &#125;<br>        <span class="hljs-type">int</span> end=<span class="hljs-number">0</span>,start=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>            end=<span class="hljs-built_in">max</span>(end,word[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]);<br>            <span class="hljs-keyword">if</span>(i==end)&#123;<br>                num.<span class="hljs-built_in">push_back</span>(end-start+<span class="hljs-number">1</span>);<br>                start=i+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（4）栈"><a href="#（4）栈" class="headerlink" title="（4）栈"></a>（4）栈</h4><h5 id="1、-简化路径"><a href="#1、-简化路径" class="headerlink" title="1、 简化路径"></a>1、<a href="https://leetcode.cn/problems/simplify-path/"> 简化路径</a></h5><blockquote><p>简化后的路径以&#x2F;作为分隔，开头有&#x2F;结尾无。..表示返回上一级，.表示此文件。</p></blockquote><p>感觉好多题都是纸老虎呀，看着难但是理清思路后就很简单。</p><p>不过我一般都理不清。。😅</p><p><strong>stringstream好好用！！！</strong></p><p>这道题的思路是，得到所有需要的路径的文件名。</p><p>于是第一步我们要把文件名提取出来：</p><ul><li>如果遇到<code>..</code>就需要返回上一级，也就是弹栈（需保证栈非空）</li><li>遇空值和“.”可以直接跳过（消除多个&#x2F;）</li><li>其他情况，也就是需要入栈的情况</li></ul><p>然后从右到左依次连接起来即可。</p><p>注意如果没有路径就是返回根路径&#x2F;。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">simplifyPath</span><span class="hljs-params">(string path)</span> </span>&#123;<br>        stack&lt;string&gt; s;<br>        <span class="hljs-function">stringstream <span class="hljs-title">ss</span><span class="hljs-params">(path)</span></span>;<br>        string item;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">getline</span>(ss,item,<span class="hljs-string">&#x27;/&#x27;</span>))&#123;<br>            <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;&quot;</span>||item==<span class="hljs-string">&quot;.&quot;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item==<span class="hljs-string">&quot;..&quot;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(!s.<span class="hljs-built_in">empty</span>())<br>                    s.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>                s.<span class="hljs-built_in">push</span>(item);<br>        &#125;<br>        string ans;<br>        <span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>())&#123;<br>            ans=<span class="hljs-string">&quot;/&quot;</span>+s.<span class="hljs-built_in">top</span>()+ans;<br>            s.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans.<span class="hljs-built_in">size</span>()?ans:<span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、基本计算器"><a href="#2、基本计算器" class="headerlink" title="2、基本计算器"></a>2、<a href="https://leetcode.cn/problems/basic-calculator/">基本计算器</a></h5><blockquote><p>只涉及+、-、（、）四种符号。</p></blockquote><p>题解较为复杂的有使用双栈去分别存储符号和数字的值，但是感觉这个解法更简练一点。</p><p>思路：</p><ul><li><strong>怎么解决括号内的符号</strong>：用一个栈st存储运算符号。初始的运算符号是1，表正值。一旦遇到左括号，就把当前的运算符号压栈，使得括号中的数字按照当前的括号去计算。遇到右括号就出栈，回到原来的运算符号。</li><li><strong>如何处理计算逻辑</strong>：由于栈顶存储的是当前的运算符号，所以如果遇到+号，表示当前运算符号等于栈顶，遇到-号就是栈顶的负值。</li><li><strong>如何进行数字的计算</strong>：这里有一个很巧妙的解决方案，是每次进行运算后，就将num清零。如果遇到的是符号说明或许该进行运算了，可以使用当前运算符*num加上当前的ans值。如果连续遇到数字，就按照十进制赋值。</li><li>⭐最后的数字没有机会运算，所以要在结果上再运算一下。jiu’jiang</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">char</span>&gt; st; <span class="hljs-comment">// 存储正负号</span><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>, num = <span class="hljs-number">0</span>, op = <span class="hljs-number">1</span>;<br>        st.<span class="hljs-built_in">push</span>(op);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s) &#123;<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span>) num = num * <span class="hljs-number">10</span> - <span class="hljs-string">&#x27;0&#x27;</span> + c;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ans += op * num;<br>                num = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;+&#x27;</span>) op = st.<span class="hljs-built_in">top</span>();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) op = -st.<span class="hljs-built_in">top</span>();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span>) st.<span class="hljs-built_in">push</span>(op); <span class="hljs-comment">// 将括号前符号放入栈顶</span><br>                <span class="hljs-keyword">else</span> st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>       <br>        <span class="hljs-keyword">return</span> ans + op * num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）滑动窗口"><a href="#（5）滑动窗口" class="headerlink" title="（5）滑动窗口"></a>（5）滑动窗口</h4><h5 id="1、长度最小的子数组"><a href="#1、长度最小的子数组" class="headerlink" title="1、长度最小的子数组"></a>1、<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">长度最小的子数组</a></h5><blockquote><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>子数组</strong><code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>,cnt=nums.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(right&lt;nums.<span class="hljs-built_in">size</span>())&#123;<br>            ans+=nums[right];<br>            <span class="hljs-keyword">if</span>(ans&gt;=target)&#123;<br>                <span class="hljs-keyword">while</span>(ans-nums[left]&gt;=target)&#123;<br>                    ans-=nums[left];<br>                    left++;     <br>                &#125;<br>                cnt=<span class="hljs-built_in">min</span>(cnt,right-left+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">break</span>;<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt==nums.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:cnt;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.10</title>
    <link href="/2024/10/10/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.10/"/>
    <url>/2024/10/10/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.10/</url>
    
    <content type="html"><![CDATA[<p>今天主要复习动态规划</p><span id="more"></span><h3 id="二、2024-10-10"><a href="#二、2024-10-10" class="headerlink" title="二、2024&#x2F;10&#x2F;10"></a>二、2024&#x2F;10&#x2F;10</h3><h4 id="（1）一维动态规划"><a href="#（1）一维动态规划" class="headerlink" title="（1）一维动态规划"></a>（1）一维动态规划</h4><p>爬楼梯和打家劫舍秒了😘（再不秒也别学了）</p><h5 id="1、单词拆分"><a href="#1、单词拆分" class="headerlink" title="1、单词拆分"></a>1、<a href="https://leetcode.cn/problems/word-break/">单词拆分</a></h5><blockquote><p>给你一个字符串 <code>s</code> 和一个字符串列表 <code>wordDict</code> 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 <code>s</code> 则返回 <code>true</code>。<strong>注意：</strong>不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;<br>        unordered_set &lt;string&gt; wordSet;<br>        <span class="hljs-keyword">for</span>(string str: wordDict)&#123;<br>            wordSet.<span class="hljs-built_in">insert</span>(str);<br>        &#125;<br>        <span class="hljs-keyword">auto</span> dp=<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; (s.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>);<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=s.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>                <span class="hljs-keyword">if</span>(dp[j]&amp;&amp;wordSet.<span class="hljs-built_in">find</span>(s.<span class="hljs-built_in">substr</span>(j,i-j))!=wordSet.<span class="hljs-built_in">end</span>())<br>                  &#123;<br>                    dp[i]=<span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                  &#125;  <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[s.<span class="hljs-built_in">size</span>()];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这道题的思路有点超纲吧！！！！！</p><p>这个动态规划的意思是，首先外循环是到单词的第i个字符，然后想要判断前i个字符能否通过字典中的单词拼出。内循环就是让j从0开始，一直到第i个字符，如果前j个字符能通过字典拼出来，而且第j到i个字符组成的字符串也能在字典中找到，那么就说明前i个字符能通过字典拼出。于是依此类推。</p><p><strong>重点</strong>：</p><ul><li>初始化动态规划数组的时候，0代表前零个字符，1才是代表一个字符。dp[0]是一定要初始化为true的，这点很关键。</li><li>使用<code>unordered_set</code>是为了使得搜索更快，降低时间复杂度。</li></ul><h5 id="2、杨辉三角"><a href="#2、杨辉三角" class="headerlink" title="2、杨辉三角"></a>2、<a href="https://leetcode.cn/problems/pascals-triangle/">杨辉三角</a></h5><blockquote><p>给定一个非负整数 <em><code>numRows</code>，</em>生成「杨辉三角」的前 <em><code>numRows</code></em> 行。</p></blockquote><p>首先欣赏一下官方的解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">generate</span>(<span class="hljs-type">int</span> numRows) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">ret</span>(numRows);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numRows; ++i) &#123;<br>            ret[i].<span class="hljs-built_in">resize</span>(i + <span class="hljs-number">1</span>);<br>            ret[i][<span class="hljs-number">0</span>] = ret[i][i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; ++j) &#123;<br>                ret[i][j] = ret[i - <span class="hljs-number">1</span>][j] + ret[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>初始化结果容器：定义二维数组，numRows行，我们会逐行填充。</li><li>遍历：设置每一行的大小并填充边界元素；根据上一行填充中间元素</li></ul><p>再看看我的狗屎一样的解法。。。。。为什么官方的这么优美</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">generate</span>(<span class="hljs-type">int</span> numRows) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</span></span>;<br>        ans.<span class="hljs-built_in">push_back</span>(pre);<br>        <span class="hljs-keyword">if</span>(numRows==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>        pre=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br>        ans.<span class="hljs-built_in">push_back</span>(pre);<br>        <span class="hljs-keyword">if</span>(numRows==<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=numRows;i++)&#123;<br>            vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">cur</span>(i);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>                cur[j]=(j<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>?pre[j<span class="hljs-number">-1</span>]:<span class="hljs-number">0</span>)+(j&lt;i<span class="hljs-number">-1</span>?pre[j]:<span class="hljs-number">0</span>);<br>            &#125;<br>            pre=cur;<br>            ans.<span class="hljs-built_in">push_back</span>(cur);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="3、完全平方数"><a href="#3、完全平方数" class="headerlink" title="3、完全平方数"></a>3、<a href="https://leetcode.cn/problems/perfect-squares/">完全平方数</a></h5><blockquote><p>给你一个整数 <code>n</code> ，返回 <em>和为 <code>n</code> 的完全平方数的最少数量</em> 。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numSquares</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-type">int</span> minn = INT_MAX;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j * j &lt;= i; j++) &#123;<br>                minn = <span class="hljs-built_in">min</span>(minn, f[i - j * j]);<br>            &#125;<br>            f[i] = minn + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>首先初始化动态规划数组，依旧是遍历0-&gt;n；初始化时f[0]&#x3D;0；</p><p><strong>f[i]表示可以将整数i表示为平方数的最小数量</strong></p><p>内层循环，枚举所有小于等于i的完全平方数，并找到所有可能的<code>f[i-j*j]</code>的最小值。<code>f[i-j*j]</code>表示i减去一个完全平方数后剩余部分所需要的最少数量，并维护最小值。</p><p><code>f[i]=minn+1</code>，因为减掉了j*j。</p><h5 id="4、零钱兑换"><a href="#4、零钱兑换" class="headerlink" title="4、零钱兑换"></a>4、<a href="https://leetcode.cn/problems/coin-change/">零钱兑换</a></h5><p>为什么这道题做了无数遍还记不住。。</p><blockquote><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。你可以认为每种硬币的数量是无限的。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span>&#123;<br>    <span class="hljs-type">int</span> Max = amount + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 设定一个大于 amount 的初始值，用来表示无法凑出的情况</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(amount + <span class="hljs-number">1</span>, Max)</span></span>;  <span class="hljs-comment">// 初始化 dp 数组，大小为 amount+1，值为 Max</span><br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始条件：凑成 0 金额需要 0 个硬币</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= amount; ++i) &#123;  <span class="hljs-comment">// 遍历每个金额 i</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-type">int</span>)coins.<span class="hljs-built_in">size</span>(); ++j) &#123;  <span class="hljs-comment">// 遍历每个硬币面值</span><br>            <span class="hljs-keyword">if</span> (coins[j] &lt;= i) &#123;  <span class="hljs-comment">// 如果硬币面值小于等于当前金额</span><br>                dp[i] = <span class="hljs-built_in">min</span>(dp[i], dp[i - coins[j]] + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 状态转移：使用该硬币的情况</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[amount] &gt; amount ? <span class="hljs-number">-1</span> : dp[amount];  <span class="hljs-comment">// 如果 dp[amount] 超过 amount，说明无法凑出，返回 -1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>动态规划的核心是<strong>通过子问题的最优解构造出整个问题的最优解</strong>。在这个问题中，我们可以设定一个状态 <code>dp[i]</code>，表示凑成金额 <code>i</code> 需要的最少硬币数。</p><blockquote><p>1、状态定义</p></blockquote><ul><li><code>dp[i]</code> 表示凑成金额 <code>i</code> 所需的最少硬币数。</li><li>目标是求解 <code>dp[amount]</code>。</li></ul><blockquote><p>2、转移方程</p></blockquote><ul><li>对于每个金额 <code>i</code>，我们可以通过使用一个面值为 <code>coins[j]</code> 的硬币，来从金额 <code>i - coins[j]</code> 转移到 <code>i</code>。</li><li>也就是说，<strong>如果要凑出金额 <code>i</code>，我们可以从 <code>i - coins[j]</code> 的金额开始，再加上一个面值为 <code>coins[j]</code> 的硬币</strong>。</li><li>因此，状态转移方程为： <code>dp[i]=min⁡(dp[i],dp[i−coins[j]]+1)</code>，其中 <code>dp[i - coins[j]]</code> 是凑出金额 <code>i - coins[j]</code> 需要的最少硬币数，<code>+1</code> 表示我们使用了一个面值为 <code>coins[j]</code> 的硬币。</li></ul><blockquote><p>3、初始状态</p></blockquote><ul><li>如果金额为 <code>0</code>，则不需要硬币，因此 <code>dp[0] = 0</code>。</li></ul><blockquote><p>4、无法凑出某个金额的处理</p></blockquote><ul><li>如果某个金额无法凑出，我们将 <code>dp[i]</code> 设为一个大于 <code>amount</code> 的值，这样在最后判断 <code>dp[amount]</code> 时可以得出无法凑出的结论。</li></ul><h4 id="（2）多维动态规划"><a href="#（2）多维动态规划" class="headerlink" title="（2）多维动态规划"></a>（2）多维动态规划</h4><h5 id="1、不同路径"><a href="#1、不同路径" class="headerlink" title="1、不同路径"></a>1、<a href="https://leetcode.cn/problems/unique-paths/">不同路径</a></h5><blockquote><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。问总共有多少条不同的路径？</p></blockquote><p>竟然，许久未见我居然做出来了哈哈哈哈哈哈哈哈哈哈哈哈（狂笑）</p><h5 id="2、最小路径和"><a href="#2、最小路径和" class="headerlink" title="2、最小路径和"></a>2、<a href="https://leetcode.cn/problems/minimum-path-sum/">最小路径和</a></h5><blockquote><p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。<strong>说明：</strong>每次只能向下或者向右移动一步。</p></blockquote><h4 id="（3）中心拓展法"><a href="#（3）中心拓展法" class="headerlink" title="（3）中心拓展法"></a>（3）中心拓展法</h4><h5 id="1、最长回文子串"><a href="#1、最长回文子串" class="headerlink" title="1、最长回文子串"></a>1、<a href="https://leetcode.cn/problems/longest-palindromic-substring/">最长回文子串</a></h5><blockquote><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的 回文子串。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> maxLen=<span class="hljs-number">0</span>,maxLeft=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>;j++)&#123;<br>                <span class="hljs-type">int</span> l=i,r=i+j;<br>                <span class="hljs-keyword">while</span>(l&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;s[l]==s[r])&#123;<br>                    l--,r++;<br>                &#125;<br>                l++,r--;<br>                <span class="hljs-keyword">if</span>(maxLen&lt;(r-l+<span class="hljs-number">1</span>))&#123;<br>                    maxLen=r-l+<span class="hljs-number">1</span>;<br>                    maxLeft=l;<br>             &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(maxLeft,maxLen);<br>    &#125; <br>&#125;;<br></code></pre></td></tr></table></figure><p>本题顾名思义，使用中心扩展法解决，则首先需要确定中心点，很容易思考得出一共有两种中心：一个字符和两个字符。</p><p>外层循环遍历中心点的位置，内层循环是确定是哪种中心。</p><p>当字符匹配时，l、r相应增减。直到不匹配为止，然后l、r需要回溯一位到回文串边界。</p><p>由l、r来确定回文串的起始位置和长度，并维护一个最大长度和相应的起始位置。</p><p>使用substring方法返回最长回文串。</p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题记录10.9</title>
    <link href="/2024/10/09/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.9/"/>
    <url>/2024/10/09/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9510.9/</url>
    
    <content type="html"><![CDATA[<p>开始刷100题。</p><span id="more"></span><h2 id="2024-10-9"><a href="#2024-10-9" class="headerlink" title="2024&#x2F;10&#x2F;9"></a>2024&#x2F;10&#x2F;9</h2><h4 id="（1）双指针"><a href="#（1）双指针" class="headerlink" title="（1）双指针"></a>（1）双指针</h4><h5 id="1、移动零-283-移动零-力扣（LeetCode）"><a href="#1、移动零-283-移动零-力扣（LeetCode）" class="headerlink" title="1、移动零-283. 移动零 - 力扣（LeetCode）"></a>1、移动零-<a href="https://leetcode.cn/problems/move-zeroes/description/?envType=study-plan-v2&envId=top-100-liked">283. 移动零 - 力扣（LeetCode）</a></h5><blockquote><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。<strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>  </span>&#123;<br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-keyword">if</span> (nums == null || (length = nums.length) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; j) &#123;<span class="hljs-comment">// #1</span><br>                nums[j] = nums[i];<br>                nums[i] = <span class="hljs-number">0</span>;<br>            &#125;<br>            j++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>j</code> 是一个指针，用来跟踪<strong>非零元素应该放置的位置</strong>，初始化为 <code>0</code>。</li></ul><p><code>i</code> 是遍历数组的索引，逐个检查数组中的元素。</p><ul><li>当 <code>nums[i]</code> 不为 <code>0</code> 时，我们需要将其放到正确的位置，即 <code>nums[j]</code>。</li></ul><p>通过 <code>if (i &gt; j)</code> 这一步，检查是否当前元素和目标位置是相同的。如果 <code>i == j</code>，意味着当前元素已经在正确的位置，不需要交换；如果 <code>i &gt; j</code>，则表示当前非零元素需要移动到 <code>j</code> 位置，然后将 <code>nums[i]</code> 置为 <code>0</code>。</p><p>时间复杂度O(n)，空间复杂度O(1)。</p><h5 id="2、盛最多水的容器"><a href="#2、盛最多水的容器" class="headerlink" title="2、盛最多水的容器"></a>2、<a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a></h5><blockquote><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。返回容器可以储存的最大水量。<strong>说明：</strong>你不能倾斜容器。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = height.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &lt; j) &#123;<br>            res = height[i] &lt; height[j] ? <br>                <span class="hljs-built_in">max</span>(res, (j - i) * height[i++]): <br>                <span class="hljs-built_in">max</span>(res, (j - i) * height[j--]); <br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在每个状态下，无论长板或短板向中间收窄一格，都会导致水槽 底边宽度 −1 变短：</p><p>若向内<strong>移动短板</strong>，水槽的短板 min(h[i],h[j]) 可能变大，因此下个水槽的面积 可能增大 。</p><p>若向内<strong>移动长板</strong>，水槽的短板 min(h[i],h[j]) 不变或变小，因此下个水槽的面积 一定变小 。</p><h5 id="3、三数之和"><a href="#3、三数之和" class="headerlink" title="3、三数之和"></a>3、<a href="https://leetcode.cn/problems/3sum/">三数之和</a></h5><blockquote><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。<strong>注意：</strong>答案中不可以包含重复的三元组。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span> (nums[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0</span> || nums[nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>       <span class="hljs-keyword">return</span> &#123;&#125;;<br>      &#125;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; ans;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过重复的元素</span><br>            <span class="hljs-type">int</span> l = i + <span class="hljs-number">1</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>                <span class="hljs-type">int</span> sum = nums[i] + nums[l] + nums[r];<br>                <span class="hljs-keyword">if</span> (sum == <span class="hljs-number">0</span>) &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(&#123;nums[i], nums[l], nums[r]&#125;);<br>                    <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="hljs-number">1</span>]) ++l; <span class="hljs-comment">// 跳过重复的元素</span><br>                    <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="hljs-number">1</span>]) --r; <span class="hljs-comment">// 跳过重复的元素</span><br>                    ++l; --r;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) &#123;<br>                    ++l;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    --r;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>首先对数组进行排序，这样就可以通过双指针的方式从两端开始收缩，寻找满足条件的三元组；有利于后续避免重复的元素。</p><p>外层从第一个元素开始循环，直到倒数第三个；若与前一个数相等则跳过。</p><p>初始化两个指针l,r分别从左右两端开始遍历。在两个指针未相遇前，寻找满足条件的三个数，并继续跳过重复的元素。不满足条件时则做相应的调整。</p><p>时间复杂度：O(N^2) </p><h4 id="（2）滑动窗口"><a href="#（2）滑动窗口" class="headerlink" title="（2）滑动窗口"></a>（2）滑动窗口</h4><h5 id="1、无重复字符的最长子串c-（做完就忘，烦死我了😩😩😩）"><a href="#1、无重复字符的最长子串c-（做完就忘，烦死我了😩😩😩）" class="headerlink" title="1、无重复字符的最长子串c++（做完就忘，烦死我了😩😩😩）"></a>1、<a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串c++</a>（做完就忘，烦死我了😩😩😩）</h5><blockquote><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!s.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//先判断一手</span><br>        <span class="hljs-type">int</span> maxSize=<span class="hljs-number">0</span>,left=<span class="hljs-number">0</span>;<br>        unordered_set &lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">while</span>(ans.<span class="hljs-built_in">find</span>(s[i])!=ans.<span class="hljs-built_in">end</span>())&#123;<br>                ans.<span class="hljs-built_in">erase</span>(s[left]);<br>                left++;<br>            &#125;<br>            maxSize=<span class="hljs-built_in">max</span>(maxSize,i-left+<span class="hljs-number">1</span>);<br>            ans.<span class="hljs-built_in">insert</span>(s[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxSize;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用<code>unordered_set</code>是为了提高查找效率</p><p>维护窗口最左边的坐标：left。</p><p>如果最右边的值不在ans中，说明窗口可以增加。否则需要将窗口左边坐标向右，直到最右边的值不在ans中。每次循环都维护一个窗口的最大长度。</p><h5 id="2、找到字符串中所有字母异位词"><a href="#2、找到字符串中所有字母异位词" class="headerlink" title="2、找到字符串中所有字母异位词"></a>2、<a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">找到字符串中所有字母异位词</a></h5><blockquote><p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code> 中所有 <code>p</code> 的 <strong>异位词</strong> 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findAnagrams</span><span class="hljs-params">(string s, string p)</span> </span>&#123;<br>        <span class="hljs-type">int</span> sLen=s.<span class="hljs-built_in">length</span>(),pLen=p.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-keyword">if</span>(sLen&lt;pLen) <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; ();<br>        vector &lt;<span class="hljs-type">int</span>&gt; ans;<br>        vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">sCount</span>(<span class="hljs-number">26</span>),<span class="hljs-built_in">pCount</span>(<span class="hljs-number">26</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;pLen;i++)&#123;<br>            sCount[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            pCount[p[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(sCount==pCount) ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sLen-pLen;i++)&#123;<br>            sCount[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>            sCount[s[i+pLen]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            <span class="hljs-keyword">if</span>(sCount == pCount)<br>                ans.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（3）前缀和"><a href="#（3）前缀和" class="headerlink" title="（3）前缀和"></a>（3）前缀和</h4><h5 id="1、和为-K-的子数组"><a href="#1、和为-K-的子数组" class="headerlink" title="1、和为 K 的子数组"></a>1、<a href="https://leetcode.cn/problems/subarray-sum-equals-k/">和为 K 的子数组</a></h5><blockquote><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回 <em>该数组中和为 <code>k</code> 的子数组的个数</em> 。子数组是数组中元素的连续非空序列。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">subarraySum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>        mp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;  <span class="hljs-comment">//可能有前几个数字加在一起等于k的情况。</span><br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>, pre = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; x:nums) &#123;<br>            pre += x;<br>            <span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">find</span>(pre - k) != mp.<span class="hljs-built_in">end</span>()) &#123;<br>                count += mp[pre - k];<br>            &#125;<br>            mp[pre]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>遍历计算前缀和，并用哈希表存储前缀和的值出现的次数。</p><p>计算时，查找哈希表中是否存在pre-k的值，如果有，就说明某个位置到这里的字串的和加起来等于k，于是可以加上相应的个数。</p><h4 id="（4）优先队列"><a href="#（4）优先队列" class="headerlink" title="（4）优先队列"></a>（4）优先队列</h4><h5 id="1、滑动窗口最大值"><a href="#1、滑动窗口最大值" class="headerlink" title="1、滑动窗口最大值"></a>1、<a href="https://leetcode.cn/problems/sliding-window-maximum/">滑动窗口最大值</a></h5><blockquote><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// 数组长度</span><br>        priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;  <span class="hljs-comment">// 优先队列，存储 (元素值, 索引) 对</span><br><br>        <span class="hljs-comment">// 初始化前 k 个元素到优先队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>            q.<span class="hljs-built_in">emplace</span>(nums[i], i);  <span class="hljs-comment">// 将前 k 个元素加入到队列中</span><br>        &#125;<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; ans = &#123;q.<span class="hljs-built_in">top</span>().first&#125;;  <span class="hljs-comment">// 当前最大值即是队列的堆顶元素（值最大）</span><br>        <br>        <span class="hljs-comment">// 开始滑动窗口</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt; n; ++i) &#123;<br>            q.<span class="hljs-built_in">emplace</span>(nums[i], i);  <span class="hljs-comment">// 将新元素加入队列</span><br>            <span class="hljs-comment">// 检查队列堆顶元素的索引是否已经超出滑动窗口的范围</span><br>            <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">top</span>().second &lt;= i - k) &#123;<br>                q.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">// 如果堆顶元素已不在窗口内，则将其移除</span><br>            &#125;<br>            <span class="hljs-comment">// 队列中的堆顶元素为当前窗口的最大值</span><br>            ans.<span class="hljs-built_in">push_back</span>(q.<span class="hljs-built_in">top</span>().first);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;  <span class="hljs-comment">// 返回滑动窗口中的所有最大值</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（5）二分查找"><a href="#（5）二分查找" class="headerlink" title="（5）二分查找"></a>（5）二分查找</h4><h5 id="1、搜索插入位置"><a href="#1、搜索插入位置" class="headerlink" title="1、搜索插入位置"></a>1、<a href="https://leetcode.cn/problems/search-insert-position/">搜索插入位置</a></h5><blockquote><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。请必须使用时间复杂度为 <code>O(log n)</code> 的算法。<code>nums</code> 为 <strong>无重复元素</strong> 的 <strong>升序</strong> 排列数组</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>            <span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(target&gt;nums[mid])<br>                l=mid+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                r=mid<span class="hljs-number">-1</span>;   <br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、搜索二维矩阵"><a href="#2、搜索二维矩阵" class="headerlink" title="2、搜索二维矩阵"></a>2、<a href="https://leetcode.cn/problems/search-a-2d-matrix/">搜索二维矩阵</a></h5><blockquote><p>给你一个满足下述两条属性的 <code>m x n</code> 整数矩阵：</p><ul><li>每行中的整数从左到右按非严格递增顺序排列。</li><li>每行的第一个整数大于前一行的最后一个整数。</li></ul><p>给你一个整数 <code>target</code> ，如果 <code>target</code> 在矩阵中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">searchMatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (matrix.<span class="hljs-built_in">empty</span>() || matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 如果矩阵为空，直接返回 false</span><br>        <br>        <span class="hljs-type">int</span> m = matrix.<span class="hljs-built_in">size</span>();    <span class="hljs-comment">// 行数</span><br>        <span class="hljs-type">int</span> n = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 列数</span><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = m * n - <span class="hljs-number">1</span>; <span class="hljs-comment">// 二维数组扁平化后的索引范围</span><br>        <br>        <span class="hljs-comment">// 二分查找</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 防止溢出</span><br>            <span class="hljs-type">int</span> row = mid / n;  <span class="hljs-comment">// 计算出 mid 对应的行号</span><br>            <span class="hljs-type">int</span> col = mid % n;  <span class="hljs-comment">// 计算出 mid 对应的列号</span><br>            <span class="hljs-type">int</span> midVal = matrix[row][col]; <span class="hljs-comment">// 获取当前元素</span><br>            <br>            <span class="hljs-keyword">if</span> (midVal == target) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 找到目标值</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (midVal &lt; target) &#123;<br>                left = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 在右半部分查找</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 在左半部分查找</span><br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 未找到目标值</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（6）栈"><a href="#（6）栈" class="headerlink" title="（6）栈"></a>（6）栈</h4><h5 id="1、有效的括号"><a href="#1、有效的括号" class="headerlink" title="1、有效的括号"></a>1、<a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></h5><blockquote><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p></blockquote><p>不看答案做不出系列。。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">char</span>&gt; pairs = &#123;<br>            &#123;<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>&#125;<br>        &#125;;<br>        stack&lt;<span class="hljs-type">char</span>&gt; stk;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch: s) &#123;<br>            <span class="hljs-keyword">if</span> (pairs.<span class="hljs-built_in">count</span>(ch)) &#123;  <span class="hljs-comment">//右括号</span><br>                <span class="hljs-keyword">if</span> (stk.<span class="hljs-built_in">empty</span>() || stk.<span class="hljs-built_in">top</span>() != pairs[ch]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//不匹配</span><br>                &#125;<br>                stk.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">//匹配，弹出栈顶元素</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123; <br>                stk.<span class="hljs-built_in">push</span>(ch);   <span class="hljs-comment">//压入左括号</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stk.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、最小栈"><a href="#2、最小栈" class="headerlink" title="2、最小栈"></a>2、<a href="https://leetcode.cn/problems/min-stack/">最小栈</a></h5><blockquote><p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>    stack &lt;<span class="hljs-type">int</span>&gt; x;<br>    stack &lt;<span class="hljs-type">int</span>&gt; min;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MinStack</span>() &#123;<br>        min.<span class="hljs-built_in">push</span>(INT_MAX)<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        x.<span class="hljs-built_in">push</span>(val);<br>        min.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">min</span>(min.<span class="hljs-built_in">top</span>(),val));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        x.<span class="hljs-built_in">pop</span>();<br>        min.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> x.<span class="hljs-built_in">top</span>();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMin</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> min.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS课程1-补充学习</title>
    <link href="/2024/10/06/HTML+CSS%E8%AF%BE%E7%A8%8B1-%E8%A1%A5%E5%85%85%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/06/HTML+CSS%E8%AF%BE%E7%A8%8B1-%E8%A1%A5%E5%85%85%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>学习一下HTML、CSS的基础知识</p><span id="more"></span><p><a href="https://codingheroes.io/resources/">Jonas’ Resources for Hand-Crafting Beautiful and Performant Websites (codingheroes.io)</a></p><p>Jonas的资源网站</p><h3 id="一、HTML基本概述"><a href="#一、HTML基本概述" class="headerlink" title="一、HTML基本概述"></a>一、HTML基本概述</h3><h4 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h4><p>HTML（HyperText Markup Language，超文本标记语言）是构建网页和应用程序的核心技术之一，用于描述网页的结构和内容。HTML不是编程语言，而是一种<strong>标记语言</strong>，它通过使用一组标签（tags）来标记文本，使其具有不同的含义、用途和显示效果。</p><p>浏览器读取HTML文件，并将其解析为一个<strong>DOM树</strong>（文档对象模型），再根据CSS样式和JavaScript脚本生成最终的网页。这使得HTML不仅为静态内容提供了结构，还能通过JavaScript进行动态操作。</p><h4 id="（2）主要功能"><a href="#（2）主要功能" class="headerlink" title="（2）主要功能"></a>（2）主要功能</h4><p><strong>结构化文档</strong>：HTML通过标记符号（标签）来定义文档的不同部分，使浏览器能够正确显示网页的内容。它为网页中的标题、段落、图像、链接等提供结构化定义。</p><p><strong>超文本链接</strong>：HTML通过 <code>&lt;a&gt;</code> 标签创建超链接，使用户能够在不同页面和网站之间导航，这也是构成互联网基础的一个重要功能。</p><p><strong>多媒体支持</strong>：通过标签嵌入图像（<code>&lt;img&gt;</code>）、音频（<code>&lt;audio&gt;</code>）、视频（<code>&lt;video&gt;</code>）等多媒体内容，增强网页的表现力。</p><p><strong>表单与交互</strong>：HTML定义了各种表单元素（<code>&lt;form&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;button&gt;</code> 等），允许用户提交数据，如搜索、注册、留言等，从而实现人与网页之间的交互。</p><p><strong>语义化标记</strong>：HTML5 引入了许多语义化标签（如 <code>&lt;article&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code> 等），使网页内容更加清晰、易读，不仅对开发者友好，也有助于搜索引擎的优化（SEO）和无障碍访问（Accessibility）。</p><h4 id="（3）常见标签"><a href="#（3）常见标签" class="headerlink" title="（3）常见标签"></a>（3）常见标签</h4><blockquote><p>在现有的六个标题层次中，除非觉得有必要，否则应该争取每页使用不超过三个。有很多层次的文件（例如，深层次的标题层次）会变得笨重，难以浏览。在这种情况下，如果可能的话，建议将内容分散到多个页面。</p></blockquote><p>最上方：<code>&lt;!DOCTYPE html&gt; </code>声明文档类型，告知浏览器该文档遵循 HTML5 规范</p><p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p><p><code>&lt;a&gt;</code>的<code>target</code>属性设置为<code>“_blank”</code>的时候，会在新的标签页打开链接</p><p><code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 表示不同级别的标题</p><p><code>&lt;ul&gt;</code> 表示无序列表，<code>&lt;ol&gt;</code> 表示有序列表，<code>&lt;li&gt;</code> 是列表项。</p><p><code>&lt;table&gt;</code> 用于创建表格，配合 <code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code>、<code>&lt;th&gt;</code> 等标签使用。</p><p><code>&lt;em&gt;</code>斜体</p><p><code>&lt;img&gt;</code>的<code>alt</code>属性其一可以使得搜索引擎识别图像内容，其二可以让盲人使用网站时识别图像内容。</p><h4 id="（4）HTML5新特性"><a href="#（4）HTML5新特性" class="headerlink" title="（4）HTML5新特性"></a>（4）HTML5新特性</h4><blockquote><p>像这样(<code>&lt;b&gt;</code>、<code>&lt;i&gt;</code> 和 <code>&lt;u&gt;</code> )仅仅影响表象而且没有语义的元素，被称为<strong>表象元素</strong>（presentational elements）并且不应该再被使用。因为正如我们在之前看到的，语义对无障碍、SEO（搜索引擎优化）等非常重要。</p></blockquote><p><strong>多媒体支持</strong>：HTML5 提供了内置的音频（<code>&lt;audio&gt;</code>）和视频（<code>&lt;video&gt;</code>）支持，不再需要依赖 Flash 等插件。</p><p><strong>表单增强</strong>：引入了新的输入类型（如 <code>email</code>、<code>date</code>、<code>number</code> 等），提升了表单验证和用户体验。</p><p><strong>Canvas</strong>：<code>&lt;canvas&gt;</code> 标签允许使用 JavaScript 绘制图形、制作动画和交互式内容。</p><p><strong>本地存储</strong>：HTML5 支持通过 <code>localStorage</code> 和 <code>sessionStorage</code> 进行数据存储，允许网页在本地存储大量数据，无需使用Cookie。</p><p><strong>Semantic（语义标签）</strong>：（SEO、可访问性）</p><ul><li>**<code>&lt;header&gt;</code>**：定义文档或节的页眉。</li><li>**<code>&lt;nav&gt;</code>**：定义导航链接区域。</li><li>**<code>&lt;article&gt;</code>**：独立的内容区域，适用于博客文章、新闻等独立的内容单元。</li><li>**<code>&lt;section&gt;</code>**：表示文档中的某个区域，通常包含一组相关的内容。</li><li>**<code>&lt;aside&gt;</code>**：表示侧边栏内容，通常用于与主要内容相关但不直接属于主要内容的信息。</li><li>**<code>&lt;footer&gt;</code>**：定义文档或节的页脚。</li><li>**<code>&lt;strong&gt;</code>**：加粗字体，表强调（不再用<code>&lt;b&gt;</code>）</li></ul><h4 id="（5）补充"><a href="#（5）补充" class="headerlink" title="（5）补充"></a>（5）补充</h4><h5 id="1、零散"><a href="#1、零散" class="headerlink" title="1、零散"></a>1、零散</h5><ul><li><p>链接可以指向另外一个html文件代表的网页，只需在href属性下写相对路径即可。</p></li><li><p>href写为<code>“#”</code>属性可以返回页面顶部</p></li><li><p>HTML标签不区分大小写</p></li></ul><h5 id="2、HTML元素"><a href="#2、HTML元素" class="headerlink" title="2、HTML元素"></a>2、HTML元素</h5><img  style="zoom: 50%;" src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/grumpy-cat-small.png" alt="一个示范性的代码片断，展示了 html 元素   My cat is very grumpy 的结构。" /><h5 id="3、meta（元数据）"><a href="#3、meta（元数据）" class="headerlink" title="3、meta（元数据）"></a>3、meta（元数据）</h5><blockquote><p>在谷歌搜索里，在主页面链接下面，你将看到一些相关子页面——这些是站点链接，可以在 <a href="https://search.google.com/search-console/about">Google’s webmaster tools</a> 配置——这是一种可以使你的站点对搜索引擎更友好的方式。</p><p>许多 <code>&lt;meta&gt;</code> 特性已经不再使用。例如，keyword <code>&lt;meta&gt;</code> 元素（<code>&lt;meta name=&quot;keywords&quot; content=&quot;fill, in, your, keywords, here&quot;&gt;</code>，为搜索引擎提供关键词，用于确定该页面与不同搜索词的相关性）已经被搜索引擎忽略了，因为作弊者填充了大量关键词到 keyword，错误地引导搜索结果。</p></blockquote><ul><li>description</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Try to learn CSS and HTML from here&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在搜索引擎中会在搜索结果中显示（SEO）</p><ul><li>其他实用meta</li></ul><p>⭕  <a href="https://ogp.me/">The Open Graph protocol (ogp.me)</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">  <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:image&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/mdn-social-share.png&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">  <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:description&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;The Mozilla Developer Network (MDN) provides information about Open Web technologies including HTML, CSS, and APIs for both Web sites and HTML Apps.&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:title&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Mozilla Developer Network&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在点击链接的时候会显示一张图片和一段文字，给用户提供了很丰富的体验。</p><h5 id="4、应用js文件"><a href="#4、应用js文件" class="headerlink" title="4、应用js文件"></a>4、应用js文件</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;my-js-file.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>defer</code> 告诉浏览器在解析完成 HTML 后再加载 JavaScript。这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容，就不会因为 JavaScript 试图访问页面上不存在的 HTML 元素而产生错误。</p><h5 id="5、超链接"><a href="#5、超链接" class="headerlink" title="5、超链接"></a>5、超链接</h5><p>任何内容，甚至<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Block/CSS">块级元素</a>都可以作为链接出现。如果想让标题、图像等元素变为链接，就把它包裹在锚点元素（<code>&lt;a&gt;</code>）内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/zh-CN/&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>MDN Web 文档<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在超链接中可以添加title属性，旨在包含关于链接的补充信息。当鼠标悬停在连接上方的时候，title中的内容就会作为信息出现。</p><blockquote><p><strong>备注：</strong>链接的标题仅当鼠标悬停在其上时才会显示，这意味着使用键盘来导航网页的人很难获取到标题信息。如果标题信息对于页面非常重要，你应该使用所有用户能都方便获取的方式来呈现，例如放在常规文本中。</p></blockquote><p><strong>统一资源定位符（Uniform Resource Locator，URL）</strong></p><p>注意在定位到下载文件、打开视频、发送邮件等界面时需要给出一个提示，使得用户有心理准备，保证用户体验。</p><h5 id="6、描述列表"><a href="#6、描述列表" class="headerlink" title="6、描述列表"></a>6、描述列表</h5><p>（会产生缩进的效果）描述列表里可以放置多个描述项，每一个描述项可以有多条描述。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>内心独白<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br>    戏剧中，某个角色对自己的内心活动或感受进行念白表演，这些台词只面向观众，而其他角色不会听到。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="7、缩略语"><a href="#7、缩略语" class="headerlink" title="7、缩略语"></a>7、缩略语</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;超文本标记语言（Hyper text Markup Language）&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>鼠标悬停在被标记的缩略语文本上后会显示title中的内容。</p><h5 id="8、上标和下标"><a href="#8、上标和下标" class="headerlink" title="8、上标和下标"></a>8、上标和下标</h5><p>当你使用日期、化学方程式、和数学方程式时会偶尔使用上标和下标，以确保它们的正确含义。<sub>和 <sup>元素可以解决这样的问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">C<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>H<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>N<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>O<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>。 <br>x<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241014160516632.png" alt="image-20241014160516632" style="zoom: 80%; float: left" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241014161218625.png" alt="image-20241014161218625"></p><h5 id="9、标记时间和日期"><a href="#9、标记时间和日期" class="headerlink" title="9、标记时间和日期"></a>9、标记时间和日期</h5><p>不同的格式不容易被电脑识别——假如你想自动抓取页面上所有事件的日期并将它们插入到日历中，<time>元素允许你附上清晰的、可被机器识别的时间或日期来实现这种需求。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 还可包含秒和毫秒 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;19:30:01.856&quot;</span>&gt;</span>19:30:01.856<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 日期和时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2016-01-20T19:30&quot;</span>&gt;</span>7.30pm, 20 January 2016<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 含有时区偏移值的日期时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2016-01-20T19:30+01:00&quot;</span></span><br><span class="hljs-tag">  &gt;</span>7.30pm, 20 January 2016 is 8.30pm in France<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 提及特定周 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2016-W04&quot;</span>&gt;</span>The fourth week of 2016<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、CSS基本概述"><a href="#二、CSS基本概述" class="headerlink" title="二、CSS基本概述"></a>二、CSS基本概述</h3><h4 id="（1）定义-1"><a href="#（1）定义-1" class="headerlink" title="（1）定义"></a>（1）定义</h4><blockquote><p>在html文件中的head标签内定义：</p><p>**<link href="style.css" rel="stylesheet" />**引入外部css</p></blockquote><p><strong>CSS（Cascading Style Sheets，层叠样式表）</strong> 是用于控制网页外观的语言，它与 HTML 配合使用，为网页添加样式和布局。CSS 主要用于设计网页的视觉展示，如颜色、字体、布局、间距、边框、动画等，使网页更加美观和易于使用。</p><p><strong>层叠</strong>是指当多个样式冲突时，CSS 根据特定的规则确定哪一个样式最终会被应用。优先级规则包括样式来源、样式选择器的特殊性、样式的声明顺序等。浏览器会选择优先级较高的样式来渲染元素。</p><p>样式表是一组规则，定义了如何为 HTML 元素应用样式。样式表可以是 <strong>外部</strong>（通过 <code>&lt;link&gt;</code> 标签引入外部 CSS 文件），<strong>内部</strong>（嵌入在 HTML 文档中的 <code>&lt;style&gt;</code> 标签内），或者是<strong>行内</strong>样式（直接在 HTML 元素的 <code>style</code> 属性中定义）。</p><h4 id="（2）选择器"><a href="#（2）选择器" class="headerlink" title="（2）选择器"></a>（2）选择器</h4><p>选择器用于选择 HTML 文档中的元素，并对这些元素应用相应的样式。CSS 选择器可以通过标签名、类名、ID、属性、伪类和伪元素等来选择不同的元素。</p><p>常见的选择器包括：</p><ul><li><strong>元素选择器</strong>：直接选中 HTML 标签，如 <code>p &#123; color: blue; &#125;</code> 会把所有的段落文字设为蓝色。</li><li><strong>类选择器</strong>：通过类名选择元素，类名前加 <code>.</code>，如 <code>.button &#123; background-color: red; &#125;</code>。</li><li><strong>ID 选择器</strong>：通过 ID 名称选择元素，ID 前加 <code>#</code>，如 <code>#header &#123; font-size: 24px; &#125;</code>。</li><li><strong>组合选择器</strong>：可以组合多个选择器，如 <code>p, h1 &#123; color: black; &#125;</code>。</li></ul><p>每个 CSS 规则包含一个选择器和一组声明，声明由<strong>属性</strong>和<strong>属性值</strong>组成。声明指定如何对选中的元素应用样式。每条声明以分号 <code>;</code> 结尾。</p><h4 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h4><h5 id="颜色规则："><a href="#颜色规则：" class="headerlink" title="颜色规则："></a><strong>颜色规则：</strong></h5><p>RGB &#x2F; HEXADECIMAL（十六进制）；灰色：三色值相同</p><h5 id="pseudo-class（伪类）"><a href="#pseudo-class（伪类）" class="headerlink" title="pseudo class（伪类）"></a><strong>pseudo class（伪类</strong>）</h5><p><code>first-child/second child/nth-child(n/odd/even)</code></p><ul><li>装饰a类：link、visited、hover（text-decoration）、active</li></ul><h5 id="选择器的优先级："><a href="#选择器的优先级：" class="headerlink" title="选择器的优先级："></a><strong>选择器的优先级</strong>：</h5><p><code>！important &gt; Inline style &gt; ID &gt; Class &gt; Element&gt;*(通用)</code>（多个同类选择器，最后一个优先级最高）</p><h5 id="inheritance（继承）"><a href="#inheritance（继承）" class="headerlink" title="inheritance（继承）:"></a><strong>inheritance（继承）:</strong></h5><ul><li><p>在 CSS 中，<code>inheritance</code>（继承）是指某些属性能够自动从父元素继承到其子元素的机制。也就是说，子元素可以从父元素那里获取某些样式属性的值，而不需要在子元素上重复定义这些样式。</p></li><li><p>继承的属性</p><ul><li><strong>文本属性</strong>：如 <code>color</code>（文本颜色）、<code>font-family</code>（字体族）、<code>font-size</code>（字体大小）、<code>line-height</code>（行高）。</li><li><strong>列表属性</strong>：如 <code>list-style</code>（列表样式）。</li><li><strong>表格属性</strong>：如 <code>border-collapse</code>（边框折叠）</li></ul></li><li><p>不继承的属性</p><ul><li>例如 <code>margin</code>（外边距）、<code>padding</code>（内边距）、<code>border</code>（边框）等。这些属性只对当前元素本身生效，而不会影响其子元素。</li></ul></li><li><p><strong>inherit</strong></p><ul><li>可以使用 <code>inherit</code> 关键字强制某个属性继承父元素的值，即使这个属性默认情况下不继承</li></ul></li></ul><h5 id="移除默认样式："><a href="#移除默认样式：" class="headerlink" title="移除默认样式："></a>移除默认样式：</h5><p>比如下面代码的作用就是移除CSS中的无序列表的项目符号。<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type"><code>list-style-type</code></a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">list-style-type</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="是谁这么颠："><a href="#是谁这么颠：" class="headerlink" title="是谁这么颠："></a>是谁这么颠：</h5><p>是谁在翻译MDN的时候夹带私货，英文版很正常啊笑死😂一生都在整活的中国人。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241014201549196.png" alt="image-20241014201549196" style="zoom: 50%;" /><p>谁翻译的这一节，出来挨打…这一整节都好颠，我真的要笑死了。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/MX7V_KOE%5BW~%60D4Y4XB%5DS%5BGJ.png" alt="img" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>HTML+CSS课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程27-身份验证和功能完善</title>
    <link href="/2024/10/02/react%E8%AF%BE%E7%A8%8B27-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E5%92%8C%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/"/>
    <url>/2024/10/02/react%E8%AF%BE%E7%A8%8B27-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E5%92%8C%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/</url>
    
    <content type="html"><![CDATA[<p>本节课包含如何利用Auth2.0实现身份验证的功能，以及完善用户的功能。</p><span id="more"></span><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><h4 id="（1）客户端-服务端VS后端-前端"><a href="#（1）客户端-服务端VS后端-前端" class="headerlink" title="（1）客户端&amp;&amp;服务端VS后端&amp;&amp;前端"></a>（1）客户端&amp;&amp;服务端VS后端&amp;&amp;前端</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002090311747.png" alt="image-20241002090311747"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002091030466.png" alt="image-20241002091030466"></p><h3 id="二、部分处理"><a href="#二、部分处理" class="headerlink" title="二、部分处理"></a>二、部分处理</h3><h4 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h4><h5 id="1、使NavBar被选中链接高亮"><a href="#1、使NavBar被选中链接高亮" class="headerlink" title="1、使NavBar被选中链接高亮"></a>1、使NavBar被选中链接高亮</h5><p>找到组件<code>SideNavigation</code>，使用nextjs提供的hook：<code>usePathname</code></p><p><code>const pathName = usePathname();</code>可以获得当前的路径，于是可以进入条件style模式：</p><p><code>$&#123; pathName === link.href ? &#39;bg-primary-800&#39; : &#39;&#39;  &#125;</code></p><p>✅最重要的是需要声明<code>“use client”</code></p><h5 id="2、提取profile中的表单到client组件"><a href="#2、提取profile中的表单到client组件" class="headerlink" title="2、提取profile中的表单到client组件"></a>2、提取profile中的表单到client组件</h5><p>由于表单中用到了setCountry，是一个服务端的组件，如果直接包含在client组件中，就会报错（因为client组件不能import服务端组件）。因此可以在服务端的Profile Page中，将setCountry组件通过children传递过去，就OK了。</p><h4 id="（2）建立filter理解如何把状态从client传递到server"><a href="#（2）建立filter理解如何把状态从client传递到server" class="headerlink" title="（2）建立filter理解如何把状态从client传递到server"></a>（2）建立filter理解如何把状态从client传递到server</h4><blockquote><p>通过URL</p></blockquote><h5 id="1、维护服务端"><a href="#1、维护服务端" class="headerlink" title="1、维护服务端"></a>1、维护服务端</h5><blockquote><p>在 <code>app</code> 目录下的动态路由文件夹中，Page和layout默认可以接收 <code>params</code>，这些 <code>params</code> 会自动从文件结构中解析传递到组件中，而不需要通过 <code>getStaticProps</code> 或 <code>getServerSideProps</code></p></blockquote><p>cabins界面通过接收searchParams参数，得到filter数据，传递给CabinList，由此可以条件渲染cabins。此时cabins界面已经成为动态界面，revalidate参数已无用，因为它只适用于静态界面。</p><h5 id="2、suspense-fallback失效的问题"><a href="#2、suspense-fallback失效的问题" class="headerlink" title="2、suspense fallback失效的问题"></a>2、suspense fallback失效的问题</h5><blockquote><p>方法：使用suspense组件时不仅传入fallback，还要传入唯一的可以、值</p></blockquote><p>当 <code>Suspense</code> 组件的 <code>key</code> 发生变化时，React 会将当前挂载的组件卸载并重新渲染。这意味着当 <code>key</code> 改变时，<code>Suspense</code> 内的组件（如 <code>CabinList</code>）会被强制重新加载，即使在同一个 <code>Suspense</code> 中缓存的数据也会被刷新。这对于需要根据某些条件（如 <code>filter</code>）强制刷新内容时非常有用。</p><h5 id="3、建立Filter组件"><a href="#3、建立Filter组件" class="headerlink" title="3、建立Filter组件"></a>3、建立Filter组件</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; usePathname, useRouter, useSearchParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;next/navigation&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Filter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> searchParams = <span class="hljs-title function_">useSearchParams</span>();<br>  <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();<br>  <span class="hljs-keyword">const</span> pathname = <span class="hljs-title function_">usePathname</span>();<br><br>  <span class="hljs-keyword">const</span> activeFilter = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;capacity&#x27;</span>) ?? <span class="hljs-string">&#x27;all&#x27;</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFilter</span>(<span class="hljs-params">filter</span>) &#123;<br>    <span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(searchParams);<br>    params.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;capacity&#x27;</span>, filter);<br>    router.<span class="hljs-title function_">replace</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;pathname&#125;</span>?<span class="hljs-subst">$&#123;params.toString()&#125;</span>`</span>, &#123; <span class="hljs-attr">scroll</span>: <span class="hljs-literal">false</span> &#125;);<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span>...<br>&#125;<br></code></pre></td></tr></table></figure><p>❓❓为什么这么复杂</p><p>在 Next.js 的 <strong>client component</strong> 中，<code>useSearchParams()</code> 提供了对 URL 查询参数的访问，但它的返回值是一个 <code>URLSearchParams</code> 对象的只读版本。这意味着你可以使用 <code>useSearchParams()</code> 来<strong>获取</strong>参数，但不能直接通过它来<strong>修改</strong>或<strong>设置</strong>新的查询参数。</p><p>❓❓<code>URLSearchParams</code></p><p>这是 JavaScript 标准 <code>URLSearchParams</code> API 的工作方式，与 Next.js 本身无关，创建一个新的 <code>URLSearchParams</code> 实例后，可以自由地添加、修改或删除查询参数，并且将这些修改应用到 URL 中。</p><p>❓❓WHY  “router.replace”</p><p><code>params.set(&#39;capacity&#39;, filter)</code> 本身<strong>不会自动更新 URL</strong> 或切换界面，它只是在内存中修改了一个 <code>URLSearchParams</code> 对象，并没有直接与浏览器的地址栏进行交互，也不会触发页面的重新渲染。</p><p><code>router.replace()</code> 是 Next.js 提供的 API，用来<strong>显式更新浏览器的地址栏</strong>并影响页面渲染。在不添加新浏览历史记录的情况下<strong>替换当前 URL</strong>，即页面不会进行完整的刷新，用户点击 “后退” 按钮时也不会回到修改前的 URL。</p><p>❓❓<code>&#123; scroll: false &#125;</code></p><p>常在改变 URL 后，页面会自动滚动到顶部。通过传递 <code>&#123; scroll: false &#125;</code>，你可以阻止页面滚动，保持当前的滚动位置不变。这在切换过滤条件或更新查询参数时非常有用，避免页面跳转导致的体验不一致。</p><h4 id="（3）create-an-API-endpoint"><a href="#（3）create-an-API-endpoint" class="headerlink" title="（3）create an API endpoint"></a>（3）create an API endpoint</h4><p>路径：<code>app\api\cabins\[cabinId]\route.js</code></p><p>内容：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">GET</span>(<span class="hljs-params">request, &#123; params &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; cabinId &#125; = params;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> [cabin, bookedDates] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>      <span class="hljs-title function_">getCabin</span>(cabinId),<br>      <span class="hljs-title function_">getBookedDatesByCabinId</span>(cabinId),<br>    ]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">json</span>(&#123; cabin, bookedDates &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;cabin not found&#x27;</span> &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问后：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002154442550.png" alt="image-20241002154442550"></p><p>详细信息：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response">https://developer.mozilla.org/zh-CN/docs/Web/API/Response</a></p><h3 id="三、使用（NEXT）Auth-js进行Authentication"><a href="#三、使用（NEXT）Auth-js进行Authentication" class="headerlink" title="三、使用（NEXT）Auth.js进行Authentication"></a>三、使用（NEXT）Auth.js进行Authentication</h3><h4 id="（1）配置环境变量"><a href="#（1）配置环境变量" class="headerlink" title="（1）配置环境变量"></a>（1）配置环境变量</h4><p>找到.env.local文件夹，在里面添加两个环境变量</p><p>其中我们可以访问<a href="https://generate-secret.vercel.app/%E7%BD%91%E5%9D%80%EF%BC%8C%E4%BB%96%E4%BC%9A%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90secret%EF%BC%8C%E6%9B%B4%E5%8A%A0%E5%AE%89%E5%85%A8">https://generate-secret.vercel.app/网址，他会随机生成secret，更加安全</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">NEXTAUTH_URL=http://localhost:3000/<br>NEXTAUTH_SECRET=***<br></code></pre></td></tr></table></figure><h4 id="（2）google-developer-console（⚠️配置出问题，换用了Github）"><a href="#（2）google-developer-console（⚠️配置出问题，换用了Github）" class="headerlink" title="（2）google developer console（⚠️配置出问题，换用了Github）"></a>（2）google developer console（⚠️配置出问题，换用了Github）</h4><p>⭕<a href="https://authjs.dev/getting-started/providers/google">https://authjs.dev/getting-started/providers/google</a>  这是配置的相关网址</p><hr><h5 id="1、创建项目和OAuth-consent-screen"><a href="#1、创建项目和OAuth-consent-screen" class="headerlink" title="1、创建项目和OAuth consent screen"></a>1、创建项目和OAuth consent screen</h5><blockquote><p>OAuth 同意屏幕（OAuth consent screen）是 Google Cloud Platform 上的一个配置步骤，用于在用户使用您的应用程序进行身份验证和授权时展示给用户的信息</p></blockquote><p>点击创建项目，然后select it</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002155741057.png" alt="image-20241002155741057" style="zoom: 33%;" /><p>左侧sideBar选择API&amp;Services，再选择<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002160240048.png" alt="image-20241002160240048" style="zoom:67%;" /></p><p>选择External，因为Internal只对google workspase的用户有效，然后点击create。</p><p>第一页Domain部分不用填，第二页不用填，第三页把自己的邮箱或其他想要测试的邮箱添加进去，然后就结束。</p><h5 id="2、Credentials"><a href="#2、Credentials" class="headerlink" title="2、Credentials"></a>2、Credentials</h5><blockquote><p><strong>Credentials（凭据）</strong> 是一组用于身份验证和授权的安全信息，允许您的应用程序安全地访问 Google AP</p></blockquote><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002161018410.png" alt="image-20241002161018410" style="zoom:67%;" /><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002161334107.png" alt="image-20241002161334107"></p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002161911262.png" alt="image-20241002161911262" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002161922299.png" alt="image-20241002161922299" style="zoom:67%;" /><p><strong>弹出的这个界面最好不要立马叉掉！</strong>因为需要用上面的值配置环境变量</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable constant_">AUTH_GOOGLE_ID</span>=<span class="hljs-title class_">Client</span> <span class="hljs-variable constant_">ID</span><br><span class="hljs-variable constant_">AUTH_GOOGLE_SECRET</span>=<span class="hljs-title class_">Client</span> <span class="hljs-title class_">Secrte</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002162009003.png" alt="image-20241002162009003"></p><h4 id="（3）配置Auth-js"><a href="#（3）配置Auth-js" class="headerlink" title="（3）配置Auth.js"></a>（3）配置Auth.js</h4><blockquote><p>天杀的谷歌。。。。。。Github轻轻松松配好，谷歌跟发癫了似的。</p></blockquote><p>⭕<code>npm i next-auth@beta </code>    （第五版）</p><hr><h5 id="1、配置Auth-js"><a href="#1、配置Auth-js" class="headerlink" title="1、配置Auth.js"></a>1、配置Auth.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">NextAuth</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;next-auth&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Github</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;next-auth/providers/google&#x27;</span>;<br><br><span class="hljs-keyword">const</span> authConfig = &#123;<br>  <span class="hljs-attr">providers</span>: [<br>    <span class="hljs-title class_">Github</span>(&#123;<br>      <span class="hljs-attr">clientId</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">AUTH_GOOGLE_ID</span>,<br>      <span class="hljs-attr">clientSecret</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">AUTH_GOOGLE_SECRET</span>,<br>    &#125;),<br>  ],<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123;<br>  auth,<br>  signIn,<br>  signOut,<br>  <span class="hljs-attr">handlers</span>: &#123; <span class="hljs-variable constant_">GET</span>, <span class="hljs-variable constant_">POST</span> &#125;,<br>&#125; = <span class="hljs-title class_">NextAuth</span>(authConfig);<br></code></pre></td></tr></table></figure><h5 id="2、api下建auth路径"><a href="#2、api下建auth路径" class="headerlink" title="2、api下建auth路径"></a>2、api下建auth路径</h5><p><code>app\api\auth\[...nextauth]\route.js</code></p><p><a href="http://localhost:3000/api/auth/signin">Sign In</a></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241004142609510.png" alt="image-20241004142609510"></p><p><a href="http://localhost:3000/api/auth/providers">localhost:3000&#x2F;api&#x2F;auth&#x2F;providers</a></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241002163902629.png" alt="image-20241002163902629"></p><h5 id="3、用户信息"><a href="#3、用户信息" class="headerlink" title="3、用户信息"></a>3、用户信息</h5><p>点击上方的按钮用自己的账号Signin后，在组件中使用<code>const session=await auth()</code>，就会得到用户信息</p><p>推荐在server端得到用户信息；<strong>使用auth（）会使整个界面变成动态</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>  <span class="hljs-attr">user</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Yaodeer&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;@qq.com&#x27;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;https://avatars.githubusercontent.com/u/165669001?v=4&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">expires</span>: <span class="hljs-string">&#x27;2024-11-03T05:01:45.847Z&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）使用Middleware保护APP路线"><a href="#（4）使用Middleware保护APP路线" class="headerlink" title="（4）使用Middleware保护APP路线"></a>（4）使用Middleware保护APP路线</h4><p>⭕在根文件夹下创建<code>middleware.js</code></p><hr><p>auth可以让我们得到当前会话，也可以作为中间件使用。</p><h5 id="1、middleware-js"><a href="#1、middleware-js" class="headerlink" title="1、middleware.js"></a>1、middleware.js</h5><p>将 <code>auth</code> 作为中间件导出。这个中间件会在请求到达匹配的路径时被调用。</p><p><code>matcher</code> 指定了 <code>/account</code> 路径，只有请求 <code>/account</code> 路径时，才会调用这个中间件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;auth&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/app/_lib/auth&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> middleware = auth;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> config = &#123;<br>   <span class="hljs-attr">matcher</span>: [<span class="hljs-string">&quot;/account&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、auth-js"><a href="#2、auth-js" class="headerlink" title="2、auth.js"></a>2、auth.js</h5><p>在authConfig中添加callbacks属性：</p><p>authorized的作用是决定用户是否被授权访问某个资源。</p><p><code>request</code>: 这是当前的请求对象，包含请求相关的数据（例如 URL、headers 等）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">callbacks</span>: &#123;<br>   <span class="hljs-title function_">authorized</span>(<span class="hljs-params">&#123;auth,request&#125;</span>)&#123;<br>      <span class="hljs-keyword">return</span> !!auth?.<span class="hljs-property">user</span>;<br>   &#125;<span class="hljs-comment">//!! 是一种常见的 JavaScript 技巧，用于将值转换为布尔值</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）自定义signin和signout界面"><a href="#（5）自定义signin和signout界面" class="headerlink" title="（5）自定义signin和signout界面"></a>（5）自定义signin和signout界面</h4><h5 id="1、signin"><a href="#1、signin" class="headerlink" title="1、signin"></a>1、signin</h5><p>在app下创建login文件夹，创建page界面（含有文字和自定义的signin按钮）。</p><p>在authConfig中添加page属性：<code>signIn：“/login”</code></p><p>❓❓<em><strong>如何把auth.js中导出的signIn功能和按钮连接起来</strong></em></p><p>不能直接添加onClick，因为想保持它是服务器组件。</p><p>-&gt;在lib中添加action.js，最上方添加“use server”属性，于是可以在下面export一些函数</p><p>–&gt;首先是signInAction函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">signInAction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">signIn</span>(<span class="hljs-string">&quot;github&quot;</span>, &#123; <span class="hljs-attr">redirectTo</span>: <span class="hljs-string">&quot;/account&quot;</span> &#125;);<br>&#125;<span class="hljs-comment">//前：动作提供者，后：成功后的重定向</span><br></code></pre></td></tr></table></figure><p>—&gt;将Button组件用form包裹起来，添加<code>action=&#123;signInAction&#125;</code></p><h5 id="2、signout"><a href="#2、signout" class="headerlink" title="2、signout"></a>2、signout</h5><p>signout按钮是客户端组件，但是仍旧可以按照上面的办法，添加action属性。</p><h4 id="（6）为登陆的新用户创建supabase信息"><a href="#（6）为登陆的新用户创建supabase信息" class="headerlink" title="（6）为登陆的新用户创建supabase信息"></a>（6）为登陆的新用户创建supabase信息</h4><p>在callback中加入：</p><p>首先在signIn之后执行创建用户的函数，创建之后再执行，将创建出来的guestId赋给session中，这样可以获得身份的凭据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">async</span> <span class="hljs-title function_">signIn</span>(<span class="hljs-params">&#123; user, account, profile &#125;</span>) &#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-keyword">const</span> existingGuest = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getGuest</span>(user.<span class="hljs-property">email</span>);<br><br>     <span class="hljs-keyword">if</span> (!existingGuest) &#123;<br>         <span class="hljs-keyword">await</span> <span class="hljs-title function_">createGuest</span>(&#123;<span class="hljs-attr">email</span>: user.<span class="hljs-property">email</span>,<span class="hljs-attr">fullName</span>: user.<span class="hljs-property">name</span>,<br>       &#125;);<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125; <span class="hljs-keyword">catch</span> &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br> &#125;,<br> <span class="hljs-keyword">async</span> <span class="hljs-title function_">session</span>(<span class="hljs-params">&#123; session, user &#125;</span>) &#123;<br>   <span class="hljs-keyword">const</span> guest = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getGuest</span>(session.<span class="hljs-property">user</span>.<span class="hljs-property">email</span>);<br>   session.<span class="hljs-property">user</span>.<span class="hljs-property">guestId</span> = guest.<span class="hljs-property">id</span>;<br>   <span class="hljs-keyword">return</span> session;<br> &#125;,<br></code></pre></td></tr></table></figure><h3 id="四、为用户添加动作"><a href="#四、为用户添加动作" class="headerlink" title="四、为用户添加动作"></a>四、为用户添加动作</h3><h4 id="（1）更新信息"><a href="#（1）更新信息" class="headerlink" title="（1）更新信息"></a>（1）更新信息</h4><p>仍旧是在表单中采用action关键字，相应的函数会自动接收表中数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateProfile</span>(<span class="hljs-params">formData</span>) &#123;<br>  <span class="hljs-keyword">const</span> session = <span class="hljs-keyword">await</span> <span class="hljs-title function_">auth</span>();<br>  <span class="hljs-keyword">if</span> (!session) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;You need to be logged in&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> nationalID = formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;nationalID&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [nationality, countryFlag] = formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;nationality&#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;%&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z0-9]&#123;6,12&#125;$/</span>.<span class="hljs-title function_">test</span>(nationalID))<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Please provide a valid nationID&#x27;</span>);  <span class="hljs-comment">//检验是否是正确的身份证</span><br><br>  <span class="hljs-keyword">const</span> updateData = &#123; nationalID, nationality, countryFlag &#125;;<br><br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;guests&#x27;</span>)<br>    .<span class="hljs-title function_">update</span>(updateData)<br>    .<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, session.<span class="hljs-property">user</span>.<span class="hljs-property">guestId</span>);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Guest could not be updated&#x27;</span>);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="💭1解决cache问题-revalidatePath"><a href="#💭1解决cache问题-revalidatePath" class="headerlink" title="-&gt;💭1解决cache问题(revalidatePath)"></a>-&gt;💭1解决cache问题(revalidatePath)</h5><blockquote><p>动态界面自动刷新的时间是30s</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">revalidatePath</span>(<span class="hljs-string">&#x27;/account/profile&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在 Next.js 中，<code>revalidatePath</code> 是一个用于手动触发路径重新验证的函数，通常在你需要在服务器端更新某个页面或 API 的缓存时使用。该函数常用于在进行数据更改后，让 Next.js 知道该路径的数据已过期并需要重新加载。</p><h5 id="💭2呈现加载状态"><a href="#💭2呈现加载状态" class="headerlink" title="-&gt;💭2呈现加载状态"></a>-&gt;💭2呈现加载状态</h5><p> <code>const &#123; pending &#125; = useFormStatus();</code></p><p>这个组件必须在自己被包含到form组件中才能使用。（不太懂）</p><p>所以把表单的按钮提取成了一个单独的组件，在其中得到pending状态并条件渲染（按钮的文字和disabled），然后再把这个Button放置入form中，就可以得到form的状态了。</p><h4 id="（2）删除预定"><a href="#（2）删除预定" class="headerlink" title="（2）删除预定"></a>（2）删除预定</h4><h5 id="💭1构建Reservation界面"><a href="#💭1构建Reservation界面" class="headerlink" title="-&gt;💭1构建Reservation界面"></a>-&gt;💭1构建Reservation界面</h5><p>（为什么不先实现创建预定，难道是太难了）</p><p>给自己的id添加点预定展示界面。过去的booking不能修改和删除。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteReservation</span>(<span class="hljs-params">bookingId</span>) &#123;<br>  <span class="hljs-keyword">const</span> session = <span class="hljs-keyword">await</span> <span class="hljs-title function_">auth</span>();<br>  <span class="hljs-keyword">if</span> (!session) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;You need to be logged in&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> guestBookings = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getBookings</span>(session.<span class="hljs-property">user</span>.<span class="hljs-property">guestId</span>);<br>  <span class="hljs-keyword">const</span> guestBookingIds = <span class="hljs-keyword">await</span> guestBookings.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">booking</span>) =&gt;</span> booking.<span class="hljs-property">id</span>);<br><br>  <span class="hljs-keyword">if</span> (!guestBookingIds.<span class="hljs-title function_">includes</span>(bookingId))<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;You are not allowed to delete this booking&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> &#123; error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    .<span class="hljs-title function_">delete</span>()<br>    .<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, bookingId);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Booking could not be deleted&#x27;</span>);<br><br>  <span class="hljs-title function_">revalidatePath</span>(<span class="hljs-string">&#x27;/account/reservations&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>⚠️中间的几行代码是因为，如果我们打开网络请求录制，在自己的界面删除一个预定，然后选择复制这个删除预定的请求为cURL，粘贴到终端，只需要修改一下里面的bookingId，就可以删除所有人的booking了。</p><p>这一次调用服务端action是通过在button上添加onClick属性。</p><h5 id="💭2呈现加载状态2️⃣（useTransition）"><a href="#💭2呈现加载状态2️⃣（useTransition）" class="headerlink" title="-&gt;💭2呈现加载状态2️⃣（useTransition）"></a>-&gt;💭2呈现加载状态2️⃣（useTransition）</h5><blockquote><p>由于这次是按钮，所以不能用useFormStatus来显示loading状态了。</p></blockquote><p><code>useTransition</code> 是 React 18 引入的一个 Hook，用于处理“并发渲染”中的非紧急更新。这允许你将某些状态更新标记为非紧急的，从而不会阻塞用户界面的交互。<code>useTransition</code> 可以帮助避免在状态更新期间卡顿的情况，例如加载新数据或页面内容时</p><p><code>useTransition</code> 返回两个值：</p><ol><li><code>isPending</code>：表示更新是否正在进行中。</li><li><code>startTransition</code>：用于将更新标记为“非紧急”的函数。</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [isPending, startTransition] = <span class="hljs-title function_">useTransition</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDelete</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;Are you sure you want to delete this reservation?&#x27;</span>))<br>    <span class="hljs-title function_">startTransition</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">deleteReservation</span>(bookingId));<br>&#125;<br></code></pre></td></tr></table></figure><p>如果用户确认删除，<code>startTransition</code> 被调用，删除操作 (<code>deleteReservation</code>) 被封装在 <code>startTransition</code> 中，意味着这是一个非紧急的更新操作，不会阻塞页面的其他操作。</p><h4 id="（3）修改预定"><a href="#（3）修改预定" class="headerlink" title="（3）修改预定"></a>（3）修改预定</h4><p>当我们点击Edit的时候，会将我们定向到(<a href="http://localhost:3000/account/reservations/edit/bookingId)%E7%95%8C%E9%9D%A2%E3%80%82">http://localhost:3000/account/reservations/edit/bookingId)界面。</a></p><p>所以首先要做的就是先创建一个动态的Route。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateBooking</span>(<span class="hljs-params">formData</span>) &#123;<br>   <span class="hljs-comment">//1、验证是否登陆</span><br>  <span class="hljs-keyword">const</span> session = <span class="hljs-keyword">await</span> <span class="hljs-title function_">auth</span>();<br>  <span class="hljs-keyword">if</span> (!session) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;You need to be logged in&#x27;</span>);<br>  <span class="hljs-comment">//2、获得数据</span><br>  <span class="hljs-keyword">const</span> bookingId = <span class="hljs-title class_">Number</span>(formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;bookingId&#x27;</span>));<br>  <span class="hljs-comment">//3、防止误删他人数据</span><br>  <span class="hljs-keyword">const</span> guestBookings = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getBookings</span>(session.<span class="hljs-property">user</span>.<span class="hljs-property">guestId</span>);<br>  <span class="hljs-keyword">const</span> guestBookingIds = guestBookings.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">booking</span>) =&gt;</span> booking.<span class="hljs-property">id</span>);<br><br>  <span class="hljs-keyword">if</span> (!guestBookingIds.<span class="hljs-title function_">includes</span>(bookingId))<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;You are not allowed to update this booking&#x27;</span>);<br>  <span class="hljs-comment">//4、更新</span><br>  <span class="hljs-keyword">const</span> updateData = &#123;<br>    <span class="hljs-attr">numGuests</span>: <span class="hljs-title class_">Number</span>(formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;numGuests&#x27;</span>)),<br>    <span class="hljs-attr">observations</span>: formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;observations&#x27;</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>),<br>  &#125;;<span class="hljs-comment">//防止输入太多字导致系统崩溃</span><br><br>  <span class="hljs-keyword">const</span> &#123; error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    .<span class="hljs-title function_">update</span>(updateData)<br>    .<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, bookingId)<br>    .<span class="hljs-title function_">select</span>()<br>    .<span class="hljs-title function_">single</span>();<br>  <span class="hljs-comment">//5、错误处理</span><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Booking could not be updated&#x27;</span>);<br>  <span class="hljs-comment">//6、清除缓存</span><br>  <span class="hljs-title function_">revalidatePath</span>(<span class="hljs-string">`/account/reservations/edit/<span class="hljs-subst">$&#123;bookingId&#125;</span>`</span>);<br>  <span class="hljs-comment">//7、重定向</span><br>  <span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/account/reservations&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）useOptimistic"><a href="#（4）useOptimistic" class="headerlink" title="（4）useOptimistic"></a>（4）useOptimistic</h4><blockquote><p>我们想在预定界面使用这个hook</p></blockquote><p><code>useOptimistic</code> 是 React 18 中提供的一个 Hook，用于实现 <strong>乐观更新</strong>（Optimistic UI）。乐观更新是指在后台数据更新（如网络请求）尚未完成时，先更新用户界面，使其看起来好像数据已经更新成功了，而后台的实际更新在完成后再同步数据状态。这种方式可以提高用户体验，减少界面的延迟感。如果有错误，那么状态会回滚到操作前。</p><p>首先把Reservation提取出来到ReservationList组件中，好在这里使用hook（“use client”不要忘记）。</p><p>然后我们在这里重构（乐观化）deleteReservation函数，并传递给删除预定的组件中去。</p><h5 id="1、初始化状态"><a href="#1、初始化状态" class="headerlink" title="1、初始化状态"></a>1、初始化状态</h5><p><code>optimisticBookings</code>：这是一个包含当前乐观状态下的预订列表的变量，它会在每次删除操作后立即更新。</p><p><code>optimisticDelete</code>：这是一个用于更新乐观状态的函数，当用户触发删除时，调用该函数会立即更新界面。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [optimisticBookings, optimisticDelete] = <span class="hljs-title function_">useOptimistic</span>(<br>    bookings,<br>    <span class="hljs-function">(<span class="hljs-params">curBookings, bookingId</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> curBookings.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">booking</span>) =&gt;</span> booking.<span class="hljs-property">id</span> != bookingId);<br>    &#125;<br>  );<br></code></pre></td></tr></table></figure><p><strong>初始状态</strong> <code>bookings</code>：这是从父组件传递过来的预订列表。</p><p><strong>更新函数</strong>：该函数用于更新预订列表。每当删除操作触发时，它会将 <code>bookingId</code> 传入，过滤掉与这个 <code>id</code> 对应的预订项，从而在 UI 上立即移除它。</p><h5 id="2、删除函数"><a href="#2、删除函数" class="headerlink" title="2、删除函数"></a>2、删除函数</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDelete</span>(<span class="hljs-params">bookingId</span>) &#123;<br>  <span class="hljs-title function_">optimisticDelete</span>(bookingId);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">deleteReservation</span>(bookingId);<br>&#125;<br></code></pre></td></tr></table></figure><p>**<code>optimisticDelete(bookingId)</code>**：这行代码会立即从 <code>optimisticBookings</code> 列表中删除指定的 <code>bookingId</code>，从而让用户界面上立刻反映删除的结果。</p><p>**<code>deleteReservation(bookingId)</code>**：该函数发出实际的删除请求，通常是向后端 API 发送 <code>DELETE</code> 请求，删除指定的预订项。</p><h5 id="3、最后"><a href="#3、最后" class="headerlink" title="3、最后"></a>3、最后</h5><p>将原本map的bookings改为<code>optimisticBookings</code></p><h4 id="（5）创建预定"><a href="#（5）创建预定" class="headerlink" title="（5）创建预定"></a>（5）创建预定</h4><blockquote><p>Object.entries(formData.entries)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createBooking</span>(<span class="hljs-params">bookingData, formData</span>) &#123;<br>  <span class="hljs-keyword">const</span> session = <span class="hljs-keyword">await</span> <span class="hljs-title function_">auth</span>();<br>  <span class="hljs-keyword">if</span> (!session) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;You need to be logged in&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> newBooking = &#123;<br>    ...bookingData,<br>    <span class="hljs-attr">guestId</span>: session.<span class="hljs-property">user</span>.<span class="hljs-property">guestId</span>,<br>    <span class="hljs-attr">numGuests</span>: <span class="hljs-title class_">Number</span>(formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;numGuests&#x27;</span>)),<br>    <span class="hljs-attr">observations</span>: formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;observations&#x27;</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>),<br>    <span class="hljs-attr">extrasPrice</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">totalPrice</span>: bookingData.<span class="hljs-property">cabinPrice</span>,<br>    <span class="hljs-attr">isPaid</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">hasBreakfast</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;unconfirmed&#x27;</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> &#123; error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>).<span class="hljs-title function_">insert</span>([newBooking]);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Booking could not be created&#x27;</span>);<br><br>  <span class="hljs-title function_">revalidatePath</span>(<span class="hljs-string">`/cabins/<span class="hljs-subst">$&#123;bookingData.cabinId&#125;</span>`</span>);<br><br>  <span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/thankyou&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五、一些疑问"><a href="#五、一些疑问" class="headerlink" title="五、一些疑问"></a>五、一些疑问</h3><h4 id="（1）什么叫做next-js中所有的navigation都被包装成了transitions"><a href="#（1）什么叫做next-js中所有的navigation都被包装成了transitions" class="headerlink" title="（1）什么叫做next.js中所有的navigation都被包装成了transitions"></a>（1）什么叫做next.js中所有的navigation都被包装成了transitions</h4><p>在 Next.js 13 及以上版本中，所有的页面导航都被包装成了“<strong>transitions</strong>”。这意味着当你在 Next.js 应用中进行页面导航时，React 自动将这些导航操作处理为<strong>并发渲染的过渡（concurrent transitions）</strong>。这种方式可以优化用户体验，使得页面导航更加流畅，尤其是在加载新页面内容时，避免了卡顿或延迟。</p><h5 id="1、什么是-Transition？"><a href="#1、什么是-Transition？" class="headerlink" title="1、什么是 Transition？"></a>1、什么是 Transition？</h5><p><code>Transition</code> 是 React 18 引入的并发特性之一，它允许某些状态更新标记为“非紧急”，从而不会阻塞 UI 的响应。与传统的同步渲染不同，React 可以在处理某些状态变化时，让其他更紧急的 UI 更新（例如用户输入或按钮点击）优先执行。</p><p>在 Next.js 中，当页面切换（例如从 <code>/home</code> 导航到 <code>/about</code>）时，这种页面导航会被包装成 Transition，意味着 React 可以在后台处理页面加载，同时保持用户界面的交互顺畅。</p><h5 id="2、为什么-Next-js-包装导航为-Transition？"><a href="#2、为什么-Next-js-包装导航为-Transition？" class="headerlink" title="2、为什么 Next.js 包装导航为 Transition？"></a>2、为什么 Next.js 包装导航为 Transition？</h5><ol><li><strong>提高页面导航的流畅性</strong>：当你从一个页面导航到另一个页面时，React 会将页面的加载过程作为一个 transition。这样，即使后台正在加载新页面，前台的用户界面（如加载指示器、按钮等）仍然可以继续响应用户输入，而不会因为页面加载导致整个应用的阻塞或卡顿。</li><li><strong>避免导航时的卡顿</strong>：如果导航过程中有大量的数据获取或计算，传统的同步渲染可能导致整个应用变得不响应。而通过将导航包装为 transition，React 可以将这些非紧急的任务推迟处理，从而优先处理紧急的 UI 更新。</li><li><strong>更优的用户体验</strong>：包装成 transition 后，Next.js 可以更好地管理异步操作（如数据获取、组件加载等），确保页面切换时不会阻塞用户的交互。</li></ol><h5 id="具体场景举例"><a href="#具体场景举例" class="headerlink" title="具体场景举例"></a>具体场景举例</h5><p>假设你有一个 Next.js 应用，当你从一个页面导航到另一个页面时：</p><ul><li><strong>传统同步渲染</strong>：页面导航会在新页面完全加载完毕之前阻塞用户的其他操作。这可能导致短暂的“白屏”或 UI 不响应的现象。</li><li><strong>使用 Transition</strong>：当页面正在加载时，React 可以继续处理其他用户交互（比如点击按钮、输入文本），而后台的页面加载则被标记为非紧急的，并逐步完成。这种方式确保了页面导航更加流畅。</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程26-页面建立及Data处理</title>
    <link href="/2024/10/01/react%E8%AF%BE%E7%A8%8B26-%E9%A1%B5%E9%9D%A2%E5%BB%BA%E7%AB%8B%E5%8F%8AData%E5%A4%84%E7%90%86/"/>
    <url>/2024/10/01/react%E8%AF%BE%E7%A8%8B26-%E9%A1%B5%E9%9D%A2%E5%BB%BA%E7%AB%8B%E5%8F%8AData%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>本节课包含项目分析、页面建立（包含加载和错误界面）、渲染方面的处理和cache问题。</p><span id="more"></span><h3 id="一、信息"><a href="#一、信息" class="headerlink" title="一、信息"></a>一、信息</h3><h4 id="（1）项目分析"><a href="#（1）项目分析" class="headerlink" title="（1）项目分析"></a>（1）项目分析</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001192359765.png" alt="image-20241001192359765"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001192124627.png" alt="image-20241001192124627"></p><h4 id="（2）suspense"><a href="#（2）suspense" class="headerlink" title="（2）suspense"></a>（2）suspense</h4><p>在 React 中，<code>Suspense</code> 是一个用于管理异步操作（例如组件加载或数据获取）的机制。它允许你在组件渲染之前显示一个 “loading” 状态，直到所需的资源加载完毕。<code>Suspense</code> 主要用于处理动态导入的组件或与 React 的 Concurrent Mode 结合使用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">LazyComponent</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./LazyComponent&#x27;</span>));<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">LazyComponent</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>**<code>React.lazy()</code>**：这是 React 提供的一个方法，用于懒加载组件。它返回一个动态导入的 Promise，直到这个 Promise 解析后，组件才会被渲染。</p><p>**<code>Suspense</code>**：<code>Suspense</code> 包裹着懒加载的组件，负责在组件加载过程中显示一个 “占位符”（通常是一个 loading 状态）。一旦组件加载完成，它就会正常渲染。</p><p><strong><code>fallback</code> 属性</strong>：这是 <code>Suspense</code> 的关键属性，用来指定加载过程中要显示的内容。在上例中，当 <code>LazyComponent</code> 正在加载时，浏览器会先显示 <code>&lt;div&gt;Loading...&lt;/div&gt;</code>，直到组件加载完成。</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>只用于客户端渲染：<code>Suspense</code> 目前主要用于客户端渲染，而不是在服务器端渲染（SSR）中。</p><p>结合数据加载（实验性）：<code>Suspense</code> 的最大潜力是与 <code>Concurrent Mode</code> 结合，控制数据加载过程中的用户体验，但这部分功能还处于实验阶段。</p><h4 id="（3）Dynamic-Route-Segment"><a href="#（3）Dynamic-Route-Segment" class="headerlink" title="（3）Dynamic Route Segment"></a>（3）Dynamic Route Segment</h4><blockquote><p>我们需要为每个小屋创建一个url，总不能为每个id新建一个文件夹吧。</p></blockquote><p>在 Next.js 中，<strong>动态路由段</strong>（dynamic route segment）是一种用于创建根据 URL 变化而生成不同页面的路由机制。它允许你在文件系统路由中定义一个动态的部分，这样页面路径可以根据参数动态变化。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>文件名决定路由：文件系统会自动基于文件名生成相应的路由。</li><li>动态参数：方括号内的内容会被当作动态参数，<code>useRouter()</code> 钩子可以读取这些参数。</li><li>嵌套动态路由：你可以在不同层级嵌套动态路由，创建复杂的 URL 结构。</li></ul><h5 id="如何使用："><a href="#如何使用：" class="headerlink" title="如何使用："></a>如何使用：</h5><h4 id="（4）专业术语们"><a href="#（4）专业术语们" class="headerlink" title="（4）专业术语们"></a>（4）专业术语们</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001210353424.png" alt="image-20241001210353424"></p><h5 id="1、Serverless-computing"><a href="#1、Serverless-computing" class="headerlink" title="1、Serverless computing"></a>1、Serverless computing</h5><p>无服务器计算是一种云计算模型，开发人员无需管理服务器，而是专注于编写和部署代码。背后的基础设施由云提供商自动管理，它根据需求动态分配资源并仅在代码运行时计费。尽管名称中包含“serverless”，实际上服务器仍然存在，只是由云提供商负责维护，开发者不必直接接触。</p><h5 id="2、ISR："><a href="#2、ISR：" class="headerlink" title="2、ISR："></a>2、ISR：</h5><p>增量静态再生（Incremental Static Regeneration，简称 ISR）是 Next.js 的一种功能，它允许你在保持静态生成的性能优势的同时，对某些页面进行更新。使用 ISR，可以在不重新构建整个站点的情况下，更新特定页面的内容。这种方式特别适合于内容经常变化但又不需要实时更新的页面，如博客文章、产品列表或新闻网站。</p><p>在用户请求某个页面时，如果页面的缓存过期（超过 <code>revalidate</code> 设置的时间），Next.js 会在后台生成一个新的页面副本并将其缓存。用户会立即获得之前缓存的页面，而新的副本会在下一次请求时提供。页面更新后的内容会在下一次用户访问时可见，从而实现内容的增量更新。</p><h3 id="二、项目构建起步"><a href="#二、项目构建起步" class="headerlink" title="二、项目构建起步"></a>二、项目构建起步</h3><blockquote><p>app文件夹下创建不想要自动创建路径的文件夹，需要在命名前加”_”。</p></blockquote><blockquote><p>tailwind.config.js文件夹中找到theme-extend目录，可以在里面添加自定义主题。</p></blockquote><p>⭕<code>npm i @heroicons/react</code>  安装图标库</p><hr><h4 id="（1）修建网站布局"><a href="#（1）修建网站布局" class="headerlink" title="（1）修建网站布局"></a>（1）修建网站布局</h4><h5 id="1、建立metadata"><a href="#1、建立metadata" class="headerlink" title="1、建立metadata"></a>1、建立metadata</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> metadata = &#123;<br>  <span class="hljs-comment">// title: &#x27;The Wild Oasis&#x27;,  最普通的方式</span><br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;%s / The Wild Oasis&#x27;</span>,    <span class="hljs-comment">//“%s”会被替换成其他界面的标题</span><br>    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;Welcome The Wild Oasis &#x27;</span>,  <span class="hljs-comment">//没有定义标题的界面，标题是这个</span><br>  &#125;,<br><br>  <span class="hljs-attr">description</span>:<br>    <span class="hljs-string">&#x27;Luxurious cabin hotel,located int the heart of the Italian Dolomites,surrounded by beautiful mountains and dark forests&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、icon"><a href="#2、icon" class="headerlink" title="2、icon"></a>2、icon</h5><p>浏览器上方标题旁边的图标，只需要把图片放置在app文件夹根路径中，命名为icon，就设置好了</p><h5 id="3、font"><a href="#3、font" class="headerlink" title="3、font"></a>3、font</h5><blockquote><p>Next.js 提供了对自定义字体的强大支持，可以通过 <code>@next/font</code> 动态加载 Google Fonts 或本地字体，不再需要手动从 CDN 引入字体文件。（隐私+性能）</p></blockquote><blockquote><p>在 CSS 中，<code>antialiased</code> 通常用来处理字体的渲染方式，主要作用是让字体显示得更加清晰和平滑</p></blockquote><ul><li><p>导入字体函数：<code>import &#123; Josefin_Sans &#125; from &#39;next/font/google&#39;;</code></p></li><li><p>进行字体配置：</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> josefin = <span class="hljs-title class_">Josefin</span>_Sans(&#123;<br>  <span class="hljs-attr">subsets</span>: [<span class="hljs-string">&#x27;latin&#x27;</span>],<br>  <span class="hljs-attr">display</span>: <span class="hljs-string">&#x27;swap&#x27;</span>,<br>&#125;);  <span class="hljs-comment">//在字体加载之前，页面会使用系统默认字体，加载后再切换为指定字体，避免空白或闪烁的问题</span><br></code></pre></td></tr></table></figure><ul><li>运用字体设置：<code>className=&#123;``$&#123;josefin.className&#125;``&#125;</code></li></ul><h5 id="4、图像优化"><a href="#4、图像优化" class="headerlink" title="4、图像优化"></a>4、图像优化</h5><p>⭕<code>import Image from &#39;next/image&#39;;</code></p><hr><p>方法一：<code>&lt;Image src=&quot;/logo.png&quot; height=&quot;60&quot; width=&quot;60&quot; alt=&quot;The Wild Oasis logo&quot; /&gt;</code>（必须指定高度和宽度，否则会报错）</p><p>方法二：（静态导入）先导入图像，再直接放置进组件里，接入导入后名字叫logo：</p><p>   <code>&lt;Image src=&quot;logo&quot; quality=&#123;10&#125; alt=&quot;The Wild Oasis logo&quot; /&gt;</code></p><p>（无需设置高度和宽度，quality越高图像质量越高越清晰，大小越大）</p><p>fill（填充），placeholder：blur（模糊加载）</p><hr><ul><li>自动图像优化</li></ul><p>Next.js 会自动根据设备的分辨率、视窗大小和图像的具体需求对图像进行优化。它会生成不同尺寸的图像并根据设备加载合适的版本，这样可以减少不必要的资源浪费和页面加载时间。</p><ul><li>延迟加载（Lazy Loading）</li></ul><p>默认情况下，<code>next/image</code> 使用延迟加载技术（lazy loading），只有当图像滚动到视口中时才会进行加载。这可以减少首屏加载时间，提高用户体验。</p><ul><li>响应式图像处理</li></ul><p><code>next/image</code> 支持自动生成不同尺寸的响应式图像。当你指定图像宽度和高度时，Next.js 会为不同的屏幕大小和分辨率生成合适的图像版本，确保图像在各种设备上都能高效加载。</p><ul><li>现代图像格式支持</li></ul><p>Next.js 会自动为支持的浏览器提供现代化的图像格式（如 WebP）。WebP 图像格式比传统的 JPEG 和 PNG 更加高效，能大幅减少图像的文件大小，提高加载速度。</p><ul><li>图像裁剪和调整</li></ul><p>Next.js 允许对图像进行动态裁剪、缩放和调整大小。例如，你可以为不同的屏幕设置不同的宽度和高度，Next.js 会自动处理这些操作。</p><ul><li>图像缓存</li></ul><p>Next.js 的图像优化功能支持缓存优化后的图像。优化后的图像会被存储在服务器或 CDN 中，确保在后续的页面加载中更快地提供这些图像，从而减少对服务器的请求负担。</p><ul><li>兼容性处理</li></ul><p>Next.js 会根据用户的浏览器特性自动加载最合适的图像格式，并提供最佳的显示效果。例如，对于支持 WebP 的浏览器，Next.js 会提供 WebP 格式图像，而对于不支持的浏览器，会提供 JPEG 或 PNG 格式。</p><ul><li>减少带宽和流量消耗</li></ul><p>通过加载更小、优化后的图像，Next.js 帮助大幅减少带宽消耗，尤其在移动端网络速度较慢的情况下，这对提高用户体验有很大帮助。</p><h5 id="5、如何使Image非静态导入图像动态大小"><a href="#5、如何使Image非静态导入图像动态大小" class="headerlink" title="5、如何使Image非静态导入图像动态大小"></a>5、如何使Image非静态导入图像动态大小</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div className=<span class="hljs-string">&quot;relative aspect-square col-span-2&quot;</span>&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/public/about&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">fill</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;object-cover&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Family that manages The Wild Oasis&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">   /&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><ul><li>指定父类容器</li></ul><p><code>relative</code>：这表示父容器采用了相对定位（<code>position: relative</code>），这是 <code>next/image</code> 中使用 <code>layout=&quot;fill&quot;</code> 时的必需条件。这样图像才能根据父容器的大小进行定位和调整。</p><p><code>aspect-square</code>：这通常是一个 Tailwind CSS 的类，表示容器的宽高比为1:1，也就是一个正方形。通过这个类，父容器将被强制保持宽度与高度相等。</p><p><code>col-span-2</code>：这是典型的网格布局类，表示这个 <code>div</code> 占据了网格中的 2 列宽度。这通常用于 <code>grid</code> 布局中来控制元素的宽度。</p><ul><li>设置图像格式</li></ul><p><code>layout=&quot;fill&quot;</code>：这是 <code>next/image</code> 组件的一个属性，表示图像将填充整个父容器的空间。由于父容器已经通过 <code>relative</code> 定位并设置了宽高比（正方形），图像将按照父容器的大小动态调整。无需指定图像的宽度和高度，Next.js 会自动计算和优化。</p><p><code>className=&quot;object-cover&quot;</code>：这是一个 CSS 类，通常与 Tailwind CSS 一起使用。<code>object-cover</code> 的作用是让图像保持其原始比例并填满整个容器。如果图像的比例和容器不匹配，它将裁剪图像的一部分，而不是拉伸或压缩图像，从而保持图像的完整性。</p><h5 id="6、嵌套layout"><a href="#6、嵌套layout" class="headerlink" title="6、嵌套layout"></a>6、嵌套layout</h5><p>我们在app文件夹下放至了layout，但是在文件夹下的account路径下也需要layout布局，那么可以直接在此文件夹中创建layout.js，放置相应的navigation组件即可。</p><h4 id="（2）连接supabse"><a href="#（2）连接supabse" class="headerlink" title="（2）连接supabse"></a>（2）连接supabse</h4><h5 id="1、根目录下新建-env-local文件夹"><a href="#1、根目录下新建-env-local文件夹" class="headerlink" title="1、根目录下新建.env.local文件夹"></a>1、根目录下新建<code>.env.local</code>文件夹</h5><blockquote><p>这个文件夹负责放置supabase的URL和KEY。</p></blockquote><p><strong>服务器端变量</strong>：例如数据库连接信息、API 密钥等敏感信息放在 <code>.env.local</code> 中，并且不加 <code>NEXT_PUBLIC_</code> 前缀。</p><p><strong>客户端变量</strong>：如果你需要某些环境变量在浏览器中使用（如公共 API 的 URL），可以加上 <code>NEXT_PUBLIC_</code> 前缀。</p><p>URL还是正常的URL，而KEY不用settings-&gt;API-&gt;Project API keys-&gt;(anon public)的key，而是(service_role)中的KEY。（为了绕过RLP）</p><p>⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️无语了我亲爱的环境变量配置⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️</p><p>SUPABASE_URL&#x3D;<a href="https://mmyxdnpmmlqmyjxjypmw.supabase.co/">https://mmyxdnpmmlqmyjxjypmw.supabase.co</a></p><p>SUPABASE_KEY&#x3D;service_role</p><p>🚫不能有空格、🚫没有引号、🚫后面不能加分号。。。🚫字母大小写别写错</p><p>我说怎么一直连接不上。。。GPT你真的有毛病一开始不跟我说问了一个小时了才说。。。</p><h5 id="2、lib文件夹下建立supabase-js"><a href="#2、lib文件夹下建立supabase-js" class="headerlink" title="2、lib文件夹下建立supabase.js"></a>2、lib文件夹下建立<code>supabase.js</code></h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createClient &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@supabase/supabase-js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> supabase = <span class="hljs-title function_">createClient</span>(<br>  process.<span class="hljs-property">env</span>.<span class="hljs-property">SUPABASE_URL</span>,<br>  process.<span class="hljs-property">env</span>.<span class="hljs-property">SUPABASE_KEY</span><br>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> supabase;<br></code></pre></td></tr></table></figure><h3 id="三、Data处理"><a href="#三、Data处理" class="headerlink" title="三、Data处理"></a>三、Data处理</h3><blockquote><p>现在获取data变得非常方便，仅仅是把RSC设置成async方程，然后直接： <code>const cabins = await getCabins();</code>类似这样就可以了。</p></blockquote><h4 id="（1）准备工作"><a href="#（1）准备工作" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h4><h5 id="1、允许加载远程图像"><a href="#1、允许加载远程图像" class="headerlink" title="1、允许加载远程图像"></a>1、允许加载远程图像</h5><p>我们在调取cabins的数据的时候，会加载supabase上的cabin图像，因此在 Next.js 中配置 <code>remotePatterns</code> 的目的是为了允许应用加载来自特定远程服务器的图像。通过指定 <code>protocol</code>、<code>hostname</code>、<code>port</code> 和 <code>pathname</code>，可以控制哪些外部图像源被允许在的应用中使用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> nextConfig = &#123;<br>  <span class="hljs-attr">images</span>: &#123;<br>    <span class="hljs-attr">remotePatterns</span>: [<br>      &#123;<br>        <span class="hljs-attr">protocol</span>: <span class="hljs-string">&#x27;https&#x27;</span>,<br>        <span class="hljs-attr">hostname</span>: <span class="hljs-string">&#x27;mmyxdnpmmlqmyjxjypmw.supabase.co&#x27;</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/storage/v1/object/public/cabin-images/**&#x27;</span>,<br>      &#125;,<br>    ],<span class="hljs-comment">//没有指定端口，表示使用默认端口443</span><br>  &#125;,<span class="hljs-comment">//**表示任何以前面开头的路径都可以被加载</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="2、利用suspense使旋转器只放置在需要加载的组件"><a href="#2、利用suspense使旋转器只放置在需要加载的组件" class="headerlink" title="2、利用suspense使旋转器只放置在需要加载的组件"></a>2、利用suspense使旋转器只放置在需要加载的组件</h5><blockquote><p>suspense只能包裹一个组件来使用</p></blockquote><p>在加载cabins界面的时候，如果正在加载cabins数据，整个界面都会被Spinner组件遮挡，包括一部分静态文字，这样会导致bad UX。所以我们可以把获取cabins和渲染cabins的部分提取到一个组件中，然后导入到cabins界面，用suspense包裹住，就🆗了。这里suspense的fallback组件会覆盖cabins界面本身设置的loading组件。</p><h5 id="3、Cabin-组件"><a href="#3、Cabin-组件" class="headerlink" title="3、Cabin 组件"></a>3、Cabin 组件</h5><blockquote><p>在Cabins界面时，每个cabin有一个按钮，点击进入详细界面，url设置为cabin&#x2F;${id}</p></blockquote><p>我们在cabins文件夹下建立<code>[cabinId]</code>动态文件夹。里面建立page.js就是相应的cabin界面。</p><p>让Page组件接收<code>&#123;params&#125;</code>作为参数， <code>const cabin = await getCabin(params.cabinId);</code>就可以获得cabin数据。</p><h5 id="4、动态metadata"><a href="#4、动态metadata" class="headerlink" title="4、动态metadata"></a>4、动态metadata</h5><p>我们想要给cabin界面也设置浏览器标题，同时标题中含有cabin id，于是可以使用函数来动态创建。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateMetadata</span>(<span class="hljs-params">&#123; params &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; name &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCabin</span>(params.<span class="hljs-property">cabinId</span>);<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">`Cabin <span class="hljs-subst">$&#123;name&#125;</span>`</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5、设置Error-Bundaries"><a href="#5、设置Error-Bundaries" class="headerlink" title="5、设置Error Bundaries"></a>5、设置Error Bundaries</h5><p>与之前的错误边界处理方式不同，在这里我们只需要在app的根目录下创建一个文件夹：<code>error.js</code>，然后返回一个组件，接收error、reset函数。于是就可以在界面上显示error.message，并且设置按钮，click函数为reset。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001203443894.png" alt="image-20241001203443894"></p><p>⚠️需要声明<code>“use client”</code></p><h5 id="6、not-found-error"><a href="#6、not-found-error" class="headerlink" title="6、not-found error"></a>6、not-found error</h5><p>在app的根目录下创建一个文件夹：<code>not-found.js</code>，填写相应内容即可，当用户访问不存在的URL的时候就会进入这个界面。</p><p>但是我们想要在用户试图访问不存在的id的cabin界面时也进入这个错误界面（默认是显示上面的error界面），于是我们可以找到service文件中的getCabin函数，在error下，调用<code>notFound();</code>。</p><p>我们还想要动态定义cabin下not-found界面的信息，于是可以在[cabinId]文件夹下也创建一个not-found文件夹，写入想要的信息即可。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001204330663.png" alt="image-20241001204330663" style="zoom: 50%;" /><h4 id="（2）Data-Rendering的两种方式"><a href="#（2）Data-Rendering的两种方式" class="headerlink" title="（2）Data Rendering的两种方式"></a>（2）Data Rendering的两种方式</h4><p>⭕<code>npm run build</code>    打包后可以在最下方看到哪些文件是静态渲染，哪些是动态</p><p>此处<code>[cabinId]</code>界面是动态渲染，因为nextjs并不知道究竟有多少id</p><hr><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001210123404.png" alt="image-20241001210123404"  /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001210232473.png" alt="image-20241001210232473"  /><h4 id="（3）Dynamic-Static"><a href="#（3）Dynamic-Static" class="headerlink" title="（3）Dynamic-&gt;Static"></a>（3）Dynamic-&gt;Static</h4><h5 id="1、如何让next-js知道动态URL段的所有可能值"><a href="#1、如何让next-js知道动态URL段的所有可能值" class="headerlink" title="1、如何让next.js知道动态URL段的所有可能值"></a>1、如何让next.js知道动态URL段的所有可能值</h5><blockquote><p>由于静态界面性能好、更安全等特性，我们想要把动态界面也渲染成静态界面。cabins是有限长度，也很好传递各个id。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateStaticParams</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> cabins = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCabins</span>();<br>  <span class="hljs-keyword">const</span> ids = cabins.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">cabin</span>) =&gt;</span> (&#123; <span class="hljs-attr">cabinId</span>: <span class="hljs-title class_">String</span>(cabin.<span class="hljs-property">id</span>) &#125;));<br><br>  <span class="hljs-keyword">return</span> ids;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>generateStaticParams</code> 是 Next.js 中用于 <strong>静态生成动态路由参数</strong> 的函数。该函数主要用于在构建时生成页面的路径参数，使得这些路径能够在静态站点生成时创建对应的静态页面。其返回的数组会被 Next.js 用来生成静态页面。对于每个 <code>cabinId</code>，Next.js 会生成对应的静态页面。</p><h5 id="2、SSG"><a href="#2、SSG" class="headerlink" title="2、SSG"></a>2、SSG</h5><p><strong>SSG（Static Site Generation）</strong> 是 <strong>Next.js</strong> 中的一种渲染方法，允许在构建时生成页面的 HTML，而不是在每次用户请求时动态生成。这种方法可以显著提高页面的加载速度和性能，因为静态页面可以通过 CDN 缓存并在全球范围内快速提供给用户。</p><p>由于上面的操作，使得整个APP都是静态渲染，于是可以在<code>next.config.js</code>文件中配置： <code>output：”export“</code>，然后运行npm run build，会生成一个out包。使用vscdode打开整个包，下载以下插件之后，会在编译器右下角看到go Live，点击后会生成静态界面。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001213503801.png" alt="image-20241001213503801" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001213600236.png" alt="image-20241001213600236"  /></p><p>但是界面中使用Image组件的所有图片都无法被渲染了。因为**<code>next/image</code> 依赖服务端功能**，<code>Image</code> 组件依赖 Next.js 的内置图像优化功能，这在静态导出时并不可用。默认情况下，<code>next export</code> 不支持自动优化图像。</p><p>解决问题可以使用Cloudinary图像优化：搜索next.js static export 找到Image Optimization部分，里面有较为详细的配置信息。</p><h5 id="3、Patial-Pre-Rendering-PPR"><a href="#3、Patial-Pre-Rendering-PPR" class="headerlink" title="3、Patial Pre-Rendering (PPR)"></a>3、Patial Pre-Rendering (PPR)</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001214756971.png" alt="image-20241001214756971"></p><h3 id="四、Caching-in-Next-js"><a href="#四、Caching-in-Next-js" class="headerlink" title="四、Caching in Next.js"></a>四、Caching in Next.js</h3><h4 id="（1）概念"><a href="#（1）概念" class="headerlink" title="（1）概念"></a>（1）概念</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001235341827.png" alt="image-20241001235341827"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241018162754853.png" alt="image-20241018162754853"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001235407728.png" alt="image-20241001235407728"></p><p>1、相同的url和options</p><p>2、可以是不同user</p><p><code>no-store</code> 是一种缓存控制指令，指示浏览器和任何中间缓存（如代理服务器）都不应缓存响应。每次请求时，客户端都会向服务器请求新鲜的数据，而不是使用任何先前的缓存内容。<code>unstable_noStore</code> 是 Next.js 中的一个实验性特性，旨在为某些请求提供更细粒度的缓存控制。它允许你在服务器端返回响应时，指定某些内容不应被缓存。这与普通的 <code>noStore</code> 方法类似，但由于它是实验性特性，因此可能在未来的版本中发生变化或被替换。</p><p><strong>避免缓存</strong>：当你希望确保某些 API 响应或页面请求不被缓存时，可以使用 <code>unstable_noStore</code>。这对于处理动态内容、实时数据或敏感信息尤为重要。</p><p><strong>开发和调试</strong>：在开发期间，使用 <code>unstable_noStore</code> 可以确保你始终获得最新的数据或页面渲染，避免缓存引起的混淆。</p><p><strong>API 请求</strong>：在发送 API 请求时，如果你希望强制获取新数据而不是从缓存中读取，可以在请求配置中使用 <code>unstable_noStore</code>。</p><h4 id="（2）模拟生产环境的caching-和ISR"><a href="#（2）模拟生产环境的caching-和ISR" class="headerlink" title="（2）模拟生产环境的caching 和ISR"></a>（2）模拟生产环境的caching 和ISR</h4><blockquote><p>在package.json 中加入”prod”: “next build &amp;&amp; next start”  然后终端输入npm run prod就可以模拟生产环境了。</p><p>⚠ For production Image Optimization with Next.js, the optional ‘sharp’ package is strongly recommended. Run ‘npm i sharp’, and Next.js will use it automatically for Image Optimization.（终端的警告）</p></blockquote><h5 id="1、关闭data-cache"><a href="#1、关闭data-cache" class="headerlink" title="1、关闭data cache"></a>1、关闭data cache</h5><p>如果这时候在数据库修改某个值，是不会在网页上显示的，就算刷新也不行，因为这是一个完全静态的界面，所以我们想要关掉data cache（同时也能关掉full route cache）</p><p>在cabins的page代码中设置：<code>export const revalidate = 0;</code>（每次修改都需要重新run）</p><h5 id="2、ISR"><a href="#2、ISR" class="headerlink" title="2、ISR"></a>2、ISR</h5><p>只需要修改上面的值为我们想要自动刷新的间隔就可。注意时间的单位是秒。</p><h5 id="3、noStore"><a href="#3、noStore" class="headerlink" title="3、noStore"></a>3、noStore</h5><p><code>import &#123; unstable_noStore &#125; from &#39;next/cache&#39;;</code></p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程25-认识Next.js和RSC</title>
    <link href="/2024/09/30/react%E8%AF%BE%E7%A8%8B25-%E8%AE%A4%E8%AF%86Next.js%E5%92%8CRSC/"/>
    <url>/2024/09/30/react%E8%AF%BE%E7%A8%8B25-%E8%AE%A4%E8%AF%86Next.js%E5%92%8CRSC/</url>
    
    <content type="html"><![CDATA[<p>本节课初步了解Next.js和RSC的特性以及如何使用</p><span id="more"></span><h3 id="一、Next-js"><a href="#一、Next-js" class="headerlink" title="一、Next.js"></a>一、Next.js</h3><h4 id="（1）图片版定义"><a href="#（1）图片版定义" class="headerlink" title="（1）图片版定义"></a>（1）图片版定义</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930183322866.png" alt="image-20240930183322866" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930183345739.png" alt="image-20240930183345739" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930183405183.png" alt="image-20240930183405183" style="zoom:50%;" /><h4 id="（2）整体特性介绍"><a href="#（2）整体特性介绍" class="headerlink" title="（2）整体特性介绍"></a>（2）整体特性介绍</h4><p>Next.js 是一个基于 React 的前端开发框架，旨在简化开发现代 Web 应用程序的过程。它提供了一系列功能，如服务端渲染（SSR）、静态生成（SSG）、API 路由、文件系统路由、图像优化等，极大地增强了 React 的能力，并在性能和 SEO 上有很大优势。</p><p><strong>服务器端渲染（SSR）</strong>：</p><ul><li>服务端渲染意味着页面在服务器上生成 HTML，然后发送到客户端。这对于 SEO 友好、初始加载速度快、改善用户体验尤为重要。Next.js 允许开发者在每次请求时通过服务端渲染生成页面。</li></ul><p><strong>静态生成（SSG）</strong>：</p><ul><li>静态生成意味着页面在构建时被预先生成并缓存，适合内容不经常变化的页面。Next.js 的静态生成在构建时生成 HTML，用户请求时直接返回生成好的页面，这样大大加快了页面的响应速度。</li></ul><p><strong>动态API 路由</strong>：</p><ul><li>允许开发者在 Next.js 应用中直接创建 API 路由，处理请求并返回数据，方便处理后端逻辑。使用文件系统路由，自动根据文件结构生成路由。开发者只需创建一个新的页面文件，就可以轻松添加新路由。</li></ul><p><strong>增量静态再生（ISR）</strong>：</p><ul><li>结合了静态生成和服务器端渲染的优点，可以在运行时更新静态内容，使得页面可以在不重新构建整个应用的情况下保持最新。通过 ISR，你可以在构建时生成页面，并设置在特定时间间隔后重新生成页面内容，从而兼顾性能和动态性。</li></ul><p><strong>快速刷新</strong>：</p><ul><li>Next.js 支持 React 的快速刷新功能（Fast Refresh），可以在开发时保持组件状态，同时实现即时页面更新，提升开发体验。</li></ul><p><strong>图像优化</strong>：</p><ul><li>提供内置的图像优化功能（Image Optimization），自动处理图像的大小、格式、加载方式（如懒加载）等，以确保图片的最佳显示效果和性能。</li></ul><p><strong>支持 TypeScript</strong>：</p><ul><li>内置支持 TypeScript，使得类型安全和开发体验更好。</li></ul><p><strong>集成 CSS 和 Sass 支持</strong>：</p><ul><li>支持内联 CSS、CSS Modules 和 Sass，方便样式的管理和维护。</li></ul><p><strong>热重载</strong>：</p><ul><li>在开发过程中，可以实时预览代码更改，提高开发效率。</li></ul><h4 id="（3）优势"><a href="#（3）优势" class="headerlink" title="（3）优势"></a>（3）优势</h4><p><strong>SEO 优化</strong>：</p><ul><li>由于支持服务器端渲染和静态生成，Next.js 在搜索引擎优化方面表现良好。</li></ul><p><strong>性能优越</strong>：</p><ul><li>通过静态生成和动态路由，Next.js 应用可以实现快速加载和响应。提供了许多性能优化手段，如<strong>懒加载</strong>、<strong>代码拆分</strong>、<strong>边缘缓存</strong>等，帮助开发者提升应用的响应速度和用户体验</li></ul><p><strong>开发效率高</strong>：</p><ul><li>丰富的功能和开发工具使得构建和维护大型应用更加高效。</li></ul><p><strong>社区支持</strong>：</p><ul><li>作为一个广泛使用的框架，Next.js 拥有强大的社区支持，提供了丰富的学习资源和第三方插件。</li></ul><h4 id="（4）App-Route-和-Page-Route的区别"><a href="#（4）App-Route-和-Page-Route的区别" class="headerlink" title="（4）App Route 和 Page Route的区别"></a>（4）App Route 和 Page Route的区别</h4><h5 id="1、-Page-Route（页面路由）"><a href="#1、-Page-Route（页面路由）" class="headerlink" title="1、 Page Route（页面路由）"></a>1、 <strong>Page Route（页面路由）</strong></h5><p>Page Route 是 Next.js 旧版本（即 Next.js 13 之前）使用的传统路由系统，它基于 <code>pages/</code> 目录。每个文件会自动映射为一个对应的 URL 路由。</p><p><strong>特点：</strong></p><ul><li>文件系统路由：文件名即为 URL 路由，所有的页面文件都位于 <code>pages/</code> 目录中。例如：<ul><li><code>pages/index.js</code> 对应 <code>/</code></li><li><code>pages/about.js</code> 对应 <code>/about</code></li></ul></li><li><strong>服务端渲染和静态生成</strong>：通过 <code>getServerSideProps()</code>、<code>getStaticProps()</code>、<code>getStaticPaths()</code> 来处理数据获取和页面渲染。</li><li><strong>API 路由</strong>：可以在 <code>pages/api/</code> 目录中创建 API 路由。</li></ul><p><strong>使用场景：</strong></p><ul><li>Page Route 适合在较为简单的项目中，快速创建页面和 API，并且兼容现有的 SSR 和静态生成场景。</li></ul><h5 id="2、App-Route（应用路由）"><a href="#2、App-Route（应用路由）" class="headerlink" title="2、App Route（应用路由）"></a>2、App Route（应用路由）</h5><p>App Route 是 Next.js 13 引入的新路由系统，基于新的 <code>app/</code> 目录。它提供了更多灵活性和新特性，比如嵌套布局、服务器组件（Server Components）、并行路由和渐进式渲染。</p><p><strong>特点</strong>：</p><ul><li><strong>嵌套布局</strong>：<code>app/</code> 目录支持嵌套布局，可以更灵活地组织页面结构。例如，<code>app/layout.js</code> 定义整个应用的布局，而每个页面可以有自己的局部布局。</li><li><strong>React 服务器组件（RSC）</strong>：支持将 React 组件在服务器端渲染，减少客户端 JavaScript 的负载，提升性能。</li><li><strong>文件系统路由</strong>：类似于 <code>pages/</code> 目录，但是更加灵活，支持动态路由、并行路由、渐进式渲染。</li><li><strong>服务端渲染和数据获取</strong>：与 Page Route 不同，App Route 使用<code>getServerSideProps</code> 之外的新机制处理数据获取，结合 React Server Components 的优势。</li></ul><p><strong>使用场景</strong>：</p><ul><li>App Route 提供了更好的架构灵活性，适合大型、复杂的应用开发，特别是那些需要更精细控制布局和渲染逻辑的项目。</li></ul><h5 id="3、主要区别"><a href="#3、主要区别" class="headerlink" title="3、主要区别"></a>3、主要区别</h5><p>文件结构：Page Route 使用 <code>pages/</code> 目录，而 App Route 使用 <code>app/</code> 目录。</p><p>布局系统：App Route 支持嵌套布局，而 Page Route 依赖顶层的 <code>_app.js</code> 文件来共享布局。</p><p>服务器组件：App Route 支持 React 服务器组件，允许在服务器端直接渲染组件，提升性能。</p><p>灵活性：App Route 提供了更强的灵活性，支持动态布局、并行渲染等新特性，而 Page Route 更适合传统的单层页面布局。</p><h3 id="二、React-Server-Component（RSC）"><a href="#二、React-Server-Component（RSC）" class="headerlink" title="二、React Server Component（RSC）"></a>二、React Server Component（RSC）</h3><h4 id="（1）什么是RSC"><a href="#（1）什么是RSC" class="headerlink" title="（1）什么是RSC"></a>（1）什么是RSC</h4><p>RSC 是一种组件类型，它允许在服务端渲染 React 组件，并且这些组件在客户端不需要再进行重新渲染。通过在服务器端处理部分逻辑和渲染，RSC 可以显著减少客户端的 JavaScript 负载，并提升页面加载性能。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930210854700.png" alt="image-20240930210854700"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930210909397.png" alt="image-20240930210909397"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930210942266.png" alt="image-20240930210942266"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930211005768.png" alt="image-20240930211005768"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930211017757.png" alt="image-20240930211017757"></p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li>服务器端渲染：RSC 是在服务器端执行的组件，生成的 HTML 直接发送到客户端。客户端只需接收 HTML，而无需额外的 JavaScript。</li><li>减少客户端负载：因为 RSC 在服务端渲染，所以在客户端不需要再进行重新渲染，也不需要传递组件的 JavaScript 代码，减少了客户端的 JavaScript 体积。</li><li>无状态组件：RSC 本质上是无状态的，它不维护本地的状态或副作用，这与传统的 React 组件不同。</li><li>与客户端组件组合：RSC 可以与客户端组件结合使用。在一个页面中可以有一部分是服务端渲染的组件，另一部分是客户端渲染的交互式组件。这种组合模式为应用的性能和交互性提供了极大的灵活性。</li></ul><h4 id="（2）RSC在屏幕后是如何工作的"><a href="#（2）RSC在屏幕后是如何工作的" class="headerlink" title="（2）RSC在屏幕后是如何工作的"></a>（2）RSC在屏幕后是如何工作的</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001084958987.png" alt="image-20241001084958987" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001085035897.png" alt="image-20241001085035897" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001085123256.png" alt="image-20241001085123256" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001085143136.png" alt="image-20241001085143136" style="zoom:33%;" /><h4 id="（3）RSC和SSR如何配合"><a href="#（3）RSC和SSR如何配合" class="headerlink" title="（3）RSC和SSR如何配合"></a>（3）RSC和SSR如何配合</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001093504533.png" alt="image-20241001093504533"  /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241001093616393.png" alt="image-20241001093616393"  /><h4 id="（4）总结一些重点"><a href="#（4）总结一些重点" class="headerlink" title="（4）总结一些重点"></a>（4）总结一些重点</h4><p>连接客户端和服务端的是props。</p><p>所有组件最初都是在服务端进行渲染，然后再渲染到客户端。</p><h3 id="三、项目浅浅起步"><a href="#三、项目浅浅起步" class="headerlink" title="三、项目浅浅起步"></a>三、项目浅浅起步</h3><p>⭕<code>npx create-next-app@14 the-wild-oasis-website</code></p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930153505570.png" alt="image-20240930153505570" style="zoom: 50%;" /><p>⚠️⚠️⚠️⚠️组件必须要保持在下面export default的格式，否则next.js会认为这不是组件！！！！！</p><hr><h4 id="（1）设置路由Route"><a href="#（1）设置路由Route" class="headerlink" title="（1）设置路由Route"></a>（1）设置路由Route</h4><h5 id="1、创建页面"><a href="#1、创建页面" class="headerlink" title="1、创建页面"></a>1、创建页面</h5><p>APP Route的建立是直接在APP文件夹下创建相应名字的文件夹，然后再在文件夹中创建page.js，然后相应路由下就会显示page.js的内容。</p><h5 id="2、修改设置"><a href="#2、修改设置" class="headerlink" title="2、修改设置"></a>2、修改设置</h5><p>由于每个界面的名字都叫page，很不好区分，因此可以在设置中搜索custom labels，打开应用自定义标签，添加<strong>项</strong>：<code>** /app/ **/page.js</code>     <strong>值</strong>：<code>Page: $&#123;dirname&#125;</code></p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930183025098.png" alt="image-20240930183025098" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240930183044156.png" alt="image-20240930183044156" style="zoom:67%;" /><h5 id="3、界面间navigate"><a href="#3、界面间navigate" class="headerlink" title="3、界面间navigate"></a>3、界面间navigate</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Link</span> href=<span class="hljs-string">&quot;/cabins&quot;</span>&gt;<span class="hljs-title class_">Explore</span> luxury cabins&lt;/<span class="hljs-title class_">Link</span>&gt;<br></code></pre></td></tr></table></figure><p>和React的Link不一样了。但是效果一样，不需要硬刷新，类似SPA</p><h5 id="4、layout"><a href="#4、layout" class="headerlink" title="4、layout"></a>4、layout</h5><blockquote><p>APP需要有一个root layout</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">RootLayout</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Navigation</span> /&gt;</span>   &#123;/*这个组件在component文件夹里*/&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>    &#123;/*和React Router中不同的地方*/&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）RSC初使用"><a href="#（2）RSC初使用" class="headerlink" title="（2）RSC初使用"></a>（2）RSC初使用</h4><p>⭕<a href="https://jsonplaceholder.typicode.com/">https://jsonplaceholder.typicode.com/</a>  FAKE API</p><hr><h5 id="1、尝试获取数据"><a href="#1、尝试获取数据" class="headerlink" title="1、尝试获取数据"></a>1、尝试获取数据</h5><p> const res &#x3D; await fetch(‘<a href="https://jsonplaceholder.typicode.com/users">https://jsonplaceholder.typicode.com/users</a> ‘);</p><p> const data &#x3D; await res.json();</p><p> console.log(data);</p><p>数据被缓存在浏览器中，浏览器从HTML中直接得到数据。log的数据并不在浏览器的控制台，而是出现在了编译器的终端中</p><h5 id="2、使用Client-Component来增加互动性内容"><a href="#2、使用Client-Component来增加互动性内容" class="headerlink" title="2、使用Client Component来增加互动性内容"></a>2、使用Client Component来增加互动性内容</h5><blockquote><p>默认情况下，APP路径下的界面或者组件都是RSC</p></blockquote><p>如果你需要某个组件在客户端执行（例如有状态管理、事件处理等交互逻辑），你需要显式声明为 <strong>客户端组件</strong>。这可以通过在文件顶部添加 <code>&quot;use client&quot;;</code> 来声明组件为客户端组件。不然根本是无法使用useState的。</p><h5 id="3、加载旋转指示器"><a href="#3、加载旋转指示器" class="headerlink" title="3、加载旋转指示器"></a>3、加载旋转指示器</h5><blockquote><p>因为尽管是SSR渲染，在加载的时候还是有一定的延迟。</p></blockquote><p>在app文件夹下创建文件<code>loading.js</code>，作为全局Loading文件夹，这样app下的所有页面，只要正在加载，就会显示这个文件夹的内容。</p><h5 id="4、RenderToReadableStream"><a href="#4、RenderToReadableStream" class="headerlink" title="4、RenderToReadableStream"></a>4、RenderToReadableStream</h5><blockquote><p><strong>Next.js</strong> 在其最新版本中（特别是 Next.js 13 引入的 App Router）自动实现了流式渲染和 <code>RenderToReadableStream</code> 的功能。Next.js 利用 React 18 的服务端渲染能力，为开发者提供了更高效的页面加载体验，而无需开发者手动处理流式渲染的细节。</p></blockquote><p><code>RenderToReadableStream</code> 是 React 18 引入的一个新特性，用于支持在服务端渲染（SSR）期间将组件渲染为可读流。这种方法允许在服务器端生成和传输内容的同时，客户端可以逐步接收并渲染这些内容，从而提高了页面的加载速度和用户体验。</p><p><strong>流式渲染</strong>：<code>RenderToReadableStream</code> 可以将 React 组件渲染为可读流，这意味着内容可以逐步发送到客户端，而不是等待整个页面的渲染完成。这对于提高首屏加载时间非常有帮助。</p><p><strong>渐进式渲染</strong>：由于内容可以在渲染的过程中逐步传输，用户可以在部分内容可用时就开始查看，而不是等待整个页面加载完成。</p><p><strong>提高性能</strong>：流式渲染可以减少服务器的内存消耗，因为它允许在渲染期间释放已经发送的内容，同时也减少了客户端的初始 JavaScript 负载。</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程24-SSR概念引入及手写</title>
    <link href="/2024/09/29/react%E8%AF%BE%E7%A8%8B24-SSR%E6%A6%82%E5%BF%B5%E5%BC%95%E5%85%A5%E5%8F%8A%E6%89%8B%E5%86%99/"/>
    <url>/2024/09/29/react%E8%AF%BE%E7%A8%8B24-SSR%E6%A6%82%E5%BF%B5%E5%BC%95%E5%85%A5%E5%8F%8A%E6%89%8B%E5%86%99/</url>
    
    <content type="html"><![CDATA[<p>本小节介绍SSR和CSR的区别、一些浏览器性能标准以及如何手写SSR</p><span id="more"></span><h3 id="一、CSR、SSR、SEO、LCP、FCP、CDN"><a href="#一、CSR、SSR、SEO、LCP、FCP、CDN" class="headerlink" title="一、CSR、SSR、SEO、LCP、FCP、CDN"></a>一、CSR、SSR、SEO、LCP、FCP、CDN</h3><h4 id="（1）比较CSR和SSR图片版"><a href="#（1）比较CSR和SSR图片版" class="headerlink" title="（1）比较CSR和SSR图片版"></a>（1）比较CSR和SSR图片版</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240929231551242.png" alt="image-20240929231551242"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240929231516523.png" alt="image-20240929231516523"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240929231606502.png" alt="image-20240929231606502"></p><h4 id="（2）CSR"><a href="#（2）CSR" class="headerlink" title="（2）CSR"></a>（2）CSR</h4><h5 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h5><p>在客户端渲染中，网页的 HTML、CSS 和 JavaScript 由浏览器处理，所有的渲染工作在客户端进行。</p><h5 id="2、工作原理"><a href="#2、工作原理" class="headerlink" title="2、工作原理"></a>2、工作原理</h5><ol><li>用户访问网页，服务器返回一个空的 HTML 框架以及 JavaScript 和 CSS 文件。</li><li>浏览器下载并执行 JavaScript，动态生成并渲染网页内容。</li></ol><h5 id="3、优点"><a href="#3、优点" class="headerlink" title="3、优点"></a>3、优点</h5><ul><li><strong>快速的交互</strong>：页面内容加载后，用户的操作无需再次请求服务器，响应速度快。</li><li><strong>减少服务器负担</strong>：服务器只需要提供静态文件，减轻了负担。</li><li><strong>丰富的用户体验</strong>：可以实现更复杂的交互和动画效果，适合单页应用（SPA）。</li></ul><h5 id="4、缺点"><a href="#4、缺点" class="headerlink" title="4、缺点"></a>4、缺点</h5><ul><li><strong>首次加载时间长</strong>：由于需要下载和解析 JavaScript，首次内容绘制（FCP）可能较慢。</li><li><strong>SEO 劣势</strong>：搜索引擎爬虫可能无法完全理解动态生成的内容，影响 SEO。</li></ul><h4 id="（3）SSR"><a href="#（3）SSR" class="headerlink" title="（3）SSR"></a>（3）SSR</h4><h5 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h5><p>在服务器端渲染中，网页的 HTML 在服务器上生成，然后发送到客户端。</p><h5 id="2、工作原理-1"><a href="#2、工作原理-1" class="headerlink" title="2、工作原理"></a>2、工作原理</h5><ol><li>用户访问网页，服务器处理请求并生成完整的 HTML。</li><li>服务器返回生成的 HTML 内容，浏览器直接渲染这个内容。</li></ol><h5 id="3、优点-1"><a href="#3、优点-1" class="headerlink" title="3、优点"></a>3、优点</h5><ul><li><strong>快速的首次加载</strong>：由于服务器返回完整的 HTML，用户能够更快地看到页面内容。</li><li><strong>SEO 友好</strong>：搜索引擎能够直接抓取服务器返回的 HTML，有助于提升搜索排名。</li></ul><h5 id="4、缺点-1"><a href="#4、缺点-1" class="headerlink" title="4、缺点"></a>4、缺点</h5><ul><li><strong>服务器负担重</strong>：服务器需要为每个请求生成 HTML，可能导致性能瓶颈。</li><li><strong>交互响应较慢</strong>：用户操作需要发送请求到服务器并等待响应，可能影响交互体验。</li></ul><h4 id="（4）SEO"><a href="#（4）SEO" class="headerlink" title="（4）SEO"></a>（4）SEO</h4><p><code>SEO</code>（Search Engine Optimization，搜索引擎优化）是一种通过优化网站和内容，提高其在搜索引擎结果页面（SERP）中排名的技术和策略。其目标是增加网站的可见性，从而吸引更多的自然流量。</p><h5 id="1、主要组成部分"><a href="#1、主要组成部分" class="headerlink" title="1、主要组成部分"></a>1、主要组成部分</h5><ul><li>关键词研究：确定目标受众使用的关键词和短语，以便在内容中合理嵌入这些关键词。</li><li>页面优化：包括优化标题标签、元描述、URL 结构、图像替代文本等，以确保搜索引擎能够理解页面内容。</li><li>内容优化：创建高质量、有价值且相关的内容，以满足用户需求并鼓励他们停留在页面上。</li><li>技术SEO：包括提高网站加载速度、确保移动友好性、优化网站结构和内部链接等，使搜索引擎能够更好地抓取和索引网站。</li><li>外部链接建设：通过获取其他网站的链接，提升网站的权威性和可信度，增强搜索引擎对该网站的信任度。</li><li>用户体验（UX）：提高网站的可用性和用户体验，确保访问者能够顺利浏览和找到所需信息。</li></ul><h5 id="2、重要性："><a href="#2、重要性：" class="headerlink" title="2、重要性："></a>2、重要性：</h5><ul><li>提高可见性：优化后的网站在搜索引擎中排名更高，能吸引更多的访问者。</li><li>增加流量：自然流量通常比付费广告更具成本效益，长远来看更可持续。</li><li>建立品牌信任：高排名的网站通常被视为可信赖的来源，有助于建立品牌的信誉。</li><li>提高转化率：优化后的内容更符合用户需求，有助于提高潜在客户的转化率。</li></ul><h4 id="（5）LCP"><a href="#（5）LCP" class="headerlink" title="（5）LCP"></a>（5）LCP</h4><p><code>LCP</code>（Largest Contentful Paint，最大内容绘制）是网页性能评估中的一个重要指标，用于衡量用户在页面加载过程中感知到的主要内容何时渲染完成。它是 Google 的 Web Vitals 指标之一，旨在帮助开发者改善用户体验。</p><h5 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h5><p>LCP 测量的是从页面开始加载到页面上最大的可见内容元素（如图像、视频、块级文本等）完全绘制的时间。这个时间越短，用户体验通常越好。</p><h5 id="2、重要性"><a href="#2、重要性" class="headerlink" title="2、重要性"></a>2、重要性</h5><ul><li>用户体验：LCP 反映了用户在访问网页时的等待时间。较长的 LCP 可能意味着用户在加载内容时的挫败感，从而影响整体的用户体验。</li><li>搜索引擎优化（SEO）：Google 已将 LCP 作为网页性能的一个重要排名因素，优化 LCP 有助于提升网站在搜索引擎结果中的排名。</li></ul><h5 id="3、如何改善"><a href="#3、如何改善" class="headerlink" title="3、如何改善"></a>3、如何改善</h5><p>优化图像和视频：确保使用适当格式和压缩的图像，减少文件大小，提高加载速度。</p><p>使用CDN：通过 CDN 加速内容交付，减少从服务器到用户的延迟。</p><p>减小CSS和JS的体积：精简和压缩资源，减少加载时间，确保主要内容能够尽快渲染。</p><p>优先加载关键资源：使用 <code>link rel=&quot;preload&quot;</code> 标签提前加载重要资源，确保用户快速看到页面内容。</p><p>使用SSR：通过 SSR 提高初始加载速度，使得内容更快地可见。</p><h4 id="（6）FCP"><a href="#（6）FCP" class="headerlink" title="（6）FCP"></a>（6）FCP</h4><p><code>FCP</code>（First Contentful Paint，首次内容绘制）是网页性能评估中的一个重要指标，旨在衡量用户首次看到任何可见内容（如文本、图像等）所需的时间。它是 Google 的 Web Vitals 指标之一，用于评估网页加载的速度和用户体验。</p><h5 id="1、定义-3"><a href="#1、定义-3" class="headerlink" title="1、定义"></a>1、定义</h5><p>FCP 测量的是从页面开始加载到浏览器绘制出任何可见内容的时间。这包括页面的文本、图像、SVG 图形等。</p><h5 id="2、重要性-1"><a href="#2、重要性-1" class="headerlink" title="2、重要性"></a>2、重要性</h5><ul><li>用户体验：FCP 是用户感知加载性能的第一个重要信号。较快的 FCP 表示用户能够更早地看到内容，从而提升用户体验。</li><li>SEO：同上</li></ul><h5 id="3、如何改善-1"><a href="#3、如何改善-1" class="headerlink" title="3、如何改善"></a>3、如何改善</h5><ul><li>优化资源加载：确保使用合适的图像格式和压缩，减少文件大小，加快加载速度。</li><li>使用优先级加载：通过将关键 CSS 和 JavaScript 放在 <code>&lt;head&gt;</code> 中，确保它们优先加载。</li><li>避免阻塞渲染：减少外部 CSS 和 JavaScript 文件的数量，避免阻塞初始渲染。</li><li>利用服务器端渲染（SSR）：提高初始加载速度，使内容更早呈现给用户。</li><li>使用 CDN（内容分发网络）：通过 CDN 加速资源的交付，减少从服务器到用户的延迟。</li></ul><h4 id="（7）CDN"><a href="#（7）CDN" class="headerlink" title="（7）CDN"></a>（7）CDN</h4><p>（Content Delivery Network，内容分发网络）是一种分布式的网络架构，旨在提高网站内容的加载速度和可用性。CDN 通过在全球多个位置部署缓存服务器，来将内容更接近用户，从而优化数据传输。</p><h5 id="1、工作原理"><a href="#1、工作原理" class="headerlink" title="1、工作原理"></a>1、工作原理</h5><ul><li>内容缓存：CDN 在其边缘服务器上缓存静态资源（如图像、CSS、JavaScript 文件等），这些资源会在用户访问时快速提供。</li><li>智能路由：当用户请求某个资源时，CDN 会根据用户的地理位置和当前网络状况，选择离用户最近的边缘服务器来响应请求。</li><li>动态内容处理：对于动态内容，CDN 可以通过负载均衡和智能路由等技术来优化数据传输，提高响应速度。</li></ul><h5 id="2、优点"><a href="#2、优点" class="headerlink" title="2、优点"></a>2、优点</h5><ul><li>提高加载速度：通过将内容分发到离用户更近的服务器，减少延迟，提升加载速度。</li><li>减轻服务器负担：将大量的静态资源请求转发给 CDN，减轻源服务器的压力。</li><li>提高可用性和可靠性：如果某个边缘服务器出现故障，CDN 可以自动将请求转发到其他可用的服务器，提高网站的可靠性。</li><li>增强安全性：CDN 可以提供 DDoS 保护、SSL 加密等安全功能，帮助网站抵御攻击。</li></ul><h5 id="3、常见的服务提供商"><a href="#3、常见的服务提供商" class="headerlink" title="3、常见的服务提供商"></a>3、常见的服务提供商</h5><p>Cloudflare、Akamai、Amazon CloudFront、Google Cloud CDN、Fastly</p><h3 id="二、Manual-SSR-with-React-DOM-Node-js"><a href="#二、Manual-SSR-with-React-DOM-Node-js" class="headerlink" title="二、Manual  SSR with React DOM +Node.js"></a>二、Manual  SSR with React DOM +Node.js</h3><h4 id="（1）起步"><a href="#（1）起步" class="headerlink" title="（1）起步"></a>（1）起步</h4><p>🐈‍⬛新建文件：<code>server.js</code>  -&gt;   <code>npm init</code>初始化工程（一直Enter就好了） -&gt;  出现<code>package.json</code></p><p>⭕<code>npm --watch server.js</code>    添加watch关键字，否则每次修改都须重新运行</p><hr><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; createServer &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; parse &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><br><span class="hljs-keyword">const</span> server = <span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> pathName = <span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>, <span class="hljs-literal">true</span>).<span class="hljs-property">pathname</span>;<br><br>  <span class="hljs-keyword">if</span> (pathName === <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathName === <span class="hljs-string">&#x27;/test&#x27;</span>) &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;TEST&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;URL not found&#x27;</span>);<br>  &#125;<br>&#125;);<br><span class="hljs-comment">//监听端口</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;listening for requests on port 8000&#x27;</span>));<br></code></pre></td></tr></table></figure><h5 id="1、引入模块"><a href="#1、引入模块" class="headerlink" title="1、引入模块"></a>1、引入模块</h5><p><code>require(&#39;http&#39;)</code>：导入 Node.js 的 <code>http</code> 模块，它提供了用于创建 HTTP 服务器的功能。<code>createServer</code> 是其中的一个方法，用于创建 HTTP 服务器。</p><p><code>require(&#39;url&#39;)</code>：导入 <code>url</code> 模块，其中的 <code>parse</code> 方法用于解析请求的 URL，提取路径和查询参数等信息。</p><h5 id="2、创建服务器"><a href="#2、创建服务器" class="headerlink" title="2、创建服务器"></a>2、创建服务器</h5><p><code>createServer()</code>：这是创建 HTTP 服务器的函数。它接收一个回调函数，回调函数中的 <code>req</code> 代表客户端的请求，<code>res</code> 代表服务器的响应。</p><p><code>parse(req.url, true)</code>：使用 <code>url.parse()</code> 方法解析客户端请求的 URL。第二个参数 <code>true</code> 表示将查询字符串转换为对象形式。<code>req.url</code>是客户端请求的 URL</p><p><code>pathname</code>：表示请求的路径部分（不包含查询参数），例如 <code>/test</code> 或 <code>/</code>。</p><h5 id="3、路由处理"><a href="#3、路由处理" class="headerlink" title="3、路由处理"></a>3、路由处理</h5><p><code>res.end()</code>：该方法结束响应并发送数据到客户端。比如，<code>res.end(&#39;Hello World&#39;)</code> 就是将 “Hello World” 发送给客户端，并结束响应。</p><h4 id="（2）返回HTML作为响应"><a href="#（2）返回HTML作为响应" class="headerlink" title="（2）返回HTML作为响应"></a>（2）返回HTML作为响应</h4><h5 id="1、读取HTML文件"><a href="#1、读取HTML文件" class="headerlink" title="1、读取HTML文件"></a>1、读取HTML文件</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> htmlTemplate = <span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;__dirname&#125;</span>/index.html`</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>readFileSync()</code>：这是 Node.js 内置的 <code>fs</code>（文件系统）模块中的同步方法，用于读取文件的内容</p><p><code>$&#123;__dirname&#125;/index.html</code>：<code>__dirname</code> 是一个全局变量，表示当前文件所在的目录路径。<code>$&#123;__dirname&#125;/index.html</code> 拼接得到完整的 <code>index.html</code> 文件路径。</p><p><code>&#39;utf-8&#39;</code>：这是文件读取的编码方式，确保文件内容被读取为字符串（HTML 文本内容）</p><p><code>htmlTemplate</code>：保存了 <code>index.html</code> 文件的内容作为字符串，之后会在服务器响应时将其返回给客户端</p><h5 id="2、服务器逻辑"><a href="#2、服务器逻辑" class="headerlink" title="2、服务器逻辑"></a>2、服务器逻辑</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Contnt-type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;);<br>res.<span class="hljs-title function_">end</span>(htmlTemplate);<br></code></pre></td></tr></table></figure><p><code>res.writeHead(200)</code>：设置响应状态码为 <code>200</code>，表示请求成功。</p><p><code>&#123; &#39;Contnt-type&#39;: &#39;text.html&#39; &#125;</code>：设置响应头的 <code>Content-Type</code></p><h4 id="（3）在server端运行jsx代码"><a href="#（3）在server端运行jsx代码" class="headerlink" title="（3）在server端运行jsx代码"></a>（3）在server端运行jsx代码</h4><p>⭕<code>npm i -D @babel/core @babel/preset-env @babel/preset-react @babel/register</code></p><p>⭕ <code>npm i react react-dom</code></p><hr><h5 id="1、start-js启动文件"><a href="#1、start-js启动文件" class="headerlink" title="1、start.js启动文件"></a>1、start.js启动文件</h5><blockquote><p>⭕ <code>node --watch start.js</code>   命令来运行start.js  而不是运行server.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//加入日志验证是否正常执行了代码</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Babel register is running...&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>require(&#39;@babel/register&#39;)(&#123; extensions: [&#39;.js&#39;, &#39;.jsx&#39;] &#125;);</code></p><p>这行代码的作用是加载并启用 <code>@babel/register</code>，它可以在运行时动态地编译 JavaScript 和 JSX 文件。具体来说：</p><ul><li><code>@babel/register</code> 是 Babel 提供的一个运行时工具，它可以在代码执行时实时编译那些使用了现代 JavaScript 或 JSX 语法的文件。</li><li><code>extensions: [&#39;.js&#39;, &#39;.jsx&#39;]</code> 表示 Babel 应该处理 <code>.js</code> 和 <code>.jsx</code> 文件。这样的话，在你运行这些文件时，它们会自动通过 Babel 转换为普通的 ES5 JavaScript（兼容 Node.js）。</li></ul><p><code>require(&#39;./server.js&#39;);</code></p><p>这行代码的作用是加载并运行 <code>server.js</code> 文件。</p><ul><li><code>require(&#39;./server.js&#39;)</code> 是 Node.js 中的模块加载方式，用来加载当前目录下的 <code>server.js</code> 文件。</li><li>由于第一行代码已经启用了 <code>@babel/register</code>，<code>server.js</code> 文件中的现代 JavaScript 语法（如 ES6 和 JSX）会被 Babel 实时编译并执行。</li></ul><h5 id="2、server-js"><a href="#2、server-js" class="headerlink" title="2、server.js"></a>2、server.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; renderToString &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;react-dom/server&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">React</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;react&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>react-dom/server</code>：用于将 React 组件渲染为字符串的模块，适用于服务器端渲染</p><p><code>react</code>：React 库，用于创建组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> renderedReact = <span class="hljs-title function_">renderToString</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>);<br><span class="hljs-keyword">const</span> html = htmlTemplate.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;%%%Content%%%&#x27;</span>, renderedReact);<br></code></pre></td></tr></table></figure><p>使用 <code>renderToString(&lt;Home /&gt;)</code> 将 <code>Home</code> 组件渲染为 HTML 字符串。</p><p>将渲染结果插入到 HTML 模板中，替换 <code>%%%Content%%%</code> 占位符。</p><p>（如果不插入HTML中会产生渲染问题、交互问题等）</p><h4 id="（4）Hydrate"><a href="#（4）Hydrate" class="headerlink" title="（4）Hydrate"></a>（4）Hydrate</h4><p><code>hydrate</code>在前端开发中通常指的是一个过程，特别是在使用框架如 React、Vue 和 Svelte 时，将服务器渲染的 HTML 结构与客户端的 JavaScript 代码结合起来，以便实现动态交互，并解决静态内容与动态内容之间的不一致问题。（在服务器上渲染HTML意味着从React应用程序中删除所有的交互性？！）</p><h5 id="1、将静态内容转化为动态组件"><a href="#1、将静态内容转化为动态组件" class="headerlink" title="1、将静态内容转化为动态组件"></a>1、将静态内容转化为动态组件</h5><ul><li>静态HTML：当服务器端渲染 React 组件时，生成的 HTML 是静态的，没有任何事件处理或状态管理。</li><li><code>hydrate</code> 的作用：调用 <code>ReactDOM.hydrate()</code> 函数可以将已有的静态 HTML 转换为 React 组件，使其具备动态交互能力。React 会重新绑定事件处理器，初始化组件的状态，并使组件的生命周期方法正常工作</li></ul><h5 id="2、减少重新渲染"><a href="#2、减少重新渲染" class="headerlink" title="2、减少重新渲染"></a>2、减少重新渲染</h5><ul><li>减少不必要的重新渲染：通过使用 <code>hydrate</code>，React 可以利用已有的静态 HTML，而不是从头开始渲染组件。这意味着在初始加载时，不需要重新生成 HTML，从而提高了性能。（只有HTML的DOM树和Bundle的DOM树相等时，才会渲染）</li><li>状态保留：<code>hydrate</code> 使得在客户端的状态可以与服务器端渲染时的状态保持一致，避免了状态丢失的问题。</li></ul><h5 id="3、保持交互性"><a href="#3、保持交互性" class="headerlink" title="3、保持交互性"></a>3、保持交互性</h5><ul><li>事件处理：通过 <code>hydrate</code>，React 将自动为已渲染的 HTML 元素绑定事件处理器。例如，按钮的点击事件、输入框的变化事件等，这些在 SSR 时是无法直接处理的。</li><li>组件更新：当用户与组件交互时，<code>hydrate</code> 使得组件可以根据状态变化进行更新，而不需要重新渲染整个组件树。</li></ul><h5 id="4、确保一致性"><a href="#4、确保一致性" class="headerlink" title="4、确保一致性"></a>4、确保一致性</h5><ul><li>避免内容闪烁：在客户端渲染时，<code>hydrate</code> 确保服务器渲染的内容与客户端渲染的内容保持一致，避免了闪烁和内容不一致的问题。</li><li>快速响应：用户在客户端与页面交互时，可以立即感知到变化，因为 <code>hydrate</code> 确保了用户交互的流畅性和及时响应。</li></ul><h5 id="5、优点"><a href="#5、优点" class="headerlink" title="5、优点"></a>5、优点</h5><p>通过 <code>hydrate</code>，React 能够有效地将服务器端生成的静态内容转化为具有交互性的动态组件，确保页面在用户交互时的流畅性和一致性。这一过程避免了重新渲染带来的性能损失，同时为用户提供了更好的体验</p><p>提升性能：由于初始内容是服务器渲染的，用户可以更快地看到页面，减少了首次内容绘制（FCP）时间。</p><p>提高 SEO</p><p>更好的用户体验</p><h4 id="（5）使用hydrate渲染互动性界面"><a href="#（5）使用hydrate渲染互动性界面" class="headerlink" title="（5）使用hydrate渲染互动性界面"></a>（5）使用hydrate渲染互动性界面</h4><h5 id="1、创建clien-js"><a href="#1、创建clien-js" class="headerlink" title="1、创建clien.js"></a>1、创建clien.js</h5><p><code>ReactDOM.hydrateRoot</code>： 该方法来自 React 18，是为了将服务端渲染的内容与客户端 React 代码 “结合”。通过 <code>hydrateRoot</code>，React 可以在客户端接管已经在服务端生成的静态 HTML，并使其变得交互式。</p><p> <code>document.getElementById(&#39;root&#39;)</code> 获取了页面上的 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>，React 的组件会渲染到这个元素中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">hydrateRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>), <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>);<br></code></pre></td></tr></table></figure><p>里面还需包含和server.js中一样的JSX代码</p><h5 id="2、在server-js中包含client路径"><a href="#2、在server-js中包含client路径" class="headerlink" title="2、在server.js中包含client路径"></a>2、在server.js中包含client路径</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> clientJS = <span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;__dirname&#125;</span>/client.js`</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathName === <span class="hljs-string">&#x27;/client.js&#x27;</span>) &#123;<br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;application/javascript&#x27;</span> &#125;);<br>    res.<span class="hljs-title function_">end</span>(clientJS);<br></code></pre></td></tr></table></figure><h5 id="3、在HTML中"><a href="#3、在HTML中" class="headerlink" title="3、在HTML中"></a>3、在HTML中</h5><p>中间的两个引入是搜索 babel cdn和react cdn来引入的</p><ul><li>Babel：这是 Babel 的独立版本，用于在浏览器中直接编译和转译 ES6+ 和 JSX 代码。</li><li>React (UMD Module)：这个脚本引入了 React 库，它是一个 JavaScript 库，用于构建用户界面。通过这个 CDN，你可以在浏览器中使用 React 编写组件。这是 UMD (Universal Module Definition) 版本的 React，它可以直接在浏览器中使用，而无需模块打包工具（如 Webpack）。这是开发环境的版本（<code>react.development.js</code>），它包括额外的调试信息，方便开发和调试。</li><li>ReactDOM (UMD Module)：这个脚本引入了 ReactDOM 库，它是 React 的一部分，负责将 React 组件渲染到实际的 DOM 中。它允许你把 React 的虚拟 DOM 转换为浏览器的实际 DOM。同样，这是 ReactDOM 的 UMD 版本，允许你直接在浏览器中使用 <code>ReactDOM.render()</code> 或 <code>ReactDOM.hydrateRoot()</code> 方法。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span>%%%Content%%%<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">crossorigin</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">crossorigin</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/client.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS课程1-</title>
    <link href="/2024/09/28/JS%E8%AF%BE%E7%A8%8B1-/"/>
    <url>/2024/09/28/JS%E8%AF%BE%E7%A8%8B1-/</url>
    
    <content type="html"><![CDATA[<p>JavaScript是高级的、面向对象的、多范式的编程语言</p><span id="more"></span><h3 id="一、一些基本知识"><a href="#一、一些基本知识" class="headerlink" title="一、一些基本知识"></a>一、一些基本知识</h3><h4 id="七种数据类型"><a href="#七种数据类型" class="headerlink" title="七种数据类型"></a>七种数据类型</h4><p>number、string、bool、undefined、null、symbol、bigInt（<strong>dynamic</strong>）</p><p>其中 <strong>Symbol</strong> 和 <strong>BigInt</strong> 是ES6 中新增的数据类型：</p><ul><li><strong>Symbol</strong>代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li><li><strong>BigInt</strong> 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li></ul><p>这些数据可以分为<strong>原始数据类型</strong>和<strong>引用数据类型（复杂数据类型）</strong>，他们在内存中的存储方式不同。</p><ul><li><strong>堆：</strong> 存放<strong>引用数据类型</strong>，引用数据类型占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；<strong>引用数据类型在栈中存储了指针</strong>，该指针指向堆中该实体的起始地址，如<code>Object</code>、<code>Array</code>、<code>Function</code>。</li><li><strong>栈：</strong> 存放<strong>原始数据类型</strong>，栈中的简单数据段，占据空间小，属于被频繁使用的数据，如<code>String</code>、<code>Number</code>、<code>Null</code>、<code>Boolean</code>。</li></ul><p>const需要初始值。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence运算符的优先级</a></p><p>+号和-号会实现自动类型转换：num-&gt;string    string-&gt;num</p><h4 id="falsey-values："><a href="#falsey-values：" class="headerlink" title="falsey values："></a>falsey values：</h4><p>0，”“，undefined，null，NaN  （空对象是真值）</p><ul><li><strong>undefined</strong> 代表的含义是<strong>未定义</strong>，一般变量<strong>声明了但还没有定义</strong>的时候会返回 <code>undefined</code>，<code>typeof</code>为<code>undefined</code></li><li><strong>null</strong> 代表的含义是<strong>空对象</strong>，null主要用于赋值给一些可能会返回对象的变量，作为初始化，<code>typeof</code>为<code>object</code></li></ul><p><code>null == undefined // true          null === undefined //false</code></p><h3 id="二、一些基本语法"><a href="#二、一些基本语法" class="headerlink" title="二、一些基本语法"></a>二、一些基本语法</h3><p>const x&#x3D;prompt(“are you a pig？”)  弹窗，用户输入的内容会保留在变量里</p><p>unshift在数组前加入数据，后加是push；pop弹出最后的元素，shift弹出最前元素。indexOf：下标，includes：检验是否包含</p><h4 id="如何判断是不是数组？"><a href="#如何判断是不是数组？" class="headerlink" title="如何判断是不是数组？"></a>如何判断是不是数组？</h4><p>原型链、ES6的isArray、instanceof（判断类型）</p><h4 id="this"><a href="#this" class="headerlink" title="this"></a><strong>this</strong></h4><h5 id="1、全局上下文中的-this"><a href="#1、全局上下文中的-this" class="headerlink" title="1、全局上下文中的 this"></a>1、全局上下文中的 <code>this</code></h5><p>在全局作用域中，<code>this</code> 指向全局对象：</p><ul><li>在浏览器中，<code>this</code> 指向 <code>window</code> 对象。</li><li>在 Node.js 中，<code>this</code> 在模块的顶层上下文中指向 <code>module.exports</code>。</li></ul><h5 id="2、函数调用中的-this"><a href="#2、函数调用中的-this" class="headerlink" title="2、函数调用中的 this"></a>2、函数调用中的 <code>this</code></h5><p>当一个普通函数被调用时，<code>this</code> 的值取决于调用该函数的对象：</p><ul><li>如果函数是在全局上下文中调用，<code>this</code> 指向全局对象（在浏览器中是 <code>window</code>）。</li><li>如果函数是作为对象的方法调用，<code>this</code> 指向该对象。</li></ul><p>trunc函数：取整。Math.trunc(x);</p><h4 id="Max、Min"><a href="#Max、Min" class="headerlink" title="Max、Min"></a>Max、Min</h4><p>Math.max(…arr);             Math.min(…arr);</p><p>虽然函数默认不接受数组作为参数，但是可以通过扩展运算符（…）将数组传递给函数</p><h4 id="reduce（）"><a href="#reduce（）" class="headerlink" title="reduce（）"></a>reduce（）</h4><h5 id="1、计算总和"><a href="#1、计算总和" class="headerlink" title="1、计算总和"></a>1、计算总和</h5><p><code>sum=arrs.reduce((acc，cur)=&gt;acc+cur，0）</code>；</p><h5 id="2、计算最大值"><a href="#2、计算最大值" class="headerlink" title="2、计算最大值"></a>2、计算最大值</h5><p><code>max = arrs.reduce((acc, cur) =&gt; Math.max(acc, cur),arrs[0]);</code></p><h4 id="concat（）"><a href="#concat（）" class="headerlink" title="concat（）"></a>concat（）</h4><p><code>array1.concat(array2)</code></p><p><code>array1.concat(array2,array3)</code></p><p><code>array.concat(num)</code></p><p><code>arrary.concat(1,[2,3],4)</code></p><h3 id="三、DOM"><a href="#三、DOM" class="headerlink" title="三、DOM"></a>三、DOM</h3><h4 id="（1）整体概述"><a href="#（1）整体概述" class="headerlink" title="（1）整体概述"></a>（1）整体概述</h4><p>Document Object Model（文档对象类型）是一个编程接口，用于表示和操作HTML或XML文档的内容。通过DOM，开发者可以访问和修改网页的结构、样式和内容。</p><h4 id="（2）核心概念"><a href="#（2）核心概念" class="headerlink" title="（2）核心概念"></a>（2）核心概念</h4><p><strong>文档（Document）</strong>：</p><ul><li>DOM将HTML或XML文档表示为一个树形结构，每个节点代表文档中的一部分（如元素、属性、文本等）。</li></ul><p><strong>节点（Node）</strong>：</p><ul><li>DOM中的每个元素（<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>等）、属性（<code>class=&quot;example&quot;</code>）和文本（<code>Hello World!</code>）都被视为一个节点。</li><li>常见的节点类型：<ul><li><strong>元素节点</strong>：如HTML标签 (<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;a&gt;</code> 等)。</li><li><strong>属性节点</strong>：HTML元素的属性（如 <code>id</code>、<code>class</code>）。</li><li><strong>文本节点</strong>：元素内的文本。</li></ul></li></ul><p><strong>父节点、子节点和同级节点</strong>：</p><ul><li>父节点（parent node）：包含其他节点的节点。</li><li>子节点（child node）：被父节点包含的节点。</li><li>同级节点（sibling node）：同一个父节点的子节点。</li></ul><h4 id="（3）访问和修改DOM"><a href="#（3）访问和修改DOM" class="headerlink" title="（3）访问和修改DOM"></a>（3）访问和修改DOM</h4><h5 id="1、访问"><a href="#1、访问" class="headerlink" title="1、访问"></a>1、访问</h5><ul><li><p><strong>document.getElementById</strong>() </p><p>根据元素的id获取元素</p></li><li><p><strong>document.getElementByClassName</strong>()</p><p>根据元素的class获取元素集合</p></li><li><p><strong>document.querySelector</strong>()</p><p>使用CSS选择语法器获取第一个匹配的元素</p></li><li><p><strong>document.querySelectorAll()</strong></p><p>使用CSS选择器语法获取所有匹配的元素。</p><p>byTagName、byName</p></li></ul><h5 id="2、修改"><a href="#2、修改" class="headerlink" title="2、修改"></a>2、修改</h5><p>选中元素之后，可以通过innerTHML或<strong>textContent</strong>修改文本元素的内容，通过<strong>value</strong>修改表单元素的值，通过<strong>style</strong>修改内联的样式，通过setAttribute修改元素的属性。</p><p><code>element.setAttribute(&#39;class&#39;, &#39;newClass&#39;);</code></p><h5 id="3、动态添加和删除元素"><a href="#3、动态添加和删除元素" class="headerlink" title="3、动态添加和删除元素"></a>3、动态添加和删除元素</h5><ul><li>创建元素：通过createElement（）创建一个新元素，然后使用appendChild添加到文档中。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> newElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>)<br>newElement.<span class="hljs-property">textContent</span>=<span class="hljs-string">&quot;this is a newElement&quot;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(newElement)<br></code></pre></td></tr></table></figure><ul><li>删除元素：使用removeChild（）删除元素</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> parentElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;parent&#x27;</span>);<br><span class="hljs-keyword">const</span> childElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;child&#x27;</span>);<br>parentElement.<span class="hljs-title function_">removeChild</span>(childElement);<br></code></pre></td></tr></table></figure><h4 id="（4）DOM事件"><a href="#（4）DOM事件" class="headerlink" title="（4）DOM事件"></a>（4）DOM事件</h4><h5 id="1、onclick"><a href="#1、onclick" class="headerlink" title="1、onclick"></a>1、onclick</h5><p><code>button.onclick = function() &#123;  alert(&#39;按钮被点击了&#39;); &#125;;</code></p><h5 id="2、addEventListener"><a href="#2、addEventListener" class="headerlink" title="2、addEventListener()"></a>2、addEventListener()</h5><p>比如项目中的一个钩子：监听组件外点击</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useHandleClickOutside</span>(<span class="hljs-params">handler, listenCapturing = <span class="hljs-literal">true</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>();<br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ref.<span class="hljs-property">current</span> &amp;&amp; !ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">contains</span>(e.<span class="hljs-property">target</span>)) &#123;<br>          <span class="hljs-title function_">handler</span>();<br>        &#125;<br>      &#125;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handleClick, listenCapturing);<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handleClick, listenCapturing);<br>    &#125;,<br>    [handler, listenCapturing]<br>  );<br><br>  <span class="hljs-keyword">return</span> ref;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）DOM树"><a href="#（5）DOM树" class="headerlink" title="（5）DOM树"></a>（5）DOM树</h4><p><strong>DOM树</strong>（Document Object Model Tree）是用于表示HTML或XML文档的层次结构的模型。通过DOM树，开发者可以访问和操作文档的结构、样式和内容。DOM树将文档中的每个元素、属性和文本节点都视为一个节点，并组织成树形结构。</p><h5 id="1、结构"><a href="#1、结构" class="headerlink" title="1、结构"></a>1、结构</h5><p><strong>根节点（Root Node）</strong>：</p><ul><li>在DOM树中，根节点是整个文档的入口。在HTML文档中，根节点是 <code>document</code>，而在XML文档中，根节点通常是文档的根元素。</li></ul><p><strong>元素节点（Element Nodes）</strong>：</p><ul><li>每个HTML或XML标签（例如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code> 等）都是一个元素节点。元素节点可以有子节点，形成父子关系。</li></ul><p><strong>属性节点（Attribute Nodes）</strong>：</p><ul><li>属性节点是元素节点的属性，例如 <code>id</code>、<code>class</code> 和 <code>src</code> 等。属性节点通常不在树的层次结构中显示，但可以通过DOM API访问。</li></ul><p><strong>文本节点（Text Nodes）</strong>：</p><ul><li>文本节点包含元素内的文本内容。每个元素节点的文本内容都是一个文本节点。</li></ul><h5 id="2、节点类型"><a href="#2、节点类型" class="headerlink" title="2、节点类型"></a>2、节点类型</h5><ul><li>文档节点（Document Node）：</li></ul><p><strong>根节点</strong>，代表整个文档。</p><ul><li>元素节点（Element Node）：</li></ul><p>代表HTML或XML元素。</p><ul><li>文本节点（Text Node）：</li></ul><p>代表元素内的文本内容。</p><ul><li>属性节点（Attribute Node）（不在树结构中单独表示，但可以访问）：</li></ul><p>代表元素的属性。</p><h5 id="3、访问"><a href="#3、访问" class="headerlink" title="3、访问"></a>3、访问</h5><p>.childNodes：获取所有子节点</p><p>.parentNode：获取父节点</p><p>.nextSibling：获取下一个兄弟节点</p><h3 id="四、Web-API"><a href="#四、Web-API" class="headerlink" title="四、Web API"></a>四、Web API</h3><p><strong>Web API</strong>（Web Application Programming Interface，Web应用程序编程接口）是为开发者提供的一组接口，用于通过互联网与服务器或其他网络资源进行交互。Web API允许客户端（如浏览器或移动应用）请求和获取数据或服务，而不直接访问服务器端的实现细节。</p><h4 id="（1）浏览器提供的API"><a href="#（1）浏览器提供的API" class="headerlink" title="（1）浏览器提供的API"></a>（1）浏览器提供的API</h4><p>这些API是内置于浏览器中的，允许开发者操作浏览器功能和网页内容。它们包括对文档对象模型（DOM）、存储、网络、音频、视频等的访问。</p><h5 id="1、DOM-API"><a href="#1、DOM-API" class="headerlink" title="1、DOM API"></a>1、DOM API</h5><p>操作HTML 和CSS的接口，例如<code>getElementById</code></p><h5 id="2、Fetch-API"><a href="#2、Fetch-API" class="headerlink" title="2、Fetch API"></a>2、Fetch API</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.example.com/data&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data));<br></code></pre></td></tr></table></figure><h5 id="3、LocalStorage-和-SessionStorage"><a href="#3、LocalStorage-和-SessionStorage" class="headerlink" title="3、LocalStorage 和 SessionStorage"></a>3、<strong>LocalStorage 和 SessionStorage</strong></h5><p>用于在客户端存储数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;usename&#x27;</span>,<span class="hljs-string">&#x27;Jonas&#x27;</span>)<br><span class="hljs-keyword">const</span> username=<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="4、Geolocation-API"><a href="#4、Geolocation-API" class="headerlink" title="4、Geolocation API"></a>4、Geolocation API</h5><p>获取用户的地理位置信息。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">navigator.<span class="hljs-property">getlocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(<br><span class="hljs-function">(<span class="hljs-params">pos</span>)=&gt;</span>&#123;<br><span class="hljs-title function_">setPostion</span>(&#123;<br><span class="hljs-attr">lat</span>: pos.<span class="hljs-property">coords</span>.<span class="hljs-property">latitude</span>;<br><span class="hljs-attr">lng</span>: pos.<span class="hljs-property">coords</span>.<span class="hljs-property">longitude</span><br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="（2）服务端API"><a href="#（2）服务端API" class="headerlink" title="（2）服务端API"></a>（2）服务端API</h4><h5 id="1、RESTful-API"><a href="#1、RESTful-API" class="headerlink" title="1、RESTful API"></a>1、RESTful API</h5><p>REST（Representational State Transfer）是一种设计Web服务的架构风格，基于HTTP协议，使用常见的HTTP方法如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 来进行操作。</p><h5 id="2、GraphQL（Apollo）"><a href="#2、GraphQL（Apollo）" class="headerlink" title="2、GraphQL（Apollo）"></a>2、GraphQL（Apollo）</h5><p>查询（Query）：请求特定字段，避免获取不必要的数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>   <span class="hljs-title function_">user</span>(<span class="hljs-params">id: <span class="hljs-string">&#x27;1&#x27;</span></span>) &#123;<br>      name<br>      email<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>变更（Mutation）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">mutation&#123;<br>   <span class="hljs-title function_">createUser</span>(<span class="hljs-params">name: <span class="hljs-string">&#x27;Jonas&#x27;</span>,email: <span class="hljs-string">&#x27;jonas@test.com&#x27;</span></span>)&#123;<br>      id<br>      name<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>订阅（subscription）、模式：type</p><p>优点：</p><ul><li><p>灵活的数据获取：</p><p>客户端可以精确请求所需字段，避免多余的数据传输。</p></li><li><p>单一端点：</p><p>所有请求通过单一的API端点进行，简化了网络请求的管理。</p></li><li><p>强类型系统：</p><p>模式提供了清晰的类型定义和文档，增强了API的可维护性。</p></li><li><p>自描述性：</p><p>GraphQL API可以通过 <code>introspection</code> 查询自身的模式，使得开发者可以轻松理解API。</p></li></ul><h4 id="（3）HTTP状态码："><a href="#（3）HTTP状态码：" class="headerlink" title="（3）HTTP状态码："></a>（3）HTTP状态码：</h4><ul><li><strong>200 OK</strong>：请求成功。</li><li><strong>201 Created</strong>：资源成功创建。</li><li><strong>400 Bad Request</strong>：请求无效。</li><li><strong>401 Unauthorized</strong>：请求未授权。</li><li><strong>404 Not Found</strong>：请求的资源未找到。</li><li><strong>500 Internal Server Error</strong>：服务器内部错误。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JS课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程23-项目收尾</title>
    <link href="/2024/09/27/react%E8%AF%BE%E7%A8%8B23-%E9%A1%B9%E7%9B%AE%E6%94%B6%E5%B0%BE/"/>
    <url>/2024/09/27/react%E8%AF%BE%E7%A8%8B23-%E9%A1%B9%E7%9B%AE%E6%94%B6%E5%B0%BE/</url>
    
    <content type="html"><![CDATA[<p>本节实现：DarkMode、DashBoard建立、Error Bundary、项目部署</p><span id="more"></span><h3 id="一、实现Dark-Mode"><a href="#一、实现Dark-Mode" class="headerlink" title="一、实现Dark Mode"></a>一、实现Dark Mode</h3><h4 id="（1）useLocalStorage"><a href="#（1）useLocalStorage" class="headerlink" title="（1）useLocalStorage"></a>（1）useLocalStorage</h4><p>这个自定义钩子类似useState的效果，不同的是它是从LocalStorage中来读取值。首先value从LocalStorage通过key值读取，如果没有就返回初始状态。每次value或者key改变，<code>useEffect</code> 会被触发，将当前的 <code>value</code> 保存到 <code>localStorage</code> 中。这确保了状态的任何更新都会同步到 <code>localStorage</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLocalStorageState</span>(<span class="hljs-params">initialState, key</span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> storedValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(key);<br>    <span class="hljs-keyword">return</span> storedValue ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(storedValue) : initialState;<br>  &#125;);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(key, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value));<br>    &#125;,<br>    [value, key]<br>  );<br><br>  <span class="hljs-keyword">return</span> [value, setValue];<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>useLocalStorageState</code> 的优势</p><ul><li><strong>持久化存储</strong>：通过 <code>localStorage</code>，状态在用户刷新页面或关闭浏览器后仍然保留。</li><li><strong>用户偏好</strong>：能够保存用户的界面偏好设置（如 <code>dark mode</code> 或 <code>light mode</code>），提升用户体验。</li><li><strong>易于管理</strong>：与 <code>localStorage</code> 同步的状态，使得跨页面的状态管理变得简单。</li></ul><h4 id="（2）contextAPI"><a href="#（2）contextAPI" class="headerlink" title="（2）contextAPI"></a>（2）contextAPI</h4><p>darkmode的状态被设置为全球状态，以加强页面的一致性。因此用到了contextAPI，复习。</p><ol><li>使用createContext新建context</li><li>建立Provider函数，返回context.provider，传递value</li><li>建立useContext()钩子，方便读取context内容。</li><li>导出provider和useContext</li><li>用Provider整个包裹住App</li></ol><p>这里的Provider放置一个useEffect钩子，使得每次isDarkMode切换的时候，都相应地添加或者移除light或者dark类，实现改变亮暗风格的效果。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">DarkModeContext</span> = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">DarkModeProvider</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isDarkMode, setIsDarkMode] = <span class="hljs-title function_">useLocalStorageState</span>(<span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;isDarkMode&#x27;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (isDarkMode) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;dark-mode&#x27;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;light-mode&#x27;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;light-mode&#x27;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;dark-mode&#x27;</span>);<br>      &#125;<br>    &#125;,<br>    [isDarkMode]<br>  );<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">toggleDarkMode</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setIsDarkMode</span>(<span class="hljs-function">(<span class="hljs-params">isDark</span>) =&gt;</span> !isDark);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">DarkModeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">isDarkMode</span>, <span class="hljs-attr">toggleDarkMode</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">DarkModeContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useDarkMode</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">DarkModeContext</span>);<br>  <span class="hljs-keyword">if</span> (context === <span class="hljs-literal">undefined</span>)<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;DarkModeContext was used outside of DarkModeProvider&#x27;</span>);<br>  <span class="hljs-keyword">return</span> context;<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123; <span class="hljs-title class_">DarkModeProvider</span>, useDarkMode &#125;;<br></code></pre></td></tr></table></figure><h3 id="二、构建Dashboard"><a href="#二、构建Dashboard" class="headerlink" title="二、构建Dashboard"></a>二、构建Dashboard</h3><h4 id="（1）apiBooking"><a href="#（1）apiBooking" class="headerlink" title="（1）apiBooking"></a>（1）apiBooking</h4><h5 id="1、获得指定日期后的预定数"><a href="#1、获得指定日期后的预定数" class="headerlink" title="1、获得指定日期后的预定数"></a>1、获得指定日期后的预定数</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getBookingsAfterDate</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;created_at, totalPrice, extrasPrice&#x27;</span>)<br>    .<span class="hljs-title function_">gte</span>(<span class="hljs-string">&#x27;created_at&#x27;</span>, date)<br>    .<span class="hljs-title function_">lte</span>(<span class="hljs-string">&#x27;created_at&#x27;</span>, <span class="hljs-title function_">getToday</span>(&#123; <span class="hljs-attr">end</span>: <span class="hljs-literal">true</span> &#125;));<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Bookings could not get loaded&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、获得指定日期后的入住数"><a href="#2、获得指定日期后的入住数" class="headerlink" title="2、获得指定日期后的入住数"></a>2、获得指定日期后的入住数</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaysAfterDate</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    <span class="hljs-comment">// .select(&#x27;*&#x27;)</span><br>    .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*, guests(fullName)&#x27;</span>)<br>    .<span class="hljs-title function_">gte</span>(<span class="hljs-string">&#x27;startDate&#x27;</span>, date)<br>    .<span class="hljs-title function_">lte</span>(<span class="hljs-string">&#x27;startDate&#x27;</span>, <span class="hljs-title function_">getToday</span>());<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Bookings could not get loaded&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、获取当天的活动"><a href="#3、获取当天的活动" class="headerlink" title="3、获取当天的活动"></a>3、获取当天的活动</h5><ol><li>从 <code>bookings</code> 表中查询数据。</li><li>选择所有字段（<code>*</code>）以及关联的 <code>guests</code> 表中的特定字段（<code>fullName</code>、<code>nationality</code> 和 <code>countryFlag</code>）。</li><li>通过 <code>or</code> 条件筛选出符合以下任一条件的预订：<ul><li>状态为 <code>unconfirmed</code> 且 <code>startDate</code> 等于今天的日期。</li><li>状态为 <code>checked-in</code> 且 <code>endDate</code> 等于今天的日期。</li></ul></li><li>根据 <code>created_at</code> 字段对查询结果进行排序。</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaysTodayActivity</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*, guests(fullName, nationality, countryFlag)&#x27;</span>)<br>    .<span class="hljs-title function_">or</span>(<br>      <span class="hljs-string">`and(status.eq.unconfirmed,startDate.eq.<span class="hljs-subst">$&#123;getToday()&#125;</span>),and(status.eq.checked-in,endDate.eq.<span class="hljs-subst">$&#123;getToday()&#125;</span>)`</span><br>    )<br>    .<span class="hljs-title function_">order</span>(<span class="hljs-string">&#x27;created_at&#x27;</span>);<br><br>  <span class="hljs-comment">// Equivalent to this. But by querying this, we only download the data we actually need, otherwise we would need ALL bookings ever created</span><br>  <span class="hljs-comment">// (stay.status === &#x27;unconfirmed&#x27; &amp;&amp; isToday(new Date(stay.startDate))) ||</span><br>  <span class="hljs-comment">// (stay.status === &#x27;checked-in&#x27; &amp;&amp; isToday(new Date(stay.endDate)))</span><br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Bookings could not get loaded&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）使用api中的函数"><a href="#（2）使用api中的函数" class="headerlink" title="（2）使用api中的函数"></a>（2）使用api中的函数</h4><h5 id="useRecentStays"><a href="#useRecentStays" class="headerlink" title="useRecentStays"></a>useRecentStays</h5><p>通过params得到filter中的数据，并计算实际入住的数量。</p><p>subDays函数计算指定日期之前的日期，toISOString()将其转化为supabase能接受的IOS形式。</p><p>useRecentBookings和它很像，不赘述；useTodayActivity较为简单，也不赘述</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tanstack/react-query&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; subDays &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;date-fns&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useSearchParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getStaysAfterDate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../services/apiBookings&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useRecentStays</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [searchParams] = <span class="hljs-title function_">useSearchParams</span>();<br>  <span class="hljs-keyword">const</span> numDays = !searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;last&#x27;</span>)<br>    ? <span class="hljs-number">7</span><br>    : <span class="hljs-title class_">Number</span>(searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;last&#x27;</span>));<br><br>  <span class="hljs-keyword">const</span> queryDate = <span class="hljs-title function_">subDays</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), numDays).<span class="hljs-title function_">toISOString</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; isLoading, <span class="hljs-attr">data</span>: stays &#125; = <span class="hljs-title function_">useQuery</span>(&#123;<br>    <span class="hljs-attr">queryFn</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getStaysAfterDate</span>(queryDate),<br>    <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;stays&#x27;</span>, <span class="hljs-string">`last-<span class="hljs-subst">$&#123;numDays&#125;</span>`</span>],<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> confirmedStays = stays?.<span class="hljs-title function_">filter</span>(<br>    <span class="hljs-function">(<span class="hljs-params">stay</span>) =&gt;</span> stay.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;checked-in&#x27;</span> || stay.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;checked-out&#x27;</span><br>  );<br><br>  <span class="hljs-keyword">return</span> &#123; isLoading, stays, confirmedStays &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）构建stats"><a href="#（3）构建stats" class="headerlink" title="（3）构建stats"></a>（3）构建stats</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927155756049.png" alt="image-20240927155756049"></p><p>用到了可重用的组件stat。四个放置在stats组件中，较为简单不赘述。</p><h4 id="（4）使用Recharts-Library构建图表"><a href="#（4）使用Recharts-Library构建图表" class="headerlink" title="（4）使用Recharts Library构建图表"></a>（4）使用Recharts Library构建图表</h4><p>⭕<code>npm i recharts@2</code></p><hr><h5 id="1、销售量线状图（可切换明暗模式）"><a href="#1、销售量线状图（可切换明暗模式）" class="headerlink" title="1、销售量线状图（可切换明暗模式）"></a>1、销售量线状图（可切换明暗模式）</h5><p>（太多参数了，看得我眼花缭乱😵‍💫😵‍💫😵‍💫）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SalesChart</span>(<span class="hljs-params">&#123; bookings, numDays &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; isDarkMode &#125; = <span class="hljs-title function_">useDarkMode</span>();<br><br>  <span class="hljs-keyword">const</span> allDates = <span class="hljs-title function_">eachDayOfInterval</span>(&#123;<br>    <span class="hljs-attr">start</span>: <span class="hljs-title function_">subDays</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), numDays - <span class="hljs-number">1</span>),<br>    <span class="hljs-attr">end</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> data = allDates.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">date</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">label</span>: <span class="hljs-title function_">format</span>(date, <span class="hljs-string">&#x27;MMM dd&#x27;</span>),<br>      <span class="hljs-attr">totalSales</span>: bookings<br>        .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">booking</span>) =&gt;</span> <span class="hljs-title function_">isSameDay</span>(date, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(booking.<span class="hljs-property">created_at</span>)))<br>        .<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc + cur.<span class="hljs-property">totalPrice</span>, <span class="hljs-number">0</span>),<br>      <span class="hljs-attr">extrasSales</span>: bookings<br>        .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">booking</span>) =&gt;</span> <span class="hljs-title function_">isSameDay</span>(date, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(booking.<span class="hljs-property">created_at</span>)))<br>        .<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc + cur.<span class="hljs-property">extrasPrice</span>, <span class="hljs-number">0</span>),<br>    &#125;;<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> colors = isDarkMode<br>    ? &#123;<br>        <span class="hljs-attr">totalSales</span>: &#123; <span class="hljs-attr">stroke</span>: <span class="hljs-string">&#x27;#4f46e5&#x27;</span>, <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#4f46e5&#x27;</span> &#125;,<br>        <span class="hljs-attr">extrasSales</span>: &#123; <span class="hljs-attr">stroke</span>: <span class="hljs-string">&#x27;#22c55e&#x27;</span>, <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#22c55e&#x27;</span> &#125;,<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;#e5e7eb&#x27;</span>,<br>        <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;#18212f&#x27;</span>,<br>      &#125;<br>    : &#123;<br>        <span class="hljs-attr">totalSales</span>: &#123; <span class="hljs-attr">stroke</span>: <span class="hljs-string">&#x27;#4f46e5&#x27;</span>, <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#c7d2fe&#x27;</span> &#125;,<br>        <span class="hljs-attr">extrasSales</span>: &#123; <span class="hljs-attr">stroke</span>: <span class="hljs-string">&#x27;#16a34a&#x27;</span>, <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#dcfce7&#x27;</span> &#125;,<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;#374151&#x27;</span>,<br>        <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>      &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledSalesChart</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span></span><br><span class="language-xml">        Sales from &#123;format(allDates.at(0), &#x27;MMM dd yyyy&#x27;)&#125; <span class="hljs-symbol">&amp;mdash;</span>&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        &#123;format(allDates.at(-1), &#x27;MMM dd yyyy&#x27;)&#125;&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ResponsiveContainer</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#123;300&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">AreaChart</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;data&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">XAxis</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">dataKey</span>=<span class="hljs-string">&quot;label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">tick</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fill:</span> <span class="hljs-attr">colors.text</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">tickLine</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">stroke:</span> <span class="hljs-attr">colors.text</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">YAxis</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">unit</span>=<span class="hljs-string">&quot;$&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">tick</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">fill:</span> <span class="hljs-attr">colors.text</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">tickLine</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">stroke:</span> <span class="hljs-attr">colors.text</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">CartesianGrid</span> <span class="hljs-attr">strokeDasharray</span>=<span class="hljs-string">&quot;4&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Tooltip</span> <span class="hljs-attr">contentStyle</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">colors.background</span> &#125;&#125; /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Area</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">dataKey</span>=<span class="hljs-string">&quot;totalSales&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;monotone&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#123;colors.totalSales.stroke&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">fill</span>=<span class="hljs-string">&#123;colors.totalSales.fill&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">strokeWidth</span>=<span class="hljs-string">&#123;2&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Total sales&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">unit</span>=<span class="hljs-string">&quot;$&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Area</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">dataKey</span>=<span class="hljs-string">&quot;extrasSales&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;monotone&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#123;colors.extrasSales.stroke&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">fill</span>=<span class="hljs-string">&#123;colors.extrasSales.fill&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">strokeWidth</span>=<span class="hljs-string">&#123;2&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Extras sales&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">unit</span>=<span class="hljs-string">&quot;$&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">AreaChart</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ResponsiveContainer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledSalesChart</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927164947789.png" alt="image-20240927164947789"></p><h5 id="2、构建入住时间统计饼图"><a href="#2、构建入住时间统计饼图" class="headerlink" title="2、构建入住时间统计饼图"></a>2、构建入住时间统计饼图</h5><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927192105306.png" alt="image-20240927192105306" style="zoom:67%;" /><h4 id="（5）构建今日活动"><a href="#（5）构建今日活动" class="headerlink" title="（5）构建今日活动"></a>（5）构建今日活动</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927192152464.png" alt="image-20240927192152464" style="zoom:67%;" /><h5 id="1、整体布局组件"><a href="#1、整体布局组件" class="headerlink" title="1、整体布局组件"></a>1、整体布局组件</h5><p>加载状态</p><ul><li><p>如果 isLoading 为 false，则表示数据已加载。</p><ul><li><p>活动列表：</p><p>如果 <code>activities</code> 数组长度大于 0，渲染 <code>TodayList</code>，并使用 <code>map</code> 方法遍历每个活动，渲染 <code>TodayItem</code> 组件，传入活动数据。</p></li><li><p>无活动提示</p><p>如果 <code>activities</code> 数组长度为 0，显示 “No activity today…” 的提示。</p></li></ul></li><li><p>如果 <code>isLoading</code> 为 <code>true</code>，则显示一个加载中的 <code>Spinner</code> 组件。</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodayActivity</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; isLoading, activities &#125; = <span class="hljs-title function_">useTodayActivity</span>();<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledToday</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Row</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>Today<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Row</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;!isLoading ? (</span><br><span class="language-xml">        activities?.length &gt; 0 ? (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">TodayList</span>&gt;</span></span><br><span class="language-xml">            &#123;activities.map((activity) =&gt; (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">TodayItem</span> <span class="hljs-attr">activity</span>=<span class="hljs-string">&#123;activity&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;activity.id&#125;</span> /&gt;</span></span><br><span class="language-xml">            ))&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">TodayList</span>&gt;</span></span><br><span class="language-xml">        ) : (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">NoActivity</span>&gt;</span>No activity today...<span class="hljs-tag">&lt;/<span class="hljs-name">NoActivity</span>&gt;</span></span><br><span class="language-xml">        )</span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Spinner</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledToday</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、每个活动的条目组件"><a href="#2、每个活动的条目组件" class="headerlink" title="2、每个活动的条目组件"></a>2、每个活动的条目组件</h5><blockquote><p><code>alt</code> 属性是图像的替代文本。在图像无法显示时，替代文本会被显示出来，此外，它对使用屏幕阅读器的用户也很重要。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TodayItem</span>(<span class="hljs-params">&#123; activity &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; id, status, guests, numNights &#125; = activity;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledTodayItem</span>&gt;</span></span><br><span class="language-xml">      &#123;status === &#x27;unconfirmed&#x27; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Tag</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span>Arriving<span class="hljs-tag">&lt;/<span class="hljs-name">Tag</span>&gt;</span>&#125;</span><br><span class="language-xml">      &#123;status === &#x27;checked-in&#x27; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Tag</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>Departing<span class="hljs-tag">&lt;/<span class="hljs-name">Tag</span>&gt;</span>&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Flag</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;guests.countryFlag&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">Flag</span> <span class="hljs-attr">of</span> $&#123;<span class="hljs-attr">guests.country</span>&#125;`&#125; /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Guest</span>&gt;</span>&#123;guests.fullName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Guest</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;numNights&#125; nights<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;status === &#x27;unconfirmed&#x27; &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;small&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">variation</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">as</span>=<span class="hljs-string">&#123;Link&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">checkin</span>/$&#123;<span class="hljs-attr">id</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          Check in</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;status === &#x27;checked-in&#x27; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">CheckoutButton</span> <span class="hljs-attr">bookingId</span>=<span class="hljs-string">&#123;id&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledTodayItem</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、Error-Boundaries"><a href="#三、Error-Boundaries" class="headerlink" title="三、Error Boundaries"></a>三、Error Boundaries</h3><p>⭕<code>npm i react-error-boundary</code></p><hr><h4 id="（1）为App提供错误边界处理"><a href="#（1）为App提供错误边界处理" class="headerlink" title="（1）为App提供错误边界处理"></a>（1）为App提供错误边界处理</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ErrorBoundary</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">FallbackComponent</span>=<span class="hljs-string">&#123;ErrorFallback&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onReset</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> window.location.replace(&#x27;/&#x27;)&#125;</span><br><span class="language-xml">    &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ErrorBoundary</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p><code>ErrorBoundary</code> 是一个<strong>错误边界</strong>组件，它捕获渲染树中的 JavaScript 错误，防止整个应用崩溃。错误边界只捕获<strong>渲染</strong>、<strong>生命周期</strong>和<strong>构造函数</strong>中的错误，不捕获事件处理器中的错误。</p><p>**<code>FallbackComponent=&#123;ErrorFallback&#125;</code>**：</p><ul><li><code>FallbackComponent</code> 指定了当应用中发生错误时要显示的组件。<code>ErrorFallback</code> 是一个自定义组件，用于在错误发生时为用户展示友好的信息。</li></ul><p>**<code>onReset=&#123;() =&gt; window.location.replace(&#39;/&#39;)&#125;</code>**：</p><ul><li><code>onReset</code> 是 <code>ErrorBoundary</code> 组件的一个回调函数，当用户尝试重置错误时触发。在这个例子中，当 <code>ErrorFallback</code> 中的“重试”按钮被点击时，页面将通过 <code>window.location.replace(&#39;/&#39;)</code> 重新加载到应用的根路径（<code>/</code>）。</li></ul><h4 id="（2）构建错误发生后的组件界面（ErrorFallBack）"><a href="#（2）构建错误发生后的组件界面（ErrorFallBack）" class="headerlink" title="（2）构建错误发生后的组件界面（ErrorFallBack）"></a>（2）构建错误发生后的组件界面（ErrorFallBack）</h4><p>由于这个组件是脱离组件树的，所以要放置GlobalStyle，否则样式不起作用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ErrorFallback</span>(<span class="hljs-params">&#123; error, resetErrorBoundary &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">GlogalStyles</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledErrorFallback</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>Someting went wrong 😢<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;error.message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;large&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;resetErrorBoundary&#125;</span>&gt;</span></span><br><span class="language-xml">            Try again</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledErrorFallback</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927195221035.png" alt="image-20240927195221035"></p><h3 id="四、BUG修整"><a href="#四、BUG修整" class="headerlink" title="四、BUG修整"></a>四、BUG修整</h3><h4 id="（1）toggle的矛盾"><a href="#（1）toggle的矛盾" class="headerlink" title="（1）toggle的矛盾"></a>（1）toggle的矛盾</h4><p>之前我们把检测是否在窗体外点击的默认情况下，将 <code>listenCapturing</code> 设置为 <code>true</code>，表示事件是在捕获阶段被处理的。但是这会造成一个问题是，点击某个窗体的toggle，再次点击无法实现关闭的功能。一下是两点需要修改的地方。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927200325930.png" alt="image-20240927200325930"></p><h4 id="（2）不存在的booking订单"><a href="#（2）不存在的booking订单" class="headerlink" title="（2）不存在的booking订单"></a>（2）不存在的booking订单</h4><p>当我们将bookingId随便修改一个值之后，会到达ErrorFallBack界面，显示booking是undifined，但是觉得这个错误描述的不好，于是修改一下错误界面：</p><p> <code>if (!booking) return &lt;Empty resourceName=&quot;booking&quot; /&gt;;</code></p><h4 id="（3）明暗模式的默认值"><a href="#（3）明暗模式的默认值" class="headerlink" title="（3）明暗模式的默认值"></a>（3）明暗模式的默认值</h4><p>在我们的电脑的控制台输入这行代码，会显示true or false。true代表电脑默认是使用的dark模式，false代表light，比如我的电脑就是。于是我们期望可以按照不同用户的电脑需求来使得他们刚进入APP时显示相应的mode。</p><p><code>window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches</code></p><p>所以可以把isDarkMode的默认值就设为上述代码。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [isDarkMode, setIsDarkMode] = <span class="hljs-title function_">useLocalStorageState</span>(<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="hljs-property">matches</span>,<br>  <span class="hljs-string">&#x27;isDarkMode&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>（4）功能展望</p><p>创建booking、编辑booking，创建餐厅，结账时到发票界面、可以选择打印。</p><h3 id="五、部署APP"><a href="#五、部署APP" class="headerlink" title="五、部署APP"></a>五、部署APP</h3><p>⭕<code>npm run build</code>  会生成一个dist包，这就是我们需要上传的包</p><hr><h4 id="（1）上传到Netlify"><a href="#（1）上传到Netlify" class="headerlink" title="（1）上传到Netlify"></a>（1）上传到Netlify</h4><h5 id="1、完善软件包"><a href="#1、完善软件包" class="headerlink" title="1、完善软件包"></a>1、完善软件包</h5><p>首先，我们需要在dist文件夹中新建一个文件：<code>Netlify.toml</code>，内容是：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">[[redirects]]<br><span class="hljs-keyword">from</span> = <span class="hljs-string">&quot;/*&quot;</span><br>to = <span class="hljs-string">&quot;/index.html&quot;</span><br>status = <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>然后再把它添加到项目的根目录下，这样如果需要修改项目再部署，这时候这个文件会自动添加到dist文件夹中，就不需要手动创建了。这是重定向配置，确保当用户直接访问某个页面（例如 <code>/dashboard</code> 或 <code>/about</code>）时，Netlify 会加载 <code>index.html</code>，从而让前端路由器处理这些路径。</p><h5 id="2、登陆上传项目"><a href="#2、登陆上传项目" class="headerlink" title="2、登陆上传项目"></a>2、登陆上传项目</h5><p>首先注册登陆，在主页选择manually部署，将整个dist文件夹上传。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927204130502.png" alt="image-20240927204130502"></p><p>上传后点击下图按钮，可以进入我们的APP界面，其中的URL如果分享给别人，他们就可以打开并看到我们的项目。</p><p><img src="C:/Users/姚姚/AppData/Roaming/Typora/typora-user-images/image-20240927204432552.png" alt="image-20240927204432552"></p><p>其中URL里的项目名可以自己修改。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927204716005.png" alt="image-20240927204716005"></p><h4 id="（2）部署到Github仓库"><a href="#（2）部署到Github仓库" class="headerlink" title="（2）部署到Github仓库"></a>（2）部署到Github仓库</h4><p>首先创建一个仓库，最好设为私有。生成一个token（但是我部署项目的时候没用到，不知道为什么）</p><p>在我们的项目中，先输入<code>git init</code></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927210019652.png" alt="image-20240927210019652"></p><p>然后会看到所有的文件都变成了绿色，表示已经被git控制，其中除开public和src文件夹外的其他文件在最右边都有一个字母U，表示未被跟踪，终端输入<code>git status</code>也可以查看这一点。</p><p>第一次上传&#x2F;每次修改文件后上传</p><p>输入：<code>git add -A</code>  将所有的变更（包括新增、修改和删除的文件）添加到暂存区</p><p>输入：<code>git commit -m &quot;your message&quot;</code> 提交变更，确保所有工作都被保存。</p><p>输入：<code>git remote add origin &quot;你的github仓库地址&quot;.git</code>  将本地仓库与远程 GitHub 仓库关联起来（只有第一次上传的时候需要）</p><p>输入：<code>git push -u origin main</code>   将本地的 <code>main</code> 分支推送到远程的 <code>origin</code> 仓库，并设置上游（upstream）跟踪关系。这意味着以后你可以只使用 <code>git push</code> 或 <code>git pull</code> 来更新该分支，而不需要每次都指定远程仓库和分支。</p><h4 id="（3）部署到Vercel"><a href="#（3）部署到Vercel" class="headerlink" title="（3）部署到Vercel"></a>（3）部署到Vercel</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927213206860.png" alt="image-20240927213206860" style="zoom:50%;" /><p>不知道为啥报错了，不管了!</p><h1 id="六、完结撒花"><a href="#六、完结撒花" class="headerlink" title="六、完结撒花"></a>六、完结撒花</h1><p>🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程22-实现较为完整的用户管理功能</title>
    <link href="/2024/09/26/react%E8%AF%BE%E7%A8%8B22-%E5%AE%9E%E7%8E%B0%E8%BE%83%E4%B8%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/09/26/react%E8%AF%BE%E7%A8%8B22-%E5%AE%9E%E7%8E%B0%E8%BE%83%E4%B8%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>本节负责实现身份验证和授权、用户注册、登陆登出、修改用户信息的功能</p><span id="more"></span><h3 id="一、身份验证和授权"><a href="#一、身份验证和授权" class="headerlink" title="一、身份验证和授权"></a>一、身份验证和授权</h3><h4 id="（1）-Authentication"><a href="#（1）-Authentication" class="headerlink" title="（1） Authentication"></a>（1） <strong>Authentication</strong></h4><blockquote><p>身份验证是确认用户的身份的过程，目的是验证用户是谁。</p></blockquote><p>首先我们在Authentication中新建了一个user，然后到API DOCS中的user management中寻找<code>Log in with Email/Password</code>这一段代码，copy下来放置进apiAuth中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">&#123; email, password &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">signInWithPassword</span>(&#123;<br>    email,<br>    password,<br>  &#125;);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后可以新建一个useLogin钩子，得到mutation函数来处理登陆。可以看出onSuccess函数可以得到data，于是可以记录到控制台查看信息。</p><p>调用 <code>queryClient.setQueryData([&#39;user&#39;], user.user);</code>：将登录成功的用户数据缓存到 <code>[&#39;user&#39;]</code> 查询中，这样应用的其他部分可以使用这个用户信息。（user是object，包含session和user，而我们想要的只是user：用户）</p><p>replace是为了替换浏览记录。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLogin</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: login, isLoading &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">&#123; email, password &#125;</span>) =&gt;</span> <span class="hljs-title function_">loginApi</span>(&#123; email, password &#125;),<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> &#123;<br>      queryClient.<span class="hljs-title function_">setQueryData</span>([<span class="hljs-string">&#x27;user&#x27;</span>], user.<span class="hljs-property">user</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);<br>      <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/dashboard&#x27;</span>，&#123;<span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>&#125;);<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      toast.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Provided email or password are incorrect&#x27;</span>);<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; login, isLoading &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用 <code>supabase.auth.signInWithPassword(&#123; email, password &#125;)</code> 时，<code>Supabase</code> 会将你提供的 <code>email</code> 和 <code>password</code> 发送到它的身份验证服务。</p><p><code>Supabase</code> 在后台会将提供的 <code>email</code> 和 <code>password</code> 与其数据库中存储的用户信息进行比较。验证流程包括：</p><ul><li><strong>查找用户</strong>：<code>Supabase</code> 会在其用户数据库中根据提供的 <code>email</code> 查找相应的用户记录。</li><li><strong>验证密码</strong>：找到用户后，<code>Supabase</code> 会对传入的 <code>password</code> 进行加密（通常是哈希处理），然后与数据库中存储的哈希值进行比较。密码在存储时是经过哈希加密的，数据库不直接存储明文密码。</li></ul><p>验证结果：</p><ul><li><strong>成功</strong>：如果邮箱存在且密码匹配，<code>Supabase</code> 会返回一个包含用户数据的响应（即 <code>data</code> 对象）。这表示用户身份验证成功，用户可以登录。</li><li><strong>失败</strong>：如果邮箱不存在或者密码不正确，<code>Supabase</code> 会返回一个 <code>error</code> 对象，其中包含错误信息（例如 “Invalid login credentials”）。</li></ul><p>我们会发现登陆成功后，在浏览器storage出现了token。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926145909054.png" alt="image-20240926145909054"></p><h4 id="（2）Authorization"><a href="#（2）Authorization" class="headerlink" title="（2）Authorization"></a>（2）Authorization</h4><blockquote><p>授权是在身份验证成功后，确定用户对系统资源或操作的访问权限的过程。</p></blockquote><p>建立一个<code>ProtectedRoute</code>组件，并在<code>App.jsx</code>的Route中把<code>Applayout</code>组件用它包裹起来。由于其他界面都在<code>Applayout</code>中被渲染，所以用户必须通过身份验证，才能进入任何在 <code>AppLayout</code> 中渲染的页面。（代码简洁，性能优化，更好的维护性）</p><p><code>ProtectedRoute</code> 是一个自定义的路由组件，主要职责是限制对某些路由的访问，用来保护一组路由，通常是检查用户是否登录或是否有访问权限。</p><h5 id="1、从supabase中获取用户的信息"><a href="#1、从supabase中获取用户的信息" class="headerlink" title="1、从supabase中获取用户的信息"></a>1、从supabase中获取用户的信息</h5><blockquote><p><strong>会话</strong>（Session）是指在一段时间内，用户与系统之间的持续交互状态或连接。会话管理是现代应用程序和服务中的重要机制，用于跟踪用户的身份和状态。具体来说，会话与身份验证和授权密切相关。会话通常在用户登录或访问某个系统时开始，并在用户注销或超时后结束（详见文末）</p></blockquote><p>通过检查用户的当前会话，从本地内存中获取登录用户的信息。如果没有会话（即用户未登录），返回 <code>null</code>；如果会话有效，则获取并返回用户信息。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getCurrentUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: session &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">getSession</span>();<br>  <span class="hljs-keyword">if</span> (!session.<span class="hljs-property">session</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">getUser</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br><br>  <span class="hljs-keyword">return</span> data?.<span class="hljs-property">user</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、useUser-js"><a href="#2、useUser-js" class="headerlink" title="2、useUser.js"></a>2、useUser.js</h5><p>获取当前用户并将其存储到缓存中，这样就不用每次都重新下载。（获取isAuthenticated）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; isLoading, <span class="hljs-attr">data</span>: user &#125; = <span class="hljs-title function_">useQuery</span>(&#123;<br>    <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;user&#x27;</span>],<br>    <span class="hljs-attr">queryFn</span>: getCurrentUser,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; isLoading, user, <span class="hljs-attr">isAuthenticated</span>: user?.<span class="hljs-property">role</span> === <span class="hljs-string">&#x27;authenticated&#x27;</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>下图为登陆后React Query工具里得到的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926153141752.png" alt="image-20240926153141752"></p><h5 id="3、在ProtectRouter中来验证是否需要重定向到login界面"><a href="#3、在ProtectRouter中来验证是否需要重定向到login界面" class="headerlink" title="3、在ProtectRouter中来验证是否需要重定向到login界面"></a>3、在ProtectRouter中来验证是否需要重定向到login界面</h5><blockquote><p><code>navigate</code> 并<strong>不限于</strong>回调函数或 <code>useEffect</code> 中使用，但这些场景是最常见和安全的使用方式</p><p>不推荐在组件首次渲染的时候使用navigate。详见Router专题</p></blockquote><ol><li>得到 <code>isAuthenticated</code> </li><li>如果没有登陆就重定向到login界面（<strong>注意是在加载完成后检验是否认证！！！</strong>）</li><li>如果还在加载就返回一个加载指示器</li><li>如果已经登陆就渲染App</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProtectedRoute</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">const</span> &#123; isLoading, isAuthenticated &#125; = <span class="hljs-title function_">useUser</span>();<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (!isAuthenticated &amp;&amp; !isLoading) <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>    &#125;,<br>    [isAuthenticated, isLoading, navigate]<br>  );<br><br>  <span class="hljs-keyword">if</span> (isLoading)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FullPage</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Spinner</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">FullPage</span>&gt;</span></span><br>    );<br><br>  <span class="hljs-keyword">if</span> (isAuthenticated) <span class="hljs-keyword">return</span> children;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）Log-out"><a href="#（3）Log-out" class="headerlink" title="（3）Log out"></a>（3）Log out</h4><h5 id="1、apiAuth"><a href="#1、apiAuth" class="headerlink" title="1、apiAuth"></a>1、apiAuth</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">&#123; email, password &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">signOut</span>();<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、useLogout"><a href="#2、useLogout" class="headerlink" title="2、useLogout"></a>2、useLogout</h5><p><code>queryClient.removeQueries()</code>：清除 <code>react-query</code> 缓存中的所有数据，确保用户退出后，应用不再保留之前的查询数据。</p><p><code>navigate(&#39;/login&#39;, &#123; replace: true &#125;)</code>：将用户重定向到登录页面，并且使用 <code>replace: true</code> 替换当前的历史记录，这样用户在点击“返回”按钮时不会回到之前已登出的页面。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLogout</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: logout, isLoading &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: logoutApi,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      queryClient.<span class="hljs-title function_">removeQueries</span>();<br>      <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, &#123; <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;);<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; logout, isLoading &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、Logout组件"><a href="#3、Logout组件" class="headerlink" title="3、Logout组件"></a>3、Logout组件</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Logout</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; logout, isLoading &#125; = <span class="hljs-title function_">useLogout</span>();<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ButtonIcon</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isLoading&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;logout&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;!isLoading ? <span class="hljs-tag">&lt;<span class="hljs-name">HiArrowRightOnRectangle</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">SpinnerMini</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ButtonIcon</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、实现注册功能"><a href="#二、实现注册功能" class="headerlink" title="二、实现注册功能"></a>二、实现注册功能</h3><blockquote><p>在这个APP中，逻辑是只有登陆成功后才能注册其他用户。</p></blockquote><h4 id="（1）创建注册表单"><a href="#（1）创建注册表单" class="headerlink" title="（1）创建注册表单"></a>（1）创建注册表单</h4><h5 id="1、需要用到的工具"><a href="#1、需要用到的工具" class="headerlink" title="1、需要用到的工具"></a>1、需要用到的工具</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; register, formState, getValues, handleSubmit &#125; = <span class="hljs-title function_">useForm</span>();<br><span class="hljs-keyword">const</span> &#123; errors &#125; = formState;<br></code></pre></td></tr></table></figure><h5 id="2、验证信息"><a href="#2、验证信息" class="headerlink" title="2、验证信息"></a>2、验证信息</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;fullName&#x27;</span>, &#123; <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is required&#x27;</span> &#125;)&#125;<br><br>&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;email&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is required&#x27;</span>,<br>   <span class="hljs-attr">pattern</span>: &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-regexp">/\S+@\S+\.\S+/</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Please provide a valid email address&#x27;</span>,<br>   &#125;,<br>&#125;)&#125;<br><br>&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;password&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is required&#x27;</span>,<br>   <span class="hljs-attr">minLength</span>: &#123;<br>   <span class="hljs-attr">value</span>: <span class="hljs-number">8</span>,<br>       <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Password needs a minimum of 8 characters&#x27;</span>,<br>   &#125;,<br>&#125;)&#125;<br><br>&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;passwordConfirm&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is required&#x27;</span>,<br>   <span class="hljs-attr">validate</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span><br>       value === <span class="hljs-title function_">getValues</span>().<span class="hljs-property">password</span> || <span class="hljs-string">&#x27;Passwords need to match&#x27;</span>,<br>&#125;)&#125;<br></code></pre></td></tr></table></figure><h5 id="3、如何提交表单？错误如何展示"><a href="#3、如何提交表单？错误如何展示" class="headerlink" title="3、如何提交表单？错误如何展示?"></a>3、如何提交表单？错误如何展示?</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Form</span> onSubmit=&#123;<span class="hljs-title function_">handleSubmit</span>(onSubmit)&#125;&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FormRow</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Full name&quot;</span> <span class="hljs-attr">error</span>=<span class="hljs-string">&#123;errors?.fullName?.message&#125;</span>&gt;</span>  &#123;/以此类推/&#125;</span><br></code></pre></td></tr></table></figure><h4 id="（2）实现把用户注册到supabase"><a href="#（2）实现把用户注册到supabase" class="headerlink" title="（2）实现把用户注册到supabase"></a>（2）实现把用户注册到supabase</h4><p>伤到了，谁懂，supabase界面全英文，看到有一个警告，但是看不懂也没当回事，但是验证创建user的时候就出问题了。原来现在需要打开自定义SMTP的开关才能用随便的邮箱去注册用户了。在设置-Authentication里面。这个表单输入的信息要是真实的。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926172620751.png" alt="image-20240926172620751"></p><p>否则就会报错：Error: Email address “<a href="mailto:&#50;&#x37;&#x36;&#56;&#50;&#x36;&#x30;&#55;&#53;&#x34;&#x40;&#114;&#x72;&#46;&#x63;&#x6f;&#x6d;">&#50;&#x37;&#x36;&#56;&#50;&#x36;&#x30;&#55;&#53;&#x34;&#x40;&#114;&#x72;&#46;&#x63;&#x6f;&#x6d;</a>“ cannot be used as it is not authorized    at Object.signup [as mutationFn] </p><p>但是这还没有结束，下一小节是如何实现邮箱验证。supabase你关闭SMTP发送的功能好巧不巧，我现在要用到。。。💔</p><h5 id="1、apiAuth-1"><a href="#1、apiAuth-1" class="headerlink" title="1、apiAuth"></a>1、apiAuth</h5><p>传递给signUp的object中可以包含一个可选项，因为只有email和password是必需项，所以名字可以通过这样的方式传递进去，同时可以再传一个用户的头像。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">signup</span>(<span class="hljs-params">&#123; fullName, email, password &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">signUp</span>(&#123;<br>    email,<br>    password,<br>    <span class="hljs-attr">options</span>: &#123; <span class="hljs-attr">data</span>: &#123; fullName, <span class="hljs-attr">avatar</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125; &#125;,<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、useSignUp"><a href="#2、useSignUp" class="headerlink" title="2、useSignUp"></a>2、useSignUp</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useMutation, useQueryClient &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tanstack/react-query&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; signup <span class="hljs-keyword">as</span> signupApi &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../services/apiAuth&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> toast <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-hot-toast&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useSignup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: signup, isLoading &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: signupApi,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> &#123;<br>      toast.<span class="hljs-title function_">success</span>(<br>        <span class="hljs-string">&quot;Account successfully created!Please verify the new account from the user&#x27;s email address&quot;</span><br>      );<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      toast.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">message</span>);<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; signup, isLoading &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、onSubmit"><a href="#3、onSubmit" class="headerlink" title="3、onSubmit"></a>3、onSubmit</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params">&#123; fullName, email, password &#125;</span>) &#123;<br>  <span class="hljs-title function_">signup</span>(&#123; fullName, email, password &#125;, &#123; <span class="hljs-attr">onSettled</span>: reset &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里reset会引发问题。jonas还没改。</p><h5 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h5><ul><li>在Authentication-URL Configuration中的两个URL栏，分别填入了</li></ul><p>(<a href="http://localhost:5173/dashboard">http://localhost:5173/dashboard</a>)   和（<a href="http://localhost:5173）我不知道是干嘛用的">http://localhost:5173）我不知道是干嘛用的</a></p><ul><li><p>“Temp Mail”（临时邮件）是指一种可以临时使用的电子邮件服务，允许用户生成一个临时的电子邮件地址。用户可以使用这个地址接收邮件，而不需要使用自己的真实邮箱。</p><p>地址：<a href="https://temp-mail.org/en/">https://temp-mail.org/en/</a>          界面：（上面生成邮箱，下面是收件箱）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926192815075.png" alt="image-20240926192815075"></p><p>由于我们打开了SMTP的验证要求，所以用户在注册后都会在邮箱中收到一封需要验证的邮件，否则还是不能用这个邮箱登陆。</p><h4 id="（3）如何配置Gmail解决supabase停止发送邮件"><a href="#（3）如何配置Gmail解决supabase停止发送邮件" class="headerlink" title="（3）如何配置Gmail解决supabase停止发送邮件"></a>（3）如何配置Gmail解决supabase停止发送邮件</h4><p>这里是这个紧急变革的讨论区<a href="https://github.com/orgs/supabase/discussions/29370">https://github.com/orgs/supabase/discussions/29370</a></p><p>咱们也是跟supabase的维护者对上话了😂能写进简历里吗</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927091045026.png" alt="image-20240927091045026" style="zoom:80%;" /><p>一开始我以为只有那些专门的邮箱发送服务商才可以，于是打算使用看起来很靠谱的Resend，但是由于它需要自己有个域名，甚至去华为买了一个（首年1元的）域名。。。</p><p>但是后来发现Gmail居然也可以？！</p><h5 id="1、设置自定义SMTP"><a href="#1、设置自定义SMTP" class="headerlink" title="1、设置自定义SMTP"></a>1、设置自定义SMTP</h5><p>在supabase的设置中找到Auth，下滑找到这个地方，首先点击<em>here</em>，进入设置邮箱limit的地方，把第一条设置改成3以上（每小时能够发的邮件数）。下面的email和name就相应填，email一定要填gmail邮箱，name可以随意。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-27%20090706.png" alt="img" style="zoom: 50%;" /><p>下面的HOST和POST number就是smtp.gmail.com和465.</p><p><strong>Username需要再填一次邮箱地址，不是随便填的！！！！！！！！！！</strong></p><p><strong>密码也不是Gmail的登陆密码</strong>，而是需要专门的密码，在Gmail账户中打开两步验证后找到设置应用专用密码，然后生成一个，注意<strong>生成后只会出现一次</strong>，需要立马复制下来。</p><p>这里每次更改密码再回来会发现没有改变，这也是我去问supabase维护者的问题，但是其实没有影响的。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927092904298.png" alt="image-20240927092904298" style="zoom:50%;" /><h5 id="2、如果遇到问题怎么获得详细的错误原因？"><a href="#2、如果遇到问题怎么获得详细的错误原因？" class="headerlink" title="2、如果遇到问题怎么获得详细的错误原因？"></a>2、如果遇到问题怎么获得详细的错误原因？</h5><p>在我们supabase的项目sidebar中有一个是<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927093243940.png" alt="image-20240927093243940"></p><p>在里面可以找到关于Auth的所有日志，比如当SMTP没设置好就是这个错误：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927093406787.png" alt="image-20240927093406787"></p><p>点进去会有详细的信息。</p><h5 id="3、成功！🥳"><a href="#3、成功！🥳" class="headerlink" title="3、成功！🥳"></a>3、成功！🥳</h5><p>经过一番不懈的努力，我终于实现了邮箱验证的功能，为了确认真的可以收到邮件，我使用了Temp emial的随机地址<a href="mailto:&#x77;&#x61;&#x6d;&#x61;&#99;&#x65;&#120;&#x37;&#55;&#x35;&#64;&#x65;&#120;&#x77;&#x65;&#109;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#x77;&#x61;&#x6d;&#x61;&#99;&#x65;&#120;&#x37;&#55;&#x35;&#64;&#x65;&#120;&#x77;&#x65;&#109;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>（但是只要你不更换，每次进去都会是这个地址，所以很方便），并且在收件箱中真的看见了邮件：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-27%20092114.png" alt="img"></p><h4 id="（4）确保安全性"><a href="#（4）确保安全性" class="headerlink" title="（4）确保安全性"></a>（4）确保安全性</h4><p>修改Policy，否则未登录的用户也是可以访问到这些数据库的信息的。</p><h3 id="三、构建Header"><a href="#三、构建Header" class="headerlink" title="三、构建Header"></a>三、构建Header</h3><p>这是现在的Header：<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927093914593.png" alt="image-20240927093914593"></p><p>我们在注册用户的函数中，上传了除开email和密码的可选项，其中包含了avatar。这些信息可以在React Query工具里看到。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926224628775.png" alt="image-20240926224628775"></p><p>我们的Header包含头像、还有两个图标。其中UserAvatar.jsx：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">UserAvatar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; user &#125; = <span class="hljs-title function_">useUser</span>();<br>  <span class="hljs-keyword">const</span> &#123; fullName, avatar &#125; = user.<span class="hljs-property">user_metadata</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledUserAvatar</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;avatar</span> || &#x27;<span class="hljs-attr">default-user.jpg</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">Avatar</span> <span class="hljs-attr">of</span> $&#123;<span class="hljs-attr">fullName</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;fullName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledUserAvatar</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、实现更改密码和头像"><a href="#四、实现更改密码和头像" class="headerlink" title="四、实现更改密码和头像"></a>四、实现更改密码和头像</h3><h4 id="（1）准备工作"><a href="#（1）准备工作" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h4><h5 id="1、在storage中建立自己的头像库，命名为avatars"><a href="#1、在storage中建立自己的头像库，命名为avatars" class="headerlink" title="1、在storage中建立自己的头像库，命名为avatars"></a>1、在storage中建立自己的头像库，命名为avatars</h5><h5 id="2、添加Policy"><a href="#2、添加Policy" class="headerlink" title="2、添加Policy"></a>2、添加Policy</h5><p>选择这一条，然后为auth用户添加所有的操作权限</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927100812071.png" alt="image-20240927100812071" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927100757718.png" alt="image-20240927100757718" style="zoom: 50%;" /><h5 id="3、得到avatars中图片的URL路径"><a href="#3、得到avatars中图片的URL路径" class="headerlink" title="3、得到avatars中图片的URL路径"></a>3、得到avatars中图片的URL路径</h5><p>随便在其中上传一张图片，点击get url得到其URL路径，在后续的apiAuth中修改avatar的函数中需要用到。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927101356754.png" alt="image-20240927101356754"></p><h4 id="（2）建立更新用户信息的函数"><a href="#（2）建立更新用户信息的函数" class="headerlink" title="（2）建立更新用户信息的函数"></a>（2）建立更新用户信息的函数</h4><h5 id="1、函数参数"><a href="#1、函数参数" class="headerlink" title="1、函数参数"></a>1、函数参数</h5><p>函数updateCurrentUser接收一个object，包含密码、全名和头像。</p><p><code>export async function updateCurrentUser(&#123; password, fullName, avatar &#125;)</code></p><h5 id="2、更新password或fullName"><a href="#2、更新password或fullName" class="headerlink" title="2、更新password或fullName"></a>2、更新password或fullName</h5><p>之所以可以把更新这些信息的函数笼统地弄成一个，是因为修改密码和修改全名并不在一个表格中，所以可以条件性地得到updateData。记住fullName和avatar在注册的时候就是通过options中的data关键字注册的，在传递要更新的内容的时候，也要把它们包裹在一个对象中传递。</p><p>在没有上传avatar的时候，就可以结束了，因为下面是有关更新avatar的内容。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//更新密码或者全名</span><br><span class="hljs-keyword">let</span> updateData;<br><span class="hljs-keyword">if</span> (password) updateData = &#123; password &#125;;<br><span class="hljs-keyword">if</span> (fullName) updateData = &#123; <span class="hljs-attr">data</span>: &#123; fullName &#125; &#125;;<br><br><span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">updateUser</span>(updateData);<br><br><span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br><span class="hljs-keyword">if</span> (!avatar) <span class="hljs-keyword">return</span> data;<br></code></pre></td></tr></table></figure><h5 id="3、上传avatar"><a href="#3、上传avatar" class="headerlink" title="3、上传avatar"></a>3、上传avatar</h5><p>自定义filename，使用上面的操作返回的用户信息可以得到用户id，使用random()函数连接，放置图像名字重复。此处不需要返回data,这里是直接把图像上传到avatars库中。下面好更新。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> fileName = <span class="hljs-string">`avatar-<span class="hljs-subst">$&#123;data.user.id&#125;</span>-<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random()&#125;</span>`</span>;<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">error</span>: storageError &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">storage</span><br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;avatars&#x27;</span>)<br>    .<span class="hljs-title function_">upload</span>(fileName, avatar);<br><br>  <span class="hljs-keyword">if</span> (storageError) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(storageError.<span class="hljs-property">message</span>);<br></code></pre></td></tr></table></figure><h5 id="4、在用户信息中更新avatar"><a href="#4、在用户信息中更新avatar" class="headerlink" title="4、在用户信息中更新avatar"></a>4、在用户信息中更新avatar</h5><p>得到上面的URL中，把相应信息做一个替换，就可以更新了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx">  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: updatedUser, <span class="hljs-attr">error</span>: error2 &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">updateUser</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">avatar</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;supabaseUrl&#125;</span>/storage/v1/object/public/avatars/<span class="hljs-subst">$&#123;fileName&#125;</span>`</span>,<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">if</span> (error2) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error2.<span class="hljs-property">message</span>);<br><br>  <span class="hljs-keyword">return</span> updatedUser;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）useUpdate"><a href="#（3）useUpdate" class="headerlink" title="（3）useUpdate"></a>（3）useUpdate</h4><p>onSuccess中，<code>queryClient.setQueryData([&#39;user&#39;], user);</code><strong>查询参数必须是数组</strong>，否则就会报下图的错误。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useUpdateUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: updateUser, <span class="hljs-attr">isLoading</span>: isUpdating &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: updateCurrentUser,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">&#123;user&#125;</span>) =&gt;</span> &#123;<br>      toast.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;User account successfully updated&#x27;</span>);<br>      queryClient.<span class="hljs-title function_">setQueryData</span>([<span class="hljs-string">&#x27;user&#x27;</span>], user);<br>      queryClient.<span class="hljs-title function_">invalidateQueries</span>(&#123;<br>        <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;user&#x27;</span>],<br>      &#125;);<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> toast.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">message</span>),<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; isUpdating, updateUser &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927105001683.png" alt="image-20240927105001683"></p><p>原因是：</p><ul><li><strong>数据结构</strong>：React Query 在内部维护查询缓存时，期望查询键（比如 <code>[&#39;user&#39;]</code>）是一个数组，因为数组可以包含多个层次的键名和参数。直接使用字符串 <code>&#39;user&#39;</code> 会导致它无法正确处理查询数据的结构。</li><li><strong>查询数据格式</strong>：当你使用 <code>queryClient.setQueryData</code> 设置数据时，它希望能在内部维护一个对象结构。如果你只传递了一个字符串，它无法创建或修改必要的内部属性。</li></ul><h3 id="？-涉及到的知识点详细分析（COPY）"><a href="#？-涉及到的知识点详细分析（COPY）" class="headerlink" title="？.涉及到的知识点详细分析（COPY）"></a>？.涉及到的知识点详细分析（COPY）</h3><h4 id="（1）session（会话）"><a href="#（1）session（会话）" class="headerlink" title="（1）session（会话）"></a>（1）session（会话）</h4><p><strong>会话</strong>是用户与系统之间的持续交互状态，它保存用户的身份和状态信息，以便在多次请求中维持用户的登录状态和操作权限。在你提供的代码中，<code>session</code> 是 Supabase 通过 JWT 来管理的会话，它记录了用户的登录状态，并用来确定用户是否有权限访问某些资源。</p><h5 id="1-会话的定义："><a href="#1-会话的定义：" class="headerlink" title="1. 会话的定义："></a>1. <strong>会话的定义</strong>：</h5><ul><li>会话是用户在一段时间内与应用程序或服务器之间进行的交互过程。它可以持续几秒钟到数小时，甚至更久，取决于会话的管理方式和应用程序的配置。</li><li>会话通常在用户登录或访问某个系统时开始，并在用户注销或超时后结束。</li></ul><h5 id="2-会话的作用："><a href="#2-会话的作用：" class="headerlink" title="2. 会话的作用："></a>2. <strong>会话的作用</strong>：</h5><ul><li><strong>维持用户的身份验证状态</strong>：会话允许系统在多次请求之间记住用户的身份。例如，用户登录后，会话用于保存登录状态，以免用户每次访问页面时都需要重新登录。</li><li><strong>存储用户的临时信息</strong>：会话可以用来在不同页面间共享用户的临时数据，例如购物车信息、用户首选项等。</li><li><strong>确保安全性</strong>：通过会话，系统可以跟踪和验证用户的操作，防止未经授权的访问。</li></ul><h5 id="3-会话是如何工作的："><a href="#3-会话是如何工作的：" class="headerlink" title="3. 会话是如何工作的："></a>3. <strong>会话是如何工作的</strong>：</h5><ul><li>当用户登录系统时，服务器会为该用户创建一个唯一的会话 ID，并将会话信息（如用户身份、权限等）与该会话 ID 关联。</li><li>会话 ID 通常通过 <strong>Cookies</strong>、<strong>Token</strong>（例如 JWT，JSON Web Token），或其他机制（如 URL 参数）存储在客户端。</li><li>在每次用户发送请求时，客户端会将会话 ID 传递给服务器，服务器根据这个 ID 查找与之关联的会话数据，确认用户的身份和权限。</li></ul><h5 id="4-会话的生命周期："><a href="#4-会话的生命周期：" class="headerlink" title="4. 会话的生命周期："></a>4. <strong>会话的生命周期</strong>：</h5><ul><li><strong>创建</strong>：会话通常在用户成功登录后由服务器创建，分配一个唯一的会话 ID。</li><li><strong>维持</strong>：在会话存续期间，用户的每次请求都使用同一会话 ID，服务器根据这个 ID 确认用户身份。</li><li><strong>销毁</strong>：会话可以通过用户主动注销、会话超时（例如长时间不活动）或服务器强制结束而销毁。当会话销毁后，用户需要重新登录以继续访问系统。</li></ul><h5 id="5-会话在前端和后端的角色："><a href="#5-会话在前端和后端的角色：" class="headerlink" title="5. 会话在前端和后端的角色："></a>5. <strong>会话在前端和后端的角色</strong>：</h5><ul><li><strong>前端</strong>：前端通过 Cookies 或 Local Storage 来存储会话 ID 或 Token。在每次向服务器发出请求时，前端会自动携带这些凭据来验证用户身份。</li><li><strong>后端</strong>：后端负责生成和管理会话，保存会话相关的用户状态、信息，并在每次请求时验证用户的会话是否有效。</li></ul><h5 id="6-会话与-Token（如-JWT）的关系："><a href="#6-会话与-Token（如-JWT）的关系：" class="headerlink" title="6. 会话与 Token（如 JWT）的关系："></a>6. <strong>会话与 Token（如 JWT）的关系</strong>：</h5><ul><li><strong>传统会话</strong>：会话 ID 由服务器生成，并且服务器需要存储会话信息。这种方式通常需要维护一个会话存储，适用于基于服务器的应用程序。</li><li><strong>Token（如 JWT）</strong>：JWT 是一种常用的无状态会话机制，其中用户的身份信息通过加密后保存在 Token 中。服务器不需要存储会话信息，而是通过验证和解码 Token 来识别用户。</li></ul><h5 id="7-Supabase-中的会话："><a href="#7-Supabase-中的会话：" class="headerlink" title="7. Supabase 中的会话："></a>7. <strong>Supabase 中的会话</strong>：</h5><p>在你使用的 <code>Supabase</code> 中，会话是通过 <strong>JWT（JSON Web Token）</strong> 进行管理的。当用户登录时，<code>Supabase</code> 会生成一个 JWT，并将其保存在客户端。每次请求都会带上这个 Token，以证明用户的身份。</p><ul><li><code>supabase.auth.getSession()</code>：该方法用于获取当前会话信息（包括 JWT）。如果用户当前登录了，这个会话就会返回有效的 JWT。</li><li><code>supabase.auth.getUser()</code>：在有有效会话时，使用该方法获取当前会话中的用户详细信息。</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程21-完善table的显示功能以及booking的状态更改</title>
    <link href="/2024/09/25/react%E8%AF%BE%E7%A8%8B21-%E5%AE%8C%E5%96%84table%E7%9A%84%E6%98%BE%E7%A4%BA%E5%8A%9F%E8%83%BD%E4%BB%A5%E5%8F%8Abooking%E7%9A%84%E7%8A%B6%E6%80%81%E6%9B%B4%E6%94%B9/"/>
    <url>/2024/09/25/react%E8%AF%BE%E7%A8%8B21-%E5%AE%8C%E5%96%84table%E7%9A%84%E6%98%BE%E7%A4%BA%E5%8A%9F%E8%83%BD%E4%BB%A5%E5%8F%8Abooking%E7%9A%84%E7%8A%B6%E6%80%81%E6%9B%B4%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<p>本节实现在cabin、booking界面的过滤、排序、分页的功能，并实现修改booking状态。</p><span id="more"></span><h3 id="一、在客户端实现过滤cabin（可重用，排序功能）"><a href="#一、在客户端实现过滤cabin（可重用，排序功能）" class="headerlink" title="一、在客户端实现过滤cabin（可重用，排序功能）"></a>一、在客户端实现过滤cabin（可重用，排序功能）</h3><p>添加一个按钮，实现查看全部&#x2F;有折扣的&#x2F;没有折扣的cabin。并且在选择后需要相应地改变url。</p><p>新建了CabinTableOperation组件，把它代替之前的文本，放在标题的右边。这个组件包含Filter组件，这就是我们要实现的过滤功能。</p><h4 id="（1）创建Filter"><a href="#（1）创建Filter" class="headerlink" title="（1）创建Filter"></a>（1）创建Filter</h4><p>🔥《10.28》修改bug：每次过滤后要把page设置为1，否则会访问不存在的页数的数据</p><hr><h5 id="1、Filter-jsx"><a href="#1、Filter-jsx" class="headerlink" title="1、Filter.jsx"></a>1、Filter.jsx</h5><p>在这个组件里，我们要用到useParams Hook。（刚好之前不太懂）</p><p>Filter接收两个prop，一个是filterField，一个是options数组。</p><ul><li>filterField负责被设置成URL中查询参数的键，并将其值设置为value，随后<code>setSearchParams</code>函数更新查询参数对象，使得URL反映出修改后的查询参数</li><li>options是一个对象数组，含有value和label两个属性。value就是传递给handleClick参数的键值，label是过滤器显示在屏幕上的文本。</li></ul><p>根据传递的options数组来map出FilterButton，使得代码更具有重用性。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Filter</span>(<span class="hljs-params">&#123; filterField, options &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<br>  <span class="hljs-keyword">const</span> currentFilter = searchParams.<span class="hljs-title function_">get</span>(filterField) || options.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>).<span class="hljs-property">value</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">value</span>) &#123;<br>    searchParams.<span class="hljs-title function_">set</span>(filterField, value);<br>    <span class="hljs-title function_">setSearchParams</span>(searchParams);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledFilter</span>&gt;</span></span><br><span class="language-xml">      &#123;options.map((option) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">FilterButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleClick(option.value)&#125;</span><br><span class="language-xml">          key=&#123;option.value&#125;</span><br><span class="language-xml">          active=&#123;option.value === currentFilter&#125;</span><br><span class="language-xml">          disabled=&#123;option.value === currentFilter&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;option.label&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">FilterButton</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledFilter</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、CabinTableOperations-jsx"><a href="#2、CabinTableOperations-jsx" class="headerlink" title="2、CabinTableOperations.jsx"></a>2、CabinTableOperations.jsx</h5><p>这个组件的目的就是给Filter一个造型上的作用，并且把相应的参数传递</p><h5 id="3、CabinTable-jsx"><a href="#3、CabinTable-jsx" class="headerlink" title="3、CabinTable.jsx"></a>3、CabinTable.jsx</h5><p>这个组件之前的作用就是呈现出cabin table的header和下面的列表。但是由于我们想要加入过滤的功能，所以显示的cabin列表就要随着过滤器而改变。而方法就是通过读取URL上的查询参数的值，来条件更新应该展示的cabins。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [searchParams] = <span class="hljs-title function_">useSearchParams</span>();<br><br><span class="hljs-keyword">const</span> filterValue = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;discount&#x27;</span>) || <span class="hljs-string">&#x27;all&#x27;</span>;<br><br><span class="hljs-keyword">let</span> filteredCabins;<br><span class="hljs-keyword">if</span> (filterValue === <span class="hljs-string">&#x27;all&#x27;</span>) filteredCabins = cabins;<br><span class="hljs-keyword">if</span> (filterValue === <span class="hljs-string">&#x27;no-discount&#x27;</span>)<br>    filteredCabins = cabins.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">cabin</span>) =&gt;</span> cabin.<span class="hljs-property">discount</span> === <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (filterValue === <span class="hljs-string">&#x27;with-discount&#x27;</span>)<br>    filteredCabins = cabins.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">cabin</span>) =&gt;</span> cabin.<span class="hljs-property">discount</span> &gt; <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这里的要点有一个是：当初次进入cabin界面的时候，我们想要展示所有的cabin（all），但是此时查询参数是空的，所以就可以通过||短路运算符，使得默认值是“all”。</p><h4 id="（2）实现排序功能"><a href="#（2）实现排序功能" class="headerlink" title="（2）实现排序功能"></a>（2）实现排序功能</h4><h5 id="1、CabinTableOperations传递给sortBy的参数"><a href="#1、CabinTableOperations传递给sortBy的参数" class="headerlink" title="1、CabinTableOperations传递给sortBy的参数"></a>1、CabinTableOperations传递给sortBy的参数</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">options=&#123;[<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;name-asc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by name (A-Z)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;name-desc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by name (Z-A)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;regularPrice-asc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by Price (low first)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;regularPrice-desc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by Price (high first)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;maxCapacity-asc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by capacity (low first)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;maxCapacity-desc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by capacity (high first)&#x27;</span> &#125;,<br>]&#125;<br></code></pre></td></tr></table></figure><p>这就是排序选项中的value和label数组，注意value的前值需要和cabin的属性保持一致。asc表示正序，desc表示倒序。</p><h5 id="2、sortBy（可重用）"><a href="#2、sortBy（可重用）" class="headerlink" title="2、sortBy（可重用）"></a>2、sortBy（可重用）</h5><p>这个组件的功能和刚刚的Filter很像，也是把相应的value设置到查询参数中，使得CabinTable可以读取并获得相应的参数。这个不用传递键的名字，因为不管谁用，键的名字都是“sortBy”。在这个函数中得到键值并传递给Select组件，是为了传递正在被选中的value的参数。然后把onChange函数传递过去，使得改变被选元素时改变查询参数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SortBy</span>(<span class="hljs-params">&#123; options &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<br>  <span class="hljs-keyword">const</span> sortBy = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sortBy&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    searchParams.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;sortBy&#x27;</span>, e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-title function_">setSearchParams</span>(searchParams);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;options&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;white&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;sortBy&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、Select-jsx"><a href="#3、Select-jsx" class="headerlink" title="3、Select.jsx"></a>3、Select.jsx</h5><p>⭐<code>&quot;...props&quot;</code>接收所有剩余prop。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Select</span>(<span class="hljs-params">&#123; options, value, onChange, ...props &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledSelect</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;onChange&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125;&gt;</span></span><br><span class="language-xml">      &#123;options.map((option) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;option.value&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;option.value&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;option.label&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledSelect</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、CabinTable"><a href="#4、CabinTable" class="headerlink" title="4、CabinTable"></a>4、CabinTable</h5><p>第一步当然是得到查询参数的值。</p><p>但是由于它是由“-”连接，且两部分值都需要，所以可以用split函数分开。</p><p>sort函数复习：a-b是正序，b-a是倒序。因此这里用了一个巧妙的小技巧，就是使用modifier符号，如果是asc就是1，否则为-1，乘以相应逻辑，实现不同排序功能。</p><p>这里name是string，它的排序需要换一种方式，否则无法实现。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> sortBy = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sortBy&#x27;</span>) || <span class="hljs-string">&#x27;name-asc&#x27;</span>;<br><span class="hljs-keyword">const</span> [field, direction] = sortBy.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br><br><span class="hljs-keyword">const</span> modifier = direction === <span class="hljs-string">&#x27;asc&#x27;</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SortedCabins</span> = filteredCabins.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a[field] === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>       <span class="hljs-keyword">return</span> a[field].<span class="hljs-title function_">localeCompare</span>(b[field]) * modifier;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">return</span> (a[field] - b[field]) * modifier;<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>（怎么现在每个视频都是20分钟了😨😨😨😨😨😨要疯了我）</p><blockquote><p>此处穿插一条喜报，我发现了一条Jonas都没发现的bug，就是regularPrice 和 discount的值为300 80的时候竟然会报错说discount应该小于regularPrice。百思不得其解后，感觉应该是它们俩被当作字符串比较了。但是我还是很疑惑，于是GPT这样说：</p><p>即使在表单输入中将 <code>type</code> 设置为 <code>number</code>，在 JavaScript 中获取到的值仍然是字符串。这是因为 HTML 表单元素在提交时会将所有输入的值以字符串的形式传递给 JavaScript。</p></blockquote><h3 id="二、建立Booking-Table"><a href="#二、建立Booking-Table" class="headerlink" title="二、建立Booking Table"></a>二、建立Booking Table</h3><p>✅fetching data的时候，和getCabins不同，因为bookings连接了cabins和guests，所以也可以获取这两个表单的信息：（括号内可以写进任何想要获取的信息，此处挑选需要的）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>   .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>   .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*,cabins(name),guests(fullName,email)&#x27;</span>);<br></code></pre></td></tr></table></figure><p>把data文件夹中的UpLoader组件包含在SideBar中就会出现这样一个可以上传样本信息到表单中，这样就不用手动创建。（记得修改Policy）（浅浅看了一下，这个函数逻辑算是比较简单）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925171213178.png" alt="image-20240925171213178" style="zoom: 67%;" /><h4 id="（1）实现过滤booking"><a href="#（1）实现过滤booking" class="headerlink" title="（1）实现过滤booking"></a>（1）实现过滤booking</h4><h5 id="1、实现"><a href="#1、实现" class="headerlink" title="1、实现"></a>1、实现</h5><p>换一种方式：不在客户端过滤，而是在服务端</p><p>operation组件已经写好，过滤是通过status的状态，而排序是根据预定的开始日期和总价格。</p><p>既然要在接收数据的时候就过滤，那么难道应该在apiBookings的函数中实现吗？不尽然。因为既然要过滤，我们就要从URL读取数据，要使用useParams，在异步fetching data阶段，是不允许使用这种钩子的。（ <strong>Hooks 只能在函数组件或自定义 Hooks 中被调用</strong>）</p><p>因此我们可以在useBookings组件，也就是调用getBookings函数的地方得到查询参数的键和值，再传递给getBookings函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> filterValue = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;status&#x27;</span>);<br><span class="hljs-keyword">const</span> filter =<br>  !filterValue || filterValue === <span class="hljs-string">&#x27;all&#x27;</span><br>    ? <span class="hljs-literal">null</span><br>    : &#123; <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-attr">value</span>: filterValue, <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;eq&#x27;</span> &#125;;<br><br><span class="hljs-keyword">const</span> &#123;<br>  isLoading,<br>  <span class="hljs-attr">data</span>: bookings,<br>  error,<br>&#125; = <span class="hljs-title function_">useQuery</span>(&#123;<br>  <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;bookings&#x27;</span>, filter],<br>  <span class="hljs-attr">queryFn</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getBookings</span>(&#123; filter &#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后getBookings函数中在接收数据的时候根据键和值进行过滤。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> query = supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*,cabins(name),guests(fullName,email)&#x27;</span>);<br><span class="hljs-keyword">if</span> (filter !== <span class="hljs-literal">null</span>)<br>    query = query[filter.<span class="hljs-property">method</span> || <span class="hljs-string">&#x27;eq&#x27;</span>](filter.<span class="hljs-property">field</span>, filter.<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><h5 id="2、要点"><a href="#2、要点" class="headerlink" title="2、要点"></a>2、要点</h5><p>传递的filter是一个object，除开键和值以外还有一个method，因为query是根据method、键、值来进行过滤处理的。eq是等于，还有gte是大于等于的意思。</p><p>这里queryKey变成了一个对象，除开关键字“bookings”以外还有filter。这是因为React Query并不知道会在改变过滤的内容时就重新获取数据，于是我们切换过滤选项，页面不变，但URL会相应改变，刷新后才会显示过滤后的项目。于是把filter填进queryKey，类似于依赖数组的作用，每当filter发生变化的时候，都会重新fetch一次data。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925190720412.png" alt="image-20240925190720412"></p><p>（React Query的作用）</p><h4 id="（2）实现Sort-Booking"><a href="#（2）实现Sort-Booking" class="headerlink" title="（2）实现Sort Booking"></a>（2）实现Sort Booking</h4><h5 id="1、useBookings"><a href="#1、useBookings" class="headerlink" title="1、useBookings"></a>1、useBookings</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> sortByRaw = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sortBy&#x27;</span>) || <span class="hljs-string">&#x27;startDate-desc&#x27;</span>;<br><span class="hljs-keyword">const</span> [field, direction] = sortByRaw.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">const</span> sortBy = &#123; field, direction &#125;;<br></code></pre></td></tr></table></figure><p>比较简单</p><h5 id="2、getBookings"><a href="#2、getBookings" class="headerlink" title="2、getBookings"></a>2、getBookings</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (sortBy)<br>    query = query.<span class="hljs-title function_">order</span>(sortBy.<span class="hljs-property">field</span>, &#123;<br>      <span class="hljs-attr">ascending</span>: sortBy.<span class="hljs-property">direction</span> === <span class="hljs-string">&#x27;asc&#x27;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>order函数是作用于特定库来排序的，包括supabase，因此很方便。第一个参数传递根据什么来排序，第二个参数传递是否是根据升序排列。asc就是ascending的简称。</p><h4 id="（3）实现Pagination"><a href="#（3）实现Pagination" class="headerlink" title="（3）实现Pagination"></a>（3）实现Pagination</h4><blockquote><p>需要先看下一大节：如何建立<code>Pagination</code></p></blockquote><h5 id="1、从api中获取count"><a href="#1、从api中获取count" class="headerlink" title="1、从api中获取count"></a>1、从api中获取count</h5><p>我们可以直接在<code>bookingtable</code>中得到<code>bookings.length</code>，但是有一个更好的办法，是在获取数据的时候加上count。，然后将它返回，这样就可以容易得到获得的结果数了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">.<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*,cabins(name),guests(fullName,email)&#x27;</span>, &#123; <span class="hljs-attr">count</span>: <span class="hljs-string">&#x27;exact&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure><h5 id="2、useBookings"><a href="#2、useBookings" class="headerlink" title="2、useBookings"></a>2、useBookings</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> page = !searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;page&#x27;</span>) ? <span class="hljs-number">1</span> : <span class="hljs-title class_">Number</span>(searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;page&#x27;</span>));<br></code></pre></td></tr></table></figure><p>跟分页组件中的逻辑一样，不多言。记得传递page并将其加入queryKey。</p><h5 id="3、getBookings"><a href="#3、getBookings" class="headerlink" title="3、getBookings"></a>3、getBookings</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (page) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">from</span> = (page - <span class="hljs-number">1</span>) * <span class="hljs-variable constant_">PAGE_SIZE</span>;<br>    <span class="hljs-keyword">const</span> to = <span class="hljs-keyword">from</span> + <span class="hljs-variable constant_">PAGE_SIZE</span> - <span class="hljs-number">1</span>;<br>    query = query.<span class="hljs-title function_">range</span>(<span class="hljs-keyword">from</span>, to);<br>&#125;<br></code></pre></td></tr></table></figure><p>range也是supabase的特殊函数，它会自动接收从from到to的数据。由于数组第一位是0位，所以from不必加1.这里的小技巧是to可以直接用from+PAGE_SIZE（记得-1），就算超过了count，也不会有错误，只会返回范围内的结果。</p><h3 id="三、建立可重用的Pagination（分页）组件"><a href="#三、建立可重用的Pagination（分页）组件" class="headerlink" title="三、建立可重用的Pagination（分页）组件"></a>三、建立可重用的Pagination（分页）组件</h3><p>组件接收count prop，表示结果数。</p><h4 id="（1）组件部分"><a href="#（1）组件部分" class="headerlink" title="（1）组件部分"></a>（1）组件部分</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925195151800.png" alt="image-20240925195151800"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">StyledPagination</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span></span><br><span class="language-xml">        Showing <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;(currentPage - 1) * PAGE_SIZE + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> to&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">           &#123;currentPage === pageCount ? count : currentPage * PAGE_SIZE&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        of <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> results</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Buttons</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PaginationButton</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;prevPage&#125;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;currentPage</span> === <span class="hljs-string">1&#125;</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">HiChevronLeft</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Previous<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">PaginationButton</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PaginationButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;nextPage&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;currentPage</span> === <span class="hljs-string">pageCount&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Next<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">HiChevronRight</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">PaginationButton</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Buttons</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">StyledPagination</span>&gt;<br></code></pre></td></tr></table></figure><p>如果在最后一页的话，to后的数字就应该是count，防止出错。向前翻页和向后翻页的按钮条件禁用，原理比较易懂。</p><h4 id="（2）变量和函数部分"><a href="#（2）变量和函数部分" class="headerlink" title="（2）变量和函数部分"></a>（2）变量和函数部分</h4><p>首先定义在函数体外一个常量：每页的结果数。<code>const PAGE_SIZE = 10;</code></p><p>✅根据上一大节的内容，我们知道这个常量还需要在<code>apiBookings</code>文件中使用，因此我们可以在utils文件夹中创建一个文件：<code>Constants.jsx</code>来存储这样的常量，每次使用只需导入即可。</p><p>然后是其他代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<br><br>  <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-variable constant_">PAGE_SIZE</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">const</span> currentPage = !searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;page&#x27;</span>)<br>    ? <span class="hljs-number">1</span><br>    : <span class="hljs-title class_">Number</span>(searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;page&#x27;</span>));<br><br>  <span class="hljs-keyword">const</span> pageCount = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(count / <span class="hljs-variable constant_">PAGE_SIZE</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">nextPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> next = currentPage === pageCount ? currentPage : currentPage + <span class="hljs-number">1</span>;<br><br>    searchParams.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;page&#x27;</span>, next);<br>    <span class="hljs-title function_">setSearchParams</span>(searchParams);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">prevPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> prev = currentPage === <span class="hljs-number">1</span> ? currentPage : currentPage - <span class="hljs-number">1</span>;<br><br>    searchParams.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;page&#x27;</span>, prev);<br>    <span class="hljs-title function_">setSearchParams</span>(searchParams);<br>&#125;<br></code></pre></td></tr></table></figure><p>仍旧是通过强大的Param来得到当前的页数。当然刚进入这个界面的时候不存在那个查询参数，于是把当前页数设置为1，否则可以根据查询参数得到。</p><p>如果总结果数还没一页的结果多，那么直接不返回这个组件。</p><p>pageCount保留最大的页数。</p><p>每次翻页的时候都相应地更新查询参数。</p><h4 id="（3）Prefetching"><a href="#（3）Prefetching" class="headerlink" title="（3）Prefetching"></a>（3）Prefetching</h4><p><code>Prefetching</code> 是一种优化技术，用于在用户需要数据之前提前获取和加载数据，以加速应用程序的响应速度。它常用于提高用户体验，减少等待时间，特别是在网页应用和数据驱动的应用中。</p><p>现在要做的很简单，就是我们再切换页面的时候，不管是前翻还是后翻，总会出现一个加载页面。但是我们想要数据可以丝滑地出现在界面上，于是，在useBookings组件中：</p><p>首先获得：<code>const queryClient = useQueryClient();</code></p><p>然后在useQuery查询数据之后，返回所有数据之前：（有点简单不多说了）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> pageCount = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(count / <span class="hljs-variable constant_">PAGE_SIZE</span>);<br><br>  <span class="hljs-keyword">if</span> (page &lt; pageCount)<br>    queryClient.<span class="hljs-title function_">prefetchQuery</span>(&#123;<br>      <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;bookings&#x27;</span>, filter, sortBy, page + <span class="hljs-number">1</span>],<br>      <span class="hljs-attr">queryFn</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getBookings</span>(&#123; filter, sortBy, <span class="hljs-attr">page</span>: page + <span class="hljs-number">1</span> &#125;),<br>    &#125;);<br><br>  <span class="hljs-keyword">if</span> (page &gt; <span class="hljs-number">1</span>)<br>    queryClient.<span class="hljs-title function_">prefetchQuery</span>(&#123;<br>      <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;bookings&#x27;</span>, filter, sortBy, page - <span class="hljs-number">1</span>],<br>      <span class="hljs-attr">queryFn</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getBookings</span>(&#123; filter, sortBy, <span class="hljs-attr">page</span>: page - <span class="hljs-number">1</span> &#125;),<br>    &#125;);<br></code></pre></td></tr></table></figure><h3 id="四、建立Booking的Detail界面"><a href="#四、建立Booking的Detail界面" class="headerlink" title="四、建立Booking的Detail界面"></a>四、建立Booking的Detail界面</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925232925950.png" alt="image-20240925232925950"></p><p>首先在App.js的Router中加上这样一条：</p><p><code>&lt;Route path=&quot;bookings/:bookingId&quot; element=&#123;&lt;Booking /&gt;&#125; /&gt;</code></p><p>我们新创建了一个界面：Booking，里面直接返回<code>BookingDetial</code>组件，而这个组件需要接收相应的booking数据，这个数据是由我们新创建的钩子中获得。</p><h4 id="（1）useBooking"><a href="#（1）useBooking" class="headerlink" title="（1）useBooking"></a>（1）useBooking</h4><p>要点有二：</p><ul><li>通过URL获得bookingId，使用了<code>useParams</code>钩子可直接获得</li><li>把id传递给getBooking函数中</li></ul><h4 id="（2）getBooking"><a href="#（2）getBooking" class="headerlink" title="（2）getBooking"></a>（2）getBooking</h4><p>这个函数位于api中，作用是返回相应id的Booking的所有详细信息</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getBooking</span>(<span class="hljs-params">id</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*, cabins(*), guests(*)&#x27;</span>)<br>    .<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, id)    <span class="hljs-comment">//提取等于id的booking内容</span><br>    .<span class="hljs-title function_">single</span>();<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Booking not found&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）BookingRow"><a href="#（3）BookingRow" class="headerlink" title="（3）BookingRow"></a>（3）BookingRow</h4><p>用到了先前创建的Menu复合组件。点击按钮会导航界面到相应的detail界面，因此把相应的id放入URL中方便被提取。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Menus</span>.<span class="hljs-property">Menu</span>&gt;<br>     <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menus.Toggle</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;bookingId&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Toggle</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menus.List</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;bookingId&#125;</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HiEye</span> /&gt;</span>&#125;</span><br><span class="language-xml">              onClick=&#123;() =&gt; navigate(`/bookings/$&#123;bookingId&#125;`)&#125;</span><br><span class="language-xml">           &gt;</span><br><span class="language-xml">              See details</span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Button</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.List</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Menus</span>.<span class="hljs-property">Menu</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="（4）BookingDetail"><a href="#（4）BookingDetail" class="headerlink" title="（4）BookingDetail"></a>（4）BookingDetail</h4><p>以下几行有一个要点：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; booking, isLoading &#125; = <span class="hljs-title function_">useBooking</span>();<br><span class="hljs-keyword">const</span> moveBack = <span class="hljs-title function_">useMoveBack</span>();<br><br><span class="hljs-keyword">if</span> (isLoading) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Spinner</span> /&gt;</span></span>;<br><br><span class="hljs-keyword">const</span> &#123; status, <span class="hljs-attr">id</span>: bookingId &#125; = booking;<br></code></pre></td></tr></table></figure><p>第一<code>useMoveBack</code>钩子不能放在<code>if</code>语句之后；</p><p>第二读取<code>&#123; status, id: bookingId &#125;</code>必须放在判断是否在加载语句之后，否则我们会在数据还没有加载完成的时候就试图读取，就会报错。（还让人百思不得其解）</p><h3 id="五、实现Checkin、Checkout、Delete的功能"><a href="#五、实现Checkin、Checkout、Delete的功能" class="headerlink" title="五、实现Checkin、Checkout、Delete的功能"></a>五、实现Checkin、Checkout、Delete的功能</h3><h4 id="（1）实现基本checkin功能"><a href="#（1）实现基本checkin功能" class="headerlink" title="（1）实现基本checkin功能"></a>（1）实现基本checkin功能</h4><p>新建了checkin&#x2F;：bookingId的界面。</p><p>在BookingRow和BookingDetial中都加入了“checkin”按钮，可以导航到checkin界面。这个界面中还有一个确认checkin的按钮，作用是需要修改booking的statu变成checkin，是否付钱变为Paid。（只有状态为unconfirmed的booking才能被checkin）</p><p><code>useCheckin：</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useCheckin</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: checkin, <span class="hljs-attr">isLoading</span>: isCheckingIn &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">bookingId</span>) =&gt;</span><br>      <span class="hljs-title function_">updateBooking</span>(bookingId, &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;checked-in&#x27;</span>, <span class="hljs-attr">isPaid</span>: <span class="hljs-literal">true</span> &#125;),<br><br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      toast.<span class="hljs-title function_">success</span>(<span class="hljs-string">`Booking #<span class="hljs-subst">$&#123;data.id&#125;</span> successfully checked in`</span>);<br>      queryClient.<span class="hljs-title function_">invalidateQueries</span>(&#123;<br>        <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>      &#125;);<br>      <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125;,<br><br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">() =&gt;</span> toast.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;There was an error while checking in&#x27;</span>),<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; checkin, isCheckingIn &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过代码可以看到，onSuccess函数是可以接收到返回的data数据的。</p><p><code>queryClient.invalidateQueries(&#123;&#125;);</code>之前是放置queryId，现在放置active设置为true</p><p>⭐<code>queryClient.invalidateQueries()</code> 是 React Query 中用于使缓存失效并触发重新获取数据的方法。在这里使用了一个配置对象 <code>&#123; active: true &#125;</code>，这表示使所有当前 “active”（即正在被观察或使用）的查询失效。</p><h4 id="（2）实现添加早饭的功能"><a href="#（2）实现添加早饭的功能" class="headerlink" title="（2）实现添加早饭的功能"></a>（2）实现添加早饭的功能</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;!hasBreakfast &amp;&amp; (<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Checkbox</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;addBreakfast&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                setAddBreakfast((addBreakfast) =&gt; !addBreakfast);</span><br><span class="language-xml">                setConfirmPaid(false);</span><br><span class="language-xml">           &#125;&#125;</span><br><span class="language-xml">             id=&quot;Breakfast&quot;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">             Want to add breakfast for &#123;formatCurrency(optionalBreakfastPrice)&#125;?</span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">Checkbox</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br>)&#125;<br></code></pre></td></tr></table></figure><p>除此之外确定付钱的checkbox也要把总钱数修改一下。</p><p>这个时候，在checkin的时候就要分情况讨论是否有添加早餐，传递给checkin函数的就不仅仅是bookingId了，而且需要是一个对象，包含：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">checkin</span>(&#123;<br>    bookingId,<br>    <span class="hljs-attr">breakfast</span>: &#123;<br>        <span class="hljs-attr">hasBreakfast</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">extrasPrice</span>: optionalBreakfastPrice,<br>        <span class="hljs-attr">totalPrice</span>: totalPrice + optionalBreakfastPrice,<br>&#125;,<br></code></pre></td></tr></table></figure><p>useCheckin中也需要发生改变：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">&#123; bookingId, breakfast &#125;</span>) =&gt;</span><br>   <span class="hljs-title function_">updateBooking</span>(bookingId, &#123;<br>   <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;checked-in&#x27;</span>,<br>      <span class="hljs-attr">isPaid</span>: <span class="hljs-literal">true</span>,<br>      ...breakfast,<br>&#125;),<br></code></pre></td></tr></table></figure><h4 id="（3）checkout和delete"><a href="#（3）checkout和delete" class="headerlink" title="（3）checkout和delete"></a>（3）checkout和delete</h4><p>delete中只有一个地方，就是在detail界面想要删掉后就返回booking界面。所以在这里传递一个对象，包含想要发生的事情，这里传递的onSettled意思是不管成功或失败均执行。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Modal</span>.<span class="hljs-property">Window</span> name=<span class="hljs-string">&quot;delete&quot;</span>&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ConfirmDelete</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">resourceName</span>=<span class="hljs-string">&quot;booking&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isDeletingBooking&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">onConfirm</span>=<span class="hljs-string">&#123;()</span> =&gt;</span></span><br><span class="language-xml">           deleteBooking(bookingId, &#123; onSettled: () =&gt; navigate(-1) &#125;)</span><br><span class="language-xml">       &#125;</span><br><span class="language-xml">   /&gt;</span><br>&lt;/<span class="hljs-title class_">Modal</span>.<span class="hljs-property">Window</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程20-Advanced React Patterns</title>
    <link href="/2024/09/24/react%E8%AF%BE%E7%A8%8B20-Advanced-React-Patterns/"/>
    <url>/2024/09/24/react%E8%AF%BE%E7%A8%8B20-Advanced-React-Patterns/</url>
    
    <content type="html"><![CDATA[<p>本节课要点：1、render props patern   2、HOC   3、Compound Component Pattern   </p><p>4、React Portal    5、javascript事件传播顺序  6、检测在窗体外的点击行为</p><span id="more"></span><p>“这节课看起来很高级，是因为它确实很高级🤫“</p><p>Jonas每次教新的知识都激动的很，搞得我也很激动，笑鼠。。。我倒要看看这节课讲的内容到底多么高级😋😋😋。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240924153709168.png" alt="image-20240924153709168"></p><p>（什么玩意进我脑子里了？？）</p><p>（怎么现在vite 和 creatreact app都不会自动配置prettier了）</p><h3 id="一、render-props-patern"><a href="#一、render-props-patern" class="headerlink" title="一、render props patern"></a>一、render props patern</h3><h3 id="二、HOC"><a href="#二、HOC" class="headerlink" title="二、HOC"></a>二、HOC</h3><h3 id="三、Compound-Component-Pattern"><a href="#三、Compound-Component-Pattern" class="headerlink" title="三、Compound Component Pattern"></a>三、Compound Component Pattern</h3><p><code>Compound Component Pattern</code>（复合组件模式） 是一种 React 设计模式，它允许你创建一组组件，这些组件可以一起工作并共享状态。这种模式通过将状态管理和 UI 逻辑分离，使得组件的组合更加灵活和可重用。</p><h4 id="（1）主要特征"><a href="#（1）主要特征" class="headerlink" title="（1）主要特征"></a>（1）主要特征</h4><ol><li><strong>状态共享</strong>：父组件管理状态，并通过上下文（<code>Context</code>）提供给子组件，使它们可以访问和操作该状态。</li><li><strong>易于组合</strong>：子组件可以灵活地组合在一起，形成复杂的 UI，而不需要关心状态的管理。</li><li><strong>清晰的 API</strong>：使用者可以清楚地知道如何使用这些组件，组件之间的关系一目了然。</li></ol><h4 id="（2）使用示例"><a href="#（2）使用示例" class="headerlink" title="（2）使用示例"></a>（2）使用示例</h4><h5 id="1-App-js"><a href="#1-App-js" class="headerlink" title="1.App.js"></a>1.<code>App.js</code></h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Counter</span>&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter.Decrease</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;-&quot;</span> /&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter.Count</span> /&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter.Increase</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;+&quot;</span> /&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter.Label</span>&gt;</span>My super flexible counter<span class="hljs-tag">&lt;/<span class="hljs-name">Counter.Label</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Counter</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="2-Couter-js"><a href="#2-Couter-js" class="headerlink" title="2.Couter.js"></a>2.<code>Couter.js</code></h5><p>居然使用到了尘封的contextAPI，已经被我忘得一干二净了hhh</p><p>根据我的理解，步骤如下：</p><ol><li>创建一个context</li><li>创建一个父组件，用以提供状态或更多东西</li><li>创造子组件，子组件接收想要的状态</li><li>把子组件连接到父组件上</li></ol><p>然后子组件就可以灵活地组合，还可以灵活地修改😋。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">//1.create a context</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CounterContext</span> = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-comment">//2.create parent component</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increase</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">decrease</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c - <span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CounterContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">count</span>, <span class="hljs-attr">increase</span>, <span class="hljs-attr">decrease</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">CounterContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">//3.create child component to help implementing the common task</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Count</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; count &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">CounterContext</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Label</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Increase</span>(<span class="hljs-params">&#123; icon &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; increase &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">CounterContext</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increase&#125;</span>&gt;</span>&#123;icon&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Decrease</span>(<span class="hljs-params">&#123; icon &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; decrease &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">CounterContext</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;decrease&#125;</span>&gt;</span>&#123;icon&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-comment">//4.add child components as proeprties to parent compontent</span><br><span class="hljs-title class_">Counter</span>.<span class="hljs-property">Count</span> = <span class="hljs-title class_">Count</span>;<br><span class="hljs-title class_">Counter</span>.<span class="hljs-property">Label</span> = <span class="hljs-title class_">Label</span>;<br><span class="hljs-title class_">Counter</span>.<span class="hljs-property">Increase</span> = <span class="hljs-title class_">Increase</span>;<br><span class="hljs-title class_">Counter</span>.<span class="hljs-property">Decrease</span> = <span class="hljs-title class_">Decrease</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Counter</span>;<br></code></pre></td></tr></table></figure><p>（”恭喜你成为少数几个知道这种模式的React开发人员之一“ ，hhh，Jonas你是懂得捧杀的）</p><h3 id="三、使用React-Portal创建一个Modal-Window"><a href="#三、使用React-Portal创建一个Modal-Window" class="headerlink" title="三、使用React Portal创建一个Modal Window"></a>三、使用React Portal创建一个Modal Window</h3><h4 id="（1）自然创建"><a href="#（1）自然创建" class="headerlink" title="（1）自然创建"></a>（1）自然创建</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240924193002270.png" alt="image-20240924193002270" style="zoom: 33%;" /><p>这样的表单是不是好看多了？</p><h5 id="1、Modal组件"><a href="#1、Modal组件" class="headerlink" title="1、Modal组件"></a>1、Modal组件</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Modal</span>(<span class="hljs-params">&#123; children, onClose &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Overlay</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClose&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HiXMark</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>   &#123;/*这里是一个删除按钮，接受的函数就是隐藏表单的函数 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   &#123;/*这里接收children，显示相应表单*/&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Overlay</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、AddCabin组件"><a href="#2、AddCabin组件" class="headerlink" title="2、AddCabin组件"></a>2、AddCabin组件</h5><p>这里我们把之前在cabin.jsx（page页）的状态、按钮和表单组件都拿过来了；</p><p>把<code>onCloseModal</code>传递给表单组件是为了点击cancel和创建完cabin的时候都能关闭表单。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AddCabin</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOpenModal, setIsOpenModal] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpenModal((show) =&gt; !show)&#125;&gt;</span><br><span class="language-xml">        Add new cabin</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;isOpenModal &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Modal</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpenModal(false)&#125;&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">CreateCabinForm</span> <span class="hljs-attr">onCloseModal</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpenModal(false)&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、createCabinForm中所做的修改"><a href="#3、createCabinForm中所做的修改" class="headerlink" title="3、createCabinForm中所做的修改"></a>3、<code>createCabinForm</code>中所做的修改</h5><p>在创建cabin的onSubmit的函数中的onSuccess回调函数中加入<code>onCloseModal?.()</code>，使得创建cabin成功后关闭表单。同时cacel按钮的onClick函数中也加入。（？.很重要）</p><p>Form组件接收type道具，因为这个表单也可能在其他地方被重用。所以如果含有onCloseModal就说明这是modal组件，type设置为modal，否则为regular。以显示不同的style：<code>type=&#123;onCloseModal ? &#39;modal&#39; : &#39;regular&#39;</code></p><h4 id="（2）使用React-Portal"><a href="#（2）使用React-Portal" class="headerlink" title="（2）使用React Portal"></a>（2）使用React Portal</h4><p><code>React Portal</code> 是 React 中的一种机制，允许你将子组件渲染到父组件以外的 DOM 节点中。使用 Portal，你可以在应用的某个部分以外的地方呈现子组件，而不需要更改组件的层次结构。</p><h5 id="1、主要特性"><a href="#1、主要特性" class="headerlink" title="1、主要特性"></a>1、主要特性</h5><ol><li><strong>DOM 节点分离</strong>：Portal 允许你在 React 组件树之外渲染子组件，这对于模态框、弹出菜单、工具提示等 UI 组件非常有用。</li><li><strong>保持父组件的上下文</strong>：即使子组件被渲染到不同的 DOM 节点中，它仍然可以访问父组件的上下文。</li><li><strong>不改变 React 组件层级</strong>：Portal 的使用不会影响组件的层次结构，这使得组织和维护代码变得更加清晰。</li></ol><h5 id="2、重要特点"><a href="#2、重要特点" class="headerlink" title="2、重要特点"></a>2、重要特点</h5><p>通过使用 Portal 渲染的组件可以避免在其父容器或其他包含它的元素有 <code>overflow: hidden</code> 或 <code>overflow: scroll</code> 等样式时被裁剪或遮挡。</p><p>当一个组件（比如模态框、下拉菜单、工具提示等）被渲染在它的父组件内部，如果父组件有以下 CSS 属性：<code>overflow: hidden</code> 或 <code>overflow: scroll</code>，那么在父组件的边界之外的部分内容会被裁剪掉或滚动隐藏掉。这意味着如果你的模态框或菜单超出父组件的边界，它就会被遮挡，用户无法看到全部内容。</p><p>通过 <strong>React Portal</strong>，你可以将组件渲染到根节点或其他独立的 DOM 节点中，而不是当前的父组件内部。这样，它的渲染位置就不再受到父组件的 <code>overflow</code> 样式的限制，而是可以自由地显示在页面的任何地方。</p><h5 id="3、如何使用"><a href="#3、如何使用" class="headerlink" title="3、如何使用"></a>3、如何使用</h5><p>可以看到相较上面的版本，一共只做了两层修改：</p><p>return 后面添加<code>creatPortal</code>；返回值结尾加上<code>document.</code>{想要放置的位置}</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Modal</span>(<span class="hljs-params">&#123; children, onClose &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> createPortal (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Overlay</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClose&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HiXMark</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>   &#123;/*这里是一个删除按钮，接受的函数就是隐藏表单的函数 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   &#123;/*这里接收children，显示相应表单*/&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Overlay</span>&gt;</span></span>,<br>     <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）使用复合组件模式来创建Modal"><a href="#（3）使用复合组件模式来创建Modal" class="headerlink" title="（3）使用复合组件模式来创建Modal"></a>（3）使用复合组件模式来创建Modal</h4><p>我咋听不懂呢：这个modal是根据isOpenModal状态变量来控制是否打开的，但是这个modal本身应该知道它当前是否打开。</p><h5 id="1、为什么要使用复合组件模式"><a href="#1、为什么要使用复合组件模式" class="headerlink" title="1、为什么要使用复合组件模式"></a>1、为什么要使用复合组件模式</h5><p>😶当前版本的问题（简单状态控制）</p><ol><li><strong>状态和逻辑紧耦合</strong>：<code>isOpenModal</code> 状态存在于 <code>AddCabin</code> 组件中，Modal 组件不知道自己是否打开，所有状态都必须通过父组件控制。这种方式对于简单场景是可以的，但如果有更多的交互需求，代码会变得复杂。</li><li><strong>难以扩展</strong>：如果你需要为 <code>Modal</code> 添加更多功能，比如额外的子组件或控制多个 modal，这种结构不够灵活。</li></ol><p>😲为什么使用复合组件模式？</p><p>复合组件模式允许你把不同部分的逻辑和 UI 分离开，使得状态控制和 UI 展示更加解耦。可以将 <code>Modal</code> 组件内部的状态交给 <code>Modal</code> 自己管理，而不是完全依赖父组件。这样可以带来以下好处：</p><ol><li><strong>增强灵活性</strong>：通过复合组件模式，<code>Modal</code> 可以有更多子组件（比如标题、内容、关闭按钮等），这些子组件可以根据需要自由组合，避免将所有逻辑和样式硬编码在 <code>AddCabin</code> 中。</li><li><strong>状态管理解耦</strong>：Modal 内部可以自己知道它的状态（是否打开），从而让父组件不用过度管理 Modal 的内部逻辑。你只需要管理是否调用 <code>Modal</code>，不必关心 Modal 内部是如何关闭或显示的。</li></ol><h5 id="2、使用复合组件模式来创建Modal"><a href="#2、使用复合组件模式来创建Modal" class="headerlink" title="2、使用复合组件模式来创建Modal"></a>2、使用复合组件模式来创建Modal</h5><p>首先看一下AddCabin.js现在变成了什么样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AddCabin</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Open</span> <span class="hljs-attr">opens</span>=<span class="hljs-string">&quot;cabin-form&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Add new cabin<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Open</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Window</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cabin-form&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CreateCabinForm</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Window</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Open</span> <span class="hljs-attr">opens</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Show table<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Open</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Window</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CabinTable</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Window</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到它非常的简洁，只有子组件和传递给子组件的children组件，以及传递给子组件的必要prop。经过分析可以得出一共有两个子组件：Open和Window，Open传递要打开的window名字，并且会传递一个按钮，至于这个按钮如何实现onClick函数，需要看Mortal组件；Window传递本窗体的名字，并包裹需要显示的表单。两个window被条件渲染。</p><p>下面是Mortal.jsx的主要内容，实现复合组件的步骤与上面相同。（记得父组件要返回Provider来提供给子组件必要信息呀，Jonas美美忘记，当然我也没记住） 按钮的按动导致openName被设置为各个传递的名字，并在window函数中与接收到的窗体名字验证，如果相同就渲染，否则不渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ModalContext</span> = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Modal</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [openName, setOpenName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">close</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setOpenName</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> open = setOpenName;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ModalContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">openName</span>, <span class="hljs-attr">close</span>, <span class="hljs-attr">open</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ModalContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Open</span>(<span class="hljs-params">&#123; children, opens: opensWindowName &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; open &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ModalContext</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">cloneElement</span>(children, &#123; <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">open</span>(opensWindowName) &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Window</span>(<span class="hljs-params">&#123; children, name &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; openName, close &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ModalContext</span>);<br>  <span class="hljs-keyword">if</span> (name !== openName) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createPortal</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Overlay</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;close&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HiXMark</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;cloneElement(children, &#123; onCloseModal: close &#125;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Overlay</span>&gt;</span></span>,<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>  );<br>&#125;<br><br><span class="hljs-title class_">Modal</span>.<span class="hljs-property">Open</span> = <span class="hljs-title class_">Open</span>;<br><span class="hljs-title class_">Modal</span>.<span class="hljs-property">Window</span> = <span class="hljs-title class_">Window</span>;<br></code></pre></td></tr></table></figure><p>💡接下来是要点！！！！既然AddCabin组件中没法传递关闭还是打开窗体的信息了，那按钮按动的函数如何绑定，又如何把onClseModal传递给createCabinForm组件呢？答案在下面⬇️</p><h4 id="（4）cloneElement"><a href="#（4）cloneElement" class="headerlink" title="（4）cloneElement"></a>（4）cloneElement</h4><p>在 React 中，<code>cloneElement</code> 是一个非常有用的工具，特别是在复合组件模式中，它允许你<strong>克隆一个 React 元素并向其添加新的属性或修改现有的属性</strong>，而不改变原始元素的外观和行为。它可以帮助你在不直接修改子组件的情况下，灵活地传递额外的 props 或绑定新的事件。</p><h5 id="1、要点"><a href="#1、要点" class="headerlink" title="1、要点"></a>1、要点</h5><ul><li><strong>克隆元素</strong>：它会基于一个现有的 React 元素（子组件）创建一个新的元素。这个克隆后的元素可以接收新的 <code>props</code> 或覆盖现有的 <code>props</code>。</li><li><strong>保持原始结构</strong>：克隆的元素仍然保持与原始元素相同的子组件层次结构和渲染方式，不会影响现有的 JSX 结构。</li><li>**传递额外的 <code>props</code>**：你可以在克隆的过程中向元素传递新的 <code>props</code>，比如传递 <code>onClick</code> 事件处理函数或状态信息。这是增强组件的一个强大工具，特别是在复合组件模式中。</li></ul><h5 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">cloneElement</span>(<br>  element,  <span class="hljs-comment">// 需要克隆的 React 元素</span><br>  [props],  <span class="hljs-comment">// 可选：要添加或覆盖的 props</span><br>  [...children]  <span class="hljs-comment">// 可选：可以指定新的子组件</span><br>)<br></code></pre></td></tr></table></figure><h5 id="3、优点"><a href="#3、优点" class="headerlink" title="3、优点"></a>3、优点</h5><ul><li><strong>避免直接修改子组件</strong>：你不需要在子组件的定义中明确处理某些 props，而是可以动态地通过 <code>cloneElement</code> 传递额外的属性。这种方式可以让组件更加灵活、可复用。</li><li><strong>保持组件封装性</strong>：父组件可以在不改变子组件内部实现的情况下，注入新的行为，比如添加 <code>onClick</code> 或其他事件处理器。</li><li><strong>动态扩展组件</strong>：使用 <code>cloneElement</code>，你可以根据上下文或者状态动态修改组件的行为，而不需要重新定义或重新渲染整个组件。</li></ul><h4 id="（5）检测在窗体外的点击行为"><a href="#（5）检测在窗体外的点击行为" class="headerlink" title="（5）检测在窗体外的点击行为"></a>（5）检测在窗体外的点击行为</h4><p>我们想要实现一个功能：点击form外的区域会关闭窗体，再把功能抽象成了一个custom hook。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useHandleClickOutside</span>(<span class="hljs-params">handler, listenCapturing = <span class="hljs-literal">true</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>();<br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ref.<span class="hljs-property">current</span> &amp;&amp; !ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">contains</span>(e.<span class="hljs-property">target</span>)) &#123;<br>          <span class="hljs-title function_">handler</span>();<br>        &#125;<br>      &#125;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handleClick, listenCapturing);<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handleClick, listenCapturing);<br>    &#125;,<br>    [handler, listenCapturing]<br>  );<br><br>  <span class="hljs-keyword">return</span> ref;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>Modal.js</code>中的<code>window</code>函数中使用该<code>hook</code>，并把ref绑定到组件树上：<code>&lt;StyledModal ref=&#123;ref&#125;&gt;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useHandleClickOutside</span>(close);<br></code></pre></td></tr></table></figure><p><strong>要点解析：</strong></p><h5 id="1、listenCapturing的必要性"><a href="#1、listenCapturing的必要性" class="headerlink" title="1、listenCapturing的必要性"></a>1、<code>listenCapturing</code>的必要性</h5><p>转移至本节最后一个模块讲解。</p><h5 id="2、if-ref-current-ref-current-contains-e-target"><a href="#2、if-ref-current-ref-current-contains-e-target" class="headerlink" title="2、if (ref.current &amp;&amp; !ref.current.contains(e.target))"></a>2、<code>if (ref.current &amp;&amp; !ref.current.contains(e.target))</code></h5><ul><li><code>ref.current</code> 是通过 React 的 <code>useRef</code> hook 获取到的 DOM 元素的引用。通常我们会使用 <code>useRef</code> 来保存一个对 DOM 元素的引用，从而能够在 React 的函数组件中访问它。<code>ref.current</code> 指向你想检测是否被点击的元素（比如模态框、弹窗等）。在这个例子中，<code>ref</code> 会保存模态框的引用。</li></ul><p>如果 <code>ref.current</code> 存在，说明元素已经渲染到页面上，并且 <code>ref</code> 正常指向该 DOM 元素。</p><ul><li><code>e.target</code> 是触发点击事件的元素，即用户点击的具体 DOM 元素。</li><li><code>ref.current.contains(e.target)</code> 是用来检查这个 <code>e.target</code> 是否在 <code>ref.current</code> 所引用的元素内部。</li></ul><h3 id="四、使用复合组件模式创建可重用的table"><a href="#四、使用复合组件模式创建可重用的table" class="headerlink" title="四、使用复合组件模式创建可重用的table"></a>四、使用复合组件模式创建可重用的table</h3><h4 id="（1）创建可复合使用的Table组件"><a href="#（1）创建可复合使用的Table组件" class="headerlink" title="（1）创建可复合使用的Table组件"></a>（1）创建可复合使用的Table组件</h4><p>重点：1、传递columns参数  2、Body接受的prop是data和render</p><p>子组件接受columns道具是为了提供给它们的条件渲染风格。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">TableContext</span> = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Table</span>(<span class="hljs-params">&#123; columns, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TableContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">columns</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledTable</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">StyledTable</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TableContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; columns &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TableContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledHeader</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">columns</span>=<span class="hljs-string">&#123;columns&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledHeader</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Row</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; columns &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TableContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledRow</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">columns</span>=<span class="hljs-string">&#123;columns&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledRow</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Body</span>(<span class="hljs-params">&#123; data, render &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!data.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Empty</span>&gt;</span> No data to show at the moment<span class="hljs-tag">&lt;/<span class="hljs-name">Empty</span>&gt;</span></span>;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledBody</span>&gt;</span>&#123;data.map(render)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">StyledBody</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-title class_">Table</span>.<span class="hljs-property">Header</span> = <span class="hljs-title class_">Header</span>;<br><span class="hljs-title class_">Table</span>.<span class="hljs-property">Row</span> = <span class="hljs-title class_">Row</span>;<br><span class="hljs-title class_">Table</span>.<span class="hljs-property">Body</span> = <span class="hljs-title class_">Body</span>;<br><span class="hljs-title class_">Table</span>.<span class="hljs-property">Footer</span> = <span class="hljs-title class_">Footer</span>;<br></code></pre></td></tr></table></figure><h4 id="（2）修改Table组件"><a href="#（2）修改Table组件" class="headerlink" title="（2）修改Table组件"></a>（2）修改Table组件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Table</span> columns=<span class="hljs-string">&quot;0.6fr 1.8fr 2.2fr 1fr 1fr 1fr&quot;</span>&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Table.Header</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Cabin<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Capacity<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Price<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Discount<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Table.Header</span>&gt;</span></span><br><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Table.Body</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;cabins&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;(cabin)</span> =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">CabinRow</span> <span class="hljs-attr">cabin</span>=<span class="hljs-string">&#123;cabin&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;cabin.id&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      /&gt;</span><br>&lt;/<span class="hljs-title class_">Table</span>&gt;<br></code></pre></td></tr></table></figure><p>利用到了render属性。</p><h3 id="五、使用复合组件模式创建可重用的文字菜单"><a href="#五、使用复合组件模式创建可重用的文字菜单" class="headerlink" title="五、使用复合组件模式创建可重用的文字菜单"></a>五、使用复合组件模式创建可重用的文字菜单</h3><p>真的有那么一丢丢复杂。。。不知道从何下手来记录了我都</p><p>首先让我们看看这个Menu长什么样：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925105934378.png" alt="image-20240925105934378" style="zoom: 67%;" /><h4 id="（1）Menu-jsx"><a href="#（1）Menu-jsx" class="headerlink" title="（1）Menu.jsx"></a>（1）Menu.jsx</h4><h5 id="1、父组件Menus"><a href="#1、父组件Menus" class="headerlink" title="1、父组件Menus"></a>1、父组件Menus</h5><p>两个状态变量：openId：控制打开菜单的cabin，position：控制菜单的位置，List的style的控制变量，因此需要通过计算得出，并传递给StyledList</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Menus</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [openId, setOpenId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">close</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setOpenId</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> open = setOpenId;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">openId</span>, <span class="hljs-attr">close</span>, <span class="hljs-attr">open</span>, <span class="hljs-attr">position</span>, <span class="hljs-attr">setPosition</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">MenuContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、子组件Toggle-jsx（开关-切换）"><a href="#2、子组件Toggle-jsx（开关-切换）" class="headerlink" title="2、子组件Toggle.jsx（开关&#x2F;切换）"></a>2、子组件Toggle.jsx（开关&#x2F;切换）</h5><p>rect常量是得到了Toggle的位置，然后再根据它的值来设置position</p><p>这里的逻辑运算的意思是：如果点击了这个开关，此时如果没有openId（也就是没有List被打开）或者当前的openId与此cabin的id不同（另外一个List现在正打开），就把openId设置为此cabin的id；否则的话，也就是说openId&#x3D;&#x3D;&#x3D;id（当前打开的List就是这个cabin的），就把List关上（将openId设置为空）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toggle</span>(<span class="hljs-params">&#123; id &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; openId, close, open, setPosition &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MenuContext</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> rect = e.<span class="hljs-property">target</span>.<span class="hljs-title function_">closest</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">getBoundingClientRect</span>();<br>    <span class="hljs-title function_">setPosition</span>(&#123;<br>      <span class="hljs-attr">x</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> - rect.<span class="hljs-property">width</span> - rect.<span class="hljs-property">x</span>,<br>      <span class="hljs-attr">y</span>: rect.<span class="hljs-property">y</span> + rect.<span class="hljs-property">height</span> + <span class="hljs-number">8</span>,<br>    &#125;);<br><br>    openId === <span class="hljs-string">&#x27;&#x27;</span> || openId !== id ? <span class="hljs-title function_">open</span>(id) : <span class="hljs-title function_">close</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledToggle</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HiEllipsisVertical</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledToggle</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、子组件List"><a href="#3、子组件List" class="headerlink" title="3、子组件List"></a>3、子组件List</h5><p>接收position并传递给styledList组件，并且使用<code>useHandleClickOutside</code>  hook，来使得它在检测到List外的点击后关闭。并且使用Portal，将组件呈现在body层次。</p><p>接收cabin的id，如果和openId不相同则不进行渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; id, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; openId, position, close &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MenuContext</span>);<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useHandleClickOutside</span>(close);<br><br>  <span class="hljs-keyword">if</span> (openId !== id) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createPortal</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledList</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&#123;position&#125;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledList</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、子组件Button"><a href="#4、子组件Button" class="headerlink" title="4、子组件Button"></a>4、子组件Button</h5><p>接收CabinRow传递的icon和onClick函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; children, icon, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; close &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MenuContext</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    onClick?.();<br>    <span class="hljs-title function_">close</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledButton</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;icon&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledButton</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5、子组件Menu"><a href="#5、子组件Menu" class="headerlink" title="5、子组件Menu"></a>5、子组件Menu</h5><p>直接等于styled component，不返回实际内容。</p><h4 id="（2）很不一样的CabinRow-jsx"><a href="#（2）很不一样的CabinRow-jsx" class="headerlink" title="（2）很不一样的CabinRow.jsx"></a>（2）很不一样的CabinRow.jsx</h4><p>因为我们的按钮打开的窗口也需要有Modal的形式，因此我们将两个复合组件模式组合在了一起。</p><p>仔细看会发现，Modal是在最外层，使得整个Menu都是其子组件，然后再用Menus.Menu包裹，首先要渲染的是Toggle（固定在屏幕上），然后是Menus.List包裹住相应的按钮，其中编辑和删除的按钮被Modal.Open包裹住，使得按钮按动后打开的窗户是Mortal形式的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"> &lt;<span class="hljs-title class_">Modal</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menus.Menu</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Toggle</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;cabinId&#125;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">Menus.List</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;cabinId&#125;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HiSquare2Stack</span> /&gt;</span>&#125; onClick=&#123;handleDuplicate&#125;&gt;</span><br><span class="language-xml">                  Duplicate</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Open</span> <span class="hljs-attr">opens</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HiPencil</span> /&gt;</span>&#125;&gt;Edit<span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Button</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Open</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Open</span> <span class="hljs-attr">opens</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HiTrash</span> /&gt;</span>&#125;&gt;Delete<span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Button</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Open</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.List</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Window</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">CreateCabinForm</span> <span class="hljs-attr">cabinToEdit</span>=<span class="hljs-string">&#123;cabin&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Window</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Window</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">ConfirmDelete</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  <span class="hljs-attr">resourceName</span>=<span class="hljs-string">&quot;cabins&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isDeleting&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  <span class="hljs-attr">onConfirm</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> deleteCabin(&#123; id: cabinId &#125;)&#125;</span><br><span class="language-xml">              /&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Window</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Menu</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Modal</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="？、事件触发阶段"><a href="#？、事件触发阶段" class="headerlink" title="？、事件触发阶段"></a>？、事件触发阶段</h3><p>在<code>useHandleClickOutside</code> Hook 中，<code>listenCapturing</code> 参数控制事件监听的方式（捕获阶段或冒泡阶段）。默认情况下，将 <code>listenCapturing</code> 设置为 <code>true</code>，表示事件是在捕获阶段被处理的。如果不传递 <code>true</code>，则会使用冒泡阶段监听事件。</p><h4 id="（1）详细原因"><a href="#（1）详细原因" class="headerlink" title="（1）详细原因"></a>（1）详细原因</h4><h5 id="1-事件传播机制："><a href="#1-事件传播机制：" class="headerlink" title="1. 事件传播机制："></a>1. 事件传播机制：</h5><ul><li><strong>捕获阶段（Capturing Phase）</strong>：事件从顶层元素（如 <code>document</code>）开始，一路向下传播到事件目标元素（你点击的元素）。</li><li><strong>目标阶段（Target Phase）</strong>：事件在目标元素上触发。</li><li><strong>冒泡阶段（Bubbling Phase）</strong>：事件从目标元素开始，向上传播回顶层元素。</li></ul><h5 id="2-代码中的事件监听器："><a href="#2-代码中的事件监听器：" class="headerlink" title="2. 代码中的事件监听器："></a>2. 代码中的事件监听器：</h5><p>在 <code>useHandleClickOutside</code> 中，当 <code>listenCapturing</code> 为 <code>false</code>（默认值）时，<code>document.addEventListener(&#39;click&#39;, handleClick)</code> 会在<strong>冒泡阶段</strong>添加事件监听器。</p><h5 id="3-事件触发的顺序："><a href="#3-事件触发的顺序：" class="headerlink" title="3. 事件触发的顺序："></a>3. 事件触发的顺序：</h5><p>当你点击打开按钮时：</p><ol><li><strong>目标元素的事件处理器</strong>：首先触发按钮的 <code>onClick</code> 事件处理器，调用 <code>open</code> 函数，打开模态框。</li><li>**事件冒泡到 <code>document</code>**：接下来，事件冒泡到 <code>document</code>，触发在 <code>document</code> 上注册的冒泡阶段的事件监听器，即你的 <code>handleClick</code> 函数。</li></ol><p>在 <code>handleClick</code> 中发生了什么：</p><ul><li>此时，模态框已经被打开，<code>ref.current</code> 已经被赋值为模态框的 DOM 元素。</li><li><code>handleClick</code>检查 <code>if (ref.current &amp;&amp; !ref.current.contains(e.target))</code><ul><li><code>e.target</code> 是点击的打开按钮，它不在模态框内部。</li><li>因此条件为 <code>true</code>，<code>handleClick</code> 调用 <code>close</code> 函数，关闭模态框。</li></ul></li></ul><h5 id="4-结果："><a href="#4-结果：" class="headerlink" title="4. 结果："></a>4. 结果：</h5><ul><li>模态框被打开后，立即又被关闭。</li><li>用户体验上表现为模态框无法被打开。</li></ul><h4 id="（2）为什么设置-listenCapturing-为-true-可以解决问题："><a href="#（2）为什么设置-listenCapturing-为-true-可以解决问题：" class="headerlink" title="（2）为什么设置 listenCapturing 为 true 可以解决问题："></a>（2）为什么设置 <code>listenCapturing</code> 为 <code>true</code> 可以解决问题：</h4><p>当将 <code>listenCapturing</code> 设置为 <code>true</code>，事件监听器会在<strong>捕获阶段</strong>触发。事件传播顺序变为：</p><ol><li><strong>事件捕获阶段</strong>：<ul><li>事件从 <code>document</code> 开始，向下传播。</li><li>在 <code>document</code> 上的捕获阶段，触发 <code>handleClick</code>。</li><li><strong>此时模态框还未被打开</strong>（因为按钮的 <code>onClick</code> 还未执行）。</li><li><code>ref.current</code> 尚未定义，<code>ref.current &amp;&amp; !ref.current.contains(e.target)</code> 为 <code>false</code>，<code>handleClick</code> 不执行任何操作。</li></ul></li><li><strong>目标元素的事件处理器</strong>：<ul><li>事件到达目标元素（打开按钮）。</li><li>触发按钮的 <code>onClick</code>，调用 <code>open</code>，模态框被打开。</li></ul></li><li><strong>事件冒泡阶段</strong>：<ul><li>事件从目标元素向上冒泡，但因为你的事件监听器只在捕获阶段，不会再次触发 <code>handleClick</code>。</li></ul></li></ol><p><strong>结果：</strong></p><ul><li>模态框成功打开。</li><li><code>handleClick</code> 不会在模态框打开后立即调用 <code>close</code>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程19-ReactQuery</title>
    <link href="/2024/09/22/react%E8%AF%BE%E7%A8%8B19-ReactQuery/"/>
    <url>/2024/09/22/react%E8%AF%BE%E7%A8%8B19-ReactQuery/</url>
    
    <content type="html"><![CDATA[<p>本节课学习能够远程管理supabase的React Query🤓</p><span id="more"></span><p>（Jonas终于能教他最爱的库了，他很激动🙉）</p><h3 id="一·、什么是React-Query"><a href="#一·、什么是React-Query" class="headerlink" title="一·、什么是React Query"></a>一·、什么是React Query</h3><h4 id="（1）特点"><a href="#（1）特点" class="headerlink" title="（1）特点"></a>（1）特点</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922103715683.png" alt="image-20240922103715683" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922103801784.png" alt="image-20240922103801784" style="zoom: 33%;" /></p><p><strong>✅数据获取</strong>：提供简洁的 API 来发起异步请求，支持 REST API、GraphQL 等数据源。</p><p>✅<strong>缓存管理</strong>：自动缓存数据，避免不必要的网络请求，提高性能。</p><p>✅<strong>实时更新</strong>：支持实时数据更新，通过轮询、WebSocket 或后台刷新机制来保持数据的新鲜度。</p><p><strong>✅自动重试</strong>：当请求失败时，可以自动重试请求，增强应用的稳定性。</p><p><strong>✅查询和变更</strong>：使用 <code>useQuery</code> 来获取数据，使用 <code>useMutation</code> 来处理数据的增删改操作。</p><p>✅<strong>状态管理</strong>：提供丰富的状态管理，允许开发者轻松处理加载、错误和成功状态。</p><p><strong>✅易于集成</strong>：可以与现有的 React 应用轻松集成，无需重构代码。</p><h4 id="（2）与其他类似的库相比的优点"><a href="#（2）与其他类似的库相比的优点" class="headerlink" title="（2）与其他类似的库相比的优点"></a>（2）与其他类似的库相比的优点</h4><p>React Query 相对于其他类似库（如 Redux、Apollo Client、SWR 等）有几个独特的优势和特点：</p><ol><li><strong>数据获取与缓存分离</strong></li></ol><p>React Query 专注于数据获取和缓存管理，而不是全局状态管理。这使得它更加简洁和高效，专注于异步数据的流动，而不需要管理其他状态。</p><ol start="2"><li><strong>自动缓存和无缝更新</strong></li></ol><p>React Query 会自动缓存请求的数据，并在数据过期时自动重新获取。它提供了强大的数据同步机制，允许实时更新和后台刷新，保持数据的新鲜度。</p><ol start="3"><li><strong>轻量级的 API</strong></li></ol><p>与 Redux 等库相比，React Query 提供了更简单的 API。使用 <code>useQuery</code> 和 <code>useMutation</code> 进行数据操作，无需编写复杂的 reducer 和 action。</p><ol start="4"><li><strong>内置的状态管理</strong></li></ol><p>React Query 内置了加载、错误和成功等状态管理，无需额外处理。开发者可以轻松获取请求状态，从而更好地处理 UI 渲染。</p><ol start="5"><li><strong>自动重试和错误处理</strong></li></ol><p>它可以自动重试失败的请求，并允许开发者自定义重试逻辑。这种机制提高了应用的鲁棒性。</p><ol start="6"><li><strong>无缝集成</strong></li></ol><p>React Query 可以与任何后端 API（REST、GraphQL 等）无缝集成，无需特定的配置。这种灵活性使得它适用于各种项目。</p><ol start="7"><li><strong>支持服务端渲染（SSR）</strong></li></ol><p>React Query 提供了服务端渲染支持，允许在服务器端预取数据，并在客户端使用，提升页面加载性能。</p><ol start="8"><li><strong>开箱即用的 DevTools</strong></li></ol><p>React Query 提供了开发者工具，方便查看当前的查询状态、缓存和数据。这对于调试和优化应用非常有帮助。</p><h3 id="二、set-up-React-Query✅"><a href="#二、set-up-React-Query✅" class="headerlink" title="二、set up React Query✅"></a>二、set up React Query✅</h3><blockquote><p><code>npm i date-fns</code>  日期功能（跟视频不一样了，导入方式，问GPT吧）</p></blockquote><h4 id="（1）安装配置"><a href="#（1）安装配置" class="headerlink" title="（1）安装配置"></a>（1）安装配置</h4><p>⭕<code>npm i @tanstack/react-query@4</code>       <a href="https://tanstack.com/query/v3">https://tanstack.com/query/v3</a></p><p>（23年是v4，现在已经是v5了🙉）</p><p> ⭕<code>npm i @tanstack/react-query-devtools@4</code>安装Dev Tool（这次不用浏览器内安装）</p><h4 id="（2）初步使用"><a href="#（2）初步使用" class="headerlink" title="（2）初步使用"></a>（2）初步使用</h4><p>在App.js中写入<code>const queryClient = new QueryClient(&#123;（可选项）&#125;）</code></p><p>用<code>&lt;QueryClientProvider client=&#123;queryClient&#125;&gt;</code>包裹整个App</p><p>子组件中写入<code>&lt;ReactQueryDevtools initialIsOpen=&#123;false&#125; /&gt;</code></p><h4 id="（3）示例"><a href="#（3）示例" class="headerlink" title="（3）示例"></a>（3）示例</h4><p>获取数据的方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123;<br>  isLoading,<br>  <span class="hljs-attr">data</span>: cabins,<br>  error,<br>&#125; = <span class="hljs-title function_">useQuery</span>(&#123;<br>  <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;cabins&#x27;</span>],<br>  <span class="hljs-attr">queryFn</span>: getCabins,<br>&#125;);<br></code></pre></td></tr></table></figure><p>设置数据由fresh到stale的时间：（在App.js）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> queryClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryClient</span>(&#123;<br>  <span class="hljs-attr">defaultOptions</span>: &#123;<br>    <span class="hljs-attr">queries</span>: &#123;<br>      <span class="hljs-attr">staleTime</span>: <span class="hljs-number">0</span>,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>getCabins:</code>（从API Docs中查看相应代码）（记得修改相应Policy权限）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getCabins</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>).<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;cabins could not be loaded&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、mutating（变异）数据"><a href="#三、mutating（变异）数据" class="headerlink" title="三、mutating（变异）数据"></a>三、mutating（变异）数据</h3><p>当在supabase中修改数据后，网站上加载出的表单会跟随staleTime改变。</p><p>但是如果是远程修改数据呢？（比如删除，如下所示）</p><h4 id="（1）删除方程（放置在apiCabins中）"><a href="#（1）删除方程（放置在apiCabins中）" class="headerlink" title="（1）删除方程（放置在apiCabins中）"></a>（1）删除方程（放置在apiCabins中）</h4><p>修改了eq（）中的内容，可以和Docs中的代码做照应</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteCabin</span>(<span class="hljs-params">&#123; id &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>).<span class="hljs-title function_">delete</span>().<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, id);<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;cabins could not be deleted&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第一个值</strong> <code>&#39;id&#39;</code>：</p><ul><li>这个值是数据库表中的列名，表示你要匹配的字段。在这里，它指的是小屋表中的 <code>id</code> 列。</li></ul><p><strong>第二个值</strong> <code>id</code>：</p><ul><li>这个值是你想删除的具体记录的唯一标识符。它是从传入的对象中解构出来的 <code>id</code> 值，代表要删除的小屋的 ID。</li></ul><h4 id="（2）连接删除组件"><a href="#（2）连接删除组件" class="headerlink" title="（2）连接删除组件"></a>（2）连接删除组件</h4><p>要点解析在代码注释中：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">CabinRow</span>(<span class="hljs-params">&#123; cabin &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-attr">id</span>: cabinId,  <span class="hljs-comment">//这里重构了名称，因此在onClick函数中不能只传递一个参数而是需要传递对象</span><br>    name,<br>    maxCapacity,<br>    regularPrice,<br>    discount,<br>    image,<br>  &#125; = cabin;<br><br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>(); <span class="hljs-comment">//通过这个自定义hook来获取App.Js中建立的Client</span><br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">isLoading</span>: isDeleting, mutate &#125; = <span class="hljs-title function_">useMutation</span>(&#123;  <span class="hljs-comment">//看这个hook！！！！</span><br>    <span class="hljs-attr">mutationFn</span>: deleteCabin,  <span class="hljs-comment">//这是变异数据的方程</span><br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">() =&gt;</span> &#123;       <span class="hljs-comment">//这是编译成功的回调函数</span><br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Cabin successfully deleted&#x27;</span>);<br>      queryClient.<span class="hljs-title function_">invalidateQueries</span>(&#123;<br>        <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;cabins&#x27;</span>],<br>      &#125;);   <span class="hljs-comment">//这里的目的是强制触发重新获取数据以更新界面，invalidate的意思就是更新</span><br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title function_">alert</span>(err.<span class="hljs-property">message</span>),  <span class="hljs-comment">//这里是失败后的回调函数，显示错误</span><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TableRow</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cabin</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Cabin</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Fits up to &#123;maxCapacity&#125; guests<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Price</span>&gt;</span>&#123;formatCurrency(regularPrice)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Price</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Discount</span>&gt;</span>&#123;formatCurrency(discount)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Discount</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> mutate(&#123; id: cabinId &#125;)&#125; disabled=&#123;isDeleting&#125;&gt;</span><br><span class="language-xml">        delete         &#123;/*就是这里的函数，参数使用&#123;id：cabinId&#125;而不是直接是cabinId*/&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TableRow</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）装饰通知（React-Toast）"><a href="#（3）装饰通知（React-Toast）" class="headerlink" title="（3）装饰通知（React Toast）"></a>（3）装饰通知（React Toast）</h4><p>⭕<code>npm i react-hot-toast</code>     <a href="https://react-hot-toast.com/%EF%BC%88%E5%A5%BD%E5%8F%AF%E7%88%B1%E7%9A%84%E7%95%8C%E9%9D%A2hhh%EF%BC%89">https://react-hot-toast.com/（好可爱的界面hhh）</a></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922164720981.png" alt="image-20240922164720981"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922164746787.png" alt="image-20240922164746787"></p><h5 id="1、首先：（先去查看官方文档）在App-js的架构中，在子组件的最后写上："><a href="#1、首先：（先去查看官方文档）在App-js的架构中，在子组件的最后写上：" class="headerlink" title="1、首先：（先去查看官方文档）在App.js的架构中，在子组件的最后写上："></a>1、首先：（先去查看官方文档）在App.js的架构中，在子组件的最后写上：</h5><p>（烤面包机当通知也太好笑了吧hhhh）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Toaster</span><br>        position=<span class="hljs-string">&quot;top-center&quot;</span>  <span class="hljs-comment">//位置</span><br>        gutter=&#123;<span class="hljs-number">12</span>&#125;          <span class="hljs-comment">//各个toast的间距</span><br>        containerStyle=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&#x27;8px&#x27;</span> &#125;&#125;    <span class="hljs-comment">//外边距</span><br>        toastOptions=&#123;&#123;   <span class="hljs-comment">//定义了不同类型 toast 的显示选项。</span><br>          <span class="hljs-attr">success</span>: &#123; <br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">3000</span>，    <span class="hljs-comment">//持续时间</span><br>          &#125;,<br>          <span class="hljs-attr">error</span>: &#123;<br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">5000</span>,<br>          &#125;,<br>          <span class="hljs-attr">style</span>: &#123;<br>            <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;16px&#x27;</span>,<br>            <span class="hljs-attr">maxWidth</span>: <span class="hljs-string">&#x27;500px&#x27;</span>,<br>            <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;16px 24px&#x27;</span>,<br>            <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;var(--color-grey-0)&#x27;</span>,<br>            <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;var(--color-grey-700)&#x27;</span>,<br>          &#125;,<br>        &#125;&#125;<br>      /&gt;<br></code></pre></td></tr></table></figure><h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">toast.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;Cabin successfully deleted&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="四、React-Hook-Form"><a href="#四、React-Hook-Form" class="headerlink" title="四、React Hook Form"></a>四、React Hook Form</h3><p>⭕<code>npm i react-hook-form@7</code></p><h4 id="（1）入门"><a href="#（1）入门" class="headerlink" title="（1）入门"></a>（1）入门</h4><p>非常好的库，使提交表格方便。</p><h5 id="1、const-register-handleSubmit-useForm"><a href="#1、const-register-handleSubmit-useForm" class="headerlink" title="1、const { register, handleSubmit } = useForm();"></a>1、<code>const &#123; register, handleSubmit &#125; = useForm();</code></h5><ul><li>**<code>register</code>**：这是一个函数，用于将表单字段注册到 React Hook Form 中，以便它能够跟踪其状态和验证。</li><li>**<code>handleSubmit</code>**：这是一个函数，用于处理表单提交事件。当用户提交表单时，它会调用你提供的提交处理函数。</li></ul><h5 id="2、在input字段中加入register："><a href="#2、在input字段中加入register：" class="headerlink" title="2、在input字段中加入register："></a>2、在input字段中加入register：</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Input</span> type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;name&quot;</span> &#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;name&#x27;</span>)&#125; /&gt;<br></code></pre></td></tr></table></figure><h5 id="3、添加提交函数"><a href="#3、添加提交函数" class="headerlink" title="3、添加提交函数"></a>3、添加提交函数</h5><p>这是我们自己创建的Form组件，添加onSubmit函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Form</span> onSubmit=&#123;<span class="hljs-title function_">handleSubmit</span>(onSubmit)&#125;&gt;  <br></code></pre></td></tr></table></figure><p>这里是onSubmit函数：（然后表格里的数据就完美出现了）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br> &#125;<br></code></pre></td></tr></table></figure><p>下面是被register后的input字段的prop，多了不一样的东西。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922182919583.png" alt="image-20240922182919583"></p><h5 id="4、使用Form创建新的Cabin"><a href="#4、使用Form创建新的Cabin" class="headerlink" title="4、使用Form创建新的Cabin"></a>4、使用Form创建新的Cabin</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createCabin</span>(<span class="hljs-params">newCabin</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>)<br>    .<span class="hljs-title function_">insert</span>([newCabin])<br>    .<span class="hljs-title function_">select</span>();<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;cabins could not be created&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实没啥特别的，注意表单的内容和cabin的结构一致就行。</p><h4 id="（2）表单的错误处理"><a href="#（2）表单的错误处理" class="headerlink" title="（2）表单的错误处理"></a>（2）表单的错误处理</h4><blockquote><p>”React Hook Form最闪亮耀眼的地方是表单错误验证“</p></blockquote><h5 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h5><p>先看看我们通过useForm获得了什么：</p><p>⭐<code>const &#123; register, handleSubmit, reset, getValues, formState &#125; = useForm();</code></p><ul><li>**<code>reset</code>**：用于重置表单的值到初始状态，通常在提交成功后调用。</li><li>**<code>getValues</code>**：获取当前表单字段的值，可以在需要时获取字段的最新值。</li><li>**<code>formState</code>**：包含表单的状态信息，如 <code>isSubmitting</code>、<code>isValid</code> 和 <code>errors</code> 等，方便进行表单状态的管理和展示。</li></ul><p>于是……</p><ul><li>可以在onSuccess的回调函数中添加 reset()，清空表单</li><li>const { errors } &#x3D; formState;来获得错误信息以显示在ui界面，Form的onSubmit函数中添加onError： <code>&lt;Form onSubmit=&#123;handleSubmit(onSubmit, onError)&#125;&gt;</code>，如果表单提交不成功就会调用onError函数，它的参数是errors</li></ul><h5 id="2、表单验证"><a href="#2、表单验证" class="headerlink" title="2、表单验证"></a>2、表单验证</h5><p>验证内容在register中添加，例如</p><ul><li>maxCapacity表单：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;maxCapacity&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is requied&#x27;</span>,<br>   <span class="hljs-attr">min</span>: &#123;<br>     <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Capacity should be at least 1&#x27;</span>,<br>     &#125;,<br>&#125;)&#125;<br></code></pre></td></tr></table></figure><ul><li>discount表单：（validate关键字：自定义验证）✅应用getValues函数访问表内数据</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;discount&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is requied&#x27;</span>,<br>   <span class="hljs-attr">validate</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span><br>      value &lt;= <span class="hljs-title function_">getValues</span>().<span class="hljs-property">regularPrice</span> ||<br>      <span class="hljs-string">&#x27;DisCount should be less than regular price &#x27;</span>,<br>&#125;)&#125;<br></code></pre></td></tr></table></figure><h3 id="五、上传图片到supabase"><a href="#五、上传图片到supabase" class="headerlink" title="五、上传图片到supabase"></a>五、上传图片到supabase</h3><p>⭕<a href="https://supabase.com/docs/reference/javascript/storage-from-upload%E8%AE%BF%E9%97%AE%E6%AD%A4%E7%BD%91%E7%AB%99%E6%89%BE%E5%AF%BB%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">https://supabase.com/docs/reference/javascript/storage-from-upload访问此网站找寻详细信息</a></p><p>首先需要设置rlp（Policy）</p><h4 id="（1）建立函数"><a href="#（1）建立函数" class="headerlink" title="（1）建立函数"></a>（1）建立函数</h4><h5 id="1、得到图片名和图片路径"><a href="#1、得到图片名和图片路径" class="headerlink" title="1、得到图片名和图片路径"></a>1、得到图片名和图片路径</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> imageName = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random()&#125;</span>-<span class="hljs-subst">$&#123;newCabin.image.name&#125;</span>`</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>使用 <code>Math.random()</code> 生成随机数，以防止图片名称冲突，并将其与原图片名称拼接。<code>replaceAll</code> 用于去除 <code>/</code> 字符。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> imagePath = <span class="hljs-string">`<span class="hljs-subst">$&#123;supabaseUrl&#125;</span>/storage/v1/object/public/cabin-images/<span class="hljs-subst">$&#123;imageName&#125;</span>`</span>;<br></code></pre></td></tr></table></figure><p><code>supabaseUrl</code>是在<code>supabase.js</code>中定义的。至于路径，我们在前面创建了两个Buket，其中一个是cabin-images，存储cabin图像，从那里复制而来。</p><h5 id="2、create-cabin"><a href="#2、create-cabin" class="headerlink" title="2、create cabin"></a>2、create cabin</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>)<br>    .<span class="hljs-title function_">insert</span>([&#123; ...newCabin, <span class="hljs-attr">image</span>: imagePath &#125;]);<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Cabin could not be created&#x27;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>❓❓在这段代码中，将 <code>image</code> 单独列出来的原因主要有以下几点：</p><ol><li><p><strong>存储路径的动态性</strong>：</p><ul><li>图片的路径是通过生成随机名称和构造完整 URL 动态创建的。在插入到数据库之前，路径需要先确定。因此，在插入数据时，使用生成的 <code>imagePath</code> 作为字段的一部分。</li></ul></li><li><p><strong>解耦数据逻辑</strong>：</p><ul><li>将 <code>image</code> 单独列出可以清晰地分隔小屋的基本信息和图片信息，使数据结构更清晰。在数据表中，通常不直接存储文件的内容，而是存储文件的 URL 或路径。</li></ul></li><li><p><strong>确保数据完整性</strong>：</p><ul><li>在创建小屋的过程中，首先插入小屋信息，再上传图片。如果上传失败，可以根据存储的 <code>id</code> 删除对应的小屋记录。这种分步骤处理的方式使得在发生错误时能够更容易地回滚操作。</li></ul></li><li><p><strong>方便后续处理</strong>：</p><ul><li>如果将 <code>image</code> 与其他小屋信息合并在一起，后续处理时可能会变得复杂。例如，如果需要仅更新或删除图片，单独存储可以更加方便。</li></ul></li></ol><h5 id="3、upload-image"><a href="#3、upload-image" class="headerlink" title="3、upload image"></a>3、upload image</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">error</span>: storageError &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">storage</span><br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabin-images&#x27;</span>)  <span class="hljs-comment">//这里写buket的名字</span><br>    .<span class="hljs-title function_">upload</span>(imageName, newCabin.<span class="hljs-property">image</span>);   <span class="hljs-comment">//括号前面写文件名，后面是上传的文件本身</span><br></code></pre></td></tr></table></figure><h5 id="4、Delete-the-cabin-if-there-was-an-error-uploading-image"><a href="#4、Delete-the-cabin-if-there-was-an-error-uploading-image" class="headerlink" title="4、Delete the cabin if there was an error uploading image"></a>4、Delete the cabin if there was an error uploading image</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (storageError) &#123;<br>    <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>).<span class="hljs-title function_">delete</span>().<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, data.<span class="hljs-property">id</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(storageError);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<br>      <span class="hljs-string">&#x27;Cabin image could not be uploaded and the cabin was not created&#x27;</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）修改submit函数"><a href="#（2）修改submit函数" class="headerlink" title="（2）修改submit函数"></a>（2）修改submit函数</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-title function_">mutate</span>(&#123; ...data, <span class="hljs-attr">image</span>: data.<span class="hljs-property">image</span>[<span class="hljs-number">0</span>] &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、修改cabin信息"><a href="#六、修改cabin信息" class="headerlink" title="六、修改cabin信息"></a>六、修改cabin信息</h3><p>改bug改的想鼠。。。💀💀💀💀💀💀（把Jonas没找到的bug找出来了，我真棒）</p><p>这一部分有点儿难理解，让我仔细地捋一下。</p><h4 id="（1）传递表单原有信息"><a href="#（1）传递表单原有信息" class="headerlink" title="（1）传递表单原有信息"></a>（1）传递表单原有信息</h4><p>在修改信息的时候，很明显我们是需要原有的信息的，然后在此基础上加以修改。由于这个修改信息的表单应该和创建信息的表单一样，所以我们可以偷懒直接借用。于是在CabinRow这个组件里，我们可以添加一个按钮：<code>edit</code>，onClick函数控制showForm状态变量，然后就可以在cabinRow的要修改的那一行下面显示CreateCabinForm组件了。（传递给它cabin的所有信息）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;showForm &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CreateCabinForm</span> <span class="hljs-attr">cabinToEdit</span>=<span class="hljs-string">&#123;cabin&#125;</span> /&gt;</span></span>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）改变CreateCabinForm"><a href="#（2）改变CreateCabinForm" class="headerlink" title="（2）改变CreateCabinForm"></a>（2）改变CreateCabinForm</h4><h5 id="1、接收原有的cabin信息"><a href="#1、接收原有的cabin信息" class="headerlink" title="1、接收原有的cabin信息"></a>1、接收原有的cabin信息</h5><p>组件函数接收object prop：<code>&#123; cabinToEdit = &#123;&#125; &#125;</code></p><p><code>=&#123;&#125;</code>是给它一个default值，因为创建cabin的时候没有传递cabinToEdit，所以就是空。</p><h5 id="2、运用原有的cabin信息"><a href="#2、运用原有的cabin信息" class="headerlink" title="2、运用原有的cabin信息"></a>2、运用原有的cabin信息</h5><ul><li>首先进行拆解：<code>const &#123; id: editId, ...editValues &#125; = cabinToEdit;</code></li></ul><p>这里把id重命名为editId是为了下面传递参数更加方便。</p><ul><li>然后定义变量：<code>const isEditSession = Boolean(editId);</code></li></ul><p>没有editId说明是创建cabin，这个变量决定了在mutate数据的时候究竟是创建cabin还是修改cabin，因为两个动作接受的参数也不愿意。</p><ul><li>接着给予表单defaultValues：<code>const &#123; register, handleSubmit, reset, getValues, formState &#125; = useForm(&#123;defaultValues: isEditSession ? editValues : &#123;&#125;, &#125;);</code></li></ul><p>这里也比较好理解，如果不是编辑默认值就为空。</p><h5 id="3、创建mutate"><a href="#3、创建mutate" class="headerlink" title="3、创建mutate"></a>3、创建mutate</h5><p>这里跟createCabin的逻辑很像，只是改变了名字和接收的参数而已。</p><p><code>mutationFn: (&#123; newCabinData, id &#125;) =&gt; createEditCabin(newCabinData, id)</code>其中这一行着重看。</p><p>（⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️请注意请注意这里onSuccess后不能reset（）！！！否则image就变成空（undefined）的了，不知道为什么，其他数据都没问题。。。）</p><p>判断失误，汗流浃背了，原来只是因为api里那个函数写错了，有个小bug，startsWith而不是startWith。。。真的汗流浃背了，我就说Jonas那里怎么没问题。。但是我真的很奇怪为什么在onSubmit函数里console.log（image）为什么是undifined。。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: editCabin, <span class="hljs-attr">isLoading</span>: isEditing &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>  <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">&#123; newCabinData, id &#125;</span>) =&gt;</span> <span class="hljs-title function_">createEditCabin</span>(newCabinData, id),<br>  <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    toast.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;Cabin successfully edited&#x27;</span>);<br>    queryClient.<span class="hljs-title function_">invalidateQueries</span>(&#123;<br>      <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;cabins&#x27;</span>],<br>    &#125;);<br>  &#125;,<br>  <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> toast.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">message</span>),<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4、修改表单disabled逻辑"><a href="#4、修改表单disabled逻辑" class="headerlink" title="4、修改表单disabled逻辑"></a>4、修改表单disabled逻辑</h5><p><code>const isWorking = isCreating || isEditing;</code>用新变量处理</p><h5 id="5、修改onSubmit函数"><a href="#5、修改onSubmit函数" class="headerlink" title="5、修改onSubmit函数"></a>5、修改onSubmit函数</h5><p>如果图片是新上传的，那么它应该是一个对象，我们需要得到得到的是它的名字来给它建立url，如果是旧的信息，那么它应该是string，直接返回它本身就好。</p><p>这里两个函数的参数不太一样，可以观察一下。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// console.log(data);</span><br>    <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">typeof</span> data.<span class="hljs-property">image</span> === <span class="hljs-string">&#x27;string&#x27;</span> ? data.<span class="hljs-property">image</span> : data.<span class="hljs-property">image</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// console.log(image);</span><br><br>    <span class="hljs-keyword">if</span> (isEditSession)<br>      <span class="hljs-title function_">editCabin</span>(&#123; <span class="hljs-attr">newCabinData</span>: &#123; ...data, image &#125;, <span class="hljs-attr">id</span>: editId &#125;);<br>    <span class="hljs-keyword">else</span> <span class="hljs-title function_">createCabin</span>(&#123; ...data, <span class="hljs-attr">image</span>: image &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="（3）创建、修改Cabin函数合二为一"><a href="#（3）创建、修改Cabin函数合二为一" class="headerlink" title="（3）创建、修改Cabin函数合二为一"></a>（3）创建、修改Cabin函数合二为一</h4><p>从上到下讲一下要点：</p><h5 id="1、通过一个很巧妙的函数来判定图片需不需要重新创建Url"><a href="#1、通过一个很巧妙的函数来判定图片需不需要重新创建Url" class="headerlink" title="1、通过一个很巧妙的函数来判定图片需不需要重新创建Url"></a>1、通过一个很巧妙的函数来判定图片需不需要重新创建Url</h5><p>接收到传过来的数据时，如果image是旧的，那么它的开头应该是supabaseUrl，所以通过这个来判断是沿用这个image还是通过它新建Url。</p><h5 id="2、if（）条件语句下，需要换一种方式接收数据"><a href="#2、if（）条件语句下，需要换一种方式接收数据" class="headerlink" title="2、if（）条件语句下，需要换一种方式接收数据"></a>2、if（）条件语句下，需要换一种方式接收数据</h5><p><code>await supabase.from(&#39;cabins&#39;)</code> 本身是一个查询操作，返回的是一个查询对象。如果直接在 <code>if</code> 语句中使用它，可能导致控制流不清晰。你需要先构建查询，再执行它。所以我们在这里先创建了query来接收数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createEditCabin</span>(<span class="hljs-params">newCabin, id</span>) &#123;<br> <span class="hljs-comment">// console.log(newCabin, id);</span><br>  <span class="hljs-keyword">const</span> hasImagePath = newCabin.<span class="hljs-property">image</span>?.<span class="hljs-property">startsWith</span>?.(supabaseUrl);<br><br>  <span class="hljs-keyword">const</span> imageName = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random()&#125;</span>-<span class="hljs-subst">$&#123;newCabin.image.name&#125;</span>`</span>.<span class="hljs-title function_">replaceAll</span>(<br>    <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-string">&#x27;&#x27;</span><br>  );<br>  <span class="hljs-keyword">const</span> imagePath = hasImagePath<br>    ? newCabin.<span class="hljs-property">image</span><br>    : <span class="hljs-string">`<span class="hljs-subst">$&#123;supabaseUrl&#125;</span>/storage/v1/object/public/cabin-images/<span class="hljs-subst">$&#123;imageName&#125;</span>`</span>;<br><br>  <span class="hljs-comment">//1.create/edit cabin</span><br>  <span class="hljs-keyword">let</span> query = supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>);<br><br>  <span class="hljs-comment">//a)create</span><br>  <span class="hljs-keyword">if</span> (!id) query = query.<span class="hljs-title function_">insert</span>([&#123; ...newCabin, <span class="hljs-attr">image</span>: imagePath &#125;]);<br><br>  <span class="hljs-comment">//b)edit</span><br>  <span class="hljs-keyword">if</span> (id) query = query.<span class="hljs-title function_">update</span>(&#123; ...newCabin, <span class="hljs-attr">image</span>: imagePath &#125;).<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, id);<br><br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> query.<span class="hljs-title function_">select</span>().<span class="hljs-title function_">single</span>();<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Cabin could not be created&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//2.upload image</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">error</span>: storageError &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">storage</span><br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabin-images&#x27;</span>)<br>    .<span class="hljs-title function_">upload</span>(imageName, newCabin.<span class="hljs-property">image</span>);<br><br>  <span class="hljs-comment">//3.Delete the cabin if there was an error uploading image</span><br>  <span class="hljs-keyword">if</span> (storageError) &#123;<br>    <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>).<span class="hljs-title function_">delete</span>().<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, data.<span class="hljs-property">id</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(storageError);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<br>      <span class="hljs-string">&#x27;Cabin image could not be uploaded and the cabin was not created&#x27;</span><br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="七、复制cabins"><a href="#七、复制cabins" class="headerlink" title="七、复制cabins"></a>七、复制cabins</h3><h4 id="（1）创建custom-hook"><a href="#（1）创建custom-hook" class="headerlink" title="（1）创建custom hook"></a>（1）创建custom hook</h4><p>一共创建了四个：</p><ul><li>useCabins：得到cabin数据</li><li>useCreateCabin：得到创建cabin的函数</li><li>useDeleteCabin：得到删除cabin的函数</li><li>useEditCabin：得到修改cabin的函数</li></ul><p>reset（）函数不能放在这些文件里，但是可以放在onSubmit中，在调用mutate函数时通过onSuccess当作参数传递</p><h4 id="（2）复制Cabin"><a href="#（2）复制Cabin" class="headerlink" title="（2）复制Cabin"></a>（2）复制Cabin</h4><p>只需要创建一个新的按钮，把onClick函数写为creatCabin，传递的参数就是cabinRow中的cabin信息，把名字更改为<code>copy of $&#123;name&#125;</code>即可。</p><h3 id="八、修改设置"><a href="#八、修改设置" class="headerlink" title="八、修改设置"></a>八、修改设置</h3><p>由于只有一行设置，因此对它的改变比较简单。下面只讲一下要点。</p><p>下面是其中一个修改框：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">FormRow</span> label=<span class="hljs-string">&quot;Minimum nights/booking&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;min-nights&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isUpdating&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&#123;minBookingLength&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> handleUpdate(e, &#x27;minBookingLength&#x27;)&#125;</span><br><span class="language-xml">  /&gt;</span><br>&lt;/<span class="hljs-title class_">FormRow</span>&gt;<br></code></pre></td></tr></table></figure><p>在 <code>onBlur</code>（失去焦点）时触发 <code>handleUpdate</code>，并将用户输入的值与字段名 <code>&#39;minBookingLength&#39;</code> 一起传递给 <code>handleUpdate</code> 函数。</p><p>下面是handleUpdate函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleUpdate</span>(<span class="hljs-params">e, field</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; value &#125; = e.<span class="hljs-property">target</span>;   <span class="hljs-comment">//解构赋值</span><br>    <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-title function_">updateSetting</span>(&#123; [field]: value &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、零碎"><a href="#九、零碎" class="headerlink" title="九、零碎"></a>九、零碎</h3><h4 id="（1）滚动条"><a href="#（1）滚动条" class="headerlink" title="（1）滚动条"></a>（1）滚动条</h4><h5 id="1、使得sidebar固定，只有main的部分滑动"><a href="#1、使得sidebar固定，只有main的部分滑动" class="headerlink" title="1、使得sidebar固定，只有main的部分滑动"></a>1、使得sidebar固定，只有main的部分滑动</h5><p>在Main的样式中加入： <code>overflow: scroll;</code></p><h5 id="2、隐藏全局滚动条（真的很丑）"><a href="#2、隐藏全局滚动条（真的很丑）" class="headerlink" title="2、隐藏全局滚动条（真的很丑）"></a>2、隐藏全局滚动条（真的很丑）</h5><p>在<code>GlobalStyles.js</code>中找到&#x2F;新建一个body元素，写入： <code>overflow: hidden;</code></p><h4 id="（2）children的prop也可以访问"><a href="#（2）children的prop也可以访问" class="headerlink" title="（2）children的prop也可以访问"></a>（2）children的prop也可以访问</h4><p>例如我们会创建cabin表新建的可重用组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FormRow</span>(<span class="hljs-params">&#123; label, error, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledFormRow</span>&gt;</span></span><br><span class="language-xml">      &#123;label &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&#123;children.props.id&#125;</span>&gt;</span>&#123;label&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>&#125;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">      &#123;error &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Error</span>&gt;</span>&#123;error&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Error</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledFormRow</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）连接起来的两个表单不能直接删除元素哦"><a href="#（3）连接起来的两个表单不能直接删除元素哦" class="headerlink" title="（3）连接起来的两个表单不能直接删除元素哦"></a>（3）连接起来的两个表单不能直接删除元素哦</h4><p>{    “code”: “23503”,    “details”: “Key is still referenced from table &quot;booking&quot;.”,    “hint”: null,    “message”: “update or delete on table &quot;cabins&quot; violates <strong>foreign key</strong> constraint &quot;booking_cabinId_fkey&quot; on table &quot;booking&quot;“ }</p><p>想要删除一个cabin的时候报错了，因为它和另一张表单（booking）的内容连接起来了。</p><p>9&#x2F;24：终于完成这一节了呜呜呜呜呜，真不容易😭😭😭😭😭😭😭😭😭😭😭😭😭😭</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程18-Supabase</title>
    <link href="/2024/09/21/react%E8%AF%BE%E7%A8%8B18-Supabase/"/>
    <url>/2024/09/21/react%E8%AF%BE%E7%A8%8B18-Supabase/</url>
    
    <content type="html"><![CDATA[<p>本节课来学习Supabase😘</p><span id="more"></span><p>（Jonas为什么这么搞笑，一边教学一边认真地搞笑😂）</p><p>（迄今为止学习了52h的视频，还剩32h，赶进度啊啊啊啊啊啊）</p><h3 id="一、什么是Supabase"><a href="#一、什么是Supabase" class="headerlink" title="一、什么是Supabase"></a>一、什么是Supabase</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240921165507718.png" alt="image-20240921165507718"></p><p>Supabase 是一个开源的后端即服务（Backend-as-a-Service, BaaS）平台，旨在帮助开发者快速构建现代全栈应用程序。它基于 PostgreSQL 数据库构建，提供了类似 Firebase 的功能，但保持了对开发者友好的开源特性。</p><h4 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1. 数据库"></a>1. <strong>数据库</strong></h4><p>Supabase 的核心是基于 PostgreSQL，这是一个功能强大的关系型数据库。Supabase 在 PostgreSQL 的基础上提供了以下扩展和优化：</p><ul><li><strong>SQL 支持</strong>：开发者可以直接通过 SQL 查询和操作数据库，而不仅仅依赖于 ORM 工具。</li><li><strong>扩展性</strong>：可以使用 PostgreSQL 的功能，如触发器、存储过程和自定义函数，支持复杂查询和操作。</li><li><strong>自动生成的 API</strong>：Supabase 会为数据库中的每个表自动生成 RESTful API，支持 CRUD 操作，无需额外编写后端代码即可操作数据。</li></ul><h4 id="2-存储"><a href="#2-存储" class="headerlink" title="2. 存储"></a>2. <strong>存储</strong></h4><p>Supabase 提供了类似 Amazon S3 的文件存储功能，帮助开发者管理和存储文件。存储功能包括：</p><ul><li><strong>对象存储</strong>：可以存储图像、视频、文档等任意类型的文件。</li><li><strong>文件上传和下载</strong>：内置 API 支持文件上传和下载操作。</li><li><strong>CDN 集成</strong>：通过内置的 CDN 加速文件的传输速度，提高用户访问体验。</li><li><strong>访问控制</strong>：可以设置文件的公开或私有访问权限。</li></ul><h4 id="3-实时功能"><a href="#3-实时功能" class="headerlink" title="3. 实时功能"></a>3. <strong>实时功能</strong></h4><p>Supabase 的实时功能基于 PostgreSQL 的复制机制，并通过 WebSockets 实现，允许客户端实时获取数据库中的数据变化。此功能适合需要高实时性的数据同步应用，如聊天应用、协作工具或实时数据监控：</p><ul><li><strong>数据变化监听</strong>：当数据库中的某条记录发生变化时，客户端可以实时接收到数据更新。</li><li><strong>实时订阅</strong>：通过订阅表、行或事件，客户端可以随时保持与后端的实时同步。</li><li><strong>低延迟</strong>：得益于 WebSockets 和 PostgreSQL 的强大性能，数据变化几乎是瞬时传递。</li></ul><h4 id="4-自动生成的-API"><a href="#4-自动生成的-API" class="headerlink" title="4. 自动生成的 API"></a>4. <strong>自动生成的 API</strong></h4><p>Supabase 会为数据库中的每个表自动生成 RESTful 和 GraphQL API，开发者可以通过这些 API 直接与数据库交互。这减少了开发者编写复杂后端代码的需求。API 主要特性包括：</p><ul><li><strong>全自动</strong>：API 在数据库创建后即自动生成。</li><li><strong>RESTful</strong>：每个表对应一个完整的 CRUD API（创建、读取、更新、删除）。</li><li><strong>分页、排序、过滤</strong>：API 支持丰富的查询参数，可以通过简单的 URL 实现分页、排序、数据筛选等高级功能。</li></ul><h4 id="5-托管服务"><a href="#5-托管服务" class="headerlink" title="5. 托管服务"></a>5. <strong>托管服务</strong></h4><p>虽然 Supabase 是开源的，但它提供了托管服务，可以免去服务器运维和管理的复杂性。托管服务提供的功能包括：</p><ul><li><strong>弹性扩展</strong>：可以根据应用规模自动调整资源，避免服务器过载。</li><li><strong>自动备份</strong>：Supabase 提供了数据库的定期备份功能，确保数据安全。</li><li><strong>监控和分析</strong>：可以查看数据库的运行状态、查询性能、错误日志等。</li></ul><h4 id="6-客户端-SDK-和-API"><a href="#6-客户端-SDK-和-API" class="headerlink" title="6. 客户端 SDK 和 API"></a>6. <strong>客户端 SDK 和 API</strong></h4><p>Supabase 提供了多种客户端 SDK，支持不同的编程语言和框架：</p><ul><li><strong>JavaScript&#x2F;TypeScript SDK</strong>：最常用的 SDK，适用于 React、Vue、Next.js 等现代前端框架。</li><li><strong>Flutter SDK</strong>：适用于移动端开发，支持 iOS 和 Android。</li><li><strong>REST API</strong>：可以通过任何 HTTP 客户端访问 RESTful API，适用于跨平台应用开发。</li></ul><h4 id="7-安全与权限"><a href="#7-安全与权限" class="headerlink" title="7. 安全与权限"></a>7. <strong>安全与权限</strong></h4><p>Supabase 提供了详细的安全和权限管理功能：</p><ul><li>**基于行级别的安全性 (RLS)**：允许开发者基于用户身份控制每个用户对特定行的访问权限。</li><li><strong>角色管理</strong>：可以为用户分配不同的角色，以实现复杂的权限管理体系。</li></ul><h4 id="8-开源与社区"><a href="#8-开源与社区" class="headerlink" title="8. 开源与社区"></a>8. <strong>开源与社区</strong></h4><p>Supabase 的最大特点之一是其开源性，所有核心代码均可在 GitHub 上获取，开发者可以自由地修改、扩展和贡献代码。开源的优势包括：</p><ul><li><strong>自由托管</strong>：开发者可以选择在自己的服务器上托管 Supabase，完全自主控制数据和服务。</li><li><strong>活跃社区</strong>：Supabase 拥有一个活跃的开发者社区，提供丰富的学习资源、示例项目和支持。</li></ul><h4 id="9-适用场景"><a href="#9-适用场景" class="headerlink" title="9. 适用场景"></a>9. 适用场景</h4><p>Supabase 非常适合需要快速开发原型、MVP（最小可行产品）或全栈应用的开发者。其主要适用场景包括：</p><ul><li><strong>数据驱动应用</strong>：例如仪表板、实时监控、数据可视化等。</li><li><strong>用户管理和社交应用</strong>：需要复杂的用户管理和认证功能。</li><li><strong>移动端应用</strong>：通过 Flutter SDK 快速构建移动应用的后端。</li><li><strong>实时功能需求</strong>：例如聊天应用、协作工具或其他需要数据实时同步的应用。</li></ul><h3 id="二、使用supabase创建tables"><a href="#二、使用supabase创建tables" class="headerlink" title="二、使用supabase创建tables"></a>二、使用supabase创建tables</h3><ol><li><p>用GitHub账号登陆后创建一个project</p></li><li><p>思考需要的data table（本次项目几乎没有ui state而都是global state）</p></li><li><p>创建table，并且思考table之间的连接（比如booking要将guest和cabin连接起来）</p></li><li><p>在Authentication中的Policies选项中可以设置每个table的访问权限</p></li><li><p>在API Docs中可以查看访问table的api</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240921205233405.png" alt="image-20240921205233405"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240921205658958.png" alt="image-20240921205658958"></p><h3 id="三、连接React项目和supabase"><a href="#三、连接React项目和supabase" class="headerlink" title="三、连接React项目和supabase"></a>三、连接React项目和supabase</h3><p>⭕<code>npm install @supabase/supabase-js</code></p><p>⭕在services文件夹中新建supabase.js，内容如下：（从api docs搬运）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createClient &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@supabase/supabase-js&#x27;</span>;<br><span class="hljs-keyword">const</span> supabaseUrl = <span class="hljs-string">&#x27;https://mmyxdnpmmlqmyjxjypmw.supabase.co&#x27;</span>;<br><span class="hljs-keyword">const</span> supabaseKey = process.<span class="hljs-property">env</span>.<span class="hljs-property">SUPABASE_KEY</span>;<br><span class="hljs-keyword">const</span> supabase = <span class="hljs-title function_">createClient</span>(supabaseUrl, supabaseKey);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> supabase;<br></code></pre></td></tr></table></figure><p>✅将supabaseKey的内容替换成settings-&gt;API-&gt;Project API keys-&gt;(anon public)的key</p><p>⭕在services文件夹中建立apiCabins.js（为每个table都建立一个这样的文件，放置与api获取数据有关的函数）。查询api Docs目录选择想要查询的内容，copy相应js代码段到函数中。</p><p>（连接成功，好顺利……新技术就是好啊🤗）</p><p>⭕在supabase网站（个人项目主页的）的Storage中点击<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922095908254.png" alt="image-20240922095908254" style="zoom: 67%;" />，创建两个Buckets：avatars（存储用户头像）；cabin-images（存储木屋图片）。均设置为public。图片可直接拖动过去，点击图片，点击<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922100118322.png" alt="image-20240922100118322" style="zoom:67%;" />，就可以直接在项目中访问它。在table中也可以将相应的url插入表单。</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程17-Thewildoasis项目起步</title>
    <link href="/2024/09/20/react%E8%AF%BE%E7%A8%8B17-Thewildoasis%E9%A1%B9%E7%9B%AE%E8%B5%B7%E6%AD%A5/"/>
    <url>/2024/09/20/react%E8%AF%BE%E7%A8%8B17-Thewildoasis%E9%A1%B9%E7%9B%AE%E8%B5%B7%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>全新的项目😼😼😼 本节重点：styled component</p><span id="more"></span><h3 id="一、项目分析（懒得打字版）"><a href="#一、项目分析（懒得打字版）" class="headerlink" title="一、项目分析（懒得打字版）"></a>一、项目分析（懒得打字版）</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165341339.png" alt="image-20240920165341339"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165419677.png" alt="image-20240920165419677"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165504593.png" alt="image-20240920165504593"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165522320.png" alt="image-20240920165522320"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165545636.png" alt="image-20240920165545636"></p><p>✅安装eslint和router见课程十四</p><h3 id="二、Styled-Components"><a href="#二、Styled-Components" class="headerlink" title="二、Styled Components"></a>二、Styled Components</h3><blockquote><p>怎么prettier需要自己配置文件了呀，不然就不能用，解决了半天，栓Q……</p><p>要先在根目录创建一个.prettierrc并提供基本配置:{  “singleQuote”: true,  “trailingComma”: “es5” }</p></blockquote><p>⭕ <code>npm i styled-components</code></p><p>⭕安装<code>vscode-styled-components</code>拓展使得css代码高亮</p><p>⭕<a href="https://styled-components.com/">https://styled-components.com/</a></p><h4 id="（1）基本用法"><a href="#（1）基本用法" class="headerlink" title="（1）基本用法"></a>（1）基本用法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Main</span> = styled.<span class="hljs-property">main</span><span class="hljs-string">`</span><br><span class="hljs-string">  background-color: var(--color-grey-200);</span><br><span class="hljs-string">  padding: 4rem 4.8rem 6.4rem;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h4 id="（2）属性"><a href="#（2）属性" class="headerlink" title="（2）属性"></a>（2）属性</h4><h5 id="1、-as-属性-："><a href="#1、-as-属性-：" class="headerlink" title="1、**as 属性**："></a>1、**<code>as</code> 属性**：</h5><ul><li><code>as</code> 属性允许你更改组件的根元素。例如，如果你有一个 <code>styled.button</code>，你可以使用 <code>as=&quot;a&quot;</code> 将其渲染为一个链接，而不是按钮。</li><li><code>as</code> 可以动态地根据需要更改渲染的 HTML 元素，非常灵活。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">StyledButton</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`</span><br><span class="hljs-string">  background-color: blue;</span><br><span class="hljs-string">  color: white;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 使用 as 属性</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledButton</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>Go Home<span class="hljs-tag">&lt;/<span class="hljs-name">StyledButton</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2、-type-属性-："><a href="#2、-type-属性-：" class="headerlink" title="2、**type 属性**："></a>2、**<code>type</code> 属性**：</h5><ul><li><code>type</code> 属性通常用于原生 HTML 元素（如 <code>&lt;input&gt;</code> 或 <code>&lt;button&gt;</code>），指定元素的类型。例如，按钮的类型可以是 <code>button</code>、<code>submit</code> 或 <code>reset</code>。</li><li><code>type</code> 属性是一个 HTML 属性，并不涉及 styled-components 的样式处理。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">StyledButton</span> type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<span class="hljs-title class_">Submit</span>&lt;/<span class="hljs-title class_">StyledButton</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="3、role属性"><a href="#3、role属性" class="headerlink" title="3、role属性"></a>3、<code>role</code>属性</h5><p><code>role</code> 是一个标准的 HTML 属性，用于指定元素的角色，通常与无障碍访问（Accessibility，简称 a11y）相关。它告诉屏幕阅读器等辅助技术，这个元素应该如何被解读或交互。</p><p><strong>使用场景</strong>：</p><ol><li>使用 <code>as</code> 可以在同一个 styled 组件上进行多种表现形式的渲染，增加了组件的复用性。</li><li><code>type</code> 用于控制元素的行为，通常在表单相关组件中使用。</li></ol><p>总的来说，<code>as</code> 提供了更大的灵活性和复用性，而 <code>type</code> 则是与元素行为相关的标准 HTML 属性。选择使用 <code>as</code> 而不是 <code>type</code> 主要是因为它与 styled-components 的设计理念相契合，允许更好地控制组件的呈现形式。</p><h4 id="（3）默认props"><a href="#（3）默认props" class="headerlink" title="（3）默认props"></a>（3）默认props</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Row</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;vertical&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（4）装饰第三方包内组件"><a href="#（4）装饰第三方包内组件" class="headerlink" title="（4）装饰第三方包内组件"></a>（4）装饰第三方包内组件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">StyledNavLink</span> = <span class="hljs-title function_">styled</span>(<span class="hljs-title class_">NavLink</span>)<br></code></pre></td></tr></table></figure><p>使用括号链接第三方包内组件</p><h4 id="（5）数组props"><a href="#（5）数组props" class="headerlink" title="（5）数组props"></a>（5）数组props</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> styled, &#123; css &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span>;<br><br><span class="hljs-keyword">const</span> sizes = &#123;<br>  <span class="hljs-attr">small</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.4rem</span> <span class="hljs-number">0.8rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-transform</span>: uppercase;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  `</span>,<br>  <span class="hljs-attr">medium</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span> <span class="hljs-number">1.6rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;</span><br><span class="language-css">  `</span>,<br>  <span class="hljs-attr">large</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span> <span class="hljs-number">2.4rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;</span><br><span class="language-css">  `</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> variations = &#123;<br>  <span class="hljs-attr">primary</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-brand-<span class="hljs-number">50</span>);</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-brand-<span class="hljs-number">600</span>);</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-brand-<span class="hljs-number">700</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  `</span>,<br>  <span class="hljs-attr">secondary</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-grey-<span class="hljs-number">600</span>);</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--color-grey-<span class="hljs-number">0</span>);</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--color-grey-<span class="hljs-number">200</span>);</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-grey-<span class="hljs-number">50</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  `</span>,<br>  <span class="hljs-attr">danger</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-red-<span class="hljs-number">100</span>);</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-red-<span class="hljs-number">700</span>);</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-red-<span class="hljs-number">800</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  `</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`</span><br><span class="hljs-string">  border: none;</span><br><span class="hljs-string">  border-radius: var(--border-radius-sm);</span><br><span class="hljs-string">  box-shadow: var(--shadow-sm);</span><br><span class="hljs-string"></span><br><span class="hljs-string">  <span class="hljs-subst">$&#123;(props) =&gt; sizes[props.size]&#125;</span></span><br><span class="hljs-string">  <span class="hljs-subst">$&#123;(props) =&gt; variations[props.variation]&#125;</span></span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-title class_">Button</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>  <span class="hljs-attr">variation</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,<br>  <span class="hljs-attr">size</span>: <span class="hljs-string">&#x27;medium&#x27;</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Button</span>;<br></code></pre></td></tr></table></figure><h3 id="三、零碎"><a href="#三、零碎" class="headerlink" title="三、零碎"></a>三、零碎</h3><h4 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h4><p>⭕<code>npm i react-icons</code>  图标集： <a href="https://react-icons.github.io/react-icons/">https://react-icons.github.io/react-icons/</a></p><h4 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">AppLayout</span> /&gt;</span>&#125;&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">index</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">replace</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;dashboard&quot;</span> /&gt;</span>&#125; /&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将layout组件包裹住其他的Route，使用<Outlet />组件承接其他组件内容</p><p>index关键字认证主页面，replace关键字替代历史url</p><h4 id="（3）styled-component的其他重要属性"><a href="#（3）styled-component的其他重要属性" class="headerlink" title="（3）styled component的其他重要属性"></a>（3）styled component的其他重要属性</h4><h5 id="1、-ref-属性-："><a href="#1、-ref-属性-：" class="headerlink" title="1、**ref 属性**："></a>1、**<code>ref</code> 属性**：</h5><ul><li><code>ref</code> 属性允许你访问组件的 DOM 节点或 class 实例，用于直接操作 DOM，常见于需要获取元素引用的场景，例如焦点管理、动画、滚动等。</li></ul><h5 id="2、-key-属性-："><a href="#2、-key-属性-：" class="headerlink" title="2、**key 属性**："></a>2、**<code>key</code> 属性**：</h5><ul><li><code>key</code> 是 React 用来标识哪些元素被修改、添加或移除的特殊属性，尤其在渲染列表时非常重要。<code>styled-components</code> 内的组件同样遵循这个规则。</li></ul><h5 id="3、-className-属性-："><a href="#3、-className-属性-：" class="headerlink" title="3、**className 属性**："></a>3、**<code>className</code> 属性**：</h5><ul><li><code>className</code> 属性允许你给 <code>styled-component</code> 组件添加额外的 class 名，这对于在一个组件中应用多个样式规则或与外部 CSS 集成时特别有用。</li></ul><h5 id="4、-style-属性-："><a href="#4、-style-属性-：" class="headerlink" title="4、**style 属性**："></a>4、**<code>style</code> 属性**：</h5><ul><li><code>style</code> 属性是内联样式，可以直接在组件上设置行内样式，用于一些动态样式的设置，但不建议与 <code>styled-components</code> 的样式系统大量混用。</li></ul><h5 id="5、-style-属性-："><a href="#5、-style-属性-：" class="headerlink" title="5、**style 属性**："></a>5、**<code>style</code> 属性**：</h5><ul><li><code>style</code> 属性是内联样式，可以直接在组件上设置行内样式，用于一些动态样式的设置，但不建议与 <code>styled-components</code> 的样式系统大量混用。</li></ul><h5 id="6、children、onClick、defaultvalue等"><a href="#6、children、onClick、defaultvalue等" class="headerlink" title="6、children、onClick、defaultvalue等"></a>6、children、onClick、defaultvalue等</h5>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程16-继续使用Redux构建pizza项目</title>
    <link href="/2024/09/19/react%E8%AF%BE%E7%A8%8B16-%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8Redux%E6%9E%84%E5%BB%BApizza%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/09/19/react%E8%AF%BE%E7%A8%8B16-%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8Redux%E6%9E%84%E5%BB%BApizza%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>由于这部分内容比较简单，就简略记录一下重点叭（Redux快被我忘得一干二净了🥲🥲）</p><span id="more"></span><h4 id="（1）useSelector"><a href="#（1）useSelector" class="headerlink" title="（1）useSelector"></a>（1）useSelector</h4><p>在前面如果我们想要获取store里的状态，都是用useSelector在相应的组件函数里直接获取。但是现在发现其实更推荐在Slice文件中集中地写入selector函数，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCart</span> = (<span class="hljs-params">state</span>) =&gt; state.<span class="hljs-property">cart</span>.<span class="hljs-property">cart</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTotalCartQuantity</span> = (<span class="hljs-params">state</span>) =&gt;<br>  state.<span class="hljs-property">cart</span>.<span class="hljs-property">cart</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item.<span class="hljs-property">quantity</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTotalCartPrice</span> = (<span class="hljs-params">state</span>) =&gt;<br>  state.<span class="hljs-property">cart</span>.<span class="hljs-property">cart</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item.<span class="hljs-property">totalPrice</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这样的话如果将来需要改变某个状态名字，就可以只在这里修改一次了。</p><h4 id="（2）？？运算符"><a href="#（2）？？运算符" class="headerlink" title="（2）？？运算符"></a>（2）？？运算符</h4><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCurrentQuantityById</span> = (<span class="hljs-params">id</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span><br>  state.<span class="hljs-property">cart</span>.<span class="hljs-property">cart</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">pizzaId</span> === id)?.<span class="hljs-property">quantity</span> ?? <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p><code>??</code> 是<strong>空值合并运算符</strong>（Nullish Coalescing Operator）。它用于在左侧表达式为 <code>null</code> 或 <code>undefined</code> 时，返回右侧的值。</p><h4 id="（3）caseReducers"><a href="#（3）caseReducers" class="headerlink" title="（3）caseReducers"></a>（3）caseReducers</h4><p>在购物车中实现增加和减少pizza数量的时候遇到了老问题，就是pizza的数量会变成负值。我试图解决这个问题，于是写了一行代码：<code>if (!quantity) return;</code>这样如果pizza的数量减到0之后就不会呈现这个pizza，也就无法再使它的数量减下去了。然而随后又遇到了另一个问题，就是把所有pizza数量减为0的时候，没有展示预设的空购物车界面，也就是说cart的长度不为0，于是我得到cartprice，用它来决定是否展示空购物车界面。</p><p>但是很明显不是正确的方法，因为在store里，这时候仍旧有这些quantity为0的pizza的元素，只是个数为0而已，最好的办法是删除这些元素。于是可以在slice里的dcrease函数中添加代码：</p><p><code>if (item.quantity === 0) cartSlice.caseReducers.deleteItem(state, action);</code></p><h4 id="（4）creatAsyncThunk"><a href="#（4）creatAsyncThunk" class="headerlink" title="（4）creatAsyncThunk"></a>（4）creatAsyncThunk</h4><p><code>createAsyncThunk</code> 是 Redux Toolkit 提供的一个功能，用来简化在 Redux 中处理异步逻辑的操作。它自动生成相应的 action 类型并管理异步请求的生命周期，如 <code>pending</code>、<code>fulfilled</code> 和 <code>rejected</code> 状态，减少了手动书写异步逻辑的工作量。</p><p><code>createAsyncThunk</code> 的优点：</p><ol><li><strong>自动生成 action</strong>：无需手动编写 <code>pending</code>、<code>fulfilled</code> 和 <code>rejected</code> action，简化了代码。</li><li><strong>内置的错误处理机制</strong>：可以使用 <code>rejectWithValue</code> 返回自定义的错误信息。</li><li><strong>统一的异步逻辑管理</strong>：通过 <code>extraReducers</code> 来处理不同状态的逻辑，使代码更加可读。</li></ol><p>下列这段代码可以和课程13中的Thunk做对比。</p><p>首先，传入动作类型和需要执行的异步函数，一旦action被派遣，这里的函数就会被执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchAddress = <span class="hljs-title function_">createAsyncThunk</span>(<br>  <span class="hljs-string">&#x27;user/fetchAddress&#x27;</span>,<br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 1) We get the user&#x27;s geolocation position</span><br>    <span class="hljs-keyword">const</span> positionObj = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getPosition</span>();<br>    <span class="hljs-keyword">const</span> position = &#123;<br>      <span class="hljs-attr">latitude</span>: positionObj.<span class="hljs-property">coords</span>.<span class="hljs-property">latitude</span>,<br>      <span class="hljs-attr">longitude</span>: positionObj.<span class="hljs-property">coords</span>.<span class="hljs-property">longitude</span>,<br>    &#125;;<br><br>    <span class="hljs-comment">// 2) Then we use a reverse geocoding API to get a description of the user&#x27;s address, so we can display it the order form, so that the user can correct it if wrong</span><br>    <span class="hljs-keyword">const</span> addressObj = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getAddress</span>(position);<br>    <span class="hljs-keyword">const</span> address = <span class="hljs-string">`<span class="hljs-subst">$&#123;addressObj?.locality&#125;</span>, <span class="hljs-subst">$&#123;addressObj?.city&#125;</span> <span class="hljs-subst">$&#123;addressObj?.postcode&#125;</span>, <span class="hljs-subst">$&#123;addressObj?.countryName&#125;</span>`</span>;<br><br>    <span class="hljs-comment">// 3) Then we return an object with the data that we are interested in</span><br>    <span class="hljs-keyword">return</span> &#123; position, address &#125;;<br>  &#125;,<br>);<br></code></pre></td></tr></table></figure><h4 id="（5）value和defaultValue"><a href="#（5）value和defaultValue" class="headerlink" title="（5）value和defaultValue"></a>（5）value和defaultValue</h4><p><code>value</code></p><ul><li><strong>受控组件</strong>：当使用 <code>value</code> 属性时，表单元素的值完全由 React 组件的状态控制。这种方式称为“受控组件”（controlled component）。</li><li><strong>实时同步</strong>：<code>value</code> 需要与组件的状态保持同步，当输入发生变化时，必须通过状态更新来改变值。通常搭配 <code>onChange</code> 事件来更新状态。</li></ul><p><code>defaultValue</code></p><ul><li><strong>非受控组件</strong>：使用 <code>defaultValue</code> 时，表单元素的初始值仅在组件首次渲染时设置，之后它的值不再由 React 控制。这种方式称为“非受控组件”（uncontrolled component）。</li><li><strong>仅初始化</strong>：<code>defaultValue</code> 仅用于设置元素的初始值，表单控件在用户输入后会自己管理其值，React 不再负责后续的变化。</li></ul><h4 id="（6）fetcher"><a href="#（6）fetcher" class="headerlink" title="（6）fetcher"></a>（6）fetcher</h4><p>使用 <code>useFetcher</code> 钩子来处理非导航相关的表单提交，适合需要局部更新或是处理背景请求的场景。<code>fetcher.Form</code> 创建了一个 <code>&lt;form&gt;</code>，并且使用 <code>PATCH</code> 方法提交数据。这种方式让 <code>react-router</code> 能够在不刷新整个页面的情况下局部提交数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useFetcher &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../ui/Button&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; updateOrder &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../services/apiRestaurant&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">UpdateOrder</span>(<span class="hljs-params">&#123; order &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> fetcher = <span class="hljs-title function_">useFetcher</span>();<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">fetcher.Form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;PATCH&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Make priority<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">fetcher.Form</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">UpdateOrder</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">&#123; request, params &#125;</span>) &#123;<br>  <span class="hljs-comment">// console.log(&#x27;update&#x27;);</span><br>  <span class="hljs-keyword">const</span> data = &#123; <span class="hljs-attr">priority</span>: <span class="hljs-literal">true</span> &#125;;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">updateOrder</span>(params.<span class="hljs-property">orderId</span>, data);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在没有数据并且 <code>fetcher</code> 处于空闲 (<code>idle</code>) 状态时，通过 <code>fetcher.load(&#39;/menu&#39;)</code> 来发起请求加载菜单数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!fetcher.<span class="hljs-property">data</span> &amp;&amp; fetcher.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;idle&#x27;</span>) fetcher.<span class="hljs-title function_">load</span>(<span class="hljs-string">&#x27;/menu&#x27;</span>);<br>  &#125;,<br>  [fetcher.<span class="hljs-property">state</span>, fetcher.<span class="hljs-property">data</span>],<br>);<br></code></pre></td></tr></table></figure><h4 id="（7）join"><a href="#（7）join" class="headerlink" title="（7）join"></a>（7）join</h4><p><code>join()</code> 函数主要用于将一个列表或数组中的元素连接成一个字符串。它通常用于将多个字符串拼接在一起，中间插入指定的分隔符。</p><p><code>array.join(separator);</code></p><ul><li>**<code>separator</code>**：可选参数。指定分隔数组元素的字符。如果未指定，默认使用逗号 <code>,</code> 作为分隔符。</li><li>在没有指定 <code>separator</code> 时，默认使用逗号 <code>,</code> 分隔。</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程15-使用Tailwind设计项目界面</title>
    <link href="/2024/09/13/react%E8%AF%BE%E7%A8%8B15-%E4%BD%BF%E7%94%A8Tailwind%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE%E7%95%8C%E9%9D%A2/"/>
    <url>/2024/09/13/react%E8%AF%BE%E7%A8%8B15-%E4%BD%BF%E7%94%A8Tailwind%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE%E7%95%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>本次课程学习Tailwind，并使用它来设计fast pizza的界面🫡。</p><span id="more"></span><p>⭕<a href="https://tailwindcss.com/docs/installation">https://tailwindcss.com/docs/installation</a>（官网）</p><p>⭕<a href="https://tailwind.org.cn/docs/installation%EF%BC%88%E4%B8%AD%E6%96%87%E7%BD%91%E5%9D%80%EF%BC%89">https://tailwind.org.cn/docs/installation（中文网址）</a></p><p>按照步骤去使用</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240913103504395.png" alt="image-20240913103504395"></p><p>但是在css文件中会报错：<code>Unknown at rule @tailwindcss(unknownAtRules)</code></p><p>解决方法是打开setting.json文件，在里面添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><br> <span class="hljs-attr">&quot;*.css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tailwindcss&quot;</span><br><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>（思考了一个小时的问题😇，世界上还是聪明的人多哈）</p><p>⭕安装Tailwind CSS拓展</p><p>⭕<a href="https://github.com/tailwindlabs/prettier-plugin-tailwindcss?tab=readme-ov-file">https://github.com/tailwindlabs/prettier-plugin-tailwindcss?tab=readme-ov-file</a></p><p>安装prettier-plugin-tailwindcss插件：</p><p><code>npm install -D prettier prettier-plugin-tailwindcss</code></p><p>然后进行配置，新建prettier.config.cjs文件，在里面配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">module.exports = <span class="hljs-punctuation">&#123;</span><br>  plugins<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;prettier-plugin-tailwindcss&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-comment">// singleQuote: true,</span><br><span class="hljs-punctuation">&#125;</span>;<br></code></pre></td></tr></table></figure><p>这样可以自动排序类名</p><p>（我怎么配置了两个小时……我真的流泪了。。。。）</p><p>🆒<a href="https://css-tricks.com/emoji-as-a-favicon/">https://css-tricks.com/emoji-as-a-favicon/</a></p><h3 id="一、学习初步使用"><a href="#一、学习初步使用" class="headerlink" title="一、学习初步使用"></a>一、学习初步使用</h3><h4 id="（1）color"><a href="#（1）color" class="headerlink" title="（1）color"></a>（1）color</h4><p>在tailwind的官网中搜索text color、background color查找具体配置说明</p><p>index.html中也可以进行配置，来设置全局style</p><h4 id="（2）Text"><a href="#（2）Text" class="headerlink" title="（2）Text"></a>（2）Text</h4><p>font size（大小）、font weight（加粗）、uppercase（大写）、letter spacing（间距）</p><h4 id="（3）space"><a href="#（3）space" class="headerlink" title="（3）space"></a>（3）space</h4><p>margin（外边距）、padding（内边距）、border（边框）</p><p><strong><code>space</code><strong>：主要用于 Tailwind CSS 中，用于设置</strong>多个子元素</strong>之间的间距，不改变第一个和最后一个子元素的外边距。例如，<code>space-x-4</code> 会在每个子元素之间增加 4 的水平间距，但不会影响最外层的左右间距。</p><p>display：</p><ul><li>**<code>block</code>**：用来定义内容需要占满一整行的元素（如段落、容器等）。</li><li>**<code>inline</code>**：适合内容较短、需要与其他元素同一行显示的情况（如文字、链接等）。</li><li>**<code>inline-block</code>**：用于需要水平排列的元素，并且每个元素有独立的宽高控制（如导航栏中的按钮）。</li><li>**<code>flex</code>**：用来创建灵活的、响应式的布局，子元素可以自动调整排列。</li><li>**<code>grid</code>**：适合构建复杂的、结构化的页面布局，子元素可以按照网格规则自动排布。</li><li>**<code>none</code>**：用于隐藏不需要显示的元素。</li></ul><h4 id="（4）断点"><a href="#（4）断点" class="headerlink" title="（4）断点"></a>（4）断点</h4><p><code>breakpoints</code>（断点）用于实现响应式设计。断点定义了在不同的屏幕宽度范围内，如何应用不同的样式规则。这使得可以根据设备的屏幕大小调整页面布局和样式，以提供更好的用户体验。</p><ul><li><strong><code>sm</code></strong>: 小屏幕（手机，最小宽度 640px）</li><li><strong><code>md</code></strong>: 中等屏幕（平板，最小宽度 768px）</li><li><strong><code>lg</code></strong>: 大屏幕（桌面，最小宽度 1024px）</li><li><strong><code>xl</code></strong>: 超大屏幕（大桌面，最小宽度 1280px）</li><li><strong><code>2xl</code></strong>: 超超大屏幕（超大桌面，最小宽度 1536px）</li></ul><p>eg：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;!-- 默认字体大小，当屏幕宽度达到或超过 768px 时字体变大 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-base md:text-lg&quot;</span>&gt;</span>响应式字体大小<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果 Tailwind 的默认断点不符合你的需求，可以在 <code>tailwind.config.js</code> 文件中进行自定义配置。例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 添加一个新的断点 3xl，用于在屏幕宽度达到或超过 1600px 时应用样式。</span><br>module.exports = <span class="hljs-punctuation">&#123;</span><br>  theme<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    extend<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      screens<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        &#x27;<span class="hljs-number">3</span>xl&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">1600</span>px&#x27;<span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="（5）Flexbox"><a href="#（5）Flexbox" class="headerlink" title="（5）Flexbox"></a>（5）Flexbox</h4><p>items-center : 用于在 Flexbox 容器的交叉轴（垂直轴）上将所有子元素居中对齐。</p><p>justify-between :用于在 Flexbox 容器的主轴（水平轴）上，将所有子元素之间的空间均匀分配。</p><h4 id="（6）Grid"><a href="#（6）Grid" class="headerlink" title="（6）Grid"></a>（6）Grid</h4><p><code>grid h-screen grid-rows-[auto_1fr_auto]</code></p><h4 id="（7）Form-element"><a href="#（7）Form-element" class="headerlink" title="（7）Form element"></a>（7）Form element</h4><p>​    <code>className=&quot;w-28 rounded-full bg-yellow-100 px-4 py-2 text-sm transition-all duration-300 placeholder:text-stone-400 focus:outline-none focus:ring focus:ring-yellow-600 focus:ring-opacity-50 sm:w-64 sm:focus:w-72&quot;</code></p><h4 id="（8）重用"><a href="#（8）重用" class="headerlink" title="（8）重用"></a>（8）重用</h4><h5 id="1、在css中编写类名"><a href="#1、在css中编写类名" class="headerlink" title="1、在css中编写类名"></a>1、在css中编写类名</h5><p>此时在className&#x3D;“input”就可以运用这个类名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@layer</span> components &#123;<br>  <span class="hljs-selector-class">.input</span> &#123;<br>    <span class="hljs-keyword">@apply</span> w-full rounded-full border border-stone-<span class="hljs-number">200</span> px-<span class="hljs-number">4</span> py-<span class="hljs-number">2</span> text-sm <span class="hljs-attribute">placeholder</span>:text-stone-<span class="hljs-number">400</span> <span class="hljs-attribute">focus</span>:outline-none <span class="hljs-attribute">focus</span>:ring <span class="hljs-attribute">focus</span>:ring-yellow-<span class="hljs-number">300</span> <span class="hljs-attribute">md</span>:px-<span class="hljs-number">6</span> <span class="hljs-attribute">md</span>:py-<span class="hljs-number">3</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、在React中新建组件"><a href="#2、在React中新建组件" class="headerlink" title="2、在React中新建组件"></a>2、在React中新建组件</h5><p>eg：这里创建了一个既可以被当作button又可以被当作Link的可重用组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">LinkButton</span>(<span class="hljs-params">&#123; children, to &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">const</span> className = <span class="hljs-string">&#x27;text-sm text-blue-300 hover:text-blue-600 hover:underline&#x27;</span>;<br><br>  <span class="hljs-keyword">if</span> (to === <span class="hljs-string">&#x27;-1&#x27;</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(-1)&#125; className=&#123;className&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-symbol">&amp;larr;</span> Go back</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;to&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">LinkButton</span>;<br><br></code></pre></td></tr></table></figure><h4 id="（9）配置"><a href="#（9）配置" class="headerlink" title="（9）配置"></a>（9）配置</h4><p>可以查看默认配置</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240918155917608.png" alt="image-20240918155917608" style="zoom:50%;" /><p>修改默认配置：在<code>tailwind.config.js</code>中：</p><p>（按照默认配置文件的格式）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */</span><br><span class="hljs-comment">//eslint-disable-next-line  </span><br>export default <span class="hljs-punctuation">&#123;</span><br>  content<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;./index.html&#x27;<span class="hljs-punctuation">,</span> &#x27;./src<span class="hljs-comment">/**/</span>*.<span class="hljs-punctuation">&#123;</span>js<span class="hljs-punctuation">,</span>ts<span class="hljs-punctuation">,</span>jsx<span class="hljs-punctuation">,</span>tsx<span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  theme<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    fontFamily<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      sans<span class="hljs-punctuation">:</span> &#x27;Roboto Mono<span class="hljs-punctuation">,</span> monospace&#x27;<span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    extend<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  plugins<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span>;<br></code></pre></td></tr></table></figure><h4 id="（10）type"><a href="#（10）type" class="headerlink" title="（10）type"></a>（10）type</h4><p>Button组件：</p><p>接收type props，并使用styles来应用不同类名</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; children, disabled, to, type &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> base =<br>    <span class="hljs-string">&#x27;inline-block rounded-full bg-yellow-500 uppercase tracking-wide text-stone-800 transition-colors duration-300 hover:bg-yellow-300 focus:bg-yellow-300 focus:outline-none focus:ring focus:ring-yellow-300 focus:ring-offset-2 disabled:cursor-not-allowed&#x27;</span>;<br><br>  <span class="hljs-keyword">const</span> styles = &#123;<br>    <span class="hljs-attr">primary</span>: base + <span class="hljs-string">&#x27; px-4 py-3 md:px-6 md:py-4&#x27;</span>,<br>    <span class="hljs-attr">small</span>: base + <span class="hljs-string">&#x27; px-4 py-2 md:px-5 md:py-2.5 text-xs&#x27;</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (to)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles[type]&#125;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;to&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br>    );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;disabled&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles[type]&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Button</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程14.1-React-Router专题</title>
    <link href="/2024/09/11/react%E8%AF%BE%E7%A8%8B14.1-React-Router%E4%B8%93%E9%A2%98/"/>
    <url>/2024/09/11/react%E8%AF%BE%E7%A8%8B14.1-React-Router%E4%B8%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本篇文章重重整理一下React Router的工具和用法集合。</p><span id="more"></span><h3 id="一、useNavigate"><a href="#一、useNavigate" class="headerlink" title="一、useNavigate"></a>一、useNavigate</h3><p>用于通过编程方式在 React 应用中进行导航（页面跳转）。相比于传统的 <code>&lt;a&gt;</code> 标签或者 <code>Link</code> 组件，<code>useNavigate</code> 提供了更灵活的方式来实现跳转，例如基于用户交互或某些条件时自动跳转。</p><h4 id="（1）基本用法"><a href="#（1）基本用法" class="headerlink" title="（1）基本用法"></a>（1）基本用法</h4><p><code>useNavigate</code> 返回一个 <code>navigate</code> 函数，可以调用该函数并传入路径，实现导航。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>(); <span class="hljs-comment">// 使用 useNavigate 钩子</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">goToAboutPage</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/about&quot;</span>); <span class="hljs-comment">// 编程式导航到 &quot;/about&quot; 路由</span><br>  &#125;;<br></code></pre></td></tr></table></figure><p>跳转类型</p><ul><li><strong>绝对路径</strong>：从根路径开始，如 <code>navigate(&quot;/about&quot;)</code>。</li><li><strong>相对路径</strong>：相对于当前路径，如 <code>navigate(&quot;profile&quot;)</code>。</li></ul><h4 id="（2）replace替换历史记录"><a href="#（2）replace替换历史记录" class="headerlink" title="（2）replace替换历史记录"></a>（2）replace替换历史记录</h4><p>默认情况下，<code>navigate</code> 会在浏览器的历史记录中添加一个新条目，这样用户可以通过浏览器的“后退”按钮回到之前的页面。如果不想让用户通过后退按钮返回，可以使用 <code>replace</code> 选项。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/dashboard&quot;</span>, &#123; <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;);<br></code></pre></td></tr></table></figure><p>这样跳转后，<code>/dashboard</code> 会替换当前的页面，用户不能通过“后退”按钮返回到原页面。</p><h4 id="（3）前进和后退"><a href="#（3）前进和后退" class="headerlink" title="（3）前进和后退"></a>（3）前进和后退</h4><p><code>useNavigate</code> 还可以像浏览器的前进和后退按钮一样，基于历史记录进行导航。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 后退到上一个页面</span><br><span class="hljs-title function_">navigate</span>(-<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 前进到下一个页面</span><br><span class="hljs-title function_">navigate</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h4 id="（4）传递状态"><a href="#（4）传递状态" class="headerlink" title="（4）传递状态"></a>（4）传递状态</h4><p>可以通过 <code>navigate</code> 传递一些状态信息到目标页面，这些状态信息不会显示在 URL 中，但可以在目标页面中通过 <code>useLocation</code> 钩子来读取。</p><h4 id="（5）阻止导航"><a href="#（5）阻止导航" class="headerlink" title="（5）阻止导航"></a>（5）阻止导航</h4><p>在某些情况下，你可能需要阻止导航（例如用户没有保存表单数据时）。React Router 提供了 <code>usePrompt</code> 来处理这个需求。</p><h4 id="（6）注意事项"><a href="#（6）注意事项" class="headerlink" title="（6）注意事项"></a>（6）注意事项</h4><p>为什么 <code>navigate</code> 通常在回调函数或 <code>useEffect</code> 中使用？</p><ol><li><strong>避免过早执行</strong>：<code>navigate</code> 是一个会引起页面重定向的操作，调用它会导致组件状态发生改变。如果你在组件首次渲染的过程中调用它，可能会引发不必要的重渲染或不一致的状态。因此，它通常在回调函数（如 <code>onClick</code>）中使用，或放在 <code>useEffect</code> 中，确保页面已经完成初始渲染，且有合适的时机来执行导航操作。</li><li><strong>确保页面逻辑的正确性</strong>：像表单提交或身份验证这样的场景，通常在特定的回调或生命周期阶段发生。在这些阶段使用 <code>navigate</code> 能确保导航是在合适的时刻执行，不会打断应用的正常渲染逻辑。</li></ol><p>在用户交互（如按钮点击）时，可以在事件处理回调中使用 <code>navigate</code></p><h3 id="二、useNavigation"><a href="#二、useNavigation" class="headerlink" title="二、useNavigation"></a>二、useNavigation</h3><p><code>useNavigation</code> 是 React Router v6 提供的一个钩子，用于获取当前导航（页面跳转）的状态。它可以帮助你在组件中监控导航的进展，尤其是用于处理页面加载状态、异步数据请求等情况。</p><h4 id="（1）useNavigation-的主要用途"><a href="#（1）useNavigation-的主要用途" class="headerlink" title="（1）useNavigation 的主要用途"></a>（1）<code>useNavigation</code> 的主要用途</h4><ol><li><strong>监控导航状态</strong>：你可以检查当前的导航状态，例如是否处于加载、提交状态。</li><li><strong>显示加载指示器</strong>：可以根据导航状态显示一个“加载中”的提示，以提升用户体验。</li></ol><h4 id="（2）导航状态"><a href="#（2）导航状态" class="headerlink" title="（2）导航状态"></a>（2）导航状态</h4><p>**<code>idle</code>**：空闲状态，没有进行导航操作。</p><p>**<code>loading</code>**：正在加载新的页面或资源。</p><p>**<code>submitting</code>**：当前正在提交数据（例如表单提交）。</p><h3 id="三、Navigate"><a href="#三、Navigate" class="headerlink" title="三、Navigate"></a>三、Navigate</h3><p><code>&lt;Navigate&gt;</code> 组件用于重定向用户到指定的路由。它允许你在特定条件下从一个页面自动跳转到另一个页面，而无需用户手动点击。</p><p><code>&lt;Navigate&gt;</code> 组件的基本用法是将用户从一个路由重定向到另一个路由。你只需要指定 <code>to</code> 属性为目标路径即可。</p><h4 id="replace-属性"><a href="#replace-属性" class="headerlink" title="replace 属性"></a><code>replace</code> 属性</h4><p><code>&lt;Navigate&gt;</code> 组件中的 <code>replace</code> 属性控制是否用新页面替换当前页面在浏览器历史记录中的位置。如果不使用 <code>replace</code>，则默认会将新页面加入浏览器历史记录中，用户可以通过“后退”按钮返回原页面。</p><p>EG：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Route</span> index element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">replace</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;cities&quot;</span> /&gt;</span></span>&#125; /&gt;<br></code></pre></td></tr></table></figure><p><strong>不加 <code>replace</code></strong> 时，浏览器的历史记录中会保存 <code>Navigate</code> 重定向的路径（<code>/</code> -&gt; <code>/cities</code>），导致点击“返回”按钮时，路由会重新从 <code>/</code> 重定向到 <code>/cities</code>，使用户看起来无法退出 <code>CityList</code> 页面。</p><p><strong>加上 <code>replace</code></strong> 后，<code>Navigate</code> 的行为是替换 <code>/</code> 路由，不再保留 <code>/</code> 在历史记录中，这样浏览器返回按钮就不会触发从 <code>/</code> 重定向到 <code>/cities</code> 的循环。</p><h3 id="四、NavLink-和Link"><a href="#四、NavLink-和Link" class="headerlink" title="四、NavLink 和Link"></a>四、NavLink 和Link</h3><p><code>&lt;Link&gt;</code> 是 React Router 中的基础组件，用来创建页面之间的导航链接。它的功能类似于传统的 HTML <code>&lt;a&gt;</code> 标签，但不会引起页面的完整刷新，而是使用 React Router 的路由机制进行无刷新跳转。</p><p><code>&lt;NavLink&gt;</code> 是继承自 <code>&lt;Link&gt;</code> 的组件，除了拥有 <code>&lt;Link&gt;</code> 的所有功能外，还可以动态添加样式和类名来表明当前链接是否处于“选中”状态。它的主要作用是为导航链接添加激活状态，例如当前页面对应的导航项可以显示为高亮。</p><h3 id="五、params参数"><a href="#五、params参数" class="headerlink" title="五、params参数"></a>五、params参数</h3><p><code>params</code> 是 React Router 中路由参数的一个对象，通常用于获取 URL 中的动态部分（路径参数）。在示例代码中，<code>params</code> 是通过 <code>loader</code> 函数的参数对象解构出来的，用来获取 URL 路径中的动态数据，比如 <code>orderId</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">&#123; params &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> order = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getOrder</span>(params.<span class="hljs-property">orderId</span>);<br>  <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>params</code> 对象包含当前路由路径中定义的动态路径参数。在路由配置中使用了类似 <code>/order/:orderId</code> 的路径时，React Router 会将 URL 中对应的 <code>orderId</code> 提取出来，并将其放入 <code>params</code> 对象中。</p><h3 id="六、React-Router-Actions"><a href="#六、React-Router-Actions" class="headerlink" title="六、React Router Actions"></a>六、React Router Actions</h3><p>在 React Router v6 中，<code>Actions</code> 是处理表单提交或其他事件时发送数据到服务器的机制，通常和路由中的 <code>action</code> 函数结合使用。<code>action</code> 用于在特定路由下处理非 GET 请求（例如 POST、PUT、DELETE），在表单提交时或通过 JavaScript 发起的请求中使用。</p><h4 id="（1）基本概念"><a href="#（1）基本概念" class="headerlink" title="（1）基本概念"></a>（1）基本概念</h4><p><strong><code>action</code> 函数</strong>: 用于处理表单提交或其他需要更改数据的请求。它类似于 <code>loader</code> 函数，但专注于处理提交的数据并更新服务器端的状态。<code>action</code> 函数会接收到一些上下文信息（如表单数据和请求参数），并可以返回结果或错误。</p><p><strong><code>useSubmit()</code></strong>: React Router 提供的一个钩子，用来在表单提交时使用 JavaScript 来处理提交操作，避免刷新页面。</p><h4 id="（2）action的基本用法"><a href="#（2）action的基本用法" class="headerlink" title="（2）action的基本用法"></a>（2）action的基本用法</h4><blockquote><p>详细例子请见14节第九模块</p></blockquote><p><strong><code>action</code> 函数</strong>:</p><ul><li><strong>参数 <code>request</code></strong>: <code>action</code> 函数会接收到请求对象 <code>request</code>，包含提交表单的数据、请求类型（如 POST、PUT 等）和其他信息。</li><li><strong><code>request.formData()</code></strong>: 通过 <code>request.formData()</code> 可以获取表单中的数据。</li><li><strong><code>saveOrder(order)</code></strong>: 你可以在 <code>action</code> 中进行服务器端操作，比如保存数据或发送 API 请求。</li><li><strong>返回结果</strong>: <code>action</code> 函数可以返回处理结果，这些结果可以传递给组件进行渲染。</li></ul><h4 id="（3）使用表单与-action"><a href="#（3）使用表单与-action" class="headerlink" title="（3）使用表单与 action"></a>（3）使用表单与 <code>action</code></h4><p>React Router v6 提供了 <code>Form</code> 组件，它会自动与 <code>action</code> 函数配合，提交表单数据而不触发页面刷新。</p><p> <code>&lt; Form method=&quot;POST&quot; action=&quot;/order/new&quot; &gt;</code></p><p><code>action</code>指定提交到哪里，默认是最近路由</p><h4 id="（4）传统表单提交-vs-编程方式提交"><a href="#（4）传统表单提交-vs-编程方式提交" class="headerlink" title="（4）传统表单提交 vs. 编程方式提交"></a>（4）传统表单提交 vs. 编程方式提交</h4><p>在传统表单提交中，用户必须填写表单并点击“提交”按钮来触发提交操作。</p><p>通过编程方式提交表单，表单可以在不需要用户点击提交按钮的情况下被自动提交。可以在其他操作或事件触发时提交表单。通过编程方式提交表单意味着可以使用代码来触发表单提交操作，而不是让用户点击提交按钮。这种灵活性允许用户根据应用逻辑自动执行表单提交，提升用户体验和交互性。</p><p>使用场景：</p><ol><li><strong>自动保存</strong>：当用户修改某个输入字段时，表单可以立即通过编程方式提交并保存数据，而无需点击“保存”按钮。</li><li><strong>异步数据提交</strong>：你可以在某个事件（如点击、鼠标移开、定时器）发生时，自动提交表单数据进行验证或保存。</li><li><strong>根据条件自动提交</strong>：表单可以在某个后台逻辑验证通过或某个条件满足后自动提交，而不让用户手动提交。</li></ol><h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (isAuthenticated) <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/app&quot;</span>, &#123; <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;);<br>  &#125;,<br>  [isAuthenticated, navigate]<br>);<br></code></pre></td></tr></table></figure><p>代码段实现了当网页刷新或者断线导致状态变为未登录时，会自动跳转到app主界面的功能</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程0-八股集合（bushi）</title>
    <link href="/2024/09/11/react%E8%AF%BE%E7%A8%8B0-%E5%85%AB%E8%82%A1%E9%9B%86%E5%90%88%EF%BC%88bushi%EF%BC%89/"/>
    <url>/2024/09/11/react%E8%AF%BE%E7%A8%8B0-%E5%85%AB%E8%82%A1%E9%9B%86%E5%90%88%EF%BC%88bushi%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本篇来记录一下之前偷懒没认真了解的React基础知识😌🥱😪😴</p><span id="more"></span><p><a href="https://juejin.cn/post/7270471613547249699">前端铜九铁十面试必备八股文——JavaScriptintanceof 运算符的实现原理及实现 <code>instanceof</code>运 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7271542727350108195">前端铜九铁十面试必备八股文——浏览器XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7271165389694058556">前端铜九铁十面试必备八股文——网络HTTP 1.1 和 HTTP 2.0 的区别：二进制协议：HTTP1.1的解析是基于 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7273119689185673253">前端铜九铁十面试必备八股文——性能优化图片懒加载原理 图片懒加载也叫延迟加载，只加载当前屏幕的图片，可视区域外的图片不会 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7272009063406272571">前端铜九铁十面试必备八股文——工程化webpack的构建流程1. <strong>初始化参数</strong>：从配置文件或者shell语句中读取 - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/weixin_39823006/article/details/139494949?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-139494949.142%5Ev100%5Epc_search_result_base9&spm=1018.2226.3001.4187">2024前端笔试题（vue2&#x2F;vue3&#x2F;react）_vue 笔试题-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_33277654/article/details/112758362?ops_request_misc=%7B%22request_id%22:%223BB9CD4E-74A9-471B-BDBC-9CBF5C7FE4FB%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=3BB9CD4E-74A9-471B-BDBC-9CBF5C7FE4FB&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-5-112758362-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=promise.all%E8%BE%93%E5%87%BA%E9%A1%BA%E5%BA%8F&spm=1018.2226.3001.4187">身为三本的我就是凭借这些前端面试题拿到百度京东offer的，前端面试题及答案_身为三本的我就是凭借这些面试题-CSDN博客</a></p><h4 id="一、default导出和直接export导出的区别"><a href="#一、default导出和直接export导出的区别" class="headerlink" title="一、default导出和直接export导出的区别"></a>一、default导出和直接export导出的区别</h4><ul><li><p><strong>export default</strong>：用于导出模块中的<strong>默认值</strong>，每个模块只能有<strong>一个</strong>默认导出。导入时不需要使用大括号 <code>&#123;&#125;</code>，并且导入时的名称可以任意更改。</p></li><li><p><strong>export（命名导出）</strong>：<code>export</code> 允许导出多个值，导入时必须使用与导出的<strong>名称相同</strong>的名称，并且需要使用大括号 <code>&#123;&#125;</code>。你可以同时导出多个值，也可以导入多个值。<strong>可以通过as关键字重命名</strong>。</p></li></ul><p>两者可以混用。</p><h4 id="二、Data-loading-waterfalls"><a href="#二、Data-loading-waterfalls" class="headerlink" title="二、Data loading waterfalls"></a>二、Data loading waterfalls</h4><p>“Data loading waterfalls” 是一种可能在前端应用中遇到的性能问题，指的是当多个依赖数据的加载请求按照顺序（串行）进行，而不是并行进行时，导致整体加载时间比实际需要的要长。每个请求依赖上一个请求完成后才能开始，就像“瀑布”一样逐渐下落，这种模式会造成延迟，特别是在请求数据量较大或网络较慢的情况下。</p><h4 id="三、promise"><a href="#三、promise" class="headerlink" title="三、promise"></a>三、promise</h4><h4 id="四、suspense"><a href="#四、suspense" class="headerlink" title="四、suspense"></a>四、suspense</h4><h4 id="五、e-preventDefault"><a href="#五、e-preventDefault" class="headerlink" title="五、e.preventDefault();"></a>五、e.preventDefault();</h4><p><code>e.preventDefault()</code> 是 JavaScript 中 <code>Event</code> 对象的方法，用于取消事件的默认行为。它通常用于处理表单提交、链接点击等操作，以便你可以执行自定义逻辑而不是默认的浏览器行为。</p><h4 id="六、模板字面量"><a href="#六、模板字面量" class="headerlink" title="六、模板字面量"></a>六、模板字面量</h4><p>在 JavaScript 中，&#96;&#96;（反引号）用于创建模板字面量（Template Literals），这是一个强大的字符串处理特性。你需要使用反引号来包裹数据时，涉及到字符串插值和多行字符串等情况。</p><ol><li><strong>字符串插值</strong></li></ol><p>当你需要在字符串中插入变量或表达式时，可以使用模板字面量。模板字面量允许你将变量或表达式嵌入到字符串中，使用 <code>$&#123;&#125;</code> 语法：</p><ol start="2"><li><strong>多行字符串</strong></li></ol><p>模板字面量还支持多行字符串，不需要使用反斜杠 <code>\</code> 来换行：</p><ol start="3"><li><strong>表达式插值</strong></li></ol><p>除了简单的变量，模板字面量也支持嵌入表达式：</p><h4 id="七、order"><a href="#七、order" class="headerlink" title="七、order"></a>七、order</h4><p>八、钩子只能在组件内被调用？</p><p>九、StrictMode</p><p>十、ref</p><h4 id="JSX-的优势"><a href="#JSX-的优势" class="headerlink" title="JSX 的优势"></a>JSX 的优势</h4><p>尊的觉得jsx代码简直可读性太强了..最完美的代码，高效且优雅。。js用那么多class真的不会重复吗。</p><ol><li><strong>可读性</strong>：<ul><li>JSX 语法更接近于 HTML，开发者可以更直观地看到组件的结构。</li></ul></li><li><strong>组件化</strong>：<ul><li>通过 JSX，组件可以轻松地组合和复用，提高了开发效率。</li></ul></li><li><strong>状态管理</strong>：<ul><li>与 React 的状态管理结合，能够更简单地处理 UI 更新。</li></ul></li><li><strong>简化的事件处理</strong>：<ul><li>JSX 使得事件处理和属性绑定变得更加简洁。</li></ul></li></ol><h4 id="纯-JavaScript-的挑战"><a href="#纯-JavaScript-的挑战" class="headerlink" title="纯 JavaScript 的挑战"></a>纯 JavaScript 的挑战</h4><ul><li><strong>DOM 操作繁琐</strong>：<ul><li>使用纯 JavaScript 操作 DOM 可能需要更复杂的代码，特别是涉及动态更新时。</li></ul></li><li><strong>逻辑与结构分离</strong>：<ul><li>结构与逻辑分开可能导致代码可读性下降，不易维护。</li></ul></li></ul><h4 id="PageRouter"><a href="#PageRouter" class="headerlink" title="PageRouter"></a>PageRouter</h4><p>无app文件夹，建立pages文件夹，里面的文件自动成为路由，index.js成为根路由；</p><p>可嵌套路由：建立相应名称文件夹。index.js同理成为根路由；</p><p>可动态路由：建立和App Router语法一样，但是命名在文件上而不是文件夹；</p><p>读取动态路由：非params，使用useRouter，router.query.[相应路由]；</p><p>_app：管理布局、样式等。类layout文件。</p><p>标题：需要下载head组件，和return的内容放在一起。使用title和Link指定。</p><p>fetch数据：不可直接在组件内，需要借用getStaticProps获得并返回。（可控SSG），可返回revalidate参数，实现静态增量再生。</p><p>动态界面fetch：借用getSeverSideProps，它可以获得params参数，</p><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p><code>axios</code> 是一个基于 <code>Promise</code> 的 HTTP 库，它能在浏览器和 Node.js 环境中发送 HTTP 请求。相比于传统的 <code>XMLHttpRequest</code> 和 <code>fetch</code>，<code>axios</code> 提供了更多功能和更简便的用法，例如自动转换 JSON 响应、支持请求&#x2F;响应拦截器、取消请求、处理超时等。</p><ul><li>Axios 的特点：</li></ul><ol><li><strong>支持 Promise</strong>：支持链式调用，便于处理异步逻辑。</li><li><strong>自动 JSON 数据转换</strong>：会自动将请求和响应的数据转换为 JSON 格式。</li><li><strong>请求和响应拦截器</strong>：可以在请求或响应被处理之前拦截并进行修改。</li><li><strong>错误处理更简便</strong>：自动处理 HTTP 错误状态码，并可以统一管理错误。</li><li><strong>支持取消请求</strong>：可以通过 <code>CancelToken</code> 取消正在进行的请求。</li><li><strong>支持超时设置</strong>：可以设定请求的超时时间。</li><li><strong>兼容性好</strong>：在 Node.js 和浏览器端都可以使用。</li></ol><ul><li>为什么使用 Axios 而不是 Fetch？</li></ul><ol><li><strong>兼容性</strong>：<code>fetch</code> 不支持自动处理跨域 cookie，<code>axios</code> 可以做到。</li><li><strong>更丰富的功能</strong>：<code>axios</code> 提供了拦截器、自动 JSON 解析、取消请求等功能，而这些在 <code>fetch</code> 中需要手动实现。</li><li><strong>错误处理</strong>：<code>fetch</code> 只会在网络错误时抛出异常，HTTP 错误状态码不会抛出异常，而 <code>axios</code> 会自动处理状态码异常并抛出错误。</li></ol><h4 id="React-API"><a href="#React-API" class="headerlink" title="React API"></a>React API</h4><p>React API 是 React 库中提供的一组接口和工具，用于构建用户界面。通过 React API，你可以创建组件、管理状态、处理事件等。React API 主要包括以下几部分：</p><ol><li><strong>React 组件 API</strong><ul><li><code>React.Component</code>：创建类组件的基类，用于创建有状态组件。</li><li><code>React.PureComponent</code>：类似于 <code>React.Component</code>，但会自动实现 <code>shouldComponentUpdate</code> 以避免不必要的重新渲染。</li><li><code>React.memo</code>：用于优化函数组件，避免不必要的重新渲染。</li></ul></li><li><strong>Hooks API</strong><ul><li><code>useState</code>：在函数组件中引入本地状态。</li><li><code>useEffect</code>：处理副作用（如数据请求、订阅等）。</li><li><code>useContext</code>：在组件树中共享数据而不需要手动传递 props。</li><li><code>useReducer</code>：类似于 Redux 中的 reducer，用于管理复杂状态逻辑。</li><li><code>useRef</code>：获取组件实例或 DOM 元素的引用。</li></ul></li><li><strong>Render 方法</strong><ul><li><code>ReactDOM.render</code>：在 React 18 之前，用于将 React 组件渲染到 DOM 中。</li><li><code>createRoot</code>：在 React 18 中的渲染入口，用于启用并发渲染。</li></ul></li><li><strong>Context API</strong><ul><li><code>React.createContext</code>：创建全局状态并在组件树中共享。</li><li><code>Context.Provider</code>：提供数据给所有子组件。</li><li><code>Context.Consumer</code>：访问提供的数据。</li></ul></li><li><strong>JSX API</strong><ul><li>JSX 是一种语法糖，用来书写 React 元素，它看起来像 HTML，但在底层是 JavaScript 对象。</li><li><code>React.createElement</code>：底层方法，用于创建 React 元素，JSX 最终会被编译为对这个函数的调用。</li></ul></li><li><strong>Fragments</strong><ul><li><code>React.Fragment</code>：用于返回多个元素而不在 DOM 中生成额外的父级容器。</li></ul></li><li><strong>React 事件系统</strong><ul><li>React 提供了跨浏览器的合成事件，如 <code>onClick</code>、<code>onChange</code>、<code>onSubmit</code> 等。</li></ul></li></ol><h3 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h3><p>HMR（Hot Module Replacement，热模块替换）是现代前端开发工具（如 Webpack、Vite 等）提供的一项功能，允许在开发过程中实时更新应用程序中的模块而无需完全刷新页面。它提高了开发效率，减少了等待时间，尤其是在开发复杂的前端应用时。</p><h4 id="（1）HMR-的工作原理"><a href="#（1）HMR-的工作原理" class="headerlink" title="（1）HMR 的工作原理"></a>（1）HMR 的工作原理</h4><p>HMR 的基本工作原理是检测项目中的文件变化，将更新后的模块注入到运行中的应用程序中，而不是重新加载整个页面。它仅替换发生变化的模块，保持应用程序的状态不变。</p><p>以下是 HMR 的工作流程：</p><ol><li><strong>文件监听</strong>：开发服务器（如 Vite、Webpack）会监控文件系统中的源代码文件，当检测到某个模块发生变化时，它会生成新的模块包。</li><li><strong>增量更新</strong>：服务器只会重新编译发生变化的模块，而不是编译整个应用程序。这大大加快了编译速度。</li><li><strong>模块替换</strong>：客户端通过 WebSocket 与服务器进行通信，接收到更新通知时会请求更新的模块，并直接将新的代码块替换掉旧的模块，而不影响其他模块。</li><li><strong>保持状态</strong>：因为 HMR 不会完全刷新页面，所以在模块更新的过程中，页面的状态（如用户输入、应用状态等）可以保持不变。</li></ol><h4 id="（2）HMR-的优点"><a href="#（2）HMR-的优点" class="headerlink" title="（2）HMR 的优点"></a>（2）HMR 的优点</h4><ul><li><strong>快速更新</strong>：通过增量编译和模块替换，减少了重新加载页面的等待时间。</li><li><strong>保留应用状态</strong>：不需要刷新整个页面，避免因为刷新丢失应用的运行状态。</li><li><strong>提高开发效率</strong>：开发者可以快速验证代码修改效果，尤其在样式调整或交互调试时，效果立即生效。</li></ul><h4 id="（3）Vite-中的-HMR"><a href="#（3）Vite-中的-HMR" class="headerlink" title="（3）Vite 中的 HMR"></a>（3）Vite 中的 HMR</h4><p>Vite 天然支持 HMR，作为一个基于 ES 模块的开发工具，Vite 提供了极快的热更新体验。默认情况下，Vite 在开发模式下自动开启 HMR，你无需做额外配置。</p><p>如果你想在 Vite 中自定义 HMR 行为，可以通过 <code>vite.config.js</code> 中的 <code>server.hmr</code> 选项进行配置，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  server: &#123;<br>    hmr: &#123;<br>      protocol: <span class="hljs-string">&#x27;ws&#x27;</span>, <span class="hljs-comment">// 可选的协议，WebSocket（ws）或 Secure WebSocket（wss）</span><br>      host: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>      port: <span class="hljs-number">3000</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用 React 开发时，HMR 也有助于保留组件的状态。现代的 React 框架（如使用 Vite 或 Webpack 配置的 React 项目）通常会结合 <code>react-refresh</code> 来实现 React 的 HMR，确保组件更新时，状态和界面可以同步变化。</p><h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><p>WebSocket 是一种网络通信协议，提供了全双工（双向）通信渠道，允许客户端与服务器之间进行实时的数据交换。它最初是在 HTML5 规范中定义的，旨在改善 Web 应用程序的实时性能。以下是对 WebSocket 的详细介绍：</p><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. <strong>基本概念</strong></h4><ul><li><strong>全双工通信</strong>：WebSocket 允许客户端和服务器同时发送和接收消息。与传统的 HTTP 请求&#x2F;响应模型相比，WebSocket 连接在建立后，可以随时双向通信，减少了延迟。</li><li><strong>持久连接</strong>：一旦建立 WebSocket 连接，连接会保持打开状态，直到客户端或服务器主动关闭。这减少了反复建立和关闭连接的开销。</li></ul><h4 id="2-WebSocket-工作原理"><a href="#2-WebSocket-工作原理" class="headerlink" title="2. WebSocket 工作原理"></a>2. <strong>WebSocket 工作原理</strong></h4><ul><li>握手过程：<ol><li><strong>客户端发起握手</strong>：客户端发送一个 HTTP 请求，以升级连接到 WebSocket。该请求包含 <code>Upgrade</code> 和 <code>Connection</code> 头。</li><li><strong>服务器回应</strong>：服务器接收到请求后，返回一个 101 状态码，表示协议切换成功，并建立 WebSocket 连接。</li></ol></li><li>数据帧：<ul><li>WebSocket 数据在传输时以帧的形式发送。每个帧可以包含文本、二进制数据、控制帧等。</li></ul></li></ul><h4 id="3-WebSocket-的优点"><a href="#3-WebSocket-的优点" class="headerlink" title="3. WebSocket 的优点"></a>3. <strong>WebSocket 的优点</strong></h4><ul><li><strong>实时性</strong>：WebSocket 可以实现低延迟的实时数据传输，适合实时应用（如聊天应用、在线游戏、股票行情等）。</li><li><strong>减少开销</strong>：与 HTTP 的请求-响应模型相比，WebSocket 在建立连接后不需要再发送额外的 HTTP 头信息，从而减少了数据传输的开销。</li><li><strong>双向通信</strong>：客户端和服务器可以随时互相发送消息，提高了交互性。</li></ul><h4 id="4-应用场景"><a href="#4-应用场景" class="headerlink" title="4. 应用场景"></a>4. <strong>应用场景</strong></h4><ul><li><strong>即时通讯</strong>：聊天应用、社交网络等需要实时消息推送的场景。</li><li><strong>在线游戏</strong>：多人在线游戏中，玩家的实时操作需要即时同步。</li><li><strong>实时数据推送</strong>：股票行情、天气更新等需要频繁更新数据的应用。</li><li><strong>物联网（IoT）</strong>：设备与服务器之间的实时通信。</li></ul><h4 id="5-使用-WebSocket-的注意事项"><a href="#5-使用-WebSocket-的注意事项" class="headerlink" title="5. 使用 WebSocket 的注意事项"></a>5. <strong>使用 WebSocket 的注意事项</strong></h4><ul><li><strong>兼容性</strong>：虽然大多数现代浏览器都支持 WebSocket，但仍需考虑某些旧版浏览器的兼容性。</li><li><strong>安全性</strong>：WebSocket 协议（wss:&#x2F;&#x2F;）可以通过 TLS 加密连接，确保数据传输的安全性。</li><li><strong>管理连接</strong>：在高负载情况下，需要合理管理 WebSocket 连接的数量，以避免服务器资源耗尽。</li><li><strong>心跳机制</strong>：为防止连接超时，需要实现心跳机制，以保持连接的活跃状态。</li></ul><h4 id="6-举例说明"><a href="#6-举例说明" class="headerlink" title="6.举例说明"></a>6.举例说明</h4><p>客户端发送一个 HTTP 请求，目的是将当前连接升级为 WebSocket 连接。这个请求包含了一些特定的头信息：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/chat</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>example.com<br><span class="hljs-attribute">Upgrade</span><span class="hljs-punctuation">: </span>websocket<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>Upgrade<br><span class="hljs-attribute">Sec-WebSocket-Key</span><span class="hljs-punctuation">: </span>dGhlIHNhbXBsZSBub25jZQ==<br><span class="hljs-attribute">Sec-WebSocket-Version</span><span class="hljs-punctuation">: </span>13<br></code></pre></td></tr></table></figure><p><strong>请求头说明</strong>：</p><ul><li><strong>GET &#x2F;chat</strong>：请求的资源路径，这里假设是一个聊天应用的接口。</li><li><strong>Host</strong>：请求的主机名。</li><li><strong>Upgrade</strong>：指定要升级的协议，这里是 <code>websocket</code>。</li><li><strong>Connection</strong>：表示该连接将要升级。</li><li><strong>Sec-WebSocket-Key</strong>：一个 Base64 编码的随机字符串，用于 WebSocket 连接的安全性。</li><li><strong>Sec-WebSocket-Version</strong>：请求的 WebSocket 版本，这里使用的是版本 13，这是当前的标准版本。</li></ul><p>当服务器接收到上述握手请求后，会检查请求的有效性，并返回一个 HTTP 响应。如果一切正常，服务器会返回 101 状态码，表示协议切换成功。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">101</span> Switching Protocols<br><span class="hljs-attribute">Upgrade</span><span class="hljs-punctuation">: </span>websocket<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>Upgrade<br><span class="hljs-attribute">Sec-WebSocket-Accept</span><span class="hljs-punctuation">: </span>dGhlIHNhbXBsZSBub25jZQ==<br></code></pre></td></tr></table></figure><p><strong>响应头说明</strong>：</p><ul><li><strong>HTTP&#x2F;1.1 101 Switching Protocols</strong>：状态行，表明服务器已成功处理请求并切换协议。</li><li><strong>Upgrade</strong>：指示升级的协议，这里是 <code>websocket</code>。</li><li><strong>Connection</strong>：表示连接已经升级。</li><li><strong>Sec-WebSocket-Accept</strong>：这是服务器返回的一个键值，基于客户端发送的 <code>Sec-WebSocket-Key</code> 生成。服务器通过将客户端的密钥与一个固定字符串拼接，然后进行 SHA-1 哈希处理并 Base64 编码来生成这个值。这是为了确保连接的安全性和合法性。</li></ul><h3 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h3><p>心跳机制（Heartbeat Mechanism）是一种用于保持网络连接活跃和稳定的技术。它通过定期发送小的数据包（称为心跳包）来检查连接的状态，确保客户端和服务器之间的连接仍然可用。这种机制广泛应用于实时通信、分布式系统、负载均衡和其他网络应用中。</p><h4 id="（1）心跳机制的主要作用"><a href="#（1）心跳机制的主要作用" class="headerlink" title="（1）心跳机制的主要作用"></a>（1）心跳机制的主要作用</h4><ol><li><strong>保持连接活跃</strong>：<ul><li>在一些网络环境中，长时间不活动的连接可能会被中间设备（如路由器、负载均衡器等）自动关闭。心跳机制通过定期发送心跳包，可以防止这种情况发生。</li></ul></li><li><strong>检测连接状态</strong>：<ul><li>通过心跳包，双方可以及时发现连接是否中断。如果心跳包未能按时到达或未能收到响应，系统可以采取相应措施（如重连、切换备用连接等）。</li></ul></li><li><strong>负载均衡</strong>：<ul><li>在分布式系统中，心跳机制可以帮助负载均衡器确定后端服务器的健康状况。如果某个服务器未能响应心跳请求，可以将其标记为不可用，从而避免将请求发送到该服务器。</li></ul></li></ol><h4 id="（2）心跳机制的工作原理"><a href="#（2）心跳机制的工作原理" class="headerlink" title="（2）心跳机制的工作原理"></a>（2）心跳机制的工作原理</h4><ol><li><strong>发送心跳包</strong>：<ul><li>客户端或服务器定期发送小的心跳包，通常包含连接的标识符和时间戳等信息。</li></ul></li><li><strong>接收心跳包</strong>：<ul><li>接收方收到心跳包后，可以更新其状态，并可能向发送方返回一个响应，以确认连接仍然有效。</li></ul></li><li><strong>超时处理</strong>：<ul><li>如果在预定时间内未收到心跳包的响应，系统会假定连接已经中断，并执行重连或其他错误处理机制。</li></ul></li></ol><h4 id="（3）实现示例"><a href="#（3）实现示例" class="headerlink" title="（3）实现示例"></a>（3）实现示例</h4><p>以下是一个简单的心跳机制的伪代码示例：</p><p><strong>客户端代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 发送心跳包</span><br>    socket.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;heartbeat&#x27;</span>);<br>&#125;, <span class="hljs-number">5000</span>); <span class="hljs-comment">// 每 5 秒发送一次心跳包</span><br></code></pre></td></tr></table></figure><p><strong>服务器代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (message === <span class="hljs-string">&#x27;heartbeat&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 收到心跳包，发送响应</span><br>        socket.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;heartbeat response&#x27;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h3><p>SDK 是“Software Development Kit”的缩写，翻译为“软件开发工具包”。SDK 是一组工具、库、文档和示例代码的集合，旨在帮助开发者创建特定平台或应用程序的程序。它通常包括以下内容：</p><ol><li><strong>API（应用程序编程接口）</strong>：提供与底层服务或平台交互的函数和方法。</li><li><strong>开发库</strong>：用于简化特定功能的实现的代码库。</li><li><strong>文档</strong>：指导开发者如何使用 SDK 的用户手册和 API 文档。</li><li><strong>示例代码</strong>：演示如何使用 SDK 的示例程序，帮助开发者快速上手。</li><li><strong>工具</strong>：用于开发、测试和调试的工具。</li></ol>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程14-使用Vite构建高级ReactProjiect</title>
    <link href="/2024/09/09/react%E8%AF%BE%E7%A8%8B14-%E4%BD%BF%E7%94%A8Vite%E6%9E%84%E5%BB%BA%E9%AB%98%E7%BA%A7ReactProjiect/"/>
    <url>/2024/09/09/react%E8%AF%BE%E7%A8%8B14-%E4%BD%BF%E7%94%A8Vite%E6%9E%84%E5%BB%BA%E9%AB%98%E7%BA%A7ReactProjiect/</url>
    
    <content type="html"><![CDATA[<p>Jonas老师真的很有鼓舞力😂</p><span id="more"></span><p>之前也使用过Vite来构建项目，但是没仔细分析它和Creact-react-app的区别……本节课居然回到了第一次构建的pizza项目，但是应该会更加modern。</p><h3 id="一、Vite-和-create-react-app-CRA-的区别"><a href="#一、Vite-和-create-react-app-CRA-的区别" class="headerlink" title="一、Vite 和 create-react-app (CRA)的区别"></a>一、<code>Vite</code> 和 <code>create-react-app (CRA)</code>的区别</h3><h4 id="1-启动速度"><a href="#1-启动速度" class="headerlink" title="1. 启动速度"></a>1. <strong>启动速度</strong></h4><ul><li><strong>Vite</strong>：Vite 使用现代的浏览器原生 ES 模块（ESM），按需加载项目中的模块。启动速度非常快，尤其在大型项目中优势明显，因为它只会加载应用程序中实际需要的部分。</li><li><strong>CRA</strong>：CRA 使用 Webpack 进行打包，启动时需要对整个项目进行预打包。这种方式在项目规模较大时，启动速度较慢，尤其是开发环境中的初次构建。</li></ul><h4 id="2-构建速度"><a href="#2-构建速度" class="headerlink" title="2. 构建速度"></a>2. <strong>构建速度</strong></h4><ul><li><strong>Vite</strong>：Vite 使用 <code>esbuild</code> 来进行构建，它是用 Go 语言编写的，构建速度极快。Vite 的热模块替换（HMR）也非常快，几乎是即时更新，提升了开发体验。</li><li><strong>CRA</strong>：CRA 依赖 Webpack 进行构建，构建速度相对较慢，特别是在项目规模增大时，打包时间会显著增加。</li></ul><h4 id="3-开发环境下的模块处理"><a href="#3-开发环境下的模块处理" class="headerlink" title="3. 开发环境下的模块处理"></a>3. <strong>开发环境下的模块处理</strong></h4><ul><li><strong>Vite</strong>：Vite 使用浏览器支持的 ES 模块加载，因此在开发模式下，不需要整体打包，可以按需加载模块，这使得项目在开发时能够更快速响应。</li><li><strong>CRA</strong>：CRA 需要先对整个项目进行打包，再通过 Webpack Dev Server 提供开发环境。这种方式在开发时需要处理大量文件，性能较差。</li></ul><h4 id="4-依赖预构建"><a href="#4-依赖预构建" class="headerlink" title="4. 依赖预构建"></a>4. <strong>依赖预构建</strong></h4><ul><li><strong>Vite</strong>：在开发模式下，Vite 使用 <code>esbuild</code> 预构建依赖，使得开发服务器加载依赖时速度更快，并且能优化依赖模块的重复打包问题。</li><li><strong>CRA</strong>：CRA 没有类似的依赖预构建机制，所有依赖在开发环境中会被打包成一个整体，导致开发时的响应较慢。</li></ul><h4 id="5-热模块替换（HMR）"><a href="#5-热模块替换（HMR）" class="headerlink" title="5. 热模块替换（HMR）"></a>5. <strong>热模块替换（HMR）</strong></h4><ul><li><strong>Vite</strong>：Vite 的 HMR 几乎是即时的，因为它只重新加载修改过的模块，而无需重新加载整个应用。这使得开发体验更加流畅。</li><li><strong>CRA</strong>：CRA 也支持 HMR，但由于它基于 Webpack，速度相对较慢，尤其是项目体积较大时，更新等待时间较长。</li></ul><h4 id="6-配置和扩展性"><a href="#6-配置和扩展性" class="headerlink" title="6. 配置和扩展性"></a>6. <strong>配置和扩展性</strong></h4><ul><li><strong>Vite</strong>：Vite 提供了轻量化的默认配置，但也允许通过插件进行高度定制。Vite 采用的插件机制类似于 Rollup，支持生态系统中的各种插件，且配置文件相对简洁。</li><li><strong>CRA</strong>：CRA 默认的配置相对封闭，开发者需要使用 <code>eject</code> 命令来暴露底层 Webpack 配置，这个过程是不可逆的，且配置复杂。对于初学者来说，CRA 更简单易用，但在需要自定义配置时不够灵活。</li></ul><h4 id="7-生态系统支持"><a href="#7-生态系统支持" class="headerlink" title="7. 生态系统支持"></a>7. <strong>生态系统支持</strong></h4><ul><li><strong>Vite</strong>：Vite 的生态系统正在快速发展，特别是在 Vue 和 React 项目中，Vite 正成为主流的选择。Vite 的插件生态也不断丰富，适配多种现代前端框架。</li><li><strong>CRA</strong>：CRA 基于 Webpack，Webpack 是非常成熟的打包工具，拥有丰富的插件和工具支持。不过 CRA 的封闭性限制了对这些工具的灵活使用。</li></ul><h4 id="8-生产构建"><a href="#8-生产构建" class="headerlink" title="8. 生产构建"></a>8. <strong>生产构建</strong></h4><ul><li><strong>Vite</strong>：在生产模式下，Vite 使用 Rollup 进行打包，构建出来的代码体积小，性能优化效果好。Rollup 擅长处理 ES 模块，并且支持树摇（tree-shaking）优化未使用的代码。</li><li><strong>CRA</strong>：CRA 使用 Webpack 进行生产构建，虽然 Webpack 也支持树摇和代码分割，但与 Vite 的 Rollup 相比，Webpack 的配置相对复杂，打包时间较长。</li></ul><h4 id="9-插件和框架集成"><a href="#9-插件和框架集成" class="headerlink" title="9. 插件和框架集成"></a>9. <strong>插件和框架集成</strong></h4><ul><li><strong>Vite</strong>：Vite 内置支持多种框架（如 Vue、React、Svelte 等），通过插件机制可以快速集成不同的框架和工具。Vite 的插件生态更灵活，使用 Rollup 插件也非常方便。</li><li><strong>CRA</strong>：CRA 是专门为 React 项目设计的，虽然可以手动配置支持其他工具，但其灵活性和扩展性不如 Vite。</li></ul><h4 id="10-社区和发展趋势"><a href="#10-社区和发展趋势" class="headerlink" title="10. 社区和发展趋势"></a>10. <strong>社区和发展趋势</strong></h4><ul><li><strong>Vite</strong>：Vite 是一款相对较新的工具，但它的增长速度非常快，已经成为现代前端开发的趋势之一，特别是在追求高性能的开发环境和生产环境中受到越来越多的欢迎。</li><li><strong>CRA</strong>：CRA 是 React 社区中最早的官方项目脚手架之一，适合初学者和小型项目，但在大型项目中的性能逐渐显现出局限性。</li></ul><h3 id="二、项目构建起步"><a href="#二、项目构建起步" class="headerlink" title="二、项目构建起步"></a>二、项目构建起步</h3><p>终端： <code>npm create vite@4</code></p><p>VScode：<code>npm i eslint vite-plugin-eslint eslint-config-react-app --save-dev</code></p><p><code>vite.config.js</code>文件：（要修改的部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> eslint <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite-plugin-eslint&quot;</span>;<br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>(), <span class="hljs-title function_">eslint</span>()],  <span class="hljs-comment">//添加了eslint</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><p><code>.eslintrc.cjs</code>文件：（默认配置加上react-app规则）（我把两个默认规则集都注释了，不然总报错🫠）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">🫠module.exports = <span class="hljs-punctuation">&#123;</span>🫠<br>  root<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示这是项目的根目录 ESLint 配置，防止 ESLint 搜索父级目录的配置。</span><br>  env<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    browser<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 设定代码运行的环境为浏览器，ESLint 会针对浏览器的全局变量（如 `window`）进行校验。</span><br>    es2020<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 支持 ES2020 语法特性。</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  extends<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    &#x27;react-app&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 加入 react-app 的 ESLint 规则</span><br>    &#x27;eslint<span class="hljs-punctuation">:</span>recommended&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 启用 ESLint 推荐的默认规则集。</span><br>    &#x27;plugin<span class="hljs-punctuation">:</span>react/recommended&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// React 推荐的 ESLint 规则集。</span><br>    &#x27;plugin<span class="hljs-punctuation">:</span>react/jsx-runtime&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 支持 React 17+ JSX 转换（即不需要显式导入 `React`）。</span><br>    &#x27;plugin<span class="hljs-punctuation">:</span>react-hooks/recommended&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// React Hooks 的推荐规则。</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  ignorePatterns<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;dist&#x27;<span class="hljs-punctuation">,</span> &#x27;.eslintrc.cjs&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 忽略 `dist` 目录和当前的 ESLint 配置文件，避免 ESLint 校验它们。</span><br>  parserOptions<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    ecmaVersion<span class="hljs-punctuation">:</span> &#x27;latest&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 使用最新的 ECMAScript 版本。</span><br>    sourceType<span class="hljs-punctuation">:</span> &#x27;module&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 代码是基于 ECMAScript 模块（ESM）的。</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  settings<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    react<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      version<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">18.2</span>&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 手动指定 React 版本，确保 ESLint 的 React 插件正确解析 JSX 语法。</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  plugins<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;react-refresh&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 使用 `react-refresh` 插件，用于开发时 React 的热更新。</span><br>  rules<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    &#x27;react-refresh/only-export-components&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      &#x27;warn&#x27;<span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span> allowConstantExport<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 仅允许导出 React 组件（针对 react-refresh 的特定规则），如果违反规则会发出警告。</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span>;<br><br></code></pre></td></tr></table></figure><p>⁉️在视频里构建完Vite项目后需要自己手动创建<code>.eslintrc.json</code>文件，和本文件有何区别？</p><ul><li><p><strong>.eslintrc.cjs</strong>：</p><ul><li>这是一个使用 CommonJS 模块格式的 ESLint 配置文件，文件内容是以 <code>module.exports = &#123;&#125;</code> 的方式导出配置对象，允许使用动态的 JavaScript 语法。</li><li>支持完整的 JavaScript 语法。你可以在其中使用变量、条件语句、函数等动态逻辑。这种格式适合需要根据环境或条件动态生成 ESLint 配置的场景。</li><li>基于 CommonJS 模块系统。导出配置使用 <code>module.exports = &#123;&#125;</code>，适用于 Node.js 环境中。</li></ul></li><li><p><strong>.eslintrc.json</strong>：</p><ul><li>这是一个标准的 JSON 格式的配置文件，不支持 JavaScript 语法，仅能定义静态的键值对配置。</li><li>只能使用 JSON 语法，不支持动态配置。如果你需要使用动态逻辑，必须转为 <code>.eslintrc.cjs</code> 或 <code>.eslintrc.js</code> 格式。</li><li>没有模块系统，纯粹是静态配置数据，使用 JSON 格式，适合简单的配置需求。</li></ul></li></ul><h3 id="三、Application-Planing"><a href="#三、Application-Planing" class="headerlink" title="三、Application Planing"></a>三、Application Planing</h3><h4 id="（1）Thinking-in-React"><a href="#（1）Thinking-in-React" class="headerlink" title="（1）Thinking in React"></a>（1）Thinking in React</h4><blockquote><p>在 Redux 中，features是一个概念化的术语，用来描述应用中的特定功能模块或子功能。每个 feature通常包含自己的状态和处理它的逻辑。</p></blockquote><p>✴️对小型程序而言：</p><ul><li>将UI分解成多个组件</li><li>建立静态网页</li><li>开始考虑状态管理和数据流</li></ul><p>✴️对大型真实程序：</p><ul><li><p>收集应用程序的需求（requirements）和所需的特性（features）（Redux）</p></li><li><p>将应用程序分成多个界面</p><ul><li>考虑整体和页面级别的UI（用户界面）</li><li>🔻将UI分解成多个组件</li><li>🔻建立静态网页</li></ul></li><li><p>将应用程序分为不同的特性类别</p><ul><li>🔻开始考虑状态管理和数据流</li></ul></li><li><p>决定我们想要用哪些库（technology decisions）</p></li></ul><h4 id="（2）项目分析"><a href="#（2）项目分析" class="headerlink" title="（2）项目分析"></a>（2）项目分析</h4><h5 id="1、项目需求"><a href="#1、项目需求" class="headerlink" title="1、项目需求"></a>1、项目需求</h5><ul><li>用户可以订购一个或多个pizza</li><li>不需要账户也不需要登陆，只需要输入名字就可以开始使用</li><li>可以改变pizza 菜单，需要一个虚假API</li><li>用户需要购物车来放置想要订购的pizza</li><li>需要用户的名字、电话号码、地址（来联系）</li><li>最好可以获得用户的GPS</li><li>用户可以将自己的订单标记为“优先”（需要多付20%的钱），并且在订单发送后也可以标记</li><li>订单是通过发送带有所有订单数据的POST请求来完成的（含有用户信息和挑选的pizza信息）</li><li>只有订单送达才会处理付款，在应用中不需要处理支付</li><li>每个订单都会得到一个专用ID，会显示在界面上，用户可以通过ID查看订单状态</li></ul><h5 id="2、分析特性和界面"><a href="#2、分析特性和界面" class="headerlink" title="2、分析特性和界面"></a>2、分析特性和界面</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240909195022266.png" alt="image-20240909195022266"></p><h5 id="3、考虑状态和数据流、决定要使用的库"><a href="#3、考虑状态和数据流、决定要使用的库" class="headerlink" title="3、考虑状态和数据流、决定要使用的库"></a>3、考虑状态和数据流、决定要使用的库</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240909195056831.png" alt="image-20240909195056831"></p><h3 id="四、建立项目结构"><a href="#四、建立项目结构" class="headerlink" title="四、建立项目结构"></a>四、建立项目结构</h3><p>ui：可重用的组件（按钮、输入等）</p><p>services：可重用代码，用于和API交互</p><p>utils：helper 函数，可重用，不产生任何side effect</p><p>features：用来描述应用中的特定功能模块或子功能，每个 <code>feature</code> 通常包含自己的状态和处理它的逻辑。在实际开发中，<code>features</code> 通常会对应到 Redux 的 slice 文件，即每个 <code>feature</code> 可能会有自己的 slice 来处理该功能模块的状态和逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240911161457628.png" alt="image-20240911161457628"></p><h3 id="五、执行Routes的新方法"><a href="#五、执行Routes的新方法" class="headerlink" title="五、执行Routes的新方法"></a>五、执行Routes的新方法</h3><p>⭕<code>npm i react-router-dom@6</code></p><hr><p><code>react router</code>文档链接：<a href="https://reactrouter.com/en/main/routers/create-browser-router">https://reactrouter.com/en/main/routers/create-browser-router</a></p><p><code>App.js</code>示例版：（见下）</p><h4 id="之前的方式：BrowserRouter-和-Routes（React-Router-v6）"><a href="#之前的方式：BrowserRouter-和-Routes（React-Router-v6）" class="headerlink" title="之前的方式：BrowserRouter 和 Routes（React Router v6）"></a>之前的方式：<code>BrowserRouter</code> 和 <code>Routes</code>（React Router v6）</h4><p>这是 React Router v6 的典型使用方式。主要特点如下：</p><ol><li><strong><code>BrowserRouter</code></strong>:<ul><li>包裹整个应用，提供路由功能。</li><li>内部使用 HTML5 的 History API，监听 URL 的变化。</li></ul></li><li><strong><code>Routes</code></strong>:<ul><li>取代了 React Router v5 中的 <code>Switch</code>，是 v6 中用于渲染路由的主要组件。</li><li><code>Route</code> 是嵌套在 <code>Routes</code> 组件中的，每一个 <code>Route</code> 定义了一个具体路径及其对应的组件。</li></ul></li><li><strong>嵌套路由</strong>：<ul><li>支持路由的嵌套，方便组织多层路由结构。例如，<code>path=&quot;app&quot;</code> 下的子路由 (<code>cities</code>, <code>countries</code>, <code>form</code>) 会渲染在 <code>AppLayout</code> 内。</li><li>子路由不需要写完整路径，可以相对父路由来定义路径。</li></ul></li><li><strong><code>Suspense</code></strong>:<ul><li>使用 <code>Suspense</code> 进行懒加载时，可以通过 <code>fallback</code> 属性定义加载时的占位组件，优化用户体验。</li></ul></li><li><strong><code>ProtectedRoute</code></strong>:<ul><li>在 <code>path=&quot;app&quot;</code> 中，使用了 <code>ProtectedRoute</code> 来实现路由的保护。只有满足特定条件时（比如用户已登录），路由才会渲染对应组件。</li></ul></li><li><strong>404页面处理</strong>：<ul><li>通过 <code>path=&quot;*&quot;</code> 来捕获所有未匹配的路由，显示 <code>PageNotFound</code> 组件。</li></ul></li></ol><h4 id="现在的方式：createBrowserRouter-和-RouterProvider（React-Router-v6-4-）"><a href="#现在的方式：createBrowserRouter-和-RouterProvider（React-Router-v6-4-）" class="headerlink" title="现在的方式：createBrowserRouter 和 RouterProvider（React Router v6.4+）"></a>现在的方式：<code>createBrowserRouter</code> 和 <code>RouterProvider</code>（React Router v6.4+）</h4><p>React Router v6.4 引入了新的 <code>Data API</code>，这意味着你可以使用 <code>createBrowserRouter</code> 和 <code>RouterProvider</code> 来定义和提供路由。它的特点包括：</p><ol><li><strong><code>createBrowserRouter</code></strong>:<ul><li>新的路由创建方式，提供了更直观的配置方式，将路由声明与数据获取逻辑（如 <code>loader</code>、<code>action</code>）结合起来，适合定义较为复杂的应用路由。</li><li>更加数据驱动，可以在路由定义时设置数据加载逻辑、错误处理等。</li></ul></li><li><strong><code>RouterProvider</code></strong>:<ul><li>提供了一个 <code>router</code> 对象，用于将创建好的路由配置传递给应用程序。这种方式相比 <code>BrowserRouter</code> 更灵活，可以在创建路由时进行更多的配置操作。</li></ul></li><li><strong>不再需要 <code>Routes</code> 和 <code>Route</code></strong>:<ul><li>使用 <code>createBrowserRouter</code> 后，不需要再单独使用 <code>Routes</code> 和 <code>Route</code> 组件，路由结构是直接在 <code>router</code> 对象内配置的。</li><li>路由配置的结构较为简洁，适合数据预加载和复杂路由需求。</li></ul></li></ol><h4 id="主要区别："><a href="#主要区别：" class="headerlink" title="主要区别："></a>主要区别：</h4><ol><li><strong>路由声明方式</strong>：<ul><li>第一种方式使用 <code>Routes</code> 和 <code>Route</code> 组件来声明路由，是 React Router v6 的常见方式。</li><li>第二种方式使用 <code>createBrowserRouter</code> 来声明路由，更加简洁，适用于 v6.4+ 版本，尤其适合数据驱动的路由需求。</li></ul></li><li><strong>数据加载与处理</strong>：<ul><li>在 React Router v6.4+ 中，<code>createBrowserRouter</code> 更加支持与数据加载和动作处理的结合，比如可以直接在路由定义时加入 <code>loader</code> 和 <code>action</code>。这可以让你在定义路由的同时处理数据加载逻辑。</li><li>而在传统的 <code>BrowserRouter</code> 方式中，数据加载通常是在组件内部通过 <code>useEffect</code> 或其他钩子完成的。</li></ul></li><li><strong>组件组织方式</strong>：<ul><li>在 <code>createBrowserRouter</code> 的方式下，路由定义集中在一个地方，比较适合大型应用。</li><li><code>BrowserRouter</code> 和 <code>Routes</code> 的方式适合小型和中型应用，使用起来更加直观。</li></ul></li><li><strong>嵌套路由的管理</strong>：<ul><li>两种方式都支持嵌套路由，但第一种方式通过 <code>Route</code> 的嵌套方式定义嵌套路由，而第二种方式是在 <code>createBrowserRouter</code> 的配置对象中通过层次化结构来实现。</li></ul></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong><code>BrowserRouter</code> 和 <code>Routes</code></strong> 的方式：更加直接、简单，适用于中小型应用。</p><p><strong><code>createBrowserRouter</code> 和 <code>RouterProvider</code></strong> 的方式：适合更复杂的应用，尤其是在需要数据预加载和处理时，这种方式更加高效。</p><h3 id="六、构建layout"><a href="#六、构建layout" class="headerlink" title="六、构建layout"></a>六、构建layout</h3><h4 id="（1）什么是layout？"><a href="#（1）什么是layout？" class="headerlink" title="（1）什么是layout？"></a>（1）什么是layout？</h4><p><strong>layout（布局）界面</strong>通常是指一个应用程序的整体框架或页面结构。它负责将不同的 UI 组件（如导航栏、侧边栏、页脚、内容区等）组织在一起，并确保它们在页面上以一致的方式显示。布局界面主要用于定义页面的骨架和各部分的排列方式，用户可以在这个基础上进行内容的填充和交互设计。</p><h4 id="（2）layout的作用"><a href="#（2）layout的作用" class="headerlink" title="（2）layout的作用"></a>（2）layout的作用</h4><ul><li><strong>保持一致性</strong>：每个页面在布局上的一致性有助于用户熟悉界面，减少学习成本。</li><li><strong>导航性</strong>：通过固定的导航栏或侧边栏，用户可以快速找到所需的功能或页面。</li><li><strong>复用性</strong>：通过将布局界面抽象出来，可以在多个页面间复用同一个结构，而只改变主内容区域的内容。</li></ul><h4 id="（3）嵌套路由"><a href="#（3）嵌套路由" class="headerlink" title="（3）嵌套路由"></a>（3）嵌套路由</h4><p>在 React Router 中，<strong>嵌套路由</strong>允许你在一个路由组件内部展示子路由的内容。这种方式非常适合实现像布局组件（Layout）这种页面结构，即主界面有一些固定不变的部分（比如导航栏、页眉），而其余部分根据不同路由切换。</p><p><code>&lt;Outlet&gt;</code> 组件是 React Router 用于渲染嵌套路由的关键部分。它起到“占位符”的作用，表示在这个位置会渲染匹配当前路由的子路由内容。</p><h4 id="（4）代码示例："><a href="#（4）代码示例：" class="headerlink" title="（4）代码示例："></a>（4）代码示例：</h4><p>本次项目所有界面使用同种layout布局界面，因此较为简单。</p><p><code>AppLayout.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AppLayout</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">CartOverview</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>App.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Menu</span>, &#123; loader <span class="hljs-keyword">as</span> menuLoader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./features/menu/Menu&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([<br>  &#123;<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AppLayout</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/menu&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> /&gt;</span></span>,<br>        <span class="hljs-attr">loader</span>: menuLoader，<br>      &#125;,<br>    ],<br>  &#125;,<br>]);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RouterProvider</span> <span class="hljs-attr">router</span>=<span class="hljs-string">&#123;router&#125;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure><h3 id="七、Loaders"><a href="#七、Loaders" class="headerlink" title="七、Loaders"></a>七、Loaders</h3><p><code>Loaders</code> 通常指的是在数据加载过程中显示的组件或功能，来向用户展示数据正在获取的状态。它有助于提高用户体验，避免在数据还未加载完毕前呈现空白页面。</p><h4 id="（1）Loader的介绍和初步使用"><a href="#（1）Loader的介绍和初步使用" class="headerlink" title="（1）Loader的介绍和初步使用"></a>（1）Loader的介绍和初步使用</h4><p> 本次项目不同于之前<strong>使用useEffect获取数据加useState管理isLoading状态来显示加载界面</strong>的方法，由于运用了React Router v6.4，它自带了 <code>Loader</code> 功能用于在路由层面进行数据加载。可以结合路由直接展示加载状态。</p><p>使用方法如下：（直接给出例子）</p><p><code>Menu.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useLoaderData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getMenu &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../services/apiRestaurant&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MenuItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./MenuItem&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> menu = <span class="hljs-title function_">useLoaderData</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;menu.map((pizza) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">pizza</span>=<span class="hljs-string">&#123;pizza&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;pizza.id&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> menu = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getMenu</span>();<br>  <span class="hljs-keyword">return</span> menu;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Menu</span>;<br><br></code></pre></td></tr></table></figure><ol><li>在需要加载数据的文件中使用loader函数获取并返回数据（export导出，需是异步函数）</li><li>在该界面的Router中加入loader属性，并设置为导入的loader函数（可重命名）</li><li>在需要加载数据的组件函数中使用useLoaderData()函数获得数据</li></ol><p><code>useLoaderData</code> 是 React Router v6 提供的一个钩子，用于在路由加载时获取预加载的数据。它通过关联的 <strong>loader 函数</strong> 提供数据，确保在组件渲染时已经获得了所需的数据，避免了组件一开始就加载空白页面再去异步获取数据的情况。</p><p><code>loader</code> 是一个异步函数，专门用于在导航到该页面之前从服务端或其他数据源获取数据。这个 <code>loader</code> 函数会在渲染 <code>Menu</code> 组件之前执行，确保数据已经加载完毕。</p><h4 id="（2）navigation"><a href="#（2）navigation" class="headerlink" title="（2）navigation"></a>（2）navigation</h4><p><code>useNavigation</code> 是 React Router 提供的钩子，用于跟踪应用中的导航状态。它可以用来查看当前的导航状态（比如加载中、等待中等），并显示相应的界面状态。（详见React Router专题部分）</p><p>因此通过：</p><p><code>const navigation = useNavigation();</code></p><p> <code>// console.log(navigation);</code></p><p> <code>const isLoading = navigation.state === &quot;loading&quot;;</code></p><p>得到加载状态后即可条件显示Loader组件</p><h4 id="（3）全局Loader"><a href="#（3）全局Loader" class="headerlink" title="（3）全局Loader"></a>（3）全局Loader</h4><p>在代码中，我们把Loader组件放在了AppLayout组件中，由于它位于父路由，因此所有使用useLoaderData的子路由组件在加载的时候都会自动获取Loader组件。</p><h3 id="八、错误处理"><a href="#八、错误处理" class="headerlink" title="八、错误处理"></a>八、错误处理</h3><p>在Router的父路由中加上errorElement属性，指向显示错误信息的组件。</p><p> <code>const error = useRouteError();</code>       得到错误信息</p><p> <code>console.log(error);</code></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240911162903277.png" alt="image-20240911162903277"></p><p><code>error.data</code>或者<code>error.message</code>就是错误的具体信息（可以显示出获取信息失败的错误）</p><p>因此也可以在需要获取数据的子路由中加上这个错误属性，使得错误界面也拥有layout的布局。</p><h3 id="九、提交表单"><a href="#九、提交表单" class="headerlink" title="九、提交表单"></a>九、提交表单</h3><h4 id="（1）actions在提交表单中的用法"><a href="#（1）actions在提交表单中的用法" class="headerlink" title="（1）actions在提交表单中的用法"></a>（1）actions在提交表单中的用法</h4><p>首先需要将action函数链接到该组件的Router中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/order/new&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CreateOrder</span> /&gt;</span></span>,<br>    <span class="hljs-attr">action</span>: createOrderAction, <span class="hljs-comment">//已更名</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>另外，我们想要在提交表单数据的同时隐形提交cart中的数据，就在<Form />组件中的任意位置放上这一行代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;cart&quot;</span> value=&#123;<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(cart)&#125; /&gt;<br></code></pre></td></tr></table></figure><p>最后是action函数：（<code>action</code> 函数是在表单提交时执行的，它会处理表单提交的数据）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">&#123; request &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">formData</span>();  <span class="hljs-comment">//获得数据</span><br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(formData);  <span class="hljs-comment">//将 FormData 转换为普通的 JavaScript 对象，方便后续处理表单中的字段和值</span><br>  <span class="hljs-comment">//console.log(data);</span><br>  <span class="hljs-keyword">const</span> order = &#123;   <span class="hljs-comment">//重构data结构</span><br>    ...data,<br>    <span class="hljs-attr">cart</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data.<span class="hljs-property">cart</span>),  <span class="hljs-comment">//从字符串形式转化为javaScript对象</span><br>    <span class="hljs-attr">priority</span>: data.<span class="hljs-property">priority</span> === <span class="hljs-string">&quot;on&quot;</span>,<br>  &#125;;  <br>  <span class="hljs-comment">// console.log(order);</span><br>  <span class="hljs-keyword">const</span> newOrder = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createOrder</span>(order);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">redirect</span>(<span class="hljs-string">`/order/<span class="hljs-subst">$&#123;newOrder.id&#125;</span>`</span>);  <span class="hljs-comment">//重定向</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>重构前和重构后的数据如图（本来priority在不选时不会出现，现在由true和false描述）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240911194331654.png" alt="image-20240911194331654"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240911194427541.png" alt="image-20240911194427541"></p><h4 id="（2）隐藏字段解析"><a href="#（2）隐藏字段解析" class="headerlink" title="（2）隐藏字段解析"></a>（2）隐藏字段解析</h4><p>1.<strong><code>&lt;input type=&quot;hidden&quot;&gt;</code></strong></p><ul><li><strong>隐藏字段</strong>：<code>&lt;input type=&quot;hidden&quot;&gt;</code> 是一种不会显示在用户界面上的输入字段。它用于在表单中传递数据，但不让用户直接看到或修改这些数据。</li><li><strong>作用</strong>：主要用于传递用户不需要或不应该直接编辑的内容，例如表单的内部数据或与页面状态相关的信息。</li></ul><p>2.<strong><code>name=&quot;cart&quot;</code></strong></p><ul><li><strong>表单字段名</strong>：<code>name=&quot;cart&quot;</code> 指定了该字段在表单数据中的名称。当表单提交时，这个字段会作为表单数据的一部分发送到服务器，服务器可以通过 <code>name=&quot;cart&quot;</code> 这个名称来获取它对应的值。</li></ul><ol start="3"><li><strong><code>value=&#123;JSON.stringify(cart)&#125;</code></strong></li></ol><ul><li>**<code>JSON.stringify(cart)</code>**：<code>cart</code> 是一个 JavaScript 对象或数组，它被转换为 JSON 字符串并作为表单字段的值提交。因为 HTML 表单只能提交字符串类型的值，而 JavaScript 对象无法直接作为表单字段的值，因此需要使用 <code>JSON.stringify()</code> 将 <code>cart</code> 对象转换为 JSON 格式的字符串。</li></ul><h4 id="（3）代码运行流程"><a href="#（3）代码运行流程" class="headerlink" title="（3）代码运行流程"></a>（3）代码运行流程</h4><ol><li>用户在 <code>/order/new</code> 页面填写订单信息并提交表单。</li><li>表单提交后，<code>createOrderAction</code> 函数被调用，表单数据通过 <code>request.formData()</code> 获取。</li><li>将表单数据转换为 JavaScript 对象，并处理其中的复杂字段（如解析 JSON 和布尔值转换）。</li><li>调用 <code>createOrder(order)</code> 函数来创建新订单。</li><li>创建订单后，通过 <code>redirect(/order/$&#123;newOrder.id&#125;)</code> 将用户重定向到新创建的订单详情页。</li></ol><h4 id="（4）表单数据检测和错误处理"><a href="#（4）表单数据检测和错误处理" class="headerlink" title="（4）表单数据检测和错误处理"></a>（4）表单数据检测和错误处理</h4><h5 id="1、为了防止用户提供的数据格式不对，在创建新订单之前，需要做数据监测："><a href="#1、为了防止用户提供的数据格式不对，在创建新订单之前，需要做数据监测：" class="headerlink" title="1、为了防止用户提供的数据格式不对，在创建新订单之前，需要做数据监测："></a>1、为了防止用户提供的数据格式不对，在创建新订单之前，需要做数据监测：</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> error=&#123;&#125;;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isValidPhone</span>(order.<span class="hljs-property">phone</span>))<br>  errors.<span class="hljs-property">phone</span> =<br>    <span class="hljs-string">&quot;Please give us your correct phone number.We might need it to contact you.&quot;</span>;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(errors).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> errors;<br></code></pre></td></tr></table></figure><ol><li>创建一个空的对象 <code>errors</code>，用来存储所有的错误信息。这个对象会根据验证条件动态填充相应的错误消息。</li><li>如果电话号码无效，则在 <code>errors</code> 对象中添加一个 <code>phone</code> 错误字段，并设置一个对应的错误消息 </li><li><code>Object.keys(errors)</code> 返回 <code>errors</code> 对象中的所有键（即错误字段）的数组。如果 <code>errors</code> 中有任何错误信息，<code>Object.keys(errors).length</code> 的值就会大于 0，于是代码会返回这个 <code>errors</code> 对象，通常会在前端显示这些错误信息给用户。</li></ol><h5 id="2、在组件里需要接受错误信息并显示："><a href="#2、在组件里需要接受错误信息并显示：" class="headerlink" title="2、在组件里需要接受错误信息并显示："></a>2、在组件里需要接受错误信息并显示：</h5><p> <code>const formErrors = useActionData();</code></p><p><code>&#123;formErrors?.phone &amp;&amp; &lt;p&gt;&#123;formErrors.phone&#125;&lt;/p&gt;&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程13-Redux入门</title>
    <link href="/2024/09/07/react%E8%AF%BE%E7%A8%8B13-Redux%E5%85%A5%E9%97%A8/"/>
    <url>/2024/09/07/react%E8%AF%BE%E7%A8%8B13-Redux%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>🥳本节课开始学习Redux</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907143311436.png"></p><h3 id="一、Redux的定义"><a href="#一、Redux的定义" class="headerlink" title="一、Redux的定义"></a>一、Redux的定义</h3><hr><p>Redux 是一个用于管理 JavaScript 应用中状态的开源库，通常与 React 一起使用。Redux 的核心思想是将应用的状态存储在一个全局的单一状态树中，这样应用中的任何组件都可以访问和更新该状态。</p><ul><li><p><strong>Redux 的三个核心原则：</strong></p><ul><li><p><strong>单一数据源</strong>： 应用的所有状态保存在一个对象树中，并且这个状态对象树是只读的。</p></li><li><p><strong>状态是只读的</strong>： 唯一改变状态的方法是发出一个 <strong>action</strong>，action 是一个描述事件的普通 JavaScript 对象。</p></li><li><p><strong>使用纯函数来修改状态</strong>： 通过编写纯函数 <strong>reducers</strong> 来根据 action 描述的事件返回新的状态。</p></li></ul></li><li><p><strong>使用 Redux 的步骤：</strong></p><ul><li><p><strong>创建 store</strong>：<code>createStore()</code> 用于创建 Redux 的存储（store）。（含有多个Reducer，为每个应用程序特性或每个数据创建一个reducer）</p></li><li><p><strong>定义 reducer</strong>：reducer 是一个纯函数，接收当前的状态和 action，然后返回新的状态。</p></li><li><p><strong>分发 action</strong>：组件可以通过 <code>dispatch(action)</code> 来发送 action，进而触发状态的变化。</p></li><li><p><strong>连接组件与 store</strong>：通过 <code>connect()</code> 或者 hooks（如 <code>useSelector</code> 和 <code>useDispatch</code>）来让 React 组件与 Redux 的状态进行交互。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907151053166.png" alt="image-20240907151053166"></p></li></ul><h4 id="（1）什么是纯函数"><a href="#（1）什么是纯函数" class="headerlink" title="（1）什么是纯函数"></a>（1）什么是纯函数</h4><p>纯函数（Pure Function）是指在相同的输入下总是返回相同输出，并且没有副作用的函数。</p><p>1、<strong>相同的输入，得到相同的输出</strong>：<br>一个纯函数依赖于它的输入参数，任何时候只要输入相同，输出就一定相同。例如，<code>sum(a, b)</code> 函数总是返回 <code>a + b</code>，不论什么时候调用。</p><p>2、<strong>没有副作用</strong>：<br>纯函数不会修改外部的状态，也不会影响外部环境。比如它不会更改全局变量、修改传入的参数，也不会执行诸如 IO 操作、网络请求等副作用。</p><p>3、<strong>纯函数的优点</strong>：</p><ul><li>易于测试和调试：由于纯函数依赖于输入和输出，没有副作用，因此它们容易进行单元测试。</li><li>可组合性：多个纯函数可以组合使用，减少了复杂度。</li><li>可预测性：因为纯函数不会依赖外部状态或产生副作用，它的行为更容易预测。</li></ul><h4 id="（2）为什么修改状态不算副作用"><a href="#（2）为什么修改状态不算副作用" class="headerlink" title="（2）为什么修改状态不算副作用"></a>（2）为什么修改状态不算副作用</h4><p><strong>副作用</strong>指的是对外部环境的改变，例如修改外部的变量、执行 I&#x2F;O 操作、调用 API 等，这些操作会导致应用的外部环境在函数运行前后发生变化。而 Redux 中的 <strong>reducer</strong> 是一个纯函数，它接收旧的状态和 action，并返回一个新的状态对象，而不是修改现有的状态。</p><p><strong>不可变性</strong>：在 Redux 中，reducer 不直接修改传入的状态，而是创建并返回一个新的状态对象。这种方式保证了状态的不可变性，从而避免了副作用。</p><p>直接修改状态：</p><p><code>function reducer(state, action) &#123;</code>  </p><p>​<code>state.count += 1;</code> </p><p>​<code>return state; &#125;</code></p><p>返回新状态：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    ...state,  <span class="hljs-comment">// 创建一个新的状态对象</span><br>    <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>  <span class="hljs-comment">// 修改新状态的 count 属性</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、学习Redux"><a href="#二、学习Redux" class="headerlink" title="二、学习Redux"></a>二、学习Redux</h3><p>⭕npm install redux</p><hr><h4 id="（1）建立Store"><a href="#（1）建立Store" class="headerlink" title="（1）建立Store"></a>（1）建立Store</h4><h5 id="1、start"><a href="#1、start" class="headerlink" title="1、start"></a>1、start</h5><p><code>const store = createStore(reducer); </code>     &#x2F;&#x2F;建立store</p><p><code>store.dispatch(&#123; type: &quot;account/deposit&quot;, payload: 500 &#125;);</code>     &#x2F;&#x2F;发出动作</p><p><code>console.log(store.getState());</code>    &#x2F;&#x2F;获取状态值</p><h5 id="2、working-with-action-creators"><a href="#2、working-with-action-creators" class="headerlink" title="2、working with action creators"></a>2、working with action creators</h5><p><code>function deposit( amount ) &#123;</code></p><pre><code class="hljs"> `return &#123; type: &quot;account/deposit&quot;, payload: amount &#125;;`</code></pre><p><code>&#125;</code></p><p><code>store.dispatch(deposit(500));</code></p><h5 id="3、两个reducer"><a href="#3、两个reducer" class="headerlink" title="3、两个reducer"></a>3、两个reducer</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> rootReducer = <span class="hljs-title function_">combineReducers</span>(&#123;<br>  <span class="hljs-attr">account</span>: accountReducer,<br>  <span class="hljs-attr">customer</span>: customerReducer,<br>&#125;);<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(rootReducer);<br></code></pre></td></tr></table></figure><h5 id="4、state-slices（专业的状态结构）"><a href="#4、state-slices（专业的状态结构）" class="headerlink" title="4、state slices（专业的状态结构）"></a>4、state slices（专业的状态结构）</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907170229118.png" alt="image-20240907170229118"></p><p>slice文件存储与相关用户有关的状态以及action creactor函数；（<strong>export defaut</strong> reducer，<strong>export</strong> action creator 函数）</p><p>index.js文件：<code>import store from &quot;./store&quot;;</code></p><h4 id="（2）将redux和react连接起来"><a href="#（2）将redux和react连接起来" class="headerlink" title="（2）将redux和react连接起来"></a>（2）将redux和react连接起来</h4><p>⭕npm  i react-redux</p><hr><ul><li><p>首先导入Provider<code>import &#123; Provider &#125; from &quot;react-redux&quot;;</code>      😋和context API很类似哦</p></li><li><p>然后把app包裹进去：</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>接下来每个需要从Redux的store信息的组件都可以接收到了。</p><ul><li><p>读取信息：</p><ul><li>导入hook：<code>import &#123; useSelector &#125; from &quot;react-redux&quot;;</code></li><li>读取信息：<code>const customer = useSelector( (store) =&gt; store.customer );</code>   or</li></ul><p> <code>const customer = useSelector( (store) =&gt;store.customer.fullName</code>     （customer与在<code>store.js</code>中的命名对应）</p></li></ul><h5 id="1、dispatching-actions-from-our-react-app"><a href="#1、dispatching-actions-from-our-react-app" class="headerlink" title="1、dispatching actions from our react app"></a>1、dispatching actions from our react app</h5><p> <code>const dispatch=useDispatch();</code>     得到dispath函数，这样dispatch就会按照平常那样工作啦，只需要传递所需的参数就可以了</p><p>PS：（解构value）（冒号前的是重构前的名字，冒号后是此文件要用的名字）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-attr">loan</span>: currentLoan,<br>    <span class="hljs-attr">loanPurpose</span>: currntLoanPurpose,<br>    balance,<br>  &#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">store</span>) =&gt;</span> store.<span class="hljs-property">account</span>);<br></code></pre></td></tr></table></figure><h5 id="2、把组件连接到Redux的旧方法"><a href="#2、把组件连接到Redux的旧方法" class="headerlink" title="2、把组件连接到Redux的旧方法"></a>2、把组件连接到Redux的旧方法</h5><p><code>mapStateToProps</code> 是 Redux 中旧的（传统的）方法之一，用于将 Redux 的全局状态映射到 React 组件的 props 上，从而使组件能够访问 Redux 状态。在使用 <code>mapStateToProps</code> 的时候，通常搭配 <code>connect</code> 函数来将 Redux 状态和 React 组件连接起来。</p><p>例如：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907203055337.png" alt="image-20240907203055337"></p><p>1️⃣mapStateToProps函数的作用是从Redux的store中提取所需的状态，并通过props将这些状态传递给React组件，它接收两个参数：state、ownProps（可选，组件自身的props）</p><p>2️⃣使用connect接收mapStateToProps变成一个新的函数，这个函数接收Balance函数（想要连接的函数）作为参数，将状态传递给Balance组件</p><p>3️⃣Balance组件接收参数</p><h4 id="（3）Middleware"><a href="#（3）Middleware" class="headerlink" title="（3）Middleware"></a>（3）Middleware</h4><p>要引入这个问题，首先要知道Reducer中不能含有像API调用这样的异步操作，那么这些操作应该放在哪里呢🤔？（在组件中分散地fetching data显然不理想 ）（而store里显然也不行）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907205303059.png" alt="image-20240907205303059"></p><p>在 Redux 中，<strong>middleware（中间件）</strong> 是指一个扩展 Redux dispatch 功能的机制，允许你在发出 action 和 reducer 处理该 action 之间插入自定义的逻辑。它的主要作用是拦截 action，执行一些额外的处理，比如日志记录、异步请求、错误处理等。</p><h5 id="1、中间件的作用"><a href="#1、中间件的作用" class="headerlink" title="1、中间件的作用"></a>1、中间件的作用</h5><ul><li><strong>处理异步操作</strong>：Redux 本身只能处理同步的状态更新，而中间件可以让你执行异步操作，比如网络请求。常见的异步中间件有 <code>redux-thunk</code> 和 <code>redux-saga</code>。</li><li><strong>记录日志</strong>：可以在每次 action 被触发时记录日志。</li><li><strong>错误处理</strong>：在 action 到达 reducer 之前处理错误或异常情况。</li><li><strong>自定义扩展</strong>：可以在 <code>dispatch</code> 过程中加入自定义的逻辑，比如修改 action、延迟 dispatch 等。</li></ul><h5 id="2、中间件的工作流程"><a href="#2、中间件的工作流程" class="headerlink" title="2、中间件的工作流程"></a>2、中间件的工作流程</h5><p>Redux 的中间件基本上是一个函数，它接收 <code>store</code>，然后返回一个函数，该函数接收 <code>next</code>，最后返回一个函数处理 <code>action</code>。中间件在每次 action 被派发时会执行，并且可以控制 action 是否传递到下一个中间件或 reducer。</p><p>中间件执行顺序如下：</p><ul><li><code>dispatch(action)</code> -&gt; 中间件链 -&gt; reducer -&gt; 更新 store</li></ul><h4 id="（4）Redux-Thunk的应用"><a href="#（4）Redux-Thunk的应用" class="headerlink" title="（4）Redux Thunk的应用"></a>（4）Redux Thunk的应用</h4><p>⭕npm  i  redux-thunk</p><hr><h5 id="1、进入store-js做如下改动："><a href="#1、进入store-js做如下改动：" class="headerlink" title="1、进入store.js做如下改动："></a>1、进入<code>store.js</code>做如下改动：</h5><ul><li>添加导入：<code>import thunk from &quot;redux-thunk&quot;;</code></li><li>使用applyMiddleware创建store：<code>const store = createStore(rootReducer, applyMiddleware(thunk));</code></li></ul><p>❓为什么导入thunk不需要花括号？</p><p>​             在 JavaScript 中，模块可以有两种类型的导出方式：</p><p>​                      <strong>默认导出（default export）</strong>：一个模块只能有一个默认导出，导入时可以使用任意名字，并且不需要花括号。</p><p>​                      <strong>命名导出（named export）</strong>：一个模块可以有多个命名导出，导入时必须使用花括号，且必须与导出时的名字匹配。</p><p>​              在 <code>redux-thunk</code> 这个库中，<code>thunk</code> 是默认导出的内容，所以导入时不需要花括号。</p><p>​              尴尬的是不加花括号报错了哈哈哈所以到底是默认还是命名啊……</p><h5 id="2、在action-creator函数中做异步API调动"><a href="#2、在action-creator函数中做异步API调动" class="headerlink" title="2、在action creator函数中做异步API调动"></a>2、在action creator函数中做异步API调动</h5><p>要做API调用后返回action，因此先返回一个函数，React看到这个函数就会知道这是thunk，因此会先执行函数中的内容再返回action。</p><p>本次App需要用到的API如图所示，是一个钱币转换API，FROM：<a href="https://www.frankfurter.app/docs/">https://www.frankfurter.app/docs/</a></p><hr><p>➡️fetch(<code>https://api.frankfurter.app/latest?amount=10&amp;from=GBP&amp;to=USD</code>)</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240908131920242.png" alt="image-20240908131920242"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">amount, currency</span>) &#123;<br>  <span class="hljs-keyword">if</span> (currency === <span class="hljs-string">&quot;USD&quot;</span>) <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/deposit&quot;</span>, <span class="hljs-attr">payload</span>: amount &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">dispatch, getState</span>) &#123;   <span class="hljs-comment">//必须定义为异步函数</span><br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/convertingCurrency&quot;</span> &#125;);   <span class="hljs-comment">//想要设定一个Loading界面</span><br>     <br><span class="hljs-comment">//API call</span><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>( <span class="hljs-string">`https://api.frankfurter.app/latest?amount=<span class="hljs-subst">$&#123;amount&#125;</span>&amp;from=<span class="hljs-subst">$&#123;currency&#125;</span>&amp;to=USD`</span>);<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-keyword">const</span> converted = data.<span class="hljs-property">rates</span>.<span class="hljs-property">USD</span>;<br>   <br> <span class="hljs-comment">//return action</span><br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/deposit&quot;</span>, <span class="hljs-attr">payload</span>: converted &#125;);<br>  &#125;;<br><br><br></code></pre></td></tr></table></figure><p>⁉️为什么上面的操作可以直接return action，下面却要dispatch action？</p><ul><li><p>如果是一个普通的同步操作（如你代码中的 <code>if (currency === &quot;USD&quot;)</code> 情况），你可以直接返回一个 action 对象，Redux会立即处理这个 action。但在异步操作中（如 API 调用时），你不能直接返回 action，因为 action 的 <code>payload</code> 是异步获取的。此时，返回的不是普通的 action，而是一个异步的函数（即 <code>thunk</code> 函数），这个函数需要等到异步操作完成后再手动派发 action，更新 Redux store。这里的 <code>dispatch</code> 就是用来派发 action 的。</p></li><li><p>异步操作（如 <code>fetch</code> API）需要时间来完成。如果你在异步操作之前就返回一个 action，Redux 并不知道这个 action 应该在什么时候派发，它也无法等待异步操作的完成。使用 <code>dispatch</code> 可以确保在异步操作（如 API 请求）完成之后再将最终的结果派发给 Redux store。<code>dispatch</code> 是 Redux 中派发 action 的函数，它通知 Redux store 有一个新的 action 被触发，Redux  store 会根据这个 action 更新 state。</p></li></ul><p>😲每一次fetch Data后，得到data之后有一个很好的习惯是console.log（data），来查看data的格式，方便运用它</p><h4 id="（5）Redux-Dev-Tools"><a href="#（5）Redux-Dev-Tools" class="headerlink" title="（5）Redux Dev Tools"></a>（5）Redux Dev Tools</h4><h5 id="1、下载Dev-ToolsRedux-DevTools-Chrome-应用商店-google-com"><a href="#1、下载Dev-ToolsRedux-DevTools-Chrome-应用商店-google-com" class="headerlink" title="1、下载Dev ToolsRedux DevTools - Chrome 应用商店 (google.com)"></a>1、下载Dev Tools<a href="https://chromewebstore.google.com/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools - Chrome 应用商店 (google.com)</a></h5><h5 id="2、npm-i-redux-devtools-extension"><a href="#2、npm-i-redux-devtools-extension" class="headerlink" title="2、npm i redux-devtools-extension"></a>2、<code>npm i redux-devtools-extension</code></h5><p>与视频一致，但此时已经有报错了（表明 <code>redux-devtools-extension</code> 版本与当前安装的 <code>redux@5.0.1</code> 版本不兼容。<code>redux-devtools-extension@2.13.9</code> 需要 <code>redux</code> 的版本是 <code>^3.1.0</code> 或 <code>^4.0.0</code>，而我使用的是 <code>redux@5.0.1</code>，导致了依赖冲突）</p><p>因此只能<code>npm install redux-devtools-extension --legacy-peer-deps</code>来忽略 peerDependencies 的冲突，并继续安装</p><p>☑️在<code>store.js</code>中修改</p><p><code>import &#123; composeWithDevTools &#125; from &quot;redux-devtools-extension&quot;;</code></p><p><code>const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));</code></p><h5 id="3、界面展示"><a href="#3、界面展示" class="headerlink" title="3、界面展示"></a>3、界面展示</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240908143934918.png" alt="image-20240908143934918"></p><p>⭕左边可以看到所有动作，并且可以直接jump到所有历史的状态，右边可以看到状态，下面的滑块栏也可以抵达历史动作的状态。</p><p>⭕点击该处可以手动dispatch action</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240908144145452.png" alt="image-20240908144145452"></p><h4 id="（6）Redux-Toolkit"><a href="#（6）Redux-Toolkit" class="headerlink" title="（6）Redux Toolkit"></a>（6）Redux Toolkit</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240908152201707.png" alt="image-20240908152201707"></p><p>✅compatible: 兼容的                 ✅boilerplate样板代码                 ✅mutate:  可变的</p><p>✅immutable:  不可变的             ✅Immer:  Immer库（用于简化不可变数据处理的库）</p><h5 id="1、creating-store-with-RTK："><a href="#1、creating-store-with-RTK：" class="headerlink" title="1、creating store with RTK："></a>1、creating store with RTK：</h5><p>⭕<code>npm i @reduxjs/toolkit</code>（同样版本冲突，按照上面的方法安装）</p><hr><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">import</span> accountReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./features/account/accountSlice&quot;</span>;<br><span class="hljs-keyword">import</span> customerReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./features/customers/customerSlice&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">account</span>: accountReducer,<br>    <span class="hljs-attr">customer</span>: customerReducer,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><h5 id="2、改变Slice"><a href="#2、改变Slice" class="headerlink" title="2、改变Slice"></a>2、改变Slice</h5><p>介于不想占用太多空间，这里仅给出AccountSlice的示例（以及不用RTK的版本）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">balance</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">loan</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">loanPurpose</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> accountSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;account&quot;</span>,<br>  initialState,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-title function_">deposit</span>(<span class="hljs-params">state, action</span>) &#123;<br>      state.<span class="hljs-property">balance</span> += action.<span class="hljs-property">payload</span>;<br>      state.<span class="hljs-property">isLoading</span> = <span class="hljs-literal">false</span>;<br>    &#125;,<br>    <span class="hljs-title function_">withdraw</span>(<span class="hljs-params">state, action</span>) &#123;<br>      state.<span class="hljs-property">balance</span> -= action.<span class="hljs-property">payload</span>;<br>    &#125;,<br>    <span class="hljs-attr">requestLoan</span>: &#123;<br>      <span class="hljs-title function_">prepare</span>(<span class="hljs-params">amount, purpose</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">payload</span>: &#123; amount, purpose &#125;,<br>        &#125;;<br>      &#125;,<br><br>      <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>        <span class="hljs-keyword">if</span> (state.<span class="hljs-property">loan</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        state.<span class="hljs-property">balance</span> = state.<span class="hljs-property">balance</span> + action.<span class="hljs-property">payload</span>.<span class="hljs-property">amount</span>;<br>        state.<span class="hljs-property">loan</span> = action.<span class="hljs-property">payload</span>.<span class="hljs-property">amount</span>;<br>        state.<span class="hljs-property">loanPurpose</span> = action.<span class="hljs-property">payload</span>.<span class="hljs-property">purpose</span>;<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-title function_">payLoan</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">balance</span> -= state.<span class="hljs-property">loan</span>;<br>      state.<span class="hljs-property">loan</span> = <span class="hljs-number">0</span>;<br>      state.<span class="hljs-property">loanPurpose</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;,<br>    <span class="hljs-title function_">convertingCurrency</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">isLoading</span> = <span class="hljs-literal">true</span>;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; withdraw, requestLoan, payLoan &#125; = accountSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">amount, currency</span>) &#123;<br>  <span class="hljs-keyword">if</span> (currency === <span class="hljs-string">&quot;USD&quot;</span>) <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/deposit&quot;</span>, <span class="hljs-attr">payload</span>: amount &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">dispatch, getState</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/convertingCurrency&quot;</span> &#125;);<br>    <span class="hljs-comment">//API call</span><br><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>      <span class="hljs-string">`https://api.frankfurter.app/latest?amount=<span class="hljs-subst">$&#123;amount&#125;</span>&amp;from=<span class="hljs-subst">$&#123;currency&#125;</span>&amp;to=USD`</span><br>    );<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-keyword">const</span> converted = data.<span class="hljs-property">rates</span>.<span class="hljs-property">USD</span>;<br>    <span class="hljs-comment">//return action</span><br><br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/deposit&quot;</span>, <span class="hljs-attr">payload</span>: converted &#125;);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> accountSlice.<span class="hljs-property">reducer</span>;<br><br><span class="hljs-comment">//------------------V1-No RTK-------------------------</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">const initialStateAccount = &#123;</span><br><span class="hljs-comment">  balance: 0,</span><br><span class="hljs-comment">  loan: 0,</span><br><span class="hljs-comment">  loanPurpose: &quot;&quot;,</span><br><span class="hljs-comment">  isLoading: false,</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export default function accountReducer(state = initialStateAccount, action) &#123;</span><br><span class="hljs-comment">  switch (action.type) &#123;</span><br><span class="hljs-comment">    case &quot;account/deposit&quot;:</span><br><span class="hljs-comment">      return &#123;</span><br><span class="hljs-comment">        ...state,</span><br><span class="hljs-comment">        balance: state.balance + action.payload,</span><br><span class="hljs-comment">        isLoading: false,</span><br><span class="hljs-comment">      &#125;;</span><br><span class="hljs-comment">    case &quot;account/withdraw&quot;:</span><br><span class="hljs-comment">      return &#123; ...state, balance: state.balance - action.payload &#125;;</span><br><span class="hljs-comment">    case &quot;account/requestLoan&quot;:</span><br><span class="hljs-comment">      if (state.loan &gt; 0) return state;</span><br><span class="hljs-comment">      return &#123;</span><br><span class="hljs-comment">        ...state,</span><br><span class="hljs-comment">        balance: state.balance + action.payload.amount,</span><br><span class="hljs-comment">        loan: action.payload.amount,</span><br><span class="hljs-comment">        loanPurpose: action.payload.purpose,</span><br><span class="hljs-comment">      &#125;;</span><br><span class="hljs-comment">    case &quot;account/payLoan&quot;:</span><br><span class="hljs-comment">      return &#123;</span><br><span class="hljs-comment">        ...state,</span><br><span class="hljs-comment">        loan: 0,</span><br><span class="hljs-comment">        loanPurpose: &quot;&quot;,</span><br><span class="hljs-comment">        balance: state.balance - state.loan,</span><br><span class="hljs-comment">      &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    case &quot;account/convertingCurrency&quot;:</span><br><span class="hljs-comment">      return &#123; ...state, isLoading: true &#125;;</span><br><span class="hljs-comment">    default:</span><br><span class="hljs-comment">      return state;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export function deposit(amount, currency) &#123;</span><br><span class="hljs-comment">  if (currency === &quot;USD&quot;) return &#123; type: &quot;account/deposit&quot;, payload: amount &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  return async function (dispatch, getState) &#123;</span><br><span class="hljs-comment">    dispatch(&#123; type: &quot;account/convertingCurrency&quot; &#125;);</span><br><span class="hljs-comment">    //API call</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    const res = await fetch(</span><br><span class="hljs-comment">      `https://api.frankfurter.app/latest?amount=$&#123;amount&#125;&amp;from=$&#123;currency&#125;&amp;to=USD`</span><br><span class="hljs-comment">    );</span><br><span class="hljs-comment">    const data = await res.json();</span><br><span class="hljs-comment">    const converted = data.rates.USD;</span><br><span class="hljs-comment">    //return action</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    dispatch(&#123; type: &quot;account/deposit&quot;, payload: converted &#125;);</span><br><span class="hljs-comment">  &#125;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export function withdraw(amount) &#123;</span><br><span class="hljs-comment">  return &#123; type: &quot;account/withdraw&quot;, payload: amount &#125;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export function requestLoan(amount, purpose) &#123;</span><br><span class="hljs-comment">  return &#123; type: &quot;account/requestLoan&quot;, payload: &#123; amount, purpose &#125; &#125;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export function payLoan() &#123;</span><br><span class="hljs-comment">  return &#123; type: &quot;account/payLoan&quot; &#125;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h5 id="3、使用RTK的优点🔆"><a href="#3、使用RTK的优点🔆" class="headerlink" title="3、使用RTK的优点🔆"></a>3、使用RTK的优点🔆</h5><ul><li><p><strong>代码简洁、减少样板代码</strong>：</p><ul><li><p>RTK 中的 <code>createSlice</code> 自动生成 action types 和 action creators，因此减少了手动定义 action type 和 creator 的代码量。</p></li><li><p>在不使用 RTK 的版本中，你需要手动编写大量的 <code>switch-case</code> 语句和 action creator，比如 <code>account/deposit</code>、<code>account/withdraw</code> 等。而在 RTK 中，<code>createSlice</code> 自动完成这些任务，简化了 reducer 和 action 的编写。</p></li></ul></li><li><p><strong>支持“可变”状态，简化状态更新逻辑</strong>：</p><ul><li>RTK 内部使用 <code>Immer</code>， 允许你在 reducer 中编写像变异对象一样的代码，但实际上它并没有真的修改原始状态，而是生成了一个新的状态对象。这意味着：你在 reducer 中“修改”状态对象的字段时，<code>Immer</code> 会追踪这些变更，并创建一个新的状态对象，保持 Redux 的不可变性原则；如果你没有修改状态，<code>Immer</code> 会返回原始状态（不创建新的对象），从而优化性能。</li><li>你可以直接修改状态对象，而不需要手动创建状态的深拷贝，这大大简化了状态更新的代码。</li></ul></li><li><p><strong>内置异步处理和 middleware 支持</strong>：</p><ul><li><p>RTK 提供了异步 action（如 <code>createAsyncThunk</code>）的简化处理，内置了 thunk 中间件，简化了异步数据请求的管理。在你的代码中，<code>deposit</code> 异步处理逻辑依然需要用 <code>thunk</code>，但使用 RTK 时可以通过 <code>createAsyncThunk</code> 或更好地支持异步流。</p></li><li><p>你可以直接定义异步 action，不需要像传统 Redux 那样额外引入 <code>redux-thunk</code> 或手动创建异步操作。</p></li></ul></li><li><p><strong>自动生成 action creators 和 action types</strong>：</p><ul><li>RTK 自动生成 action creators，避免了手动定义 action type 的重复劳动。这不仅减少了错误的可能性，还使代码更具可维护性和一致性。</li></ul></li><li><p><strong>开发工具集成</strong>：</p><ul><li>RTK 与 Redux DevTools 以及其他 Redux 开发工具更好地集成，带有默认的优化配置，例如减少手动配置、提供性能优化等。</li></ul></li></ul><h5 id="4、使用RTK的缺点⛈️"><a href="#4、使用RTK的缺点⛈️" class="headerlink" title="4、使用RTK的缺点⛈️"></a>4、使用RTK的缺点⛈️</h5><ul><li><strong>学习曲线</strong>：<ul><li>尽管 RTK 提供了很多简化的工具，但对于那些已经熟悉传统 Redux 的开发者来说，理解和掌握 RTK 的 API 和设计模式可能需要一定的时间。比如像 <code>createSlice</code>、<code>createAsyncThunk</code> 这些 API 对老用户来说可能需要一些时间适应。</li></ul></li><li><strong>隐藏的复杂性</strong>：<ul><li>虽然 RTK 内部处理了不可变性和异步操作，但它隐藏了一些 Redux 的原理性代码（如状态的不可变性操作、手动定义 <code>action</code> 和 <code>reducer</code> 的流程）。这对于希望深入了解 Redux 底层实现的开发者来说，可能减少了对框架的深度理解。</li><li>在代码中可以体现出来，使用RTK来自动创建action creator时默认只接收一个参数，因此需要用<code>prepare</code>函数来进行修改</li></ul></li><li><strong>与复杂应用的结合</strong>：<ul><li>对于一些非常复杂或高度定制的应用，RTK 的封装可能不够灵活，开发者有时可能需要绕过 RTK 的一些默认行为，以适应应用的特定需求。在这些情况下，传统的 Redux 反而可能更灵活。</li></ul></li></ul><h3 id="三、contextAPI-useReducer和Redux的区别"><a href="#三、contextAPI-useReducer和Redux的区别" class="headerlink" title="三、contextAPI+useReducer和Redux的区别"></a>三、<code>contextAPI</code>+<code>useReducer</code>和<code>Redux</code>的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240909101414957.png" alt="image-20240909101414957"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240909101339231.png" alt="image-20240909101339231"></p><h4 id="1、中间件和插件支持"><a href="#1、中间件和插件支持" class="headerlink" title="1、中间件和插件支持"></a><strong>1、中间件和插件支持</strong></h4><ul><li><strong>Context API + useReducer</strong>：没有 Redux 那种丰富的中间件和插件生态系统，例如 <code>redux-thunk</code>、<code>redux-saga</code> 之类的异步操作工具。通常需要手动处理复杂的异步逻辑。</li><li><strong>Redux</strong>：拥有大量中间件和开发工具（如 Redux DevTools和Middleware），可以很方便地<strong>调试和处理异步操作</strong>。</li></ul><h4 id="2、状态存储方式"><a href="#2、状态存储方式" class="headerlink" title="2、状态存储方式"></a><strong>2、状态存储方式</strong></h4><ul><li><strong>Context API + useReducer</strong>：没有全局的单一状态树。通过 <code>useReducer</code> 来管理本地状态，并通过 <code>Context API</code> 提供状态共享的功能。不容易新增状态（要添加新的Provider和Reducer）</li><li><strong>Redux</strong>：有一个全局的单一状态树（store），所有的应用状态都存储在这一个 store 中。这使得状态管理更加集中。创建新的状态slice较为方便</li></ul><h4 id="3、起步"><a href="#3、起步" class="headerlink" title="3、起步"></a>3、起步</h4><ul><li><strong>Context API + useReducer</strong>：由React直接提供，很容易建立</li><li><strong>Redux</strong>：需要提供插件支持，在初始建立的时候较为复杂</li></ul><h4 id="4、优化（具体见上一节）"><a href="#4、优化（具体见上一节）" class="headerlink" title="4、优化（具体见上一节）"></a>4、优化（具体见上一节）</h4><ul><li><strong>Context API + useReducer</strong>：优化较为复杂</li><li><strong>Redux</strong>：提供了很多开箱即用的优化</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程12-React中可优化的部分以及useEffect的补充</title>
    <link href="/2024/09/03/react%E8%AF%BE%E7%A8%8B12-React%E4%B8%AD%E5%8F%AF%E4%BC%98%E5%8C%96%E7%9A%84%E9%83%A8%E5%88%86%E4%BB%A5%E5%8F%8AuseEffect%E7%9A%84%E8%A1%A5%E5%85%85/"/>
    <url>/2024/09/03/react%E8%AF%BE%E7%A8%8B12-React%E4%B8%AD%E5%8F%AF%E4%BC%98%E5%8C%96%E7%9A%84%E9%83%A8%E5%88%86%E4%BB%A5%E5%8F%8AuseEffect%E7%9A%84%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<p>本节探讨如何优化React项目，以及对useEffect的用法做一个小小的补充</p><span id="more"></span><h3 id="一、避免不必要的渲染"><a href="#一、避免不必要的渲染" class="headerlink" title="一、避免不必要的渲染"></a>一、避免不必要的渲染</h3><p>方法：memo、useMemo、useCallback、将元素传递到其他元素中作为children或其他道具</p><p>组件实例只能在三种不同的情况下重新呈现：</p><p>​状态改变、context改变、父组件重新渲染</p><p>wasted render： 没有在DOM产生任何变化的渲染</p><p>（使程序停滞或无响应）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903184623448.png" alt="image-20240903184623448" style="zoom:80%;" /><p>选择设置激活记录渲染的原因，然后点击开始录制和结束录制就可以获取每次渲染的信息</p><p>使用TEST应用“将元素传递到其他元素中作为children或其他道具”这个方法：</p><p>​当一个组件中包含了一个渲染时间很长的组件，每当大组件重新渲染的时候都会重新渲染这个组件。但是把组件当作children传入的时候，就不会将它重新渲染了。</p><p>​why？作为children，它最先被渲染，每次组件渲染时，直接将children移交，不会受到状态更新的影响。</p><p>添加工具咯：</p><p>Memoization</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903191433311.png" alt="image-20240903191433311" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903191638380.png" alt="image-20240903191638380" style="zoom: 33%;" /><p>父组件中的状态改变会重新渲染所有子组件，所以当一个子组件渲染速度过慢时，会使其他组件也受到影响。（经常更新，heavy，收到的道具经常不变）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903192958326.png" alt="image-20240903192958326"></p><p>这样包装起来就OK了。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903201449887.png" alt="image-20240903201449887" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903201522483.png" alt="image-20240903201522483" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903201600349.png" alt="image-20240903201600349" style="zoom: 33%;" /><p>解决object：useMemo</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903202608079.png" alt="image-20240903202608079"></p><p>useCallback（记忆函数），解决function  （setState函数是自动记忆的）</p><p>​<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903203412445.png" alt="image-20240903203412445"></p><p>减少与context相关的渲染浪费</p><p>​当provider是App的子组件而App重新渲染，则provider中的context的value作为对象会重新渲染。因此所有接收context的对象的组件也都会被重新渲染。（使用useMemo来创建对象）</p><p>当想要记住的组件是要被export的，就可以直接</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-06%20154919.png" alt="img"></p><h3 id="二、提高应用的速度和相应能力（无延迟）"><a href="#二、提高应用的速度和相应能力（无延迟）" class="headerlink" title="二、提高应用的速度和相应能力（无延迟）"></a>二、提高应用的速度和相应能力（无延迟）</h3><p>useMemo、useCallback、useTransition</p><h3 id="三、减少Bundle的大小"><a href="#三、减少Bundle的大小" class="headerlink" title="三、减少Bundle的大小"></a>三、减少Bundle的大小</h3><p>方法：减少第三方包的使用，实现代码拆分和延迟加载</p><h4 id="什么是bundle？"><a href="#什么是bundle？" class="headerlink" title="什么是bundle？"></a><strong>什么是bundle？</strong></h4><hr><p>在前端开发中，“bundle”指的是将多个资源文件（如JavaScript、CSS、图像、字体等）打包成一个或多个文件的过程。这个打包的过程通常通过工具如Webpack、Parcel或Vite来完成。</p><p>为什么要进行打包？</p><ol><li><strong>减少HTTP请求</strong>：将多个文件打包成一个文件，可以减少浏览器发送的HTTP请求数量，从而加快页面的加载速度。</li><li><strong>代码压缩和优化</strong>：打包过程中，工具可以对代码进行压缩和优化，如去除无用代码（tree-shaking）、压缩代码大小、混淆代码以提高安全性等。</li><li><strong>模块化管理</strong>：通过打包工具，可以更好地管理项目中的模块和依赖，解决不同模块之间的依赖关系。</li><li><strong>跨浏览器兼容性</strong>：打包工具通常还可以处理不同浏览器对JavaScript或CSS特性的支持情况，生成兼容性的代码。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240904100411303.png" alt="image-20240904100411303"></p><h4 id="懒加载："><a href="#懒加载：" class="headerlink" title="懒加载："></a><strong>懒加载：</strong></h4><hr><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907144718481.png" alt="image-20240907144718481"></p><p>懒加载（Lazy Loading）是一种优化技术，主要用于延迟加载页面中的资源或内容，直到它们真正需要被显示或使用时才进行加载。这种技术可以显著提高页面初始加载的速度，并减少不必要的资源消耗。</p><p><strong>提升页面加载速度</strong>：通过减少初始加载的资源数量，可以加快页面的显示速度，提升用户体验。</p><p><strong>减少带宽消耗</strong>：用户只会加载他们实际需要的资源，从而节省带宽，尤其对于移动设备用户更加友好。</p><p><strong>提升性能</strong>：对于复杂的Web应用，懒加载可以减少内存占用和CPU消耗，因为不需要一次性加载和渲染所有内容。</p><p><code>const Homepage = lazy(() =&gt; import(&quot;./pages/Homepage&quot;));</code></p><h4 id="suspense"><a href="#suspense" class="headerlink" title="suspense"></a><strong>suspense</strong></h4><hr><p>是React库中的一个组件，用于处理异步加载组件或数据时的渲染过渡。<code>Suspense</code>可以让您在等待异步操作完成之前显示一个备用内容（例如加载指示器），从而提升用户体验。</p><p><strong>组件懒加载（代码分割）</strong>：与<code>React.lazy()</code>一起使用，延迟加载组件，减少初始加载体积。</p><p><strong>数据获取（未来特性）</strong>：React团队也在扩展<code>Suspense</code>用于处理数据获取，但目前需要配合一些第三方库，如<code>relay</code>或<code>react-query</code>。</p><p><strong>步骤：</strong></p><ol><li>使用<code>React.lazy()</code>函数懒加载组件。</li><li>使用<code>&lt;Suspense&gt;</code>组件包裹懒加载的组件，并提供一个<code>fallback</code>属性来指定加载期间显示的UI。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240904102540533.png" alt="image-20240904102540533"></p><h3 id="四、Don’t-Optimize-Prematurely"><a href="#四、Don’t-Optimize-Prematurely" class="headerlink" title="四、Don’t Optimize Prematurely"></a>四、Don’t Optimize Prematurely</h3><p>引用自计算机科学家Donald Knuth的名言：“Premature optimization is the root of all evil” （过早优化是万恶之源）。这条原则强调在程序开发的早期阶段，不应该花费过多时间在微小的性能优化上</p><ol><li><strong>浪费时间和资源</strong></li></ol><p>在开发初期，程序的结构和需求可能尚未完全明确。如果过早地进行优化，可能会导致大量的时间和资源浪费在处理非关键的性能问题上，而这些问题可能在后续的开发中根本不会出现。</p><ol start="2"><li><strong>降低代码可读性和可维护性</strong></li></ol><p>许多优化措施可能会使代码变得复杂难懂。这不仅增加了代码的维护难度，还可能导致后续的开发和调试变得更加困难。简洁、清晰的代码通常比复杂的、高度优化的代码更容易维护。</p><ol start="3"><li><strong>难以预测的性能瓶颈</strong></li></ol><p>在程序开发的早期，真正的性能瓶颈可能尚不明确。过早优化可能会针对一些并不是实际瓶颈的部分进行，而忽略了更为重要的性能问题。只有在程序的主要功能基本完成并经过性能测试后，才能更准确地识别和解决实际的瓶颈。</p><ol start="4"><li><strong>延迟项目进度</strong></li></ol><p>过早的优化可能会分散开发人员的注意力，使他们无法专注于实现核心功能。这样会导致项目的整体进度被延迟，影响最终的交付时间。</p><ol start="5"><li><strong>优化的效果有限</strong></li></ol><p>在没有明确需求和数据支持的情况下，进行优化往往难以显著提升性能。相反，通过后期的分析和针对性优化，往往可以在关键部分取得更大的性能提升。</p><h3 id="五、useEffect"><a href="#五、useEffect" class="headerlink" title="五、useEffect"></a>五、useEffect</h3><p><strong>依赖数组：</strong></p><p>​✅state variable(状态变量)、prop、context value、reactive value(反应值：与状态有关的变量或函数）</p><p>​    ❌objects、arrays（他们在每次渲染都会被重新创建，react会判定为旧的和新的不同）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240906152320236.png" alt="image-20240906152320236" style="zoom: 33%;" /><p>Effect最好是作为最后的选择来使用！！！以下是它被过度使用的用例（然鹅前面的项目一直在使用。。）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240906152347059.png" alt="image-20240906152347059" style="zoom: 33%;" /><h5 id="stale-closures"><a href="#stale-closures" class="headerlink" title="stale closures:"></a><strong>stale closures</strong>:</h5><p>“<strong>Stale closure</strong>”是一个与闭包（closure）相关的编程问题，通常在处理异步操作或回调时容易出现。它指的是闭包内部引用了外部作用域的变量，但在闭包执行时，这些变量的值已经发生了变化，导致闭包内部使用了过时（stale）的值。</p><h3 id="六、补充contextAPI-useReducer和Redux在优化上的区别"><a href="#六、补充contextAPI-useReducer和Redux在优化上的区别" class="headerlink" title="六、补充contextAPI+useReducer和Redux在优化上的区别"></a>六、补充<code>contextAPI+useReducer</code>和<code>Redux</code>在优化上的区别</h3><h4 id="（1）contextAPI-useReducer"><a href="#（1）contextAPI-useReducer" class="headerlink" title="（1）contextAPI+useReducer"></a>（1）contextAPI+useReducer</h4><p>在状态管理优化方面，Redux 提供了许多开箱即用的工具和功能，使得优化性能相对简单。以下是 Redux 提供的一些常见优化手段：</p><h5 id="1-Redux-DevTools"><a href="#1-Redux-DevTools" class="headerlink" title="1. Redux DevTools"></a>1. <strong>Redux DevTools</strong></h5><ul><li><strong>Redux DevTools</strong> 提供了一种强大的调试工具，可以跟踪状态变化、时间旅行调试、回滚状态等。它不仅有助于调试，还可以帮助开发者分析和优化状态更新。</li><li><strong>性能优化</strong>：通过 Redux DevTools，可以实时查看哪些 action 触发了状态更新，分析哪些部分的状态管理和渲染需要优化。</li></ul><h5 id="2-Selector-和-Reselect"><a href="#2-Selector-和-Reselect" class="headerlink" title="2. Selector 和 Reselect"></a>2. <strong>Selector 和 Reselect</strong></h5><ul><li><strong>Reselect</strong> 是 Redux 官方推荐的一个选择器库，用于创建带记忆功能的选择器（memoized selectors）。它通过缓存计算结果来避免不必要的计算和重渲染。</li><li><strong>优化点</strong>：当状态更新时，如果未实际使用的数据未发生变化，Reselect 能确保组件不会重新计算或渲染，提升性能。</li></ul><h5 id="3-Immutable-数据管理"><a href="#3-Immutable-数据管理" class="headerlink" title="3. Immutable 数据管理"></a>3. <strong>Immutable 数据管理</strong></h5><ul><li>Redux 强调使用不可变数据，这样可以轻松地检测数据是否变化，从而优化状态更新过程。不可变性保证了当状态更新时，只有发生了实际变化的数据才会触发重新渲染。</li><li><strong>优化点</strong>：通过严格遵循不可变数据的原则，Redux 可以快速地检查状态是否发生变化，并仅更新相关组件，减少了不必要的渲染。</li></ul><h5 id="4-中间件优化"><a href="#4-中间件优化" class="headerlink" title="4. 中间件优化"></a>4. <strong>中间件优化</strong></h5><ul><li><strong>Redux-thunk</strong> 和 <strong>Redux-saga</strong> 等中间件可以优化异步操作的处理方式，减少不必要的状态更新和数据请求。</li><li><strong>优化点</strong>：通过合理设计中间件逻辑，可以避免重复的 API 请求或复杂的状态变更，进而优化应用性能。</li></ul><h5 id="5-使用-combineReducers-切分-reducer"><a href="#5-使用-combineReducers-切分-reducer" class="headerlink" title="5. 使用 combineReducers 切分 reducer"></a>5. <strong>使用 combineReducers 切分 reducer</strong></h5><ul><li>Redux 支持使用 <code>combineReducers</code> 将状态分片管理，避免每次状态更新时整个状态树都被重新计算。</li><li><strong>优化点</strong>：将状态管理分离成多个独立的 reducer，每个 reducer 只负责更新它自己管理的状态，这样可以确保应用只会在状态相关部分发生变化时触发更新，而不会影响其他不相关的状态。</li></ul><h5 id="6-React-Redux-的-connect-和-useSelector"><a href="#6-React-Redux-的-connect-和-useSelector" class="headerlink" title="6. React-Redux 的 connect 和 useSelector"></a>6. <strong>React-Redux 的 <code>connect</code> 和 <code>useSelector</code></strong></h5><ul><li><strong>connect</strong> 和 <strong>useSelector</strong> 提供了基于 Redux 状态的高效选择器机制。<code>connect</code> 使用了 <code>shouldComponentUpdate</code> 来优化组件的重渲染，而 <code>useSelector</code> 也支持通过比较函数（equality function）来决定是否重新渲染组件。</li><li><strong>优化点</strong>：通过 <code>connect</code> 和 <code>useSelector</code> 的正确使用，组件只会在其关心的状态发生变化时才重新渲染，减少不必要的渲染。</li></ul><h5 id="7-批处理（Batching-Updates）"><a href="#7-批处理（Batching-Updates）" class="headerlink" title="7. 批处理（Batching Updates）"></a>7. <strong>批处理（Batching Updates）</strong></h5><ul><li><strong>Redux</strong> 在某些情况下支持批量更新状态，从而减少多次不必要的渲染。React-Redux 自动支持 React 的批处理更新功能（batching），确保在一个事件循环中，状态变化会被批处理，从而避免多次重新渲染。</li><li><strong>优化点</strong>：批处理可以确保在一次状态变化过程中，多个组件的渲染被合并处理，减少性能开销。</li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>Redux 提供了很多优化工具，开发者可以通过使用 <code>Reselect</code>、<code>Redux DevTools</code>、<code>Immutable 数据结构</code>、中间件、<code>combineReducers</code>、以及 <code>React-Redux</code> 提供的 <code>connect</code> 和 <code>useSelector</code> 等机制，轻松优化应用的性能。而 <code>Context API + useReducer</code> 则需要手动实现类似的优化机制，尤其是在组件重渲染控制和复杂异步逻辑处理上，Redux 的优化工具更加成熟和开箱即用。</p><h4 id="（2）Context-API-useReducer"><a href="#（2）Context-API-useReducer" class="headerlink" title="（2）Context API + useReducer"></a>（2）Context API + useReducer</h4><p><code>Context API + useReducer</code> 优化较为复杂，主要原因在于它没有像 Redux 那样内置的优化机制和工具，开发者需要手动处理状态管理和性能优化的问题。以下是具体原因：</p><h5 id="1-Context-的全局重渲染"><a href="#1-Context-的全局重渲染" class="headerlink" title="1. Context 的全局重渲染"></a>1. <strong>Context 的全局重渲染</strong></h5><ul><li><strong>问题</strong>：Context API 的一个主要问题是，当上下文（Context）中的状态发生变化时，所有使用该 Context 的组件都会重新渲染，即使某些组件并不依赖这个变化的数据。这可能导致不必要的重渲染，影响性能。</li><li><strong>原因</strong>：React Context 的设计是为了简化跨组件传递数据，但它没有内置类似于 Redux 的细粒度状态更新机制。任何状态变化都会影响使用该 Context 的所有组件。</li><li><strong>解决方法</strong>：开发者需要手动通过分离 Context 或使用 <code>useMemo</code>、<code>useCallback</code> 来减少不必要的重渲染。这就增加了复杂性，特别是在应用变得庞大时，需要手动进行性能优化。</li></ul><h5 id="2-缺乏像-Reselect-这样的记忆化选择器"><a href="#2-缺乏像-Reselect-这样的记忆化选择器" class="headerlink" title="2. 缺乏像 Reselect 这样的记忆化选择器"></a>2. <strong>缺乏像 Reselect 这样的记忆化选择器</strong></h5><ul><li><strong>问题</strong>：<code>useReducer</code> 没有像 Redux 的 Reselect 这样方便的选择器库，开发者需要手动实现选择器（selectors）来提取和处理状态中的数据，并进行记忆化优化。</li><li><strong>原因</strong>：Context API 和 <code>useReducer</code> 只是 React 内置的状态管理机制，它们并不包含对状态读取或选择逻辑的优化。如果需要基于状态的某些部分进行计算或处理，开发者可能需要自己编写记忆化逻辑，这相对 Redux 来说更加复杂。</li><li><strong>解决方法</strong>：开发者可以借助 React 的 <code>useMemo</code> 来手动实现记忆化选择器，但这仍然需要自行编写和管理。</li></ul><h5 id="3-异步操作和中间件的处理复杂"><a href="#3-异步操作和中间件的处理复杂" class="headerlink" title="3. 异步操作和中间件的处理复杂"></a>3. <strong>异步操作和中间件的处理复杂</strong></h5><ul><li><strong>问题</strong>：<code>useReducer</code> 没有内置的异步处理机制，也没有像 Redux 中的 <code>redux-thunk</code> 或 <code>redux-saga</code> 这样的中间件，开发者需要手动管理异步操作的状态。</li><li><strong>原因</strong>：<code>useReducer</code> 是一个同步的 reducer 函数，设计上不支持处理异步逻辑。与 Redux 中通过中间件轻松处理异步状态不同，在 <code>useReducer</code> 中管理异步操作需要通过多个 <code>useEffect</code> 结合状态处理，这会导致代码变得更加复杂。</li><li><strong>解决方法</strong>：通常，开发者需要将异步逻辑放入 <code>useEffect</code> 钩子中手动处理，或者使用第三方库来帮助简化异步状态管理。</li></ul><h5 id="4-复杂状态拆分与管理"><a href="#4-复杂状态拆分与管理" class="headerlink" title="4. 复杂状态拆分与管理"></a>4. <strong>复杂状态拆分与管理</strong></h5><ul><li><strong>问题</strong>：当应用的状态变得复杂时，Context API + <code>useReducer</code> 可能会显得笨重。对于复杂的全局状态管理，拆分和维护多个 <code>useReducer</code> 以及对应的 <code>Context</code> 会变得难以维护。</li><li><strong>原因</strong>：<code>useReducer</code> 没有类似于 Redux 的 <code>combineReducers</code> 方法来自动分片管理不同的状态。开发者需要手动管理多个 <code>Context</code> 和 <code>Reducer</code>，并处理它们之间的依赖关系，这会让应用的复杂度增加。</li><li><strong>解决方法</strong>：可以通过模块化拆分 <code>Reducer</code> 和 <code>Context</code>，但这需要开发者自行管理每个部分的状态和更新逻辑，增加了维护成本。</li></ul><h5 id="5-缺乏调试和开发工具支持"><a href="#5-缺乏调试和开发工具支持" class="headerlink" title="5. 缺乏调试和开发工具支持"></a>5. <strong>缺乏调试和开发工具支持</strong></h5><ul><li><strong>问题</strong>：<code>Context API + useReducer</code> 没有像 Redux DevTools 这样强大的调试工具，开发者调试状态更新和流转的过程更加困难。</li><li><strong>原因</strong>：Redux DevTools 提供了丰富的功能，如时间旅行、action 日志、状态快照等。而 <code>Context API + useReducer</code> 缺少这样的工具支持，调试状态流转时只能依赖常规的 React 开发者工具，调试效率较低。</li><li><strong>解决方法</strong>：开发者可以通过手动调试和添加日志的方式解决，但这比使用 Redux DevTools 直接查看状态变化要复杂得多。</li></ul><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p><code>Context API + useReducer</code> 优化较为复杂，主要是因为它缺乏自动化的性能优化工具和机制。Context 全局状态变化时会导致所有订阅组件重渲染，手动管理状态拆分和异步逻辑也相对繁琐。相比之下，Redux 提供了很多开箱即用的优化工具和中间件，可以帮助开发者更轻松地管理和优化状态流转。</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程11-Worldwise</title>
    <link href="/2024/08/29/react%E8%AF%BE%E7%A8%8B11-Worldwise/"/>
    <url>/2024/08/29/react%E8%AF%BE%E7%A8%8B11-Worldwise/</url>
    
    <content type="html"><![CDATA[<p>本次课建立了更贴近现实的单页app（但是仍然是调用了虚假的API），第一次使用到Routing（路由）。</p><span id="more"></span><p>通过代码段可以用csm直接导入相应css module，很方便呀</p><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><h4 id="（1）Routing"><a href="#（1）Routing" class="headerlink" title="（1）Routing"></a>（1）Routing</h4><p>在React应用中，<strong>路由（Routing）</strong> 是管理不同页面或视图导航的关键机制。它允许用户通过更改URL来访问应用中的不同部分，而无需重新加载整个页面，这在构建单页应用（SPA）时尤为重要。此外，<strong>Router</strong> 通常指的是实现路由功能的具体组件或工具，两者虽相关但有所区别。</p><h5 id="1、Routing的作用"><a href="#1、Routing的作用" class="headerlink" title="1、Routing的作用"></a>1、Routing的作用</h5><hr><ol><li><p><strong>页面导航管理</strong></p><ul><li><p>多视图管理：在一个应用中，不同的URL对应不同的组件或页面。例如，<code>/home</code> 显示主页，<code>/about</code> 显示关于页面。</p></li><li><p>用户体验优化：通过路由，用户可以在应用内流畅地导航，而无需页面刷新，提升响应速度和用户体验。</p></li></ul></li><li><p><strong>单页应用（SPA）的核心</strong></p><ul><li><p>无需刷新页面：SPA通过路由实现不同视图的切换，避免了传统多页应用频繁的页面刷新。</p></li><li><p>状态保持：在SPA中，应用的状态（如用户登录信息）可以在不同路由间保持，不会因页面刷新而丢失。</p></li></ul></li><li><p><strong>动态内容加载</strong></p><ul><li>参数化路由：允许在URL中包含动态参数，如 <code>/user/:id</code>，根据不同的<code>id</code>加载不同的用户信息。</li><li>嵌套路由：支持在一个路由内嵌套其他路由，实现复杂的页面布局和导航结构。</li></ul></li><li><p><strong>路由守卫与权限控制</strong></p><ul><li><p>保护路由：根据用户的认证状态或权限，控制用户是否可以访问某些路由。</p></li><li><p>重定向：在特定条件下，将用户重定向到其他页面，例如未登录用户重定向到登录页。</p></li></ul></li><li><p><strong>SEO优化</strong></p><ul><li>服务器端渲染（SSR）：结合路由，能够实现更好的SEO优化，使搜索引擎能够正确抓取页面内容。</li></ul></li></ol><h5 id="2、Routing与Router的区别"><a href="#2、Routing与Router的区别" class="headerlink" title="2、Routing与Router的区别"></a>2、Routing与Router的区别</h5><hr><p>1.<strong>Routing（路由）</strong></p><ul><li>概念层面：指的是应用中不同路径与组件之间的映射关系，以及导航和页面切换的整体机制。</li><li>功能层面：包括定义路径、管理导航、处理动态参数、嵌套结构等。</li></ul><p>2.<strong>Router（路由器）</strong></p><ul><li>实现层面：是具体实现Routing功能的组件或工具。在React中，通常指的是像<code>BrowserRouter</code>、<code>HashRouter</code>这样的组件。</li><li>职责：监听URL的变化，匹配路由配置，并渲染对应的组件。</li></ul><h4 id="（2）SPA（单页应用）"><a href="#（2）SPA（单页应用）" class="headerlink" title="（2）SPA（单页应用）"></a>（2）SPA（单页应用）</h4><p><strong>SPA（Single Page Application，单页应用）</strong> 是一种现代Web应用程序的开发模式，特点是整个应用只包含一个主页面，通过动态加载内容来更新页面部分内容，而不需要完全刷新页面。这种方式为用户提供了更加流畅和接近桌面应用的用户体验。SPA应用在用户访问时只加载一次完整的HTML、CSS、JavaScript等资源，之后的页面更新通过AJAX请求或其他手段异步加载数据，然后动态更新页面内容。这种方式避免了传统多页应用程序（MPA）每次导航时都会重新加载整个页面的过程。</p><h5 id="1、SPA的特点"><a href="#1、SPA的特点" class="headerlink" title="1、SPA的特点"></a>1、SPA的特点</h5><hr><p>1）<strong>单个HTML页面</strong></p><ul><li>单一入口：整个应用只有一个HTML文件，所有的视图和页面都通过JavaScript动态渲染。</li><li>动态内容更新：页面的切换和内容更新不会重新加载整个页面，而是通过局部更新实现。</li></ul><p>2）<strong>流畅的用户体验</strong></p><ul><li>无刷新页面切换：用户点击链接后，不会看到传统页面刷新带来的白屏或加载等待，而是立即呈现新的内容。</li><li>更快的响应速度：由于不需要重新加载整个页面，页面切换速度更快，用户体验更佳。</li></ul><p>3）<strong>客户端路由</strong></p><ul><li>前端管理路由：使用前端路由库（如React Router、Vue Router等）来管理不同URL与组件之间的映射关系。</li><li>动态路径映射：客户端路由可以根据URL动态加载不同的页面或组件内容。</li></ul><p>4）<strong>丰富的交互</strong></p><ul><li>接近桌面应用的体验：由于页面不需要频繁刷新，SPA可以实现更复杂的交互和动画效果，使其更接近桌面应用的使用体验。</li><li>即时反馈：用户操作的结果可以即时在页面上显示，无需等待页面重新加载。</li></ul><p>5）<strong>数据交互和状态管理</strong></p><ul><li>AJAX请求：使用AJAX或Fetch API来与服务器进行数据交互，动态加载数据并更新视图。</li><li>前端状态管理：通过Redux、Vuex等状态管理工具来管理应用中的全局状态，保持数据的一致性和同步性。</li></ul><p>6）<strong>SEO挑战</strong></p><ul><li>默认对搜索引擎不友好：由于内容是通过JavaScript动态加载的，搜索引擎爬虫可能无法抓取到页面内容，影响SEO。</li><li>解决方案：使用服务器端渲染（SSR）或预渲染技术，如Next.js（用于React）和Nuxt.js（用于Vue）等来改善SEO问题。</li></ul><p>7）<strong>更高的初次加载时间</strong></p><ul><li>初次加载资源较多：由于整个应用所需的资源（包括所有页面的JavaScript和CSS）都在第一次访问时加载，可能导致初次加载时间较长。</li><li>优化手段：使用代码分割（Code Splitting）、懒加载（Lazy Loading）和缓存（Caching）等技术来优化加载性能。</li></ul><h5 id="2、SPA的工作原理"><a href="#2、SPA的工作原理" class="headerlink" title="2、SPA的工作原理"></a>2、SPA的工作原理</h5><hr><p>1）<strong>初次加载</strong></p><ul><li>用户访问SPA时，服务器会返回一个完整的HTML页面，该页面中包含了所有必要的CSS和JavaScript文件。</li></ul><p>2）<strong>路由管理</strong></p><ul><li>SPA的客户端路由会监听URL变化，并根据路由规则决定加载和渲染哪个组件或页面，而不是重新请求服务器的HTML页面。</li></ul><p>3）<strong>数据请求</strong></p><ul><li>页面内容的更新通常通过AJAX请求从服务器获取数据，然后通过JavaScript在前端更新页面部分内容。</li></ul><p>4）<strong>状态管理</strong></p><ul><li>使用前端的状态管理工具（如Redux、Vuex）来管理应用的全局状态，确保页面间的数据同步。</li></ul><h5 id="3、SPA的优缺点"><a href="#3、SPA的优缺点" class="headerlink" title="3、SPA的优缺点"></a>3、SPA的优缺点</h5><hr><p><strong>优点：</strong></p><ul><li><strong>用户体验流畅</strong>：无刷新页面切换，体验接近桌面应用。</li><li><strong>性能优势</strong>：通过局部更新页面内容，减少了不必要的资源加载和页面刷新。</li><li><strong>更易维护</strong>：前后端分离，前端代码更模块化、更容易维护。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>SEO问题</strong>：默认情况下，搜索引擎可能无法索引SPA的动态内容。</li><li><strong>首屏加载慢</strong>：初次加载时需要加载较多资源，可能导致页面加载时间较长。</li><li><strong>开发复杂度高</strong>：前端需要处理更多逻辑，开发过程中需要考虑路由、状态管理、性能优化等多个方面。</li></ul><h5 id="4、SPA的常见应用场景"><a href="#4、SPA的常见应用场景" class="headerlink" title="4、SPA的常见应用场景"></a>4、SPA的常见应用场景</h5><hr><p>SPA适用于需要提供丰富交互、流畅用户体验的应用，例如：</p><ul><li><strong>社交媒体平台</strong>：如Facebook、Twitter等，用户频繁切换页面，但不希望看到页面刷新。</li><li><strong>管理后台系统</strong>：如数据管理系统、仪表盘等，用户需要频繁操作和查看不同的数据视图。</li><li><strong>在线文档编辑</strong>：如Google Docs，用户需要实时编辑文档，且希望操作体验流畅。</li><li><strong>电子商务平台</strong>：如亚马逊的商品浏览和购物体验，需在不同商品页面间快速切换。</li></ul><h4 id="（3）CSS-Modules"><a href="#（3）CSS-Modules" class="headerlink" title="（3）CSS Modules"></a>（3）CSS Modules</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240829105931940.png" alt="image-20240829105931940"></p><p>vite已预先下载了这个包不用自己下载哈哈哈开心。</p><h5 id="1、如何解决命名冲突？"><a href="#1、如何解决命名冲突？" class="headerlink" title="1、如何解决命名冲突？"></a>1、如何解决命名冲突？</h5><hr><p>在使用CSS Module时，CSS类名的作用域被限制在引入该CSS文件的组件内部。这样，定义在不同组件中的相同类名不会互相干扰。</p><p>CSS Module会根据类名、文件路径、文件名等信息生成一个唯一的类名，这个类名在全局范围内是唯一的，从而避免了命名冲突。</p><h5 id="2、使用步骤？"><a href="#2、使用步骤？" class="headerlink" title="2、使用步骤？"></a>2、使用步骤？</h5><hr><p><strong>创建 CSS 文件</strong>： 创建一个带有模块化命名的CSS文件，通常命名为<code>ComponentName.module.css</code>。</p><p><strong>导入 CSS Module</strong>： 在对应的组件文件中导入这个CSS文件，并使用它提供的类名。例如<code>import styles from &#39;./Button.module.css&#39;;</code></p><p><strong>生成唯一类名</strong>： 使用 <code>styles.button</code> 时，编译器会将 <code>.button</code> 类名转换为一个全局唯一的类名，如 <code>.Button_button__3d2s4</code>，从而避免冲突。</p><h5 id="3、优点？"><a href="#3、优点？" class="headerlink" title="3、优点？"></a>3、优点？</h5><hr><p><strong>防止类名冲突</strong>：不同组件的相同类名在使用CSS Module后会生成不同的全局类名，完全避免冲突问题。</p><p><strong>提高代码可维护性</strong>：开发者不需要担心类名命名冲突，能够专注于组件的开发。</p><p><strong>简化CSS管理</strong>：由于CSS Module的局部作用域，开发者可以使用简短且易读的类名，而不用担心全局命名问题。</p><h3 id="二、代码构建过程"><a href="#二、代码构建过程" class="headerlink" title="二、代码构建过程"></a>二、代码构建过程</h3><h4 id="（1）实现单页连接😡😡😡😡"><a href="#（1）实现单页连接😡😡😡😡" class="headerlink" title="（1）实现单页连接😡😡😡😡"></a>（1）实现单页连接😡😡😡😡</h4><ul><li>新建一个pages文件夹存储不同界面的jsx，使用以下结构代码导入APP.jsx</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">BrowserRouter</span>&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Homepage</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">BrowserRouter</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>建立连接，不使用<code>&lt;a href=&quot;/pricing&quot;&gt;Pricing&lt;/a&gt;</code>（会重新加载界面）而是<code>&lt;NavLink to=&quot;/pricing&quot;&gt;Pricing&lt;/NavLink&gt;</code>（记得导入NavLink，它相较于Link来说好处是会重点突出选中的连接）</li><li>建立一个PageNav放置连接，可以重用到其他界面中</li></ul><p>😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡快气晕了，我的eslint真的很不听话，啥都报错，明明是无伤大雅的warn都让我跑不了程序。改了好久的设置终于，在我将settings.json中添加</p><p><code>&quot;eslint.rules.customizations&quot;: [</code></p><p>  <code>&#123; &quot;rule&quot;: &quot;no-unused-vars&quot;, &quot;severity&quot;: &quot;warn&quot; &#125;,</code></p><p>  <code>&#123; &quot;rule&quot;: &quot;react/prop-types&quot;, &quot;severity&quot;: &quot;off&quot; &#125;</code></p><p> <code>]</code></p><p>然后在vite.config.js改成</p><p><code>export default defineConfig(&#123;</code></p><p> <code>plugins: [react(),  eslint(&#123;</code></p><p>​      <code>overrideConfig: &#123;</code></p><p>​          <code>rules: &#123;</code></p><p>​                    <code>&quot;no-unused-vars&quot;: &quot;warn&quot;,</code></p><p>​                     <code>&quot;react/prop-types&quot;: &quot;off&quot;,</code></p><p>​    <code>&#125;, &#125;,  &#125;), ],&#125;);</code></p><p>它终于不会仅仅因为我定义了prop未使用就不让我跑程序了。。😡😡😡😡</p><p>顺便</p><h4 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h4><p>使用element而不是组件的好处是？</p><p>使用URL存储状态（param）（query）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240830165915719.png" alt="image-20240830165915719"></p><p>useNavigate、useParams、useSearchParams的强大作用</p><Navigate replace to="cities" />     <p>onClick&#x3D;{(<em>e</em>) &#x3D;&gt; {</p><p>​      e.preventDefault();</p><p>​      navigate(-1);</p><p>​     }}这两段代码的要点</p><p>自己阅读了一段代码并分析功能、组件以及状态（比较简单比较好分析）</p><h4 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h4><p>（进入下一节了欸）</p><p>context API</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240830170233284.png" alt="image-20240830170233284"></p><p>（之前是用children来解决prop drilling的）</p><p>使用一个小app来练习context API，并且组合成一个函数，再用costom来简化代码</p><p>leaflet（地图库）</p><p>啊啊啊啊啊啊来不及整理，脑瓜子嗡嗡的。。</p><p>npm i react-datepicker  官网：<a href="https://www.npmjs.com/package/react-datepicker">https://www.npmjs.com/package/react-datepicker</a></p><p>导入、调整格式</p><p>Advanced state management&#x3D;&gt;<strong>syetem context</strong> + <strong>useReducer</strong></p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程-challenge</title>
    <link href="/2024/08/28/react%E8%AF%BE%E7%A8%8B-challenge/"/>
    <url>/2024/08/28/react%E8%AF%BE%E7%A8%8B-challenge/</url>
    
    <content type="html"><![CDATA[<p>钱币转换小app</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [amount, setAmount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> [fromCur, setFromCur] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;EUR&quot;</span>);<br>  <span class="hljs-keyword">const</span> [toCur, setToCur] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;USD&quot;</span>);<br>  <span class="hljs-keyword">const</span> [converted, setConverted] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [isLoading, setIsLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>          <span class="hljs-string">`https://api.frankfurter.app/latest?amount=<span class="hljs-subst">$&#123;amount&#125;</span>&amp;from=<span class="hljs-subst">$&#123;fromCur&#125;</span>&amp;to=<span class="hljs-subst">$&#123;toCur&#125;</span>`</span><br>        );<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>        <span class="hljs-title function_">setConverted</span>(data.<span class="hljs-property">rates</span>[toCur]);<br>        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">false</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (fromCur === toCur) <span class="hljs-keyword">return</span> <span class="hljs-title function_">setConverted</span>(amount);<br>      <span class="hljs-title function_">convert</span>();<br>    &#125;,<br>    [amount, fromCur, toCur]<br>  );<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;amount&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setAmount(Number(e.target.value))&#125;</span><br><span class="language-xml">        disabled=&#123;isLoading&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;fromCur&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setFromCur(e.target.value)&#125;</span><br><span class="language-xml">        disabled=&#123;isLoading&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;USD&quot;</span>&gt;</span>USD<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;EUR&quot;</span>&gt;</span>EUR<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;CAD&quot;</span>&gt;</span>CAD<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;INR&quot;</span>&gt;</span>INR<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;toCur&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setToCur(e.target.value)&#125;</span><br><span class="language-xml">        disabled=&#123;isLoading&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;USD&quot;</span>&gt;</span>USD<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;EUR&quot;</span>&gt;</span>EUR<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;CAD&quot;</span>&gt;</span>CAD<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;INR&quot;</span>&gt;</span>INR<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#123;converted&#125; &#123;toCur&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程9-usepopcorn-2</title>
    <link href="/2024/08/28/react%E8%AF%BE%E7%A8%8B9-usepopcorn-2/"/>
    <url>/2024/08/28/react%E8%AF%BE%E7%A8%8B9-usepopcorn-2/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span><h3 id="一、用户界面和主要功能"><a href="#一、用户界面和主要功能" class="headerlink" title="一、用户界面和主要功能"></a>一、用户界面和主要功能</h3><h4 id="（1）界面"><a href="#（1）界面" class="headerlink" title="（1）界面"></a>（1）界面</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828110027563.png" alt="image-20240828110027563"></p><h4 id="（2）功能"><a href="#（2）功能" class="headerlink" title="（2）功能"></a>（2）功能</h4><p>1、调用API可以导入电影数据，搜索到电影并显示出基本信息</p><p>2、单击电影可以看到详细信息，并可以为它评分且加入已看电影的清单，也可以在清单中删除电影</p><p>3、右上角统计一共看了多少部电影以及评分和平均电影时间</p><p>4、离开界面再进去时数据不会丢失</p><h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><h4 id="（1）App-js"><a href="#（1）App-js" class="headerlink" title="（1）App.js"></a>（1）App.js</h4><p>从网站<a href="https://www.omdbapi.com/%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9KEY%E5%90%8E%E8%8E%B7%E5%8F%96%E7%94%B5%E5%BD%B1%E8%B5%84%E6%BA%90%E6%95%B0%E6%8D%AE">https://www.omdbapi.com/获取免费KEY后获取电影资源数据</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">StarRating</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./StarRating&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useMovies &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useMovies&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useLocalStorageState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useLocalStorageState&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useKey &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useKey&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">KEY</span> = <span class="hljs-string">&quot;c69cb565&quot;</span>;  <br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">average</span> = (<span class="hljs-params">arr</span>) =&gt;<br>  arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur, i, arr</span>) =&gt;</span> acc + cur / arr.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [query, setQuery] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Flipped&quot;</span>);<br>  <span class="hljs-keyword">const</span> [selectedId, setSelectedId] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">const</span> &#123; movies, isLoading, error &#125; = <span class="hljs-title function_">useMovies</span>(query, handleCloseMovie);<br>  <span class="hljs-keyword">const</span> [watched, setWatched] = <span class="hljs-title function_">useLocalStorageState</span>([], <span class="hljs-string">&quot;watched&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSelectMovie</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-title function_">setSelectedId</span>(<span class="hljs-function">(<span class="hljs-params">selectedId</span>) =&gt;</span> (id === selectedId ? <span class="hljs-literal">null</span> : id));<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCloseMovie</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setSelectedId</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">hanleAddWatched</span>(<span class="hljs-params">movie</span>) &#123;<br>    <span class="hljs-title function_">setWatched</span>(<span class="hljs-function">(<span class="hljs-params">watched</span>) =&gt;</span> [...watched, movie]);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteWatched</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-title function_">setWatched</span>(<span class="hljs-function">(<span class="hljs-params">setWatched</span>) =&gt;</span> watched.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbID</span> !== id));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> <span class="hljs-attr">query</span>=<span class="hljs-string">&#123;query&#125;</span> <span class="hljs-attr">setQuery</span>=<span class="hljs-string">&#123;setQuery&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NumResults</span> <span class="hljs-attr">movies</span>=<span class="hljs-string">&#123;movies&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          &#123;isLoading &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Loader</span> /&gt;</span>&#125;</span><br><span class="language-xml">          &#123;!isLoading &amp;&amp; !error &amp;&amp; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">MovieList</span> <span class="hljs-attr">movies</span>=<span class="hljs-string">&#123;movies&#125;</span> <span class="hljs-attr">onSelectMovie</span>=<span class="hljs-string">&#123;handleSelectMovie&#125;</span> /&gt;</span></span><br><span class="language-xml">          )&#125;</span><br><span class="language-xml">          &#123;error &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">ErrorMessage</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&#123;error&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          &#123;selectedId ? (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">MovieDetails</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">selectedId</span>=<span class="hljs-string">&#123;selectedId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onCloseMovie</span>=<span class="hljs-string">&#123;handleCloseMovie&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onAddWatched</span>=<span class="hljs-string">&#123;hanleAddWatched&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">          ) : (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">WatchedSummary</span> <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span> /&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">WatchedMovieList</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onDeleteWatched</span>=<span class="hljs-string">&#123;handleDeleteWatched&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">          )&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Loader-js和Error-js"><a href="#Loader-js和Error-js" class="headerlink" title="Loader.js和Error.js"></a>Loader.js和Error.js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Loader</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;loader&quot;</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ErrorMessage</span>(<span class="hljs-params">&#123; message &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⚠️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      &#123;message&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NavBar和Logo"><a href="#NavBar和Logo" class="headerlink" title="NavBar和Logo"></a>NavBar和Logo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">NavBar</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nav-bar&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Logo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span>🍿<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>usePopcorn<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Search</span>(<span class="hljs-params">&#123; query, setQuery &#125;</span>) &#123;<br>  <span class="hljs-comment">// useEffect(function () &#123;</span><br>  <span class="hljs-comment">//   const el = document.querySelector(&quot;.search&quot;);</span><br>  <span class="hljs-comment">//   el.focus();</span><br>  <span class="hljs-comment">// &#125;, []);</span><br>  <span class="hljs-keyword">const</span> inputEl = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useKey</span>(<span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">activeElement</span> === inputEl.<span class="hljs-property">current</span>) <span class="hljs-keyword">return</span>;<br>    inputEl.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>    <span class="hljs-title function_">setQuery</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;search&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search movies...&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;query&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setQuery(e.target.value)&#125;</span><br><span class="language-xml">      ref=&#123;inputEl&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">NumResults</span>(<span class="hljs-params">&#123; movies &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;num-results&quot;</span>&gt;</span></span><br><span class="language-xml">      Found <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;movies.length&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> results</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Main</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Box</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOpen, setIsOpen] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-toggle&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpen((open) =&gt; !open)&#125;&gt;</span><br><span class="language-xml">        &#123;isOpen ? &quot;–&quot; : &quot;+&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isOpen &amp;&amp; children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MovieList</span>(<span class="hljs-params">&#123; movies, onSelectMovie &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list list-movies&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;movies?.map((movie) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Movie</span> <span class="hljs-attr">movie</span>=<span class="hljs-string">&#123;movie&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span> <span class="hljs-attr">onSelectMovie</span>=<span class="hljs-string">&#123;onSelectMovie&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Movie</span>(<span class="hljs-params">&#123; movie, onSelectMovie &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onSelectMovie(movie.imdbID)&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;movie.Poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">movie.Title</span>&#125; <span class="hljs-attr">poster</span>`&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;movie.Title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🗓<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.Year&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MovieDetails</span>(<span class="hljs-params">&#123; selectedId, onCloseMovie, onAddWatched, watched &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [movie, setMovie] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br>  <span class="hljs-keyword">const</span> [isLoading, setIsLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [userRating, setUserRating] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> countRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (userRating) countRef.<span class="hljs-property">current</span>++;<br>    &#125;,<br>    [userRating]<br>  );<br><br>  <span class="hljs-keyword">const</span> isWatched = watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbID</span>).<span class="hljs-title function_">includes</span>(selectedId);<br>  <span class="hljs-keyword">const</span> watchedUserRating = watched.<span class="hljs-title function_">find</span>(<br>    <span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbID</span> === selectedId<br>  )?.<span class="hljs-property">userRating</span>;<br><br>  <span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-title class_">Title</span>: title,<br>    <span class="hljs-title class_">Poster</span>: poster,<br>    <span class="hljs-title class_">Runtime</span>: runtime,<br>    imdbRating,<br>    <span class="hljs-title class_">Plot</span>: plot,<br>    <span class="hljs-title class_">Released</span>: released,<br>    <span class="hljs-title class_">Actors</span>: actors,<br>    <span class="hljs-title class_">Director</span>: director,<br>    <span class="hljs-title class_">Genre</span>: genre,<br>  &#125; = movie;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAdd</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> newWatchedMovie = &#123;<br>      <span class="hljs-attr">imdbID</span>: selectedId,<br>      title,<br>      poster,<br>      <span class="hljs-attr">imdbRating</span>: <span class="hljs-title class_">Number</span>(imdbRating),<br>      <span class="hljs-attr">runtime</span>: <span class="hljs-title class_">Number</span>(runtime.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>).<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>)),<br>      userRating,<br>      <span class="hljs-attr">countRatingDecisions</span>: countRef.<span class="hljs-property">current</span>,<br>    &#125;;<br>    <span class="hljs-title function_">onAddWatched</span>(newWatchedMovie);<br>    <span class="hljs-title function_">onCloseMovie</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">useKey</span>(<span class="hljs-string">&quot;Escape&quot;</span>, onCloseMovie);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">true</span>);<br>      <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getMovieDetails</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>          <span class="hljs-string">`http://www.omdbapi.com/?apikey=<span class="hljs-subst">$&#123;KEY&#125;</span>&amp;i=<span class="hljs-subst">$&#123;selectedId&#125;</span>`</span><br>        );<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>        <span class="hljs-title function_">setMovie</span>(data);<br>        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">false</span>);<br>      &#125;<br>      <span class="hljs-title function_">getMovieDetails</span>();<br>    &#125;,<br>    [selectedId]<br>  );<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (!title) <span class="hljs-keyword">return</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`Movie|<span class="hljs-subst">$&#123;title&#125;</span>`</span>;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;usePopcorn&quot;</span>;<br>      &#125;;<br>    &#125;,<br>    [title]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;details&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;isLoading ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Loader</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-back&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onCloseMovie&#125;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-symbol">&amp;larr;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">Poster</span> <span class="hljs-attr">of</span> $&#123;<span class="hljs-attr">movie</span>&#125;`&#125; /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;details-overview&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                &#123;released&#125; <span class="hljs-symbol">&amp;bull;</span> &#123;runtime&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;genre&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                &#123;imdbRating&#125; IMDb rating</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;rating&quot;</span>&gt;</span></span><br><span class="language-xml">              &#123;!isWatched ? (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">StarRating</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">maxRating</span>=<span class="hljs-string">&#123;10&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;36&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">onSetRating</span>=<span class="hljs-string">&#123;setUserRating&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  /&gt;</span></span><br><span class="language-xml">                  &#123;userRating &gt; 0 &amp;&amp; (</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-add&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleAdd&#125;</span>&gt;</span></span><br><span class="language-xml">                      + Add to list</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                  )&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">              ) : (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You rated with this movie &#123;watchedUserRating&#125;🌟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              )&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>&#123;plot&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Starring: &#123;actors&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Directed by: &#123;director&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>        &lt;/&gt;<br>      )&#125;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedSummary</span>(<span class="hljs-params">&#123; watched &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> avgImdbRating = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbRating</span>));<br>  <span class="hljs-keyword">const</span> avgUserRating = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">userRating</span>));<br>  <span class="hljs-keyword">const</span> avgRuntime = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">runtime</span>));<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;summary&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Movies you watched<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#️⃣<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;watched.length&#125; movies<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⭐️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgImdbRating.toFixed(2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgUserRating.toFixed(2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⏳<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgRuntime&#125; min<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedMovieList</span>(<span class="hljs-params">&#123; watched, onDeleteWatched &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;watched.map((movie) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">WatchedMovie</span> <span class="hljs-attr">movie</span>=<span class="hljs-string">&#123;movie&#125;</span> <span class="hljs-attr">onDeleteWatched</span>=<span class="hljs-string">&#123;onDeleteWatched&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedMovie</span>(<span class="hljs-params">&#123; movie, onDeleteWatched &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;movie.poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">movie.title</span>&#125; <span class="hljs-attr">poster</span>`&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;movie.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⭐️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.imdbRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.userRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⏳<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.runtime&#125; min<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-delete&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onDeleteWatched(movie.imdbID)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          x</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">KEY</span> = <span class="hljs-string">&quot;c69cb565&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useMovies</span>(<span class="hljs-params">query, callback</span>) &#123;<br>  <span class="hljs-keyword">const</span> [movies, setMovies] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [isLoading, setIsLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      callback?.();<br><br>      <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><br>      <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchMovies</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">true</span>);<br>          <span class="hljs-title function_">setError</span>(<span class="hljs-string">&quot;&quot;</span>);<br>          <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>            <span class="hljs-string">`http://www.omdbapi.com/?apikey=<span class="hljs-subst">$&#123;KEY&#125;</span>&amp;s=<span class="hljs-subst">$&#123;query&#125;</span>`</span>,<br>            &#123; <span class="hljs-attr">signal</span>: controller.<span class="hljs-property">signal</span> &#125;<br>          );<br>          <span class="hljs-comment">//处理服务器返回了非2xx的状态码的情况，如404</span><br>          <span class="hljs-keyword">if</span> (!res.<span class="hljs-property">ok</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Something went wrong with fetching movies&quot;</span>);<br><br>          <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>          <span class="hljs-keyword">if</span> (data.<span class="hljs-property">Response</span> === <span class="hljs-string">&quot;False&quot;</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Movie not found&quot;</span>);<br>          <span class="hljs-title function_">setMovies</span>(data.<span class="hljs-property">Search</span>);<br>          <span class="hljs-title function_">setError</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>          <span class="hljs-keyword">if</span> (err.<span class="hljs-property">name</span> !== <span class="hljs-string">&quot;AbortError&quot;</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">message</span>);<br>            <span class="hljs-title function_">setError</span>(err.<span class="hljs-property">message</span>);<br>          &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-comment">//console.log(data.Search);</span><br>        <span class="hljs-comment">// .then((res) =&gt; res.json())</span><br>        <span class="hljs-comment">// .then((data) =&gt; setMovies(data.Search));</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (!query.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-title function_">setMovies</span>([]);<br>        <span class="hljs-title function_">setError</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-comment">//handleCloseMovie();</span><br>      <span class="hljs-title function_">fetchMovies</span>();<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        controller.<span class="hljs-title function_">abort</span>();<br>      &#125;;<br>    &#125;,<br>    [query]<br>  );<br>  <span class="hljs-keyword">return</span> &#123; movies, isLoading, error &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useKey</span>(<span class="hljs-params">key, action</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">code</span>.<span class="hljs-title function_">toLowerCase</span>() === key.<span class="hljs-title function_">toLowerCase</span>()) <span class="hljs-title function_">action</span>();<br>      &#125;<br><br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, callback);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, callback);<br>      &#125;;<br>    &#125;,<br>    [action, key]<br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLocalStorageState</span>(<span class="hljs-params">initialState, key</span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> storedValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(key);<br>    <span class="hljs-keyword">return</span> storedValue ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(storedValue) : initialState;<br>  &#125;);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(key, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value));<br>    &#125;,<br>    [value, key]<br>  );<br><br>  <span class="hljs-keyword">return</span> [value, setValue];<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程10-ReactQuiz(useReducer学习)</title>
    <link href="/2024/08/26/react%E8%AF%BE%E7%A8%8B10-ReactQuiz/"/>
    <url>/2024/08/26/react%E8%AF%BE%E7%A8%8B10-ReactQuiz/</url>
    
    <content type="html"><![CDATA[<p>本节课做出了一个小小的测验应用，主要目的是为了了解useReducer这个hook的强大功能！</p><span id="more"></span><p>Auto Rename Tag插件，我为什么没有早点下载你！！！！！！😭😭😭</p><h3 id="一、useReducer讲解"><a href="#一、useReducer讲解" class="headerlink" title="一、useReducer讲解"></a>一、useReducer讲解</h3><p><strong>如何使用useReducer？</strong>（三步走）</p><ol><li><strong>initialState</strong></li><li><strong>reducer函数</strong></li><li><strong>useReducer初定义状态</strong>（使用initialState）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240827161620491.png" alt="image-20240827161620491"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240827161715601.png" alt="image-20240827161715601"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/IMG_0477.PNG" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/IMG_0478.PNG" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/IMG_0479.PNG" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240827162143695.png" alt="image-20240827162143695"></p><h3 id="二、json-server"><a href="#二、json-server" class="headerlink" title="二、json-server"></a>二、json-server</h3><p>JSON Server 是一个简单易用的工具，用于快速创建一个基于 JSON 文件的 RESTful API。它非常适合在开发和测试过程中使用，特别是在没有后端或后端未完成时，你可以使用 JSON Server 来模拟 API 进行前端开发。</p><p>JSON Server 的主要功能包括：</p><ol><li><strong>模拟 RESTful API</strong>： JSON Server 可以根据一个简单的 JSON 文件自动生成 RESTful API，包括 GET、POST、PUT、PATCH 和 DELETE 等常见的 HTTP 方法。</li><li><strong>快速原型设计</strong>： 在开发过程中，你可以使用 JSON Server 快速创建一个 API，允许你专注于前端开发或 API 调用逻辑，而无需编写真实的后端代码。</li><li><strong>处理查询参数</strong>： JSON Server 支持处理 URL 中的查询参数，允许你基于查询条件返回不同的数据集。</li><li><strong>支持分页和排序</strong>： 它可以根据 URL 中的参数轻松实现数据的分页和排序。</li><li><strong>支持完整的 CRUD 操作</strong>： 通过简单的配置，JSON Server 可以让你对 JSON 数据进行创建、读取、更新和删除操作。</li></ol><p>在本次创建的应用中，我们有一个question.json，包含了一个questions数组，但是我们想要假装是通过一个（虚假的）API来获取到问题的内容，因此拆分了一下终端，<code>npm i json-server</code>命令下载json-server，然后找到配置文件把命令加入，就可以运行<code>npm run server</code>将question.json运行在指定的端口，访问(<a href="http://localhost:8001/questions)%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96questions%E6%95%B0%E7%BB%84%E3%80%82">http://localhost:8001/questions)就可以获取questions数组。</a></p><p><code>&quot;server&quot;: &quot;json-server --watch data/questions.json --port 8001&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240826154217162.png" alt="image-20240826154217162"></p><h3 id="三、应用界面和代码"><a href="#三、应用界面和代码" class="headerlink" title="三、应用界面和代码"></a>三、应用界面和代码</h3><h4 id="（1）主要界面"><a href="#（1）主要界面" class="headerlink" title="（1）主要界面"></a>（1）主要界面</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-08-27%20162942.png" alt="屏幕截图 2024-08-27 162942"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-08-27%20162955.png" alt="屏幕截图 2024-08-27 162955"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240827163054783.png" alt="image-20240827163054783"></p><h4 id="（2）要点"><a href="#（2）要点" class="headerlink" title="（2）要点"></a>（2）要点</h4><p>1、使用useReducer来批量集中地更新状态：由于reducer函数将状态的更新集中在一起，因此可以通过这个函数来得知所有状态的更新情况。除此之外，action.type的划分也可以很容易看到整个应用的多种状态。</p><p>2、状态列举：questions（问题数组）、status（应用状态：loading、error、ready、active、finished，对应界面的切换）、index（正在显示的问题坐标）、answer（用户的答案）、points（总分数）、highscore（最高分）、secondsRemaing（倒计时剩余时间）</p><p>3、如何使代码更具有可读性：将常量定义在函数体外而不是直接出现在某个js语句中；在构建APP的HTML时，尽量全部使用组件构建，不要出现冗余的的代码块；拆分组件的工作一定要做到位，例如本次应用中，拆分出了近十个小的组件，这样会使修改组件内容变得容易。</p><p>4、每个按钮的onClick函数！！在回答完最后一个问题之后，要进入finish界面了，如果不停止更新index就会报错。</p><p>5、当组件已然很多，可以把所有组件全部都放入components文件夹中了，但是此时要记得更新在index.js中导入App.js的时候路径问题。</p><p><strong>6、不太会用reducer积累器（需要复习js基础知识）</strong></p><h4 id="（三）代码"><a href="#（三）代码" class="headerlink" title="（三）代码"></a>（三）代码</h4><h5 id="1、index-css"><a href="#1、index-css" class="headerlink" title="1、index.css"></a>1、index.css</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--color-darkest</span>: <span class="hljs-number">#343a40</span>;<br>  <span class="hljs-attr">--color-dark</span>: <span class="hljs-number">#495057</span>;<br>  <span class="hljs-attr">--color-medium</span>: <span class="hljs-number">#ced4da</span>;<br>  <span class="hljs-attr">--color-light</span>: <span class="hljs-number">#f1f3f5</span>;<br><br>  <span class="hljs-attr">--color-theme</span>: <span class="hljs-number">#1098ad</span>;<br>  <span class="hljs-attr">--color-accent</span>: <span class="hljs-number">#ffa94d</span>;<br>&#125;<br><br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Codystar&amp;display=swap&quot;</span>);<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>  <span class="hljs-attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="hljs-string">&quot;Segoe UI&quot;</span>, Roboto, Oxygen,<br>    Ubuntu, Cantarell, <span class="hljs-string">&quot;Open Sans&quot;</span>, <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, sans-serif;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-light);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-darkest);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.app</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.main</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.app-header</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">66rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.error</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#495057</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">14rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Codystar&quot;</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">5.6rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3.6rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">4rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.start</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.progress</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">grid-template-columns</span>: auto auto;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>&#125;<br><br>progress &#123;<br>  -webkit-appearance: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / -<span class="hljs-number">1</span>;<br>&#125;<br><br>::-webkit-progress-bar &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br>::-webkit-progress-value &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-theme);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--color-dark);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-dark);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span> <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-attr">[disabled]</span>)<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-darkest);<br>&#125;<br><br><span class="hljs-selector-class">.btn-option</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-attr">[disabled]</span>)<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">1.2rem</span>);<br>&#125;<br><br><span class="hljs-selector-class">.btn</span><span class="hljs-selector-attr">[disabled]</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">cursor</span>: not-allowed;<br>&#125;<br><br><span class="hljs-selector-class">.btn-ui</span> &#123;<br>  <span class="hljs-attribute">float</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.options</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">3.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn-option</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">text-align</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.btn-option</span><span class="hljs-selector-class">.correct</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-theme);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--color-theme);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-light);<br>&#125;<br><span class="hljs-selector-class">.btn-option</span><span class="hljs-selector-class">.wrong</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-accent);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--color-accent);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-darkest);<br>&#125;<br><br><span class="hljs-selector-class">.answer</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">2rem</span>);<br>&#125;<br><br><span class="hljs-selector-class">.result</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-theme);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-light);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.6rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.result</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.2rem</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.highscore</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">4.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.loader-container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.6rem</span>;<br><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.timer</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--color-dark);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.35rem</span> <span class="hljs-number">2.8rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-comment">/* CREDIT: https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje */</span><br><span class="hljs-selector-class">.loader</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle closest-side, currentColor <span class="hljs-number">90%</span>, <span class="hljs-number">#0000</span>) <span class="hljs-number">0%</span><br>      <span class="hljs-number">50%</span>,<br>    <span class="hljs-built_in">radial-gradient</span>(circle closest-side, currentColor <span class="hljs-number">90%</span>, <span class="hljs-number">#0000</span>) <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>,<br>    <span class="hljs-built_in">radial-gradient</span>(circle closest-side, currentColor <span class="hljs-number">90%</span>, <span class="hljs-number">#0000</span>) <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> / <span class="hljs-number">3</span>) <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">animation</span>: loader <span class="hljs-number">1s</span> infinite linear;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> loader &#123;<br>  <span class="hljs-number">20%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">0%</span>, <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">40%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">100%</span>, <span class="hljs-number">50%</span> <span class="hljs-number">0%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">60%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>, <span class="hljs-number">50%</span> <span class="hljs-number">100%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">0%</span>;<br>  &#125;<br>  <span class="hljs-number">80%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>, <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、App-js"><a href="#2、App-js" class="headerlink" title="2、App.js"></a>2、App.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Header&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Main</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Main&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Loader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Loader&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Error</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Error&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">StartScreen</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./StartScreen&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Question</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Question&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NextButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./NextButton&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Progress</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Progress&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">FinishScreen</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./FinishScreen&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Footer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Timer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Timer&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SECS_PER_QUESTION</span> = <span class="hljs-number">30</span>;    <br><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">questions</span>: [],<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;loading&quot;</span>, <span class="hljs-comment">//&#x27;loading&#x27;,&#x27;error&#x27;,&#x27;ready&#x27;,&#x27;active&#x27;,&#x27;finished&#x27;</span><br>  <span class="hljs-attr">index</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">answer</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">points</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">highscore</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">secondsRemaining</span>: <span class="hljs-number">0</span>,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;dataReceived&quot;</span>:   <span class="hljs-comment">//接收到数据之前是显示Loading界面</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">questions</span>: action.<span class="hljs-property">payload</span>,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;ready&quot;</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;dataFailed&quot;</span>:    <span class="hljs-comment">//error情况处理</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;start&quot;</span>:       <span class="hljs-comment">//显示开始界面（最初显示第一道问题）</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;active&quot;</span>,<br>        <span class="hljs-attr">secondsRemaining</span>: state.<span class="hljs-property">questions</span>.<span class="hljs-property">length</span> * <span class="hljs-variable constant_">SECS_PER_QUESTION</span>,<span class="hljs-comment">//开始回答问题时启动计时</span><br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;newAnswer&quot;</span>:<br>      <span class="hljs-keyword">const</span> question = state.<span class="hljs-property">questions</span>.<span class="hljs-title function_">at</span>(state.<span class="hljs-property">index</span>);  <span class="hljs-comment">//定位问题</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">answer</span>: action.<span class="hljs-property">payload</span>,   <span class="hljs-comment">//通过payload传递答案的选项</span><br>        <span class="hljs-attr">points</span>:<br>          action.<span class="hljs-property">payload</span> === question.<span class="hljs-property">correctOption</span><br>            ? state.<span class="hljs-property">points</span> + question.<span class="hljs-property">points</span><br>            : state.<span class="hljs-property">points</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;nextQuestion&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">index</span>: state.<span class="hljs-property">index</span> + <span class="hljs-number">1</span>, <span class="hljs-attr">answer</span>: <span class="hljs-literal">null</span> &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;finish&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;finished&quot;</span>,<br>        <span class="hljs-attr">highscore</span>:<br>          state.<span class="hljs-property">points</span> &gt; state.<span class="hljs-property">highscore</span> ? state.<span class="hljs-property">points</span> : state.<span class="hljs-property">highscore</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;restart&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...initialState,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;ready&quot;</span>,<br>        <span class="hljs-attr">questions</span>: state.<span class="hljs-property">questions</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tick&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">secondsRemaining</span>: state.<span class="hljs-property">secondsRemaining</span> - <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">status</span>: state.<span class="hljs-property">secondsRemaining</span> === <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;finished&quot;</span> : state.<span class="hljs-property">status</span>,<br>      &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Action unknown&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [<br>    &#123; questions, status, index, answer, points, highscore, secondsRemaining &#125;,<br>    dispatch,<br>  ] = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br><br>  <span class="hljs-keyword">const</span> numQuestions = questions.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> maxPossiblePoints = questions.<span class="hljs-title function_">reduce</span>(<br>    <span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> prev + cur.<span class="hljs-property">points</span>,<br>    <span class="hljs-number">0</span><br>  );   <span class="hljs-comment">//reducer积累器</span><br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://localhost:8001/questions&quot;</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;dataReceived&quot;</span>, <span class="hljs-attr">payload</span>: data &#125;))<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;dataFailed&quot;</span> &#125;));<br>  &#125;, []);<span class="hljs-comment">//使用useEffect来通过API获取问题数组</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">        &#123;status === &quot;loading&quot; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Loader</span> /&gt;</span>&#125;</span><br><span class="language-xml">        &#123;status === &quot;error&quot; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Error</span> /&gt;</span>&#125;</span><br><span class="language-xml">        &#123;status === &quot;ready&quot; &amp;&amp; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">StartScreen</span> <span class="hljs-attr">numQuestions</span>=<span class="hljs-string">&#123;numQuestions&#125;</span> <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span> /&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">        &#123;status === &quot;active&quot; &amp;&amp; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Progress</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">index</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">numQuestions</span>=<span class="hljs-string">&#123;numQuestions&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">points</span>=<span class="hljs-string">&#123;points&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">maxPossiblePoints</span>=<span class="hljs-string">&#123;maxPossiblePoints&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">answer</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Question</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">question</span>=<span class="hljs-string">&#123;questions[index]&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">answer</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Timer</span> <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span> <span class="hljs-attr">secondsRemaining</span>=<span class="hljs-string">&#123;secondsRemaining&#125;</span> /&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">NextButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">answer</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">index</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">numQuestions</span>=<span class="hljs-string">&#123;numQuestions&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Footer</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">        &#123;status === &quot;finished&quot; &amp;&amp; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">FinishScreen</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">points</span>=<span class="hljs-string">&#123;points&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">maxPossiblePoints</span>=<span class="hljs-string">&#123;maxPossiblePoints&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">highscore</span>=<span class="hljs-string">&#123;highscore&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Main</span>&gt;</span></span><br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure><h5 id="3、Error-js"><a href="#3、Error-js" class="headerlink" title="3、Error.js"></a>3、Error.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Error</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>💥<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> There was an error fecthing questions.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Error</span>;<br></code></pre></td></tr></table></figure><h5 id="4、Loader-js"><a href="#4、Loader-js" class="headerlink" title="4、Loader.js"></a>4、Loader.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Loader</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;loader-container&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;loader&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Loading questions...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5、StartScreen-js"><a href="#5、StartScreen-js" class="headerlink" title="5、StartScreen.js"></a>5、StartScreen.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">StartScreen</span>(<span class="hljs-params">&#123; numQuestions, dispatch &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Welcome to The React Quiz!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;numQuestions&#125; questions to test your React mastery<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-ui&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;start&quot; &#125;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        Let&#x27;s start</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">StartScreen</span>;<br><br></code></pre></td></tr></table></figure><h5 id="6、Header-js"><a href="#6、Header-js" class="headerlink" title="6、Header.js"></a>6、Header.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;app-header&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;logo512.png&#x27;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#x27;React logo&#x27;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The React Quiz<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Header</span>;<br><br></code></pre></td></tr></table></figure><h5 id="7、Main-js"><a href="#7、Main-js" class="headerlink" title="7、Main.js"></a>7、Main.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Main</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Main</span>;<br><br></code></pre></td></tr></table></figure><h5 id="8、Progress-js"><a href="#8、Progress-js" class="headerlink" title="8、Progress.js"></a>8、Progress.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Progress</span>(<span class="hljs-params">&#123; index, numQuestions, points, maxPossiblePoints, answer &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">progress</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&#123;numQuestions&#125;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;index</span> + <span class="hljs-attr">Number</span>(<span class="hljs-attr">answer</span> !== <span class="hljs-string">null)&#125;</span> /&gt;</span>&#123;*很巧妙地设置了progress的值，有回答时不移动，回答后移动*&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        Question <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;index + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>/&#123;numQuestions&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;points&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> /&#123;maxPossiblePoints&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Progress</span>;<br><br></code></pre></td></tr></table></figure><h5 id="9、Questions-js"><a href="#9、Questions-js" class="headerlink" title="9、Questions.js"></a>9、Questions.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Options</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Options&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Question</span>(<span class="hljs-params">&#123; question, dispatch, answer &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;question.question&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Options</span> <span class="hljs-attr">question</span>=<span class="hljs-string">&#123;question&#125;</span> <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span> <span class="hljs-attr">answer</span>=<span class="hljs-string">&#123;answer&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Question</span>;<br><br></code></pre></td></tr></table></figure><p>10、Options.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Options</span>(<span class="hljs-params">&#123; question, dispatch, answer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> hasAnswered = answer !== <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;options&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;question.options.map((option, index) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">btn</span> <span class="hljs-attr">btn-option</span> $&#123;<span class="hljs-attr">index</span> === <span class="hljs-string">answer</span> ? &quot;<span class="hljs-attr">answer</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125; $&#123;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">hasAnswered</span></span></span><br><span class="hljs-tag"><span class="language-xml">              ? <span class="hljs-attr">index</span> === <span class="hljs-string">question.correctOption</span></span></span><br><span class="hljs-tag"><span class="language-xml">                ? &quot;<span class="hljs-attr">correct</span>&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:</span> &quot;<span class="hljs-attr">wrong</span>&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">:</span> &quot;&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">          &#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;hasAnswered&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;option&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;newAnswer&quot;, payload: index &#125;)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;option&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Options</span>;<br><br></code></pre></td></tr></table></figure><h5 id="11、Footer-js"><a href="#11、Footer-js" class="headerlink" title="11、Footer.js"></a>11、Footer.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Footer</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Footer</span>;<br><br></code></pre></td></tr></table></figure><h5 id="12、Timer-js"><a href="#12、Timer-js" class="headerlink" title="12、Timer.js"></a>12、Timer.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Timer</span>(<span class="hljs-params">&#123; dispatch, secondsRemaining &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> mins = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(secondsRemaining / <span class="hljs-number">60</span>);<br>  <span class="hljs-keyword">const</span> seconds = secondsRemaining % <span class="hljs-number">60</span>;<br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;tick&quot;</span> &#125;);<br>      &#125;, <span class="hljs-number">1000</span>);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearInterval</span>(id);<br>    &#125;,<br>    [dispatch]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;timer&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;mins &lt; 10 &amp;&amp; &quot;0&quot;&#125;</span><br><span class="language-xml">      &#123;mins&#125; : &#123;seconds &lt; 10 &amp;&amp; &quot;0&quot;&#125;</span><br><span class="language-xml">      &#123;seconds&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Timer</span>;<br><br></code></pre></td></tr></table></figure><p><code>setInterval</code> 每隔 1000 毫秒（1秒）触发一次，向 <code>dispatch</code> 发送一个 <code>&#123; type: &quot;tick&quot; &#125;</code> 的动作，通常这个动作会在 <code>reducer</code> 中被处理为减少 <code>secondsRemaining</code> 的值，从而实现倒计时。<code>clearInterval(id)</code> 是清除定时器的操作，返回的函数会在组件卸载时或在 <code>dispatch</code> 发生变化时被调用，从而清除定时器，避免内存泄漏或不必要的计时操作。</p><h5 id="13、NextButton-js"><a href="#13、NextButton-js" class="headerlink" title="13、NextButton.js"></a>13、NextButton.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">NextButton</span>(<span class="hljs-params">&#123; dispatch, answer, index, numQuestions &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (answer === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">if</span> (index &lt; numQuestions - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-ui&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;nextQuestion&quot; &#125;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  <span class="hljs-keyword">if</span> (index === numQuestions - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-ui&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;finish&quot; &#125;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        Finish</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">NextButton</span>;<br><br></code></pre></td></tr></table></figure><h5 id="14、FinishScreen"><a href="#14、FinishScreen" class="headerlink" title="14、FinishScreen"></a>14、FinishScreen</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FinishScreen</span>(<span class="hljs-params">&#123; points, maxPossiblePoints, highscore, dispatch &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> percentage = (points / maxPossiblePoints) * <span class="hljs-number">100</span>;<br><br>  <span class="hljs-keyword">let</span> emoji;<br>  <span class="hljs-keyword">if</span> (percentage === <span class="hljs-number">100</span>) emoji = <span class="hljs-string">&quot;👑&quot;</span>;<br>  <span class="hljs-keyword">if</span> (percentage &gt;= <span class="hljs-number">80</span> &amp;&amp; percentage &lt; <span class="hljs-number">100</span>) emoji = <span class="hljs-string">&quot;🤩&quot;</span>;<br>  <span class="hljs-keyword">if</span> (percentage &gt;= <span class="hljs-number">60</span> &amp;&amp; percentage &lt; <span class="hljs-number">80</span>) emoji = <span class="hljs-string">&quot;🥳&quot;</span>;<br>  <span class="hljs-keyword">if</span> (percentage &gt;= <span class="hljs-number">0</span> &amp;&amp; percentage &lt; <span class="hljs-number">60</span>) emoji = <span class="hljs-string">&quot;🙍‍♀️&quot;</span>;<br>  <span class="hljs-keyword">if</span> (percentage === <span class="hljs-number">0</span>) emoji = <span class="hljs-string">&quot;🤡&quot;</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;emoji&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>You scored <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;points&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> out of&#123;&quot; &quot;&#125;</span><br><span class="language-xml">        &#123;maxPossiblePoints&#125;(&#123;Math.ceil(percentage)&#125;%)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;highscore&quot;</span>&gt;</span>(Highscore: &#123;highscore&#125; points)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-ui&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;restart&quot; &#125;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        Restart quiz</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">FinishScreen</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程8-react基础知识</title>
    <link href="/2024/08/19/react%E8%AF%BE%E7%A8%8B8-react%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/08/19/react%E8%AF%BE%E7%A8%8B8-react%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>本节课补充了一些关于React框架的基础知识。</p><span id="more"></span><h4 id="一、DOM元素"><a href="#一、DOM元素" class="headerlink" title="一、DOM元素"></a>一、DOM元素</h4><p>文档对象模型（Document Object Model）元素是HTML或XML文档总的各个节点，这些节点代表文档的结构和内容。在浏览器中，DOM 提供了一种编程接口，使得开发者可以通过 JavaScript 动态地访问和操作页面内容。HTML 元素（如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code> 等）在 DOM 中表示为元素节点。</p><p>通过 JavaScript，开发者可以使用各种方法和属性来操作 DOM 元素，以动态修改页面内容和结构。例如：</p><ul><li><strong>选择 DOM 元素</strong>：可以使用 <code>document.getElementById()</code>、<code>document.querySelector()</code> 等方法选择特定的 DOM 元素。</li><li><strong>修改内容或样式</strong>：可以通过修改 <code>innerHTML</code>、<code>textContent</code> 或 <code>style</code> 属性来更改元素的内容或样式。</li><li><strong>添加或移除元素</strong>：可以使用 <code>appendChild()</code>、<code>removeChild()</code> 等方法向 DOM 中添加或移除元素。</li><li><strong>事件处理</strong>：可以为 DOM 元素添加事件监听器来处理用户交互事件（如点击、输入等）。</li></ul><h4 id="二、Hook"><a href="#二、Hook" class="headerlink" title="二、Hook"></a>二、Hook</h4><p>React 中的 Hook 是一组特殊的函数，它们允许你在函数组件中使用 React 的状态和其他特性，而无需编写类组件。Hooks 是 React 16.8 版本引入的，目的是简化代码并使组件更容易理解和复用。</p><p><strong>1、为什么使用 Hooks？</strong></p><ul><li><strong>函数组件的局限性</strong>：在 Hooks 引入之前，只有类组件可以使用状态和生命周期方法。而函数组件则只能处理简单的、无状态的逻辑。</li><li><strong>Hooks 的优势</strong>：通过 Hooks，你可以在函数组件中使用状态、管理副作用、以及访问组件生命周期等功能。这使得函数组件可以替代类组件，并且更易于编写、复用和测试。</li></ul><p><strong>2、常见的 Hooks</strong></p><ul><li><p>**<code>useState</code>**：用于在函数组件中添加状态。</p></li><li><p>**<code>useEffect</code>**：用于在函数组件中处理副作用，比如数据获取、订阅或手动修改 DOM。它相当于类组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code>。</p></li><li><p>**<code>useContext</code>**：允许你在函数组件中使用 React 的上下文（Context），从而避免通过组件树逐层传递数据。</p></li><li><p>**<code>useReducer</code>**：用于在函数组件中管理更复杂的状态逻辑，是 <code>useState</code> 的替代方案。它类似于 Redux 的 reducer 概念。</p></li></ul><p><strong>3、Hooks 的规则</strong></p><ul><li><strong>只能在函数组件或自定义 Hook 中调用</strong>：不能在普通的 JavaScript 函数、类组件或循环、条件语句中调用 Hook。</li><li><strong>必须在顶层调用</strong>：不能在嵌套的函数或代码块中调用 Hook。这是为了保证每次渲染时 Hook 的调用顺序一致，从而确保状态和副作用的正确性。</li></ul><h4 id="三、Reconciler"><a href="#三、Reconciler" class="headerlink" title="三、Reconciler"></a>三、Reconciler</h4><p>在 React 中，<strong>reconciler</strong> 是一个内部机制，负责比较和协调（reconcile）组件状态变化时的 UI 更新过程。它是 React 核心部分之一，帮助确定在每次渲染时需要更新哪些部分的 UI，以及如何最有效地进行这些更新。</p><p><strong>1、Reconciler 的主要作用</strong></p><ul><li><strong>差异计算（Diffing）</strong>：当 React 组件的状态或属性发生变化时，Reconciler 负责比较新旧虚拟 DOM 树，找出两者之间的差异。这一过程称为“diffing”。</li><li><strong>最小化更新</strong>：通过 diffing 计算，Reconciler 可以确定最小化的更新集，即需要修改的节点，而不是重新渲染整个 UI。这提升了性能，尤其是在大型复杂应用中。</li><li><strong>触发渲染更新</strong>：根据 diffing 的结果，Reconciler 会告诉渲染器（renderer）哪些 DOM 操作需要执行，从而更新页面的 UI。对于 web 应用，渲染器通常是 React DOM。</li></ul><p><strong>2、工作原理</strong></p><p>Reconciler 的核心在于如何有效地计算出旧的虚拟 DOM（virtual DOM）树与新的虚拟 DOM 树之间的差异，并生成需要对实际 DOM 进行的更新操作。主要包括以下几个步骤：</p><ul><li><strong>虚拟 DOM</strong>：React 使用虚拟 DOM 来表示用户界面的结构。虚拟 DOM 是一个轻量级的 JavaScript 对象树，描述了 UI 的当前状态。</li><li><strong>比较（Comparing）</strong>：当组件状态或属性更新时，React 会创建一棵新的虚拟 DOM 树。Reconciler 然后会比较新旧两棵树，找出它们之间的差异。</li><li><strong>差异计算（Diffing）</strong>：Reconciler 使用了一种高效的算法，称为“diffing”，来找出哪些节点改变了。这包括节点的增删改、属性变化等。</li><li><strong>更新（Updating）</strong>：根据 diffing 的结果，Reconciler 会生成一系列操作指令（例如插入节点、删除节点、更新属性等），这些指令将被传递给渲染器，渲染器最终会将这些变化应用到实际的 DOM 中。</li></ul><h5 id="3、协调过程"><a href="#3、协调过程" class="headerlink" title="3、协调过程"></a>3、协调过程</h5><p>Reconciler 主要负责协调虚拟 DOM 树的更新过程，确保 UI 的更新是高效且一致的。协调过程包括以下内容：</p><ul><li><strong>树比较</strong>：Reconciler 会递归地比较新旧虚拟 DOM 树，找出需要更新的部分。对于每一个不同的部分，它会生成一个更新指令。</li><li><strong>键值（Key）优化</strong>：当渲染列表时（例如使用 <code>map()</code> 渲染多个元素），Reconciler 使用 <code>key</code> 属性来跟踪每个元素，从而更高效地更新列表项。这避免了不必要的节点重排和重渲染。</li><li><strong>递归更新</strong>：Reconciler 递归地更新所有子节点，确保整个组件树都得到适当的更新。</li></ul><h5 id="4、Fiber-架构"><a href="#4、Fiber-架构" class="headerlink" title="4、Fiber 架构"></a>4、<strong>Fiber 架构</strong></h5><p>React 16 版本引入了新的 Fiber 架构，增强了 Reconciler 的功能，使其能够更好地处理大型更新任务，并支持中断任务、优先级处理等高级特性。Fiber Reconciler 的主要改进包括：</p><ul><li><strong>可中断渲染</strong>：Fiber 架构允许 React 将长时间运行的渲染任务分成多个小任务，从而在渲染过程中可以响应用户的交互。</li><li><strong>任务优先级</strong>：Fiber 允许为不同的更新任务设置优先级，使得更重要的任务可以被优先处理。</li></ul><p><strong>总结</strong></p><p>在 React 中，Reconciler 是一个关键的内部机制，负责管理和优化组件更新的整个过程。它通过高效的 diffing 算法最小化 DOM 操作，确保页面更新既快速又高效。React 的 Fiber 架构进一步提升了 Reconciler 的性能和灵活性，使得 React 能够更好地处理复杂的应用场景。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240826093436350.png" alt="image-20240826093436350"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828193923359.png" alt="image-20240828193923359"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828194014913.png" alt="image-20240828194014913"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828194040762.png" alt="image-20240828194040762"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828194112849.png" alt="image-20240828194112849"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828194149277.png" alt="image-20240828194149277"></p><h4 id="四、side-effect"><a href="#四、side-effect" class="headerlink" title="四、side effect"></a>四、side effect</h4><p>在 React 中，“side effect”（副作用）通常指的是组件在渲染过程中执行的那些与渲染无关的操作。副作用包括但不限于以下情况：</p><ol><li><strong>数据获取（Data Fetching）</strong>： 例如，你在组件渲染后从 API 获取数据。</li><li><strong>订阅（Subscriptions）</strong>： 例如，订阅某个事件或数据源，在组件卸载时取消订阅。</li><li><strong>手动更改 DOM</strong>： 虽然 React 通常会管理 DOM 操作，但有时你可能需要手动更改 DOM，如操作第三方库或者直接使用 <code>document</code> 对象。</li><li><strong>定时器（Timers）</strong>： 使用 <code>setTimeout</code> 或 <code>setInterval</code> 设置定时器。</li></ol><p>在 React 中，处理副作用最常用的方式是使用 <code>useEffect</code> 钩子。<code>useEffect</code> 钩子允许你在函数组件中执行副作用，并在必要时清除这些副作用。</p><h4 id="五、依赖数组"><a href="#五、依赖数组" class="headerlink" title="五、依赖数组"></a>五、依赖数组</h4><p><code>useEffect</code> 是 React 中用于处理副作用的钩子，比如数据获取、订阅、手动更改 DOM 等。依赖项数组决定了 <code>useEffect</code> 中的回调函数何时执行。</p><p><strong>空数组 <code>[]</code></strong>:</p><ul><li>如果依赖项数组为空，<code>useEffect</code> 中的回调函数只会在组件首次渲染后执行一次。</li><li>相当于组件的 <code>componentDidMount</code> 生命周期钩子。</li></ul><p><strong>没有依赖项数组</strong>:</p><ul><li>如果不提供依赖项数组，<code>useEffect</code> 中的回调函数将在每次组件渲染后执行。</li><li>相当于每次组件更新后的 <code>componentDidUpdate</code>。</li></ul><p><strong>带有依赖项的数组 <code>[dep1, dep2, ...]</code></strong>:</p><ul><li>如果依赖项数组中包含特定的变量，<code>useEffect</code> 中的回调函数只有在这些变量发生变化时才会执行。</li><li>这可以优化性能，避免不必要的副作用执行。</li></ul><h4 id="六、stale-closure"><a href="#六、stale-closure" class="headerlink" title="六、stale closure"></a>六、stale closure</h4><p>“Stale closure” 是 React 开发中一个常见的术语，指的是在使用 React hooks（尤其是 <code>useEffect</code>、<code>useCallback</code>、<code>useMemo</code> 等）时，闭包（closure）中引用了过时的变量或状态值，导致逻辑错误。</p><p>闭包是 JavaScript 中一个函数可以记住其创建时的上下文的特性。闭包使得内部函数可以访问外部函数的变量，即使外部函数已经执行完毕。这种特性在 React hooks 中可能会导致问题，尤其是在依赖项数组没有正确设置时。</p><p>在 React 中，组件的每次渲染都会生成新的函数和新的闭包。闭包中捕获的变量值是函数创建时的那一刻的值，而不是当前渲染的最新值。如果你的组件多次渲染，而某个钩子函数内部的闭包引用了旧的变量或状态值，那么这个闭包就被称为“stale closure”（陈旧的闭包）。</p><p><strong>解决方法：</strong></p><p>​    <strong>函数式更新</strong>: 当使用 <code>setState</code> 时，使用函数式更新（即传递一个函数而不是直接传递新值）。这可以确保你总是基于最新的状态更新。</p><p>​    <strong>正确设置依赖项数组</strong>: 在 <code>useEffect</code>、<code>useCallback</code> 和 <code>useMemo</code> 等 hooks 中，确保依赖项数组包含所有在闭包中引用的状态或 props。这样 React 就会在依赖项变化时重新执行函数，避免使用陈旧的闭包。</p><p>​     <strong>使用 refs</strong>: 在一些场景下，你可以使用 <code>useRef</code> 来存储值，因为 <code>useRef</code> 中的值在渲染之间是持久的，并且更新时不会触发组件的重新渲染。</p><h4 id="七、派生态"><a href="#七、派生态" class="headerlink" title="七、派生态"></a>七、派生态</h4><p>在React中，**”derived state”（派生状态）**通常是指通过计算或处理组件的已有状态或props得出的新数据，而不是直接存储在组件的state中的数据。派生状态不应该存储在state中，因为它可以在渲染时通过计算得出，从而避免冗余和潜在的数据不一致性。</p><h4 id="八、useState初始化状态"><a href="#八、useState初始化状态" class="headerlink" title="八、useState初始化状态"></a>八、useState初始化状态</h4><p>方法一：使用函数初始化</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [watched, setWatched] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> storedValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;watched&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(storedValue);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>方法二：直接初始化</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [watched, setWatched] = <span class="hljs-title function_">useState</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;watched&quot;</span>)));<br><br></code></pre></td></tr></table></figure><p><strong>惰性初始化（Lazy Initialization）</strong>：</p><ul><li><strong>方法一</strong>使用的是惰性初始化。<code>useState</code>接受一个函数作为参数时，React会在组件初次渲染时调用该函数，并将其返回值作为初始状态。这意味着函数只会在组件首次渲染时执行一次。</li><li><strong>方法二</strong>中的<code>localStorage.getItem</code>和<code>JSON.parse</code>在组件每次渲染时都会执行，即使状态已经初始化，这在某些情况下可能会导致不必要的计算开销。</li></ul><p><strong>性能考虑</strong>：</p><ul><li><strong>方法一</strong>更适合在初始化过程中存在昂贵操作（例如复杂的计算或数据提取）时使用，因为这些操作只会在组件首次渲染时执行一次。</li><li><strong>方法二</strong>的性能可能稍微差一些，尤其是在有复杂操作时，因为每次渲染组件都会执行状态初始化的表达式。</li></ul><p><strong>代码的可读性</strong>：</p><ul><li><strong>方法一</strong>可能更具可读性，特别是当初始化逻辑比较复杂时，使用函数形式可以让代码更清晰，容易理解逻辑分步处理的过程。</li><li><strong>方法二</strong>在简单的初始化场景下代码更简洁。</li></ul><h4 id="九、useRef"><a href="#九、useRef" class="headerlink" title="九、useRef"></a>九、useRef</h4><p>特点：</p><p><strong>保持跨渲染的可变值</strong>：</p><ul><li><code>useRef</code>返回的对象是 <code>&#123; current: value &#125;</code>。这个对象在组件的整个生命周期内是持久的，更新<code>current</code>属性不会触发重新渲染。这使得<code>useRef</code>非常适合存储跨渲染周期的数据，比如计时器ID、上一次的状态值或某个DOM节点的引用。</li></ul><p><strong>访问DOM元素</strong>：</p><ul><li><code>useRef</code>常用来直接访问DOM元素。在上面的例子中，我们使用<code>ref</code>属性将<code>myRef</code>对象赋给了一个输入框。<code>myRef.current</code>指向该DOM元素，可以在按钮点击时调用<code>focus()</code>方法来聚焦输入框。</li></ul><p><strong>保存组件间不变的数据</strong>：</p><ul><li><code>useRef</code>可以用来保存不需要触发重新渲染的变量。例如，你可以使用<code>useRef</code>保存计数器值或状态变量的前一个值，而无需通过<code>useState</code>来管理它们。</li></ul><h4 id="十、Custom-Hooks（自定义钩子）"><a href="#十、Custom-Hooks（自定义钩子）" class="headerlink" title="十、Custom Hooks（自定义钩子）"></a>十、Custom Hooks（自定义钩子）</h4><p>当多个组件需要共享相似的逻辑时，可以将这些逻辑提取到一个自定义Hook中，以避免重复代码。例如，处理表单输入的状态、处理数据获取（如API请求）的逻辑等。</p><h4 id="十一、Fiber"><a href="#十一、Fiber" class="headerlink" title="十一、Fiber"></a>十一、Fiber</h4><p>React 的 Fiber 是 React 16 及其后续版本中的一种新架构，用于提升 UI 渲染的性能和灵活性。它重新设计了 React 的协调（reconciliation）算法，使得 React 能够更好地处理复杂的应用场景，尤其是在响应用户交互和更新大型组件树时。Fiber 是一种数据结构和执行机制，它使得 React 可以更细粒度地管理和调度组件的更新任务。与传统的同步渲染不同，Fiber 允许将更新任务拆分成多个小任务，并根据优先级有选择地执行，从而提高了应用的响应性。</p><h5 id="（1）-Fiber-的设计目标"><a href="#（1）-Fiber-的设计目标" class="headerlink" title="（1） Fiber 的设计目标"></a>（1） <strong>Fiber 的设计目标</strong></h5><p>Fiber 架构的设计目标主要包括以下几个方面：</p><ul><li><strong>可中断渲染</strong>：传统的 React 采用的是同步递归算法，这意味着一旦开始渲染，就会阻塞主线程，直到整个渲染过程完成。Fiber 通过将渲染任务切割成多个小片段，使得渲染过程可以被中断，从而在必要时让出时间给其他更高优先级的任务。</li><li><strong>任务优先级</strong>：Fiber 允许为不同的更新任务设置优先级。优先级较高的任务（例如用户交互）可以在低优先级任务（例如后台数据同步）之前执行，从而提升用户体验。</li><li><strong>并发模式</strong>：Fiber 为 React 引入了并发模式，使得 React 能够在后台渲染任务时处理用户输入或其他高优先级任务，从而减少页面卡顿现象。</li></ul><h5 id="（2）-Fiber-的工作原理"><a href="#（2）-Fiber-的工作原理" class="headerlink" title="（2） Fiber 的工作原理"></a>（2） Fiber 的工作原理</h5><p>Fiber 将组件更新的工作分成两个主要阶段：<strong>渲染阶段（Render Phase）</strong> 和 <strong>提交阶段（Commit Phase）</strong>。</p><ul><li><strong>渲染阶段</strong>：<ul><li>在这个阶段，React 会通过协调器（Reconciler）进行组件树的 diffing（比较），决定哪些部分需要更新。</li><li>这个过程是“可中断的”，即 React 可以暂停渲染，以便处理其他更紧急的任务，然后再继续渲染未完成的部分。</li></ul></li><li><strong>提交阶段</strong>：<ul><li>一旦渲染阶段完成，React 会进入提交阶段，在这个阶段，所有的更改都会被应用到实际的 DOM 中。</li><li>这个阶段是同步的，并且不可中断，因为它直接影响到用户界面的显示。</li></ul></li></ul><h5 id="（3）Fiber-数据结构"><a href="#（3）Fiber-数据结构" class="headerlink" title="（3）Fiber 数据结构"></a>（3）<strong>Fiber 数据结构</strong></h5><p>Fiber 是一种链表结构，每个组件实例对应一个 Fiber 节点。Fiber 节点包含了关于该组件的各种信息，例如：</p><ul><li><strong>类型（Type）</strong>：组件的类型，例如函数组件、类组件或原生 DOM 节点。</li><li><strong>状态（State）</strong>：组件的本地状态和挂载点。</li><li><strong>子节点、兄弟节点和父节点的引用</strong>：用来构建 Fiber 树。</li><li><strong>更新队列（Update Queue）</strong>：保存该 Fiber 节点上的所有状态更新。</li></ul><h5 id="（4）优先级调度"><a href="#（4）优先级调度" class="headerlink" title="（4）优先级调度"></a>（4）<strong>优先级调度</strong></h5><p>Fiber 通过一个叫做 <code>scheduler</code> 的机制来管理不同更新任务的优先级。Scheduler 会根据任务的重要性为其分配优先级，并确保高优先级任务优先执行。</p><ul><li><strong>高优先级任务</strong>：例如用户的输入和动画，这些任务需要快速响应，因而具有较高优先级。</li><li><strong>低优先级任务</strong>：例如网络请求或不紧急的状态更新，这些任务可以在空闲时间执行。</li></ul><h5 id="（5）可中断渲染和恢复"><a href="#（5）可中断渲染和恢复" class="headerlink" title="（5）可中断渲染和恢复"></a>（5）<strong>可中断渲染和恢复</strong></h5><p>Fiber 的核心优势在于其可中断性。当 React 在渲染某个组件时，如果遇到一个更高优先级的任务，它可以暂停当前任务，将控制权交给高优先级任务。在高优先级任务完成后，React 可以恢复之前的渲染，继续未完成的工作。</p><h5 id="（6）Concurrent-Mode（并发模式）"><a href="#（6）Concurrent-Mode（并发模式）" class="headerlink" title="（6）Concurrent Mode（并发模式）"></a>（6）<strong>Concurrent Mode（并发模式）</strong></h5><p>Fiber 还为 React 引入了并发模式（Concurrent Mode）。并发模式下，React 可以在后台并发地处理多个渲染任务，并在处理任务的同时继续响应用户输入。这样可以显著提升应用的流畅性和响应速度。</p><h5 id="（7）Fiber-的优缺点"><a href="#（7）Fiber-的优缺点" class="headerlink" title="（7）Fiber 的优缺点"></a>（7）<strong>Fiber 的优缺点</strong></h5><p>优点：</p><ul><li><strong>提高了渲染的灵活性</strong>：通过可中断和恢复渲染，React 可以更好地管理大型更新任务。</li><li><strong>减少卡顿</strong>：通过任务优先级调度和并发模式，Fiber 减少了 UI 更新时的卡顿现象。</li><li><strong>增强用户体验</strong>：Fiber 提供了更高效的用户界面更新机制，尤其是在处理大量状态变化时。</li></ul><p>缺点：</p><ul><li><strong>复杂性增加</strong>：Fiber 引入了更多的内部机制，增加了 React 内部的复杂性。</li><li><strong>需要适应新模式</strong>：开发者需要理解 Fiber 的工作原理，以便在复杂应用中更好地使用 React。</li></ul><h4 id="十二、Fiber-Tree"><a href="#十二、Fiber-Tree" class="headerlink" title="十二、Fiber Tree"></a>十二、Fiber Tree</h4><p>Fiber Tree 是由多个 Fiber 节点相互连接而形成的树形数据结构。与传统的 Virtual DOM 树不同，Fiber Tree 允许对渲染工作进行分片处理，支持中断、恢复、以及优先级调度等操作。这使得 React 能够更有效地处理复杂的 UI 更新场景。</p><p>每个 Fiber 节点包含了一些描述组件的信息和状态，它们主要包括以下几个部分：</p><ol><li><strong>Type</strong>：<ul><li>表示组件的类型，如函数组件、类组件或原生 DOM 元素。</li></ul></li><li><strong>Key</strong>：<ul><li>用于在同级组件中标识节点，以便在更新时可以高效地进行 diff 运算。</li></ul></li><li><strong>StateNode</strong>：<ul><li>指向与当前 Fiber 节点对应的组件实例或 DOM 元素。</li></ul></li><li><strong>Return</strong>：<ul><li>指向当前 Fiber 节点的父节点。</li></ul></li><li><strong>Child</strong>：<ul><li>指向当前 Fiber 节点的第一个子节点。</li></ul></li><li><strong>Sibling</strong>：<ul><li>指向当前 Fiber 节点的下一个兄弟节点。</li></ul></li><li><strong>PendingProps 和 MemoizedProps</strong>：<ul><li>分别表示当前更新的 props 和上一次渲染时的 props。</li></ul></li><li><strong>UpdateQueue</strong>：<ul><li>存储需要在当前节点上处理的状态更新或副作用。</li></ul></li><li><strong>Alternate</strong>：<ul><li>指向 Fiber 树中的另一个对应节点，这在双缓冲技术（double buffering）中用于管理更新时的 Fiber。</li></ul></li></ol><h5 id="Fiber-Tree-的工作原理"><a href="#Fiber-Tree-的工作原理" class="headerlink" title="Fiber Tree 的工作原理"></a>Fiber Tree 的工作原理</h5><p>在 React 中，Fiber Tree 主要用于以下几种场景：</p><ol><li>协调过程（Reconciliation）：<ul><li>当组件状态或 props 发生变化时，React 会通过 Fiber Tree 来进行 diff 运算，以确定哪些部分需要更新。这个过程是可中断的，因此 React 可以优先处理高优先级任务。</li></ul></li><li>任务调度：<ul><li>Fiber Tree 通过 <code>scheduler</code> 管理不同任务的优先级，并决定哪些任务应该首先执行。</li></ul></li><li>双缓冲技术：<ul><li>Fiber Tree 通过 <code>current</code> 和 <code>workInProgress</code> 两棵树进行双缓冲。<code>current</code> 是当前屏幕上显示的 Fiber 树，而 <code>workInProgress</code> 则是正在构建的 Fiber 树。当新的更新完成时，React 会交换这两棵树。</li></ul></li></ol><h5 id="构建和更新-Fiber-Tree-的过程"><a href="#构建和更新-Fiber-Tree-的过程" class="headerlink" title="构建和更新 Fiber Tree 的过程"></a>构建和更新 Fiber Tree 的过程</h5><ol><li>初次渲染：<ul><li>React 会创建整个 Fiber Tree，并构建组件的实例以及它们对应的 DOM 元素。</li></ul></li><li>更新过程：<ul><li>当组件状态或 props 改变时，React 会创建一棵新的 Fiber Tree，并与旧的 Fiber Tree 进行对比。这种对比可以高效地找出需要更新的部分。</li></ul></li><li>提交阶段：<ul><li>在更新 Fiber Tree 后，React 会将变化应用到真实的 DOM 上。这是不可中断的阶段，确保用户界面与最新状态同步。</li></ul></li></ol><h5 id="Fiber-Tree-的优势"><a href="#Fiber-Tree-的优势" class="headerlink" title="Fiber Tree 的优势"></a>Fiber Tree 的优势</h5><ol><li>性能优化：<ul><li>Fiber Tree 允许对 UI 更新进行分片处理，避免了长时间的主线程阻塞，提升了页面的响应性。</li></ul></li><li>优先级调度：<ul><li>React 可以根据任务的优先级来决定执行顺序，从而确保用户的交互优先得到响应。</li></ul></li><li>渐进渲染：<ul><li>Fiber Tree 支持并发模式，使得 React 可以渐进式地渲染大型组件树。</li></ul></li></ol><h4 id="十三、Key的重要性"><a href="#十三、Key的重要性" class="headerlink" title="十三、Key的重要性"></a>十三、Key的重要性</h4><p>在 React 中，<code>key</code> 是一个特殊的属性，用于帮助 React 高效地更新和渲染列表中的元素。它在列表渲染和组件的重新排序中发挥了重要作用。以下是 <code>key</code> 的几个重要作用：</p><ol><li><strong>帮助 React 识别元素</strong></li></ol><p><code>key</code> 属性帮助 React 唯一标识列表中的每个元素。它用于区分每个元素，从而帮助 React 确定哪些元素已经改变、添加或删除。这使得 React 在更新界面时能够更高效地进行操作。</p><ol start="2"><li><strong>提高渲染效率</strong></li></ol><p>当列表的内容发生变化时（如增加、删除或重新排序），React 依赖 <code>key</code> 来确定哪些元素需要重新渲染。如果没有 <code>key</code>，React 会重新渲染整个列表，这样会降低性能。使用 <code>key</code>，React 能够最小化 DOM 操作，仅更新实际变化的部分。</p><ol start="3"><li><strong>稳定组件状态</strong></li></ol><p><code>key</code> 有助于确保组件的状态在渲染过程中保持稳定。例如，如果一个列表中的元素被重新排序，但它们的 <code>key</code> 不变，React 会保持这些元素的状态，而不是重新创建它们。这样可以避免组件状态的丢失或重置。</p><ol start="4"><li><strong>唯一性要求</strong></li></ol><p><code>key</code> 属性的值必须在列表中唯一，但不必在整个应用中唯一。通常，<code>key</code> 是元素的唯一标识符（如 ID），或者基于元素内容生成的唯一值。使用不唯一的 <code>key</code> 会导致 React 无法正确识别和管理元素，从而可能导致性能问题或不一致的 UI。</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程7-usepopcorn-1</title>
    <link href="/2024/08/17/react%E8%AF%BE%E7%A8%8B7-usepopcorn/"/>
    <url>/2024/08/17/react%E8%AF%BE%E7%A8%8B7-usepopcorn/</url>
    
    <content type="html"><![CDATA[<p>本次课程构建出一个电影清单界面，拥有更多的功能和更强的互动性🤓（NO这次先实现静态网页）。咱们就是争取这次不偷懒，不仅把代码打完把知识点也跟着记完吧。。。</p><span id="more"></span><p>一个小小的快捷键：鼠标悬停在某个组件，ctrl+左键&#x3D;&gt;直接去编辑这个组件（函数）</p><p>另一个小小的快捷键：cl&#x3D;&gt;console.log()</p><p>啊啊啊啊啊啊啊啊啊啊啊啊我为什么不早点切换到npm国内镜像!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p><p>npm下载速度真的慢的我想刀人<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240818164718523.png" alt="image-20240818164718178" style="zoom:67%;" /><br><code>npm config set registry=https://registry.npmmirror.com</code> 命令一键切换</p><h3 id="一、知识点讲解"><a href="#一、知识点讲解" class="headerlink" title="一、知识点讲解"></a>一、知识点讲解</h3><h4 id="（1）组件（component）分解"><a href="#（1）组件（component）分解" class="headerlink" title="（1）组件（component）分解"></a>（1）组件（component）分解</h4><p>首先需要明确的是：不管使用一个很大的组件或者是拆分成很多很小的组件都会使代码变得糟糕。<strong>逻辑分离</strong>很重要，而且要注重<strong>代码重用！！！！！</strong>让代码变得高效易懂。</p><h4 id="（2）组件分类"><a href="#（2）组件分类" class="headerlink" title="（2）组件分类"></a>（2）组件分类</h4><p>1、<strong>无状态&#x2F;展示组件（Stateless&#x2F;Presentational Components）</strong></p><ul><li><strong>定义</strong>: 主要负责展示 UI（用户界面），不处理应用的业务逻辑。</li><li><strong>特点</strong>:<ul><li>主要通过 <code>props</code> 接收数据。</li><li>仅负责展示，不涉及业务逻辑或状态管理。</li><li>由于没有业务逻辑，通常可以在多个地方复用。</li><li>可以使用函数组件，也可以是无状态的类组件。</li></ul></li></ul><ol start="2"><li><strong>Stateful Components（有状态组件）</strong></li></ol><ul><li><p><strong>定义</strong>: 负责管理应用的状态和逻辑，并可能会将数据传递给展示组件。这些组件通常会使用 <code>state</code> 来管理其内部状态。</p></li><li><p><strong>特点</strong>:</p><ul><li><p>管理状态: 处理应用的状态（使用 <code>state</code>）。</p></li><li><p>处理业务逻辑: 负责应用的逻辑，例如处理用户输入、调用 API、计算数据等。</p></li><li><p>容器组件: 通常扮演容器组件的角色，将数据和逻辑传递给展示组件。</p></li><li><p>实现: 可以使用类组件（具有 <code>state</code> 和生命周期方法）或使用 React Hooks 的函数组件。</p></li></ul></li></ul><ol start="3"><li><strong>Structural Components（结构组件）</strong></li></ol><ul><li><p><strong>定义</strong>: 主要负责应用的布局和结构，包括组织其他组件的方式。这些组件通常不关心具体的业务逻辑或数据展示，而是负责整体的界面布局和结构。</p></li><li><p><strong>特点</strong>:</p><ul><li><p>布局和结构: 负责定义组件的布局和结构，例如容器、网格、栅格系统等。</p></li><li><p>包含其他组件: 通常会包含其他展示组件或有状态组件。</p></li><li><p>不处理业务逻辑: 不直接处理应用的数据或业务逻辑，只负责组织和布局。</p></li></ul></li></ul><h4 id="（3）什么叫做使用Composition来解决Prop-Drilling的问题"><a href="#（3）什么叫做使用Composition来解决Prop-Drilling的问题" class="headerlink" title="（3）什么叫做使用Composition来解决Prop Drilling的问题"></a>（3）什么叫做使用Composition来解决Prop Drilling的问题</h4><p><strong>Composition</strong> 是一种用来解决 <strong>Prop Drilling</strong>（属性传递）问题的设计模式。<strong>Prop Drilling</strong> 指的是将数据从父组件逐层传递到深层嵌套的子组件，这样可能会导致组件树中的中间组件不必要地接收和传递数据，使得代码变得复杂且难以维护。<strong>Composition</strong> 是指将多个组件组合在一起，以实现更复杂的功能或布局。通过这种方式，组件可以专注于其自身的功能，而不是接收和传递大量的 <code>props</code>。</p><h4 id="（4）default值的设置"><a href="#（4）default值的设置" class="headerlink" title="（4）default值的设置"></a>（4）default值的设置</h4><p>为了增强组件的可重用性，通常会使用 <code>props</code> 传递数据、回调函数和行为，而不是将数据硬编码在组件内部。这样，组件可以根据传入的 <code>props</code> 动态渲染不同的内容或执行不同的操作。<code>default</code> 值用于为组件参数、变量或属性提供默认值，当未提供相应值时，程序将使用这些默认值。通过合理使用默认值，可以简化代码、提高可读性，并减少错误。<strong>PS：可以用default值来初始化状态</strong></p><h3 id="二、练习"><a href="#二、练习" class="headerlink" title="二、练习"></a>二、练习</h3><h4 id="（1）将下面的网页由一个巨大的组件分解成下图的组件树"><a href="#（1）将下面的网页由一个巨大的组件分解成下图的组件树" class="headerlink" title="（1）将下面的网页由一个巨大的组件分解成下图的组件树"></a>（1）将下面的网页由一个巨大的组件分解成下图的组件树</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240817161437915.png" alt="image-20240817161437915"></p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240817161356298.png" alt="image-20240817161356298" style="zoom: 67%;" /><h4 id="（2）构建一个评分组件"><a href="#（2）构建一个评分组件" class="headerlink" title="（2）构建一个评分组件"></a>（2）构建一个评分组件</h4><p><img src="C:/Users/姚姚/AppData/Roaming/Typora/typora-user-images/image-20240818142751400.png" alt="image-20240818142751400"></p><ul><li><p>特点：鼠标悬停在星星上时会显示暂时星数，星星会随之被颜色填满或仍未空心。点击某颗星星会固定星数和满星的数量。</p></li><li><p>拓展：增强组件的可重用性。</p><ul><li><p>1、将星星的大小、颜色、字体的大小、颜色、最大星星数、默认星星数、显示的内容等等都通过<code>props</code>（参数）传递。（<strong>参数太多会增加代码的复杂性</strong>）</p></li><li><p>2、🌟🌟考虑到用户在想要使用这个组件的时候，想要拿到一个重要的参数：星数。因此我们在某个组件中应用这个组件时，需要设置一个状态（比如）：movieRating。然后把setMovieRating函数通过参数传递给评分组件。在组件中的设置星数的函数中将movieRating也设置为Rating。</p></li></ul></li><li><p>参数类型检查：</p></li><li><p>1、PropType：<code>PropTypes</code> 是 React 内置的一个库，用于在运行时检查组件接收到的 <code>props</code> 是否符合指定的类型。尽管在 React 17 之后，<code>PropTypes</code> 被移出了核心库，但它仍然是进行简单类型检查的常用工具。</p></li><li><p>2、TypeScript：在 TypeScript 中，类型检查是通过静态类型系统在编译时完成的，这比 <code>PropTypes</code> 更加严格和安全。</p></li></ul><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="（1）usepopcorn"><a href="#（1）usepopcorn" class="headerlink" title="（1）usepopcorn"></a>（1）usepopcorn</h4><h5 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> tempMovieData = [<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt1375666&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;Inception&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;2010&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt0133093&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;The Matrix&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;1999&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt6751668&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;Parasite&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;2019&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_SX300.jpg&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> tempWatchedData = [<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt1375666&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;Inception&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;2010&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg&quot;</span>,<br>    <span class="hljs-attr">runtime</span>: <span class="hljs-number">148</span>,<br>    <span class="hljs-attr">imdbRating</span>: <span class="hljs-number">8.8</span>,<br>    <span class="hljs-attr">userRating</span>: <span class="hljs-number">10</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt0088763&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;Back to the Future&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;1985&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BZmU0M2Y1OGUtZjIxNi00ZjBkLTg1MjgtOWIyNThiZWIwYjRiXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg&quot;</span>,<br>    <span class="hljs-attr">runtime</span>: <span class="hljs-number">116</span>,<br>    <span class="hljs-attr">imdbRating</span>: <span class="hljs-number">8.5</span>,<br>    <span class="hljs-attr">userRating</span>: <span class="hljs-number">9</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">average</span> = (<span class="hljs-params">arr</span>) =&gt;<br>  arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur, i, arr</span>) =&gt;</span> acc + cur / arr.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [movies, setMovies] = <span class="hljs-title function_">useState</span>(tempMovieData);<br>  <span class="hljs-keyword">const</span> [watched, setWatched] = <span class="hljs-title function_">useState</span>(tempWatchedData);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NumResults</span> <span class="hljs-attr">movies</span>=<span class="hljs-string">&#123;movies&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">MovieList</span> <span class="hljs-attr">movies</span>=<span class="hljs-string">&#123;movies&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">WatchedSummary</span> <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">WatchedMovieList</span> <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">NavBar</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nav-bar&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Logo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span>🍿<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>usePopcorn<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Search</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [query, setQuery] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;search&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search movies...&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;query&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setQuery(e.target.value)&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">NumResults</span>(<span class="hljs-params">&#123; movies &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;num-results&quot;</span>&gt;</span></span><br><span class="language-xml">      Found <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;movies.length&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> results</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Main</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Box</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOpen, setIsOpen] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-toggle&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpen((open) =&gt; !open)&#125;&gt;</span><br><span class="language-xml">        &#123;isOpen ? &quot;–&quot; : &quot;+&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isOpen &amp;&amp; children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MovieList</span>(<span class="hljs-params">&#123; movies &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;movies?.map((movie) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Movie</span> <span class="hljs-attr">movie</span>=<span class="hljs-string">&#123;movie&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Movie</span>(<span class="hljs-params">&#123; movie &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;movie.Poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">movie.Title</span>&#125; <span class="hljs-attr">poster</span>`&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;movie.Title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🗓<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.Year&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedSummary</span>(<span class="hljs-params">&#123; watched &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> avgImdbRating = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbRating</span>));<br>  <span class="hljs-keyword">const</span> avgUserRating = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">userRating</span>));<br>  <span class="hljs-keyword">const</span> avgRuntime = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">runtime</span>));<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;summary&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Movies you watched<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#️⃣<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;watched.length&#125; movies<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⭐️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgImdbRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgUserRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⏳<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgRuntime&#125; min<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedMovieList</span>(<span class="hljs-params">&#123; watched &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;watched.map((movie) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">WatchedMovie</span> <span class="hljs-attr">movie</span>=<span class="hljs-string">&#123;movie&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedMovie</span>(<span class="hljs-params">&#123; movie &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;movie.Poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">movie.Title</span>&#125; <span class="hljs-attr">poster</span>`&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;movie.Title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⭐️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.imdbRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.userRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⏳<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.runtime&#125; min<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（2）StarRating-js"><a href="#（2）StarRating-js" class="headerlink" title="（2）StarRating.js"></a>（2）StarRating.js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> containerStyle = &#123;<br>  <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;flex&quot;</span>,<br>  <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>  <span class="hljs-attr">gap</span>: <span class="hljs-string">&quot;16px&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> starContainerStyle = &#123;<br>  <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;flex&quot;</span>,<br>  <span class="hljs-comment">//gap: &quot;4px&quot;,</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">StarRating</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  maxRating = <span class="hljs-number">5</span>,</span><br><span class="hljs-params">  color = <span class="hljs-string">&quot;#e3af40&quot;</span>,</span><br><span class="hljs-params">  size = <span class="hljs-number">48</span>,</span><br><span class="hljs-params">  className = <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="hljs-params">  messages = [],</span><br><span class="hljs-params">  defaultRating = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [rating, setRating] = <span class="hljs-title function_">useState</span>(defaultRating);<br>  <span class="hljs-keyword">const</span> [tempRating, setTempRating] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRating</span>(<span class="hljs-params">rating</span>) &#123;<br>    <span class="hljs-title function_">setRating</span>(rating);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> textStyle = &#123;<br>    <span class="hljs-attr">lineHeight</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    color,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;size / <span class="hljs-number">2.5</span>&#125;</span>px`</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;containerStyle&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;starContainerStyle&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;Array.from(&#123; length: maxRating &#125;, (_, i) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Star</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onRate</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleRating(i + 1)&#125;</span><br><span class="language-xml">            full=&#123;tempRating ? tempRating &gt;= i + 1 : rating &gt;= i + 1&#125;</span><br><span class="language-xml">            onHoverIn=&#123;() =&gt; setTempRating(i + 1)&#125;</span><br><span class="language-xml">            onHoverOut=&#123;() =&gt; setTempRating(0)&#125;</span><br><span class="language-xml">            color=&#123;color&#125;</span><br><span class="language-xml">            size=&#123;size&#125;</span><br><span class="language-xml">          /&gt;</span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;textStyle&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;maxRating === messages.length</span><br><span class="language-xml">          ? messages[tempRating ? tempRating - 1 : rating - 1]</span><br><span class="language-xml">          : tempRating || rating || &quot;&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">&#123; onRate, full, onHoverIn, onHoverOut, color, size &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> starStyle = &#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;size / <span class="hljs-number">1.5</span>&#125;</span>px`</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;size / <span class="hljs-number">1.5</span>&#125;</span>px`</span>,<br>    <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;block&quot;</span>,<br>    <span class="hljs-attr">cursor</span>: <span class="hljs-string">&quot;pointer&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;starStyle&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onRate&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onMouseEnter</span>=<span class="hljs-string">&#123;onHoverIn&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onMouseLeave</span>=<span class="hljs-string">&#123;onHoverOut&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;full ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 20 20&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">fill</span>=<span class="hljs-string">&#123;color&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#123;color&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;none&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#123;color&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">path</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">strokeLinecap</span>=<span class="hljs-string">&quot;round&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">strokeLinejoin</span>=<span class="hljs-string">&quot;round&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">strokeWidth</span>=<span class="hljs-string">&quot;&#123;2&#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（3）可折叠会话（可重用小组件）"><a href="#（3）可折叠会话（可重用小组件）" class="headerlink" title="（3）可折叠会话（可重用小组件）"></a>（3）可折叠会话（可重用小组件）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-comment">//import &quot;./index.css&quot;;</span><br><span class="hljs-comment">//import App from &quot;./App&quot;;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">StarRating</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./StarRating&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./style.css&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Text</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StarRating</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;blue&quot;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span> */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">StarRating</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">maxRating</span>=<span class="hljs-string">&#123;5&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">messages</span>=<span class="hljs-string">&#123;[</span>&quot;<span class="hljs-attr">Terrible</span>&quot;, &quot;<span class="hljs-attr">Bad</span>&quot;, &quot;<span class="hljs-attr">Okay</span>&quot;, &quot;<span class="hljs-attr">Good</span>&quot;, &quot;<span class="hljs-attr">Amazing</span>&quot;]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">StarRating</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;35&#125;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">defaultRating</span>=<span class="hljs-string">&#123;3&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TextExpander</span>&gt;</span></span><br><span class="language-xml">      Space travel is the ultimate adventure! Imagine soaring past the stars and</span><br><span class="language-xml">      exploring new worlds. It&#x27;s the stuff of dreams and science fiction, but</span><br><span class="language-xml">      believe it or not, space travel is a real thing. Humans and robots are</span><br><span class="language-xml">      constantly venturing out into the cosmos to uncover its secrets and push</span><br><span class="language-xml">      the boundaries of what&#x27;s possible.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TextExpander</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TextExpander</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">collapsedNumWords</span>=<span class="hljs-string">&#123;20&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">expandButtonText</span>=<span class="hljs-string">&quot;Show text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">collapseButtonText</span>=<span class="hljs-string">&quot;Collapse text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">buttonColor</span>=<span class="hljs-string">&quot;#ff6622&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      Space travel requires some seriously amazing technology and collaboration</span><br><span class="language-xml">      between countries, private companies, and international space</span><br><span class="language-xml">      organizations. And while it&#x27;s not always easy (or cheap), the results are</span><br><span class="language-xml">      out of this world. Think about the first time humans stepped foot on the</span><br><span class="language-xml">      moon or when rovers were sent to roam around on Mars.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TextExpander</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TextExpander</span> <span class="hljs-attr">expanded</span>=<span class="hljs-string">&#123;true&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">      Space missions have given us incredible insights into our universe and</span><br><span class="language-xml">      have inspired future generations to keep reaching for the stars. Space</span><br><span class="language-xml">      travel is a pretty cool thing to think about. Who knows what we&#x27;ll</span><br><span class="language-xml">      discover next!</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TextExpander</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TextExpander</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  collapsedNumWords = <span class="hljs-number">10</span>,</span><br><span class="hljs-params">  expandButtonText = <span class="hljs-string">&quot;show more&quot;</span>,</span><br><span class="hljs-params">  collapseButtonText = <span class="hljs-string">&quot;show less&quot;</span>,</span><br><span class="hljs-params">  buttonColor = <span class="hljs-string">&quot;red&quot;</span>,</span><br><span class="hljs-params">  expanded = <span class="hljs-literal">false</span>,</span><br><span class="hljs-params">  className,</span><br><span class="hljs-params">  children,</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isExpanded, setIsExpanded] = <span class="hljs-title function_">useState</span>(expanded);<br>  <span class="hljs-keyword">const</span> displayText = isExpanded<br>    ? children<br>    : children.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, collapsedNumWords).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>) + <span class="hljs-string">&quot;...&quot;</span>;<br><br>  <span class="hljs-keyword">const</span> buttonStyle = &#123;<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>    <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>    <span class="hljs-attr">font</span>: <span class="hljs-string">&quot;inherit&quot;</span>,<br>    <span class="hljs-attr">cursor</span>: <span class="hljs-string">&quot;pointer&quot;</span>,<br>    <span class="hljs-attr">marginLeft</span>: <span class="hljs-string">&quot;6px&quot;</span>,<br>    <span class="hljs-attr">color</span>: buttonColor,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;displayText&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsExpanded((exp) =&gt; !exp)&#125; style=&#123;buttonStyle&#125;&gt;</span><br><span class="language-xml">        &#123;isExpanded ? collapseButtonText : expandButtonText&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程6-eat-n-split</title>
    <link href="/2024/08/16/react%E8%AF%BE%E7%A8%8B6-eat-n-split/"/>
    <url>/2024/08/16/react%E8%AF%BE%E7%A8%8B6-eat-n-split/</url>
    
    <content type="html"><![CDATA[<p>本节课构建的是一个小巧的账单小组件。</p><span id="more"></span><p>如图所示，一共可以被分为三个部分：朋友列表；添加朋友表；分账单表。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240819194647578.png" alt="image-20240819194647578"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="css"><a href="#css" class="headerlink" title="&#x3D;&gt;css"></a>&#x3D;&gt;css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--color-lightest</span>: <span class="hljs-number">#fff4e6</span>;<br>  <span class="hljs-attr">--color-light</span>: <span class="hljs-number">#ffe8cc</span>;<br>  <span class="hljs-attr">--color-medium</span>: <span class="hljs-number">#ffa94d</span>;<br>  <span class="hljs-attr">--color-dark</span>: <span class="hljs-number">#ff922b</span>;<br>&#125;<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>  <span class="hljs-attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="hljs-string">&quot;Segoe UI&quot;</span>, Roboto, Oxygen,<br>    Ubuntu, Cantarell, <span class="hljs-string">&quot;Open Sans&quot;</span>, <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, sans-serif;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#495057</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.app</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">66vh</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">34rem</span> <span class="hljs-number">44rem</span>;<br>  <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">align-items</span>: start;<br>&#125;<br><br><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#343a40</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.8rem</span> <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-dark);<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">0.4rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">4.8rem</span> <span class="hljs-number">1</span>fr auto;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">1.6rem</span>;<br><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.selected</span>,<br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-lightest);<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">grid-row</span>: span <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">grid-row</span>: span <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> &gt; <span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">float</span>: right;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.green</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#66a80f</span>;<br>&#125;<br><br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#e03131</span>;<br>&#125;<br><br><span class="hljs-selector-tag">form</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br><br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-lightest);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.form-add-friend</span> &#123;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1.5</span>fr;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br><span class="hljs-selector-class">.form-split-bill</span> &#123;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">12rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.2rem</span> <span class="hljs-number">4rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>&#125;<br><br><span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">::first-letter</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span>,<br>select &#123;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.7rem</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--color-light);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>,<br>select<span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--color-dark);<br>&#125;<br><br><span class="hljs-selector-tag">form</span> <span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.6rem</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-tag">form</span> <span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / -<span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.2rem</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">0.5px</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.6rem</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="js"><a href="#js" class="headerlink" title="&#x3D;&gt;js"></a>&#x3D;&gt;js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> initialFriends = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">118836</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Clark&quot;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&quot;https://i.pravatar.cc/48?u=118836&quot;</span>,<br>    <span class="hljs-attr">balance</span>: -<span class="hljs-number">7</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">933372</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Sarah&quot;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&quot;https://i.pravatar.cc/48?u=933372&quot;</span>,<br>    <span class="hljs-attr">balance</span>: <span class="hljs-number">20</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">499476</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Anthony&quot;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&quot;https://i.pravatar.cc/48?u=499476&quot;</span>,<br>    <span class="hljs-attr">balance</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; children, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [showAddFriend, setShowAddFriend] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [friends, setFriends] = <span class="hljs-title function_">useState</span>(initialFriends);<br>  <span class="hljs-keyword">const</span> [selectedFriend, setSelectFriend] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddFriend</span>(<span class="hljs-params">friend</span>) &#123;<br>    <span class="hljs-title function_">setFriends</span>(<span class="hljs-function">(<span class="hljs-params">friends</span>) =&gt;</span> [...friends, friend]);<br>    <span class="hljs-title function_">setShowAddFriend</span>(<span class="hljs-literal">false</span>);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSelection</span>(<span class="hljs-params">friend</span>) &#123;<br>    <span class="hljs-title function_">setSelectFriend</span>(<span class="hljs-function">(<span class="hljs-params">cur</span>) =&gt;</span> (cur?.<span class="hljs-property">id</span> === friend.<span class="hljs-property">id</span> ? <span class="hljs-literal">null</span> : friend));<br>    <span class="hljs-title function_">setShowAddFriend</span>(<span class="hljs-literal">false</span>);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSplitBill</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-title function_">setFriends</span>(<span class="hljs-function">(<span class="hljs-params">friends</span>) =&gt;</span><br>      friends.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">friend</span>) =&gt;</span><br>        friend.<span class="hljs-property">id</span> === selectedFriend.<span class="hljs-property">id</span><br>          ? &#123; ...friend, <span class="hljs-attr">balance</span>: friend.<span class="hljs-property">balance</span> + value &#125;<br>          : friend<br>      )<br>    );<br>    <span class="hljs-title function_">setSelectFriend</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">FriendList</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">friends</span>=<span class="hljs-string">&#123;friends&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onSelection</span>=<span class="hljs-string">&#123;handleSelection&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">selectedFriend</span>=<span class="hljs-string">&#123;selectedFriend&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        &#123;showAddFriend &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">FormAddFriend</span> <span class="hljs-attr">onAddFriends</span>=<span class="hljs-string">&#123;handleAddFriend&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShowAddFriend((e) =&gt; !e)&#125;&gt;</span><br><span class="language-xml">          &#123;showAddFriend ? &quot;Close&quot; : &quot;Add friend&quot;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;selectedFriend &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">FormSplitBill</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">selectedFriend</span>=<span class="hljs-string">&#123;selectedFriend&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onSplitBill</span>=<span class="hljs-string">&#123;handleSplitBill&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;selectedFriend.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FriendList</span>(<span class="hljs-params">&#123; friends, onSelection, selectedFriend &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;friends.map((friend) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Friend</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">friend</span>=<span class="hljs-string">&#123;friend&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;friend.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onSelection</span>=<span class="hljs-string">&#123;onSelection&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">selectedFriend</span>=<span class="hljs-string">&#123;selectedFriend&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Friend</span>(<span class="hljs-params">&#123; friend, onSelection, selectedFriend &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> isSelected = selectedFriend?.<span class="hljs-property">id</span> === friend.<span class="hljs-property">id</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;isSelected</span> ? &quot;<span class="hljs-attr">selected</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;friend.image&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;friend.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;friend.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;friend.balance &lt; 0 &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span></span><br><span class="language-xml">          You owe &#123;friend.name&#125; &#123;Math.abs(friend.balance)&#125;$</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      &#123;friend.balance &gt; 0 &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;friend.name&#125; owes you &#123;friend.balance&#125;$</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      &#123;friend.balance === 0 &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You and your friend are even<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onSelection(friend)&#125;&gt;</span><br><span class="language-xml">        &#123;isSelected ? &quot;Close&quot; : &quot;Select&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FormAddFriend</span>(<span class="hljs-params">&#123; onAddFriends &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [image, setImage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;https://i.pravatar.cc/48&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-keyword">if</span> (!name || !image) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">const</span> id = crypto.<span class="hljs-title function_">randomUUID</span>();<br><br>    <span class="hljs-keyword">const</span> newFriend = &#123;<br>      id,<br>      name,<br>      <span class="hljs-attr">image</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;image&#125;</span>?=<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>      <span class="hljs-attr">balance</span>: <span class="hljs-number">0</span>,<br>    &#125;;<br><br>    <span class="hljs-title function_">onAddFriends</span>(newFriend);<br><br>    <span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-title function_">setImage</span>(<span class="hljs-string">&quot;https://i.pravatar.cc/48&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form-add-friend&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>👧🏻Friend name<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>🧣Image URL<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;image&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setImage(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FormSplitBill</span>(<span class="hljs-params">&#123; selectedFriend, onSplitBill &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [bill, setBill] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [paidByUser, setPaidByUser] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> paidByFriend = bill ? bill - paidByUser : <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">const</span> [whoIsPaying, setWhoIsPaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;user&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-keyword">if</span> (!bill || !paidByUser) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-title function_">onSplitBill</span>(whoIsPaying === <span class="hljs-string">&quot;user&quot;</span> ? paidByFriend : -paidByUser);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form-split-bill&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Split a Bill With &#123;selectedFriend.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>💜Bill Value<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;bill&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setBill(Number(e.target.value))&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>🔆Your expense<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;paidByUser&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setPaidByUser(Number(e.target.value))&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>☀️&#123;selectedFriend.name&#125;&#x27;s expense<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;paidByFriend&#125;</span> <span class="hljs-attr">disabled</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>🛎️Who<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;whoIsPaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setWhoIsPaying(e.target.value)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>You<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;friend&quot;</span>&gt;</span>&#123;selectedFriend.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Split bill<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程5-TravelList</title>
    <link href="/2024/08/16/react%E8%AF%BE%E7%A8%8B5-TravelList/"/>
    <url>/2024/08/16/react%E8%AF%BE%E7%A8%8B5-TravelList/</url>
    
    <content type="html"><![CDATA[<p>本节课建立了一个旅游需带物品清单App，在构建的时候，第一步是分析组件，第二步是构建静态网页，然后才是开始实现动态功能。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240816205602381.png" alt="image-20240816205602381"></p><h3 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h3><p>（1）index.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Monoton&amp;family=Quicksand:wght@500;700&amp;display=swap&quot;</span>);<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">font-family</span>: sans-serif;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#367031</span>;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Quicksand&quot;</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>&#125;<br><br><span class="hljs-selector-class">.app</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-rows</span>: auto auto <span class="hljs-number">1</span>fr auto;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9ad0c4</span>;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Monoton&quot;</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">8rem</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>  <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2.4rem</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.add-form</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#74b8b1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2.8rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">0.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">button</span>,<br>select,<br><span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d1d8c8</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#295c59</span>;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span> <span class="hljs-number">3.2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.add-form</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#8cd3bc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#8eb1ce</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#e1ce98</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4rem</span> <span class="hljs-number">0</span>;<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">3.2rem</span>;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.actions</span> <span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-class">.list</span> select &#123;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.8rem</span> <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br>  <span class="hljs-attribute">overflow</span>: scroll;<br><br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">250px</span>, <span class="hljs-number">1</span>fr));<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-content</span>: start;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;checkbox&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2rem</span>;<br>  accent-<span class="hljs-attribute">color</span>: <span class="hljs-number">#e5771f</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">background</span>: none;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.8rem</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">2px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.stats</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9ad0c4</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.2rem</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（2）App.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Logo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Logo&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Form</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Form&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PackingList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./PackingList&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Stats</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Stats&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddItems</span>(<span class="hljs-params">item</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(<span class="hljs-function">(<span class="hljs-params">items</span>) =&gt;</span> [...items, item]);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteItems</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(<span class="hljs-function">(<span class="hljs-params">items</span>) =&gt;</span> items.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> !== id));<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleItem</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(<span class="hljs-function">(<span class="hljs-params">items</span>) =&gt;</span><br>      items.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>        item.<span class="hljs-property">id</span> === id ? &#123; ...item, <span class="hljs-attr">packed</span>: !item.<span class="hljs-property">packed</span> &#125; : item<br>      )<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClearItems</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> confirmed = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">confirm</span>(<br>      <span class="hljs-string">&quot;Are you sure you want to delete all items?&quot;</span><br>    );<br><br>    <span class="hljs-keyword">if</span> (confirmed) <span class="hljs-title function_">setItems</span>([]);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">onAddItems</span>=<span class="hljs-string">&#123;handleAddItems&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">PackingList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">items</span>=<span class="hljs-string">&#123;items&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteItem</span>=<span class="hljs-string">&#123;handleDeleteItems&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggleItem</span>=<span class="hljs-string">&#123;handleToggleItem&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClearItems</span>=<span class="hljs-string">&#123;handleClearItems&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Stats</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&#123;items&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（3）Form.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params">&#123; onAddItems &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [description, setDescription] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [quantity, setQuantity] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">if</span> (!description) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">const</span> newItem = &#123; description, quantity, <span class="hljs-attr">packed</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">id</span>: <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() &#125;;<br><br>    <span class="hljs-title function_">onAddItems</span>(newItem);<br>    <span class="hljs-title function_">setDescription</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-title function_">setQuantity</span>(<span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;add-form&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>What do you need for your trip?<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;quantity&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setQuantity(Number(e.target.value))&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        &#123;Array.from(&#123; length: 20 &#125;, (_, i) =&gt; i + 1).map((num) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;num&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;num&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;num&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Item...&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;description&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setDescription(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（4）Item.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Item</span>(<span class="hljs-params">&#123; item, onDeleteItem, onToggleItem &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      &#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.packed&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onToggleItem(item.id)&#125;</span><br><span class="language-xml">      /&gt;&#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;item.packed</span> ? &#123; <span class="hljs-attr">textDecoration:</span> &quot;<span class="hljs-attr">line-through</span>&quot; &#125; <span class="hljs-attr">:</span> &#123;&#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;&quot; &quot;&#125;</span><br><span class="language-xml">        &#123;item.quantity&#125;🐶&#123;item.description&#125;&#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onDeleteItem(item.id)&#125;&gt;❌<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#123;&quot; &quot;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（5）PackingList.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Item&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">PackingList</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  items,</span><br><span class="hljs-params">  onDeleteItem,</span><br><span class="hljs-params">  onToggleItem,</span><br><span class="hljs-params">  onClearItems,</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [sortBy, setSortBy] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;input&quot;</span>);<br><br>  <span class="hljs-keyword">let</span> sortedItems;<br><br>  <span class="hljs-keyword">if</span> (sortBy === <span class="hljs-string">&quot;input&quot;</span>) sortedItems = items;<br>  <span class="hljs-keyword">if</span> (sortBy === <span class="hljs-string">&quot;description&quot;</span>)<br>    sortedItems = items<br>      .<span class="hljs-title function_">slice</span>()<br>      .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.<span class="hljs-property">description</span>.<span class="hljs-title function_">localeCompare</span>(b.<span class="hljs-property">description</span>));<br>  <span class="hljs-keyword">if</span> (sortBy === <span class="hljs-string">&quot;packed&quot;</span>)<br>    sortedItems = items<br>      .<span class="hljs-title function_">slice</span>()<br>      .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> <span class="hljs-title class_">Number</span>(a.<span class="hljs-property">packed</span>) - <span class="hljs-title class_">Number</span>(b.<span class="hljs-property">packed</span>));<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;sortedItems.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Item</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">item</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onDeleteItem</span>=<span class="hljs-string">&#123;onDeleteItem&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onToggleItem</span>=<span class="hljs-string">&#123;onToggleItem&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;actions&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;sortBy&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setSortBy(e.target.value)&#125;&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span>sort by input order<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span>sort by description<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;packed&quot;</span>&gt;</span>sort by packed<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClearItems&#125;</span>&gt;</span>Clear List<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（6）Stats.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Stats</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!items.<span class="hljs-property">length</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;stats&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Start adding some items to your packing list!<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    );<br>  <span class="hljs-keyword">const</span> numItems = items.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> numPacked = items.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">packed</span>).<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> percentage = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>((numPacked / numItems) * <span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;stats&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span></span><br><span class="language-xml">        &#123;percentage === 100</span><br><span class="language-xml">          ? &quot;You got everything!Ready to go!&quot;</span><br><span class="language-xml">          : `You have $&#123;numItems&#125; items on your list,and you already packed </span><br><span class="language-xml">          $&#123;numPacked&#125; ($&#123;percentage&#125;%)`&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（7）Logo.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Logo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>🏞️Trip List🏜️<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程4-compoment</title>
    <link href="/2024/08/13/react%E8%AF%BE%E7%A8%8B4-compoment/"/>
    <url>/2024/08/13/react%E8%AF%BE%E7%A8%8B4-compoment/</url>
    
    <content type="html"><![CDATA[<p>这次课程创建了一个小组件，</p><span id="more"></span><p>下载了dev tools</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240813195809998.png" alt="image-20240813195809998" style="zoom:33%;" /><h2 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h2><h4 id="（1）App-js"><a href="#（1）App-js" class="headerlink" title="（1）App.js"></a>（1）App.js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> messages = [<br>  <span class="hljs-string">&quot;Learn React ⚛️&quot;</span>,<br>  <span class="hljs-string">&quot;Apply for jobs 💼&quot;</span>,<br>  <span class="hljs-string">&quot;Invest your new income 🤑&quot;</span>,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [step, setStep] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> [isOpen, setIsOpen] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePrevious</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (step &gt; <span class="hljs-number">1</span>) <span class="hljs-title function_">setStep</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> s - <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNext</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (step &lt; <span class="hljs-number">3</span>) <span class="hljs-title function_">setStep</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> s + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpen((is) =&gt; !is)&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-symbol">&amp;times;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isOpen &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;steps&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;numbers&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">step</span> &gt;</span>= 1 ? &quot;active&quot; : &quot;&quot;&#125;`&#125;&gt;1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">step</span> &gt;</span>= 2 ? &quot;active&quot; : &quot;&quot;&#125;`&#125;&gt;2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">step</span> === <span class="hljs-string">3</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;`&#125;&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">StepMessage</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&#123;step&#125;</span>&gt;</span>&#123;messages[step - 1]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">StepMessage</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">bgColor</span>=<span class="hljs-string">&quot;#7950f2&quot;</span> <span class="hljs-attr">textColor</span>=<span class="hljs-string">&quot;#fff&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handlePrevious&#125;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>👈<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>Previous</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">bgColor</span>=<span class="hljs-string">&quot;#7950f2&quot;</span> <span class="hljs-attr">textColor</span>=<span class="hljs-string">&quot;#fff&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleNext&#125;</span>&gt;</span></span><br><span class="language-xml">              Next<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>👉<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">StepMessage</span>(<span class="hljs-params">&#123; step, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Step &#123;step&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; textColor, bgColor, onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">bgColor</span>, <span class="hljs-attr">color:</span> <span class="hljs-attr">textColor</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（2）index-css"><a href="#（2）index-css" class="headerlink" title="（2）index.css"></a>（2）index.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: sans-serif;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-class">.steps</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f7f7</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.numbers</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.numbers</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>  aspect-ratio: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e7e7e7</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.numbers</span> <span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7950f2</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.message</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.buttons</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.buttons</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.buttons</span> <span class="hljs-selector-tag">button</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>&#125;<br><br><span class="hljs-selector-class">.close</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">background</span>: none;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">color</span>: inherit;<br>&#125;<br><br><span class="hljs-selector-class">.close</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#7950f2</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二、重点回顾"><a href="#二、重点回顾" class="headerlink" title="二、重点回顾"></a>二、重点回顾</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240816203708314.png" alt="image-20240816203708314"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240816203858922.png" alt="image-20240816203858922"></p><p>状态的应用（非常之重要）</p><p>回调函数</p><p>html表单：onSubmit（按下Enter键也可以提交）与onClick监听事件的不同</p><p>受控元素</p><p>onClick（）监控</p><p>状态提升（到最近公共祖先）</p><p>重用组件、children传递</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程3-pizza_menu</title>
    <link href="/2024/08/13/react%E8%AF%BE%E7%A8%8B3-pizza_menu/"/>
    <url>/2024/08/13/react%E8%AF%BE%E7%A8%8B3-pizza_menu/</url>
    
    <content type="html"><![CDATA[<p>记录做出的pizza menu项目，总结一下react 内容。</p><span id="more"></span><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><h4 id="（1）组件树"><a href="#（1）组件树" class="headerlink" title="（1）组件树"></a>（1）组件树</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240813151436338.png" alt="image-20240813151436338" style="zoom: 33%;" /><h4 id="（2）JSX与HTML"><a href="#（2）JSX与HTML" class="headerlink" title="（2）JSX与HTML"></a>（2）JSX与HTML</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240813151557741.png" alt="image-20240813151557741"></p><h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><h4 id="（1）index-css"><a href="#（1）index-css" class="headerlink" title="（1）index.css"></a>（1）index.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,300;0,400;0,500;1,300&amp;display=swap&quot;</span>);<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Roboto Mono&quot;</span>, sans-serif;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#252525</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f2e9</span>;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1.6rem</span> solid <span class="hljs-number">#edc84b</span>;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.2rem</span>;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">6rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">80rem</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">4.8rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* *************** */</span><br><br><span class="hljs-selector-class">.header</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: stretch;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-comment">/* Non-accessible color */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#edc84b</span>;<br>  <span class="hljs-comment">/* color: #af8602; */</span><br><br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">5.2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#edc84b</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">1px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* *************** */</span><br><br><span class="hljs-selector-class">.menu</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.menu</span> <span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">2px</span> solid currentColor;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid currentColor;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>&#125;<br><br><span class="hljs-selector-class">.menu</span> &gt; <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.6</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizzas</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">4.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">3.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">12rem</span>;<br>  aspect-ratio: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">align-self</span>: start;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">0.8rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.4rem</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>  <span class="hljs-attribute">font-style</span>: italic;<br>  <span class="hljs-attribute">margin-bottom</span>: auto;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span><span class="hljs-selector-class">.sold-out</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#888</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span><span class="hljs-selector-class">.sold-out</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>();<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>&#125;<br><br><span class="hljs-comment">/* *************** */</span><br><br><span class="hljs-selector-class">.footer</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.order</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">2.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span> &#123;<br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#edc84b</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.4rem</span> <span class="hljs-number">3.2rem</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.2s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e9bb24</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">SPACING SYSTEM (px)</span><br><span class="hljs-comment">2 / 4 / 8 / 12 / 16 / 24 / 32 / 40 / 48 / 64 / 80 / 96 / 128</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">FONT SIZE SYSTEM (px)</span><br><span class="hljs-comment">10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 /52 / 62 / 74 / 86 / 98</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h4 id="（2）index-js"><a href="#（2）index-js" class="headerlink" title="（2）index.js"></a>（2）index.js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><br><span class="hljs-keyword">const</span> pizzaData = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Focaccia&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Bread with italian olive oil and rosemary&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/focaccia.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Margherita&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato and mozarella&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/margherita.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Spinaci&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato, mozarella, spinach, and ricotta cheese&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/spinaci.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Funghi&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato, mozarella, mushrooms, and onion&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/funghi.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Salamino&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato, mozarella, and pepperoni&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">15</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/salamino.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Prosciutto&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato, mozarella, ham, aragula, and burrata cheese&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/prosciutto.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>];<br><span class="hljs-comment">//整个应用界面</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//const style = &#123; color: &quot;red&quot;, fontSize: &quot;48px&quot;, textTransform: &quot;uppercase&quot; &#125;;</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Fast React Pizza Co.<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> pizzas = pizzaData;<br>  <span class="hljs-comment">//const pizzas = [];</span><br>  <span class="hljs-keyword">const</span> numPizzas = pizzas.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Our menu<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;numPizzas &gt; 0 ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            Authentic Italian cuisine.6 creative dishes to choose from. All  from our stone oven,all organic,all delicious.</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pizzas&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;pizzaData.map((pizza) =&gt; (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Pizza</span> <span class="hljs-attr">pizzaObj</span>=<span class="hljs-string">&#123;pizza&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;pizza.name&#125;</span> /&gt;</span></span><br><span class="language-xml">            ))&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>      ) : (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>we&#x27;re still work on our menu,please come back later :)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>      )&#125;<br>    &lt;/main&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Pizza</span>(<span class="hljs-params">&#123; pizzaObj &#125;</span>) &#123;<br>  <span class="hljs-comment">//if (pizzaObj.soldOut) return null;</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">pizza</span> $&#123;<span class="hljs-attr">pizzaObj.soldOut</span> ? &quot;<span class="hljs-attr">sold-out</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;`&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;pizzaObj.photoName&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;pizzaObj.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;pizzaObj.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;pizzaObj.ingredients&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;pizzaObj.soldOut ? &quot;SOLD OUT&quot; : pizzaObj.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Footer</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> hour = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getHours</span>();<br>  <span class="hljs-keyword">const</span> openHour = <span class="hljs-number">12</span>;<br>  <span class="hljs-keyword">const</span> closeHour = <span class="hljs-number">19</span>;<br>  <span class="hljs-keyword">const</span> isOpen = hour &gt;= openHour &amp;&amp; hour &lt;= closeHour;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;isOpen ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Order</span> <span class="hljs-attr">closeHour</span>=<span class="hljs-string">&#123;closeHour&#125;</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          we&#x27;re happy to welcome you between &#123;openHour&#125;:00 and &#123;closeHour&#125;:00</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Order</span> (props) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        we&#x27;re open until &#123;props.closeHour&#125;:00.Come visit us or order unline.</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>Order<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>);<br><span class="hljs-comment">/*strict : can check bug</span><br><span class="hljs-comment">root.render(</span><br><span class="hljs-comment">    &lt;React.StrictMode&gt;</span><br><span class="hljs-comment">        &lt;App /&gt;</span><br><span class="hljs-comment">    &lt;/React.StrictMode&gt;</span><br><span class="hljs-comment">);*/</span><br><br></code></pre></td></tr></table></figure><h3 id="三、Summary"><a href="#三、Summary" class="headerlink" title="三、Summary"></a>三、Summary</h3><p>（1）map</p><p>（2）？：</p><p>（3）fragment </p><p>（4）render</p><p>（5）destrcution and props</p><p>（6）条件展示css </p><p>（7）emoji网站：<a href="https://emojipedia.org/">https://emojipedia.org/</a></p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程2-kick off</title>
    <link href="/2024/08/11/react%E8%AF%BE%E7%A8%8B2-kick-off/"/>
    <url>/2024/08/11/react%E8%AF%BE%E7%A8%8B2-kick-off/</url>
    
    <content type="html"><![CDATA[<p>开始整合比较小的页面</p><span id="more"></span><p>最好不要嵌套函数声明</p><h3 id="一、Babel"><a href="#一、Babel" class="headerlink" title="一、Babel"></a>一、Babel</h3><p>Babel 是一个广泛使用的 JavaScript 编译器，主要用于将现代 JavaScript 代码（ES6+）转换为与旧浏览器兼容的代码。它能够将新版本的 JavaScript 语法和特性编译为更旧版本，从而确保代码可以在不支持这些新特性的环境中运行。</p><p>Babel 的主要功能包括：</p><ol><li><strong>语法转换</strong>：将现代 JavaScript 语法（如箭头函数、类、模板字符串等）转换为较旧的等效代码。</li><li><strong>插件系统</strong>：Babel 提供了一个强大的插件系统，用户可以根据需要定制 Babel 的行为，例如添加支持 TypeScript、React JSX 等。</li><li><strong>Polyfill</strong>：通过 <code>@babel/polyfill</code>，可以在旧浏览器中引入新 JavaScript 标准库功能（如 Promise、Map 等）。</li><li><strong>代码转换</strong>：Babel 还可以用于代码的其他转换，例如重命名变量、删除未使用的代码等。</li></ol><p>在 React 项目中，Babel 通常与 Webpack 一起使用，通过配置 Babel Loader 来处理 JavaScript 文件的转换，使得开发者可以使用最新的 JavaScript 特性进行开发，同时确保代码的兼容性。</p><h3 id="二、webpack"><a href="#二、webpack" class="headerlink" title="二、webpack"></a>二、webpack</h3><p>Webpack 是一个现代 JavaScript 应用的模块打包工具（bundler）。它的主要功能是将各种资源（JavaScript、CSS、图片等）作为模块进行打包，从而生成可以在浏览器中运行的文件。Webpack 的核心思想是把所有的项目资源都视为模块，无论是 JavaScript 代码、样式表还是图片等资源，最终打包成一个或多个输出文件，以便在浏览器中更高效地加载。</p><p>以下是 Webpack 的一些核心概念：</p><ol><li><strong>Entry（入口）</strong>：<ul><li>Webpack 从一个或多个入口文件开始构建依赖关系图，找出项目中所有的模块及其依赖关系。</li><li>默认入口文件是 <code>./src/index.js</code>，但可以通过 Webpack 配置文件 (<code>webpack.config.js</code>) 来指定。</li></ul></li><li><strong>Output（输出）</strong>：<ul><li>配置输出文件的名称和路径。打包后的文件通常命名为 <code>bundle.js</code>，但也可以自定义。</li><li>例如，将输出文件放在 <code>./dist</code> 目录下。</li></ul></li><li><strong>Loaders（加载器）</strong>：<ul><li>Loaders 用于转换不同类型的模块，如将 ES6+ 的 JavaScript 转换为兼容的 ES5，或者将 SCSS 文件编译为 CSS。</li><li>常用的加载器有 <code>babel-loader</code>（处理 JavaScript）、<code>css-loader</code>（处理 CSS）、<code>file-loader</code>（处理文件资源）等。</li></ul></li><li><strong>Plugins（插件）</strong>：<ul><li>插件用于执行复杂的任务，如优化打包文件的大小、生成 HTML 文件、提取 CSS 文件等。</li><li>常见的插件有 <code>HtmlWebpackPlugin</code>（生成 HTML 文件）、<code>MiniCssExtractPlugin</code>（提取 CSS 到单独文件）、<code>UglifyJsPlugin</code>（压缩 JavaScript 文件）等。</li></ul></li><li><strong>Mode（模式）</strong>：<ul><li>Webpack 提供了两种模式：<code>development</code> 和 <code>production</code>。</li><li><code>development</code> 模式适用于开发环境，具有更好的调试体验，代码不会被压缩。</li><li><code>production</code> 模式适用于生产环境，代码会被优化和压缩，以提高性能。</li></ul></li><li><strong>DevServer</strong>：<ul><li>Webpack DevServer 是一个开发服务器，它可以实时重新加载页面，提供热模块替换（Hot Module Replacement，HMR）功能，使开发过程更加高效。</li></ul></li></ol><p>在实际应用中，Webpack 通常与 Babel、Sass、PostCSS 等工具结合使用，以构建现代 Web 应用程序。通过配置 Webpack，你可以在开发过程中享受模块化开发的便利，同时确保最终生成的文件在性能和兼容性上达到最佳状态。</p><h3 id="三、React的分离特性"><a href="#三、React的分离特性" class="headerlink" title="三、React的分离特性"></a>三、React的分离特性</h3><p>React 框架的确与传统的分离式（HTML、CSS、JavaScript 分离）开发方式有所不同。在 React 中，开发者通常会将逻辑、结构和样式组合在一个组件内，使用 JavaScript 来创建用户界面。这种方法称为<strong>组件化开发</strong>，其核心理念是将 UI 拆分为独立、可复用的组件。</p><p>尽管 React 不再像传统方式那样严格分离 HTML、CSS、JS，但它依然在不同层次上体现了分离性：</p><ol><li><strong>组件分离</strong></li></ol><ul><li>React 强调将页面分解成多个独立的组件，每个组件只负责自己的功能和状态管理。这种分离方式使得代码更加模块化和可维护。</li><li>每个组件可以包含自己的结构（HTML）、样式（CSS）、逻辑（JS），并且可以独立开发、测试和复用。</li></ul><ol start="2"><li><strong>JSX 的语义分离</strong></li></ol><ul><li>在 React 中，JSX 允许开发者在 JavaScript 中编写类似 HTML 的语法。尽管看似混合了 HTML 和 JavaScript，但其实 JSX 只是 React 的语法糖，最终会被编译成纯 JavaScript。</li><li>通过 JSX，结构化的 UI 代码嵌入在 JavaScript 中，但仍然保持了逻辑和展示之间的清晰分离。代码语义化也得到了增强，因为 JSX 语法比传统的字符串拼接方式更直观。</li></ul><ol start="3"><li><strong>CSS-in-JS</strong></li></ol><ul><li>React 生态中有许多样式解决方案，比如 styled-components、emotion，它们允许在 JavaScript 文件中编写样式。这种方式使样式与组件逻辑紧密绑定，避免了传统全局 CSS 带来的样式冲突问题。</li><li>CSS-in-JS 提供了样式的局部作用域（scoped styling），从而实现了样式的隔离和组件化管理。</li></ul><ol start="4"><li><strong>Context 和 Hooks 的逻辑分离</strong></li></ol><ul><li>React 提供了 Context 和 Hooks，使得状态管理和业务逻辑可以与 UI 组件分离。例如，使用 <code>useContext</code> 和 <code>useReducer</code> 等 Hook，可以将全局状态逻辑与具体组件解耦，从而提高代码的可读性和复用性。</li><li>通过自定义 Hooks，开发者可以将可复用的逻辑抽取出来，并在多个组件中共享，而不需要重复代码。</li></ul><ol start="5"><li><strong>CSS Modules</strong></li></ol><ul><li>CSS Modules 是 React 中另一种常用的样式解决方案，它允许开发者将样式分离成各个模块，并自动为每个模块生成唯一的类名，以避免样式冲突。</li><li>使用 CSS Modules 时，样式文件仍然可以保持与组件分离，同时确保了样式的作用范围只限于当前组件。</li></ul><ol start="6"><li><strong>文件结构的分离</strong></li></ol><ul><li>虽然 React 鼓励在组件内部进行组合，但开发者依然可以根据项目需求将组件、样式和逻辑代码分布在不同的文件中。</li><li>例如，可以有一个 <code>components</code> 文件夹来存放组件，一个 <code>styles</code> 文件夹来存放样式文件，一个 <code>services</code> 文件夹来处理业务逻辑和 API 请求。</li></ul><p>React 中的“分离性”更多地体现在逻辑层次的分离，而非文件层次的分离。通过组件化开发、JSX、CSS-in-JS、Context、Hooks 等机制，React 保持了代码的模块化和可维护性，即使结构、样式和逻辑被合并在一起。这种方式更适合现代前端开发的需求，提供了更好的代码组织方式和开发体验。</p><h3 id="四、重用组件的代码实例"><a href="#四、重用组件的代码实例" class="headerlink" title="四、重用组件的代码实例"></a>四、重用组件的代码实例</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Our menu<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pizza&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Pizza</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Pizza Spinaci&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">ingredients</span>=<span class="hljs-string">&quot;Tomato, mozarella, spinach, and ricotta cheese&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">photoName</span>=<span class="hljs-string">&quot;pizzas\spinaci.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">price</span>=<span class="hljs-string">&#123;10&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Pizza</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Pizza Funghi&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">ingredients</span>=<span class="hljs-string">&quot;Tomato, mozarella, mushrooms, and onion&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">price</span>=<span class="hljs-string">&#123;12&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">photoName</span>=<span class="hljs-string">&quot;pizzas/funghi.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Pizza</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;props.photoName&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;props.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.ingredients&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;props.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程1-preparing</title>
    <link href="/2024/08/08/react%E8%AF%BE%E7%A8%8B1-preparing/"/>
    <url>/2024/08/08/react%E8%AF%BE%E7%A8%8B1-preparing/</url>
    
    <content type="html"><![CDATA[<p>处理数据+在用户界面展示数据——&gt;<strong>用户界面(user interface)与数据同步</strong></p><span id="more"></span><h3 id="一、react简介"><a href="#一、react简介" class="headerlink" title="一、react简介"></a>一、react简介</h3><p>处理数据+在用户界面展示数据——&gt;用户界面(user interface)与数据同步</p><p>react基本上是关于component的，它的基本任务就是<strong>获取组件的当前状态并将它们绘制在web界面上</strong>。另外一件对组件做的事情就是：<strong>重用</strong>（）。以及<strong>组件嵌套</strong>。</p><p>远离DOM的纯净的JS。——&gt;JXS</p><p>如何很好地响应变化？：<strong>state</strong></p><p>react实际上是一个库。</p><p>建立在react上的框架：Next.js和Remix</p><p>迄今为止最受欢迎的框架：1、许多大型公司很久之前就已经开始使用react；2、拥有巨大的就业市场和很高的需求；3、拥有许多专业社区为开发人员提供支持</p><p>最初是起源于社交软件。</p><h3 id="二、Node-JS"><a href="#二、Node-JS" class="headerlink" title="二、Node.JS"></a>二、Node.JS</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境。它使得 JavaScript 不仅可以在浏览器中运行，还可以在服务器端运行。简单来说，Node.js 让你能够使用 JavaScript 编写服务器端应用程序。以下是 Node.js 的主要用途和特点：</p><ol><li><strong>服务器端编程</strong></li></ol><ul><li>使用 Node.js 可以编写服务器端代码，这意味着你可以用 JavaScript 创建后台服务、处理请求和响应、管理数据库等。Node.js 常用于构建 RESTful API、Web 应用程序、实时聊天应用等。</li></ul><ol start="2"><li><strong>事件驱动与非阻塞 I&#x2F;O</strong></li></ol><ul><li>Node.js 的最大特点之一是其事件驱动和非阻塞 I&#x2F;O 模型。这使得它非常适合处理高并发的请求，比如需要同时处理大量连接的服务器。因为它是非阻塞的，所以即使有大量请求同时到来，Node.js 也不会因为某个请求在等待数据而阻塞其他请求。</li></ul><ol start="3"><li><strong>全栈开发</strong></li></ol><ul><li>由于 Node.js 使用 JavaScript 语言，前端开发人员可以在掌握 JavaScript 的基础上，无缝地过渡到后端开发，实现全栈开发。比如使用 Express 框架可以很方便地创建和管理后端服务。</li></ul><ol start="4"><li><strong>丰富的包生态系统</strong></li></ol><ul><li>Node.js 具有一个庞大的包管理系统，即 npm（Node Package Manager）。通过 npm，开发者可以访问数十万计的开源包和模块，大大简化了开发过程。例如，使用 <code>express</code> 可以快速搭建 web 服务器，使用 <code>mongoose</code> 可以轻松操作 MongoDB 数据库。</li></ul><ol start="5"><li><strong>跨平台</strong></li></ol><ul><li>Node.js 是跨平台的，可以在 Windows、Linux、macOS 等操作系统上运行，这使得它成为了一个非常灵活的开发工具。</li></ul><ol start="6"><li><strong>实时应用</strong></li></ol><ul><li>Node.js 非常适合开发实时应用程序，比如聊天室、在线游戏、协同工具等，因为它能处理大量的并发连接并且响应速度非常快。</li></ul><ol start="7"><li><strong>开发工具和构建工具</strong></li></ol><ul><li>Node.js 也被广泛用于开发工具的构建，如 webpack、gulp 等，帮助前端开发者进行项目的打包、构建、测试和部署。</li></ul><p><strong>举例应用场景：</strong></p><ul><li><strong>Web 服务器</strong>：使用 Express.js 创建的 Web 应用。</li><li><strong>API 服务</strong>：RESTful API，用于与数据库交互并提供数据服务。</li><li><strong>实时应用</strong>：聊天应用、协同编辑工具（如 Google Docs）。</li><li><strong>开发工具</strong>：前端打包工具（如 Webpack）、任务运行器（如 Gulp）。</li></ul><p>总之，Node.js 是一个强大的工具，适合需要高并发处理和实时交互的应用场景，尤其是在 Web 开发领域有着广泛的应用。</p><h3 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h3><p>（1）安装 VS code的依赖：</p><p>1、ESlint（发现bug）</p><p>2、Prettier（自动格式化代码使其更美观）</p><p>3、One Monokai Theme</p><p>4、material icon Theme</p><p>（2）设置</p><p>auto save调整为  onFocusChange</p><p>default Formatter调整为Prettier</p><p>Format on save打开</p><p>eslint run改为on save</p><p>（3）快捷键</p><p>1、新建一个空的HTML文件时，输入！点击Enter就会构建出一个空的HTML结构</p><p>2、rfc+Enter，创建一个空的组件函数结构</p><p>（4）安装好npm 以及npm依赖，下载react-start-app@5来创建项目，<strong>npm start</strong>来运行项目</p><p>3、Alt+shift+O，清理未使用的import</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发课程4--贪吃蛇小游戏</title>
    <link href="/2024/08/07/2024-08-07-web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B4--%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/08/07/2024-08-07-web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B4--%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>网页端的贪吃蛇小游戏，支持定制，目前功能尚少</p><span id="more"></span><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Snake<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snake.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;input.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;food.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snakeUtils.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;game.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;game-board&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;game-start&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Start Game<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;start-button&quot;</span>&gt;</span>Start<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;game-over&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Game Over<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;restart-button&quot;</span>&gt;</span>Restart<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* No need to edit this file! */</span><br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-color</span>: gray;<br>&#125;<br><br><span class="hljs-selector-id">#game-board</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: black;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vmin</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vmin</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">21</span>, <span class="hljs-number">1</span>fr);<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">21</span>, <span class="hljs-number">1</span>fr);<br>&#125;<br><br><span class="hljs-comment">/* .snake &#123;</span><br><span class="hljs-comment">  background-color: rgb(58, 90, 160);</span><br><span class="hljs-comment">  border: 0.25vmin solid rgb(78, 66, 126);</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.snake</span>&#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;IMG_20240731_162343.jpg&#x27;</span>); <span class="hljs-comment">/* 替换为你的蛇头图片路径 */</span><br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">4.76vmin</span> <span class="hljs-number">4.76vmin</span>; <span class="hljs-comment">/* 设置图片的大小，使其适应像素块 */</span><br>  <span class="hljs-attribute">background-position</span>: center; <span class="hljs-comment">/* 图片居中对齐 */</span><br>&#125;<br><br><span class="hljs-comment">/* .food &#123;</span><br><span class="hljs-comment">  background-color: rgb(182, 111, 139);</span><br><span class="hljs-comment">  border: 0.25vmin solid gray;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.food</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;th.jpg&#x27;</span>); <span class="hljs-comment">/* 替换为你的蛇头图片路径 */</span><br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">4.76vmin</span> <span class="hljs-number">4.76vmin</span>; <span class="hljs-comment">/* 设置图片的大小，使其适应像素块 */</span><br>&#125;<br><br><span class="hljs-selector-id">#game-start</span>, <span class="hljs-selector-id">#game-over</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>); <span class="hljs-comment">/* 添加半透明背景 */</span><br>  <span class="hljs-attribute">color</span>: white; <span class="hljs-comment">/* 文字颜色 */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000</span>; <span class="hljs-comment">/* 确保它们在其他内容上面 */</span><br>&#125;<br><br><span class="hljs-selector-id">#game-start</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-id">#game-over</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-comment">/* display: flex; */</span><br>&#125;<br><br><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="game-js"><a href="#game-js" class="headerlink" title="game.js"></a>game.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SNAKE_SPEED</span> = <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">const</span> gameBoard = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;game-board&#x27;</span>);<br><span class="hljs-keyword">const</span> gameStartOverlay = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;game-start&#x27;</span>);<br><span class="hljs-keyword">const</span> gameOverOverlay = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;game-over&#x27;</span>);<br><br><span class="hljs-keyword">let</span> isGameRunning = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">let</span> gameInterval;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">init</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;start-button&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, startGame);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;restart-button&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, restartGame);<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = init;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">main</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!isGameRunning) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-title function_">update</span>();<br>  <span class="hljs-title function_">draw</span>();<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkGameOver</span>()) &#123;<br>    <span class="hljs-title function_">gameOver</span>();<br>  &#125;<br>  <span class="hljs-comment">// TODO 4.3, 4.4: Add Game Over Alert, and clear interval!</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">startGame</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Starting game...&#x27;</span>);<br>  isGameRunning = <span class="hljs-literal">true</span>;<br>  gameStartOverlay.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏游戏开始界面</span><br>  gameOverOverlay.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏游戏结束界面</span><br>  gameBoard.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 清空游戏板</span><br>  <span class="hljs-title function_">resetGame</span>(); <span class="hljs-comment">// 重置游戏状态</span><br>  <span class="hljs-keyword">if</span> (gameInterval) <span class="hljs-built_in">clearInterval</span>(gameInterval); <span class="hljs-comment">// 清除之前的定时器</span><br>  gameInterval = <span class="hljs-built_in">setInterval</span>(main, <span class="hljs-number">1000</span> / <span class="hljs-variable constant_">SNAKE_SPEED</span>); <span class="hljs-comment">// 启动新的游戏循环</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">restartGame</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Restarting game...&#x27;</span>);<br>  isGameRunning = <span class="hljs-literal">true</span>;<br>  gameOverOverlay.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏游戏结束界面</span><br>  gameBoard.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 清空游戏板</span><br>  <span class="hljs-title function_">resetGame</span>(); <span class="hljs-comment">// 重置游戏状态</span><br>  <span class="hljs-keyword">if</span> (gameInterval) <span class="hljs-built_in">clearInterval</span>(gameInterval); <span class="hljs-comment">// 清除之前的定时器</span><br>  gameInterval = <span class="hljs-built_in">setInterval</span>(main, <span class="hljs-number">1000</span> / <span class="hljs-variable constant_">SNAKE_SPEED</span>); <span class="hljs-comment">// 启动新的游戏循环</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">gameOver</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Game Over&#x27;</span>); <br>  isGameRunning = <span class="hljs-literal">false</span>;<br>  <span class="hljs-built_in">clearInterval</span>(gameInterval); <span class="hljs-comment">// 停止游戏循环</span><br>  gameOverOverlay.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>; <span class="hljs-comment">// 显示游戏结束界面</span><br>&#125;;<br><span class="hljs-comment">// TODO 4.4: Define the interval ID</span><br><span class="hljs-comment">// HINT: ONLY EDIT THE LINE BELOW!</span><br><span class="hljs-comment">//setInterval(main, 1000 / SNAKE_SPEED);</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">update</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Updating&#x27;</span>);<br>  <span class="hljs-title function_">updateSnake</span>();<br>  <span class="hljs-title function_">updateFood</span>();<br>  <span class="hljs-comment">// TODO 4.2: Update Game State</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">draw</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  gameBoard.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-title function_">drawSnake</span>(gameBoard);<br>  <span class="hljs-title function_">drawFood</span>(gameBoard);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">checkGameOver</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">snakeOutOfBounds</span>() || <span class="hljs-title function_">snakeIntersectSelf</span>(); <span class="hljs-comment">// 检查游戏结束条件</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resetGame</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 重置蛇的位置</span><br>  snakeBody = [<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">11</span> &#125;,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">10</span> &#125;,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">9</span> &#125;<br>  ];<br>  <br>  <span class="hljs-comment">// 重置食物的位置</span><br>  food = <span class="hljs-title function_">getNewFoodPosition</span>();<br>  <br>  <span class="hljs-comment">// 可以添加其他初始化逻辑</span><br>&#125;;<br><br><br><span class="hljs-comment">// TODO 4.1: Create a function that checks if the game is over</span><br><br></code></pre></td></tr></table></figure><h4 id="food-js"><a href="#food-js" class="headerlink" title="food.js"></a>food.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> food = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">16</span> &#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateFood</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">onSnake</span>(food)) &#123;<br>    <span class="hljs-title function_">growSnake</span>();<br>    food = <span class="hljs-title function_">getNewFoodPosition</span>();<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// Don&#x27;t change me!</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">drawFood</span> = (<span class="hljs-params">gameBoard</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> foodElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>  foodElement.<span class="hljs-property">style</span>.<span class="hljs-property">gridRowStart</span> = food.<span class="hljs-property">y</span>;<br>  foodElement.<span class="hljs-property">style</span>.<span class="hljs-property">gridColumnStart</span> = food.<span class="hljs-property">x</span>;<br>  foodElement.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;food&#x27;</span>);<br>  gameBoard.<span class="hljs-title function_">appendChild</span>(foodElement);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="snake-js"><a href="#snake-js" class="headerlink" title="snake.js"></a>snake.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> snakeBody = [<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">11</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">10</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">9</span> &#125;,<br>];<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateSnake</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// Remove tail segment</span><br>  snakeBody.<span class="hljs-title function_">pop</span>();<br><br>  <span class="hljs-comment">// Add new head segment</span><br>  <span class="hljs-keyword">const</span> newHead = &#123; ...snakeBody[<span class="hljs-number">0</span>] &#125;;<br>  <span class="hljs-keyword">const</span> snakeDirection = <span class="hljs-title function_">getInputDirection</span>();<br><br>  newHead.<span class="hljs-property">x</span> += snakeDirection.<span class="hljs-property">x</span>;<br>  newHead.<span class="hljs-property">y</span> += snakeDirection.<span class="hljs-property">y</span>;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">outOfBounds</span>(newHead)) &#123;<br>    <span class="hljs-title function_">gameOver</span>(); <span class="hljs-comment">// 处理游戏结束逻辑</span><br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  snakeBody.<span class="hljs-title function_">unshift</span>(newHead);<br>&#125;;<br><br><span class="hljs-comment">// Don&#x27;t change this function!</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">drawSnake</span> = (<span class="hljs-params">gameBoard</span>) =&gt; &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; snakeBody.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> segment = snakeBody[i];<br>    <span class="hljs-keyword">const</span> snakeElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    snakeElement.<span class="hljs-property">style</span>.<span class="hljs-property">gridRowStart</span> = segment.<span class="hljs-property">y</span>;<br>    snakeElement.<span class="hljs-property">style</span>.<span class="hljs-property">gridColumnStart</span> = segment.<span class="hljs-property">x</span>;<br>    <span class="hljs-comment">// if (i === 0) &#123;</span><br>    <span class="hljs-comment">//   snakeElement.classList.add(&#x27;snake-head&#x27;);</span><br>    <span class="hljs-comment">// &#125; else &#123;</span><br>    <span class="hljs-comment">//   snakeElement.classList.add(&#x27;snake&#x27;);</span><br>    <span class="hljs-comment">// &#125;</span><br>    snakeElement.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;snake&#x27;</span>);<br>    gameBoard.<span class="hljs-title function_">appendChild</span>(snakeElement);<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="snakeUtils-js"><a href="#snakeUtils-js" class="headerlink" title="snakeUtils.js"></a>snakeUtils.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GRID_SIZE</span> = <span class="hljs-number">21</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSnake</span> = (<span class="hljs-params">position</span>) =&gt; &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; snakeBody.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">equalPositions</span>(position, snakeBody[i])) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br><br><span class="hljs-comment">// const gameOver = () =&gt; &#123;</span><br><span class="hljs-comment">//   console.log(&#x27;Game Over&#x27;);</span><br><span class="hljs-comment">//   // 清空游戏板</span><br><span class="hljs-comment">//   gameBoard.innerHTML = &#x27;&#x27;;</span><br><span class="hljs-comment">// &#125;;</span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">equalPositions</span> = (<span class="hljs-params">pos1, pos2</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> pos1.<span class="hljs-property">x</span> === pos2.<span class="hljs-property">x</span> &amp;&amp; pos1.<span class="hljs-property">y</span> === pos2.<span class="hljs-property">y</span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">growSnake</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  snakeBody.<span class="hljs-title function_">push</span>(&#123; ...snakeBody[snakeBody.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getNewFoodPosition</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> randomFoodPosition = <span class="hljs-title function_">randomGridPosition</span>();<br>  <span class="hljs-keyword">while</span> (<span class="hljs-title function_">onSnake</span>(randomFoodPosition)) &#123;<br>    randomFoodPosition = <span class="hljs-title function_">randomGridPosition</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> randomFoodPosition;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">randomGridPosition</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable constant_">GRID_SIZE</span>) + <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable constant_">GRID_SIZE</span>) + <span class="hljs-number">1</span>,<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">outOfBounds</span> = (<span class="hljs-params">position</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> position.<span class="hljs-property">x</span> &lt; <span class="hljs-number">1</span> || position.<span class="hljs-property">x</span> &gt; <span class="hljs-variable constant_">GRID_SIZE</span> || position.<span class="hljs-property">y</span> &lt; <span class="hljs-number">1</span> || position.<span class="hljs-property">y</span> &gt; <span class="hljs-variable constant_">GRID_SIZE</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">snakeOutOfBounds</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">outOfBounds</span>(snakeBody[<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">snakeIntersectSelf</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; snakeBody.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">equalPositions</span>(snakeBody[<span class="hljs-number">0</span>], snakeBody[i])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="input-js"><a href="#input-js" class="headerlink" title="input.js"></a>input.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> inputDirection = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowUp&#x27;</span> &amp;&amp; inputDirection.<span class="hljs-property">x</span> !== <span class="hljs-number">0</span>) &#123;<br>    inputDirection = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: -<span class="hljs-number">1</span> &#125;;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowDown&#x27;</span> &amp;&amp; inputDirection.<span class="hljs-property">x</span> !== <span class="hljs-number">0</span>) &#123;<br>    inputDirection = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">1</span> &#125;;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowRight&#x27;</span> &amp;&amp; inputDirection.<span class="hljs-property">y</span> !== <span class="hljs-number">0</span>) &#123;<br>    inputDirection = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowLeft&#x27;</span> &amp;&amp; inputDirection.<span class="hljs-property">y</span> !== <span class="hljs-number">0</span>) &#123;<br>    inputDirection = &#123; <span class="hljs-attr">x</span>: -<span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;;<br>  &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getInputDirection</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> inputDirection;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web开发课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发课程3--HTML and CSS</title>
    <link href="/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B3--HTML-and-CSS/"/>
    <url>/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B3--HTML-and-CSS/</url>
    
    <content type="html"><![CDATA[<p>本次课程学习HTML和CSS</p><span id="more"></span><h3 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h3><p>1、</p><p>Hypertext markup language（超文本标记语言）</p><p>是网络浏览器用来描述网页内容和结构的语言，是网页的骨架和核心结构，也可以把它看作嵌套的盒子。</p><p>div就像一个空白的画布..</p><p>but..accessibility, not descriptive. It’s ambiguous（模糊的）, hard to organize, hard to target（定位）, bad style, too cluttered（乱）, it’s more work.</p><p>利用<strong>MDN</strong>网站学习！更新速度很快…</p><h3 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">color</span>: red;<br>   <span class="hljs-attribute">font-family</span>: Arial;<br>   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24pt</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ID  vs  Class</p><p>Only one   VS    Multiple</p><p>建议只使用类</p><p>utility classes 实用类：只使用一个CSS属性修改</p><p>fonts.google.com  字体网页</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/976789a0-8f9b-11eb-85f6-6fac77c0c9b3.png" alt="面试官：说说你对盒子模型的理解? | web前端面试- 面试官系列" style="zoom: 50%;" /><p>定义空间元素的方式</p><p>weblab.to&#x2F;flex</p>]]></content>
    
    
    <categories>
      
      <category>web开发课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发课程2--Command line and Git</title>
    <link href="/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B2--Command-line-and-Git/"/>
    <url>/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B2--Command-line-and-Git/</url>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240804145935038.png" alt="image-20240804145935038" style="zoom:80%;" /><p>go over Command line  and use command lines to run some Git commands and learn about Git as well.</p><span id="more"></span><h3 id="一、命令行语句"><a href="#一、命令行语句" class="headerlink" title="一、命令行语句"></a>一、命令行语句</h3><p>pwd：print working directory（当前工作目录）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240804150539650.png" alt="image-20240804150539650" style="zoom: 67%;" /></p><p>rm file name：remove</p><p>touch f n：creat </p><p>mkdir folder name:creat a folder</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240804151036413.png" alt="image-20240804151036413" style="zoom: 67%;" /><h3 id="二、Git——A-version-control-system"><a href="#二、Git——A-version-control-system" class="headerlink" title="二、Git——A version-control system"></a>二、Git——A version-control system</h3><h4 id="（1）problems-with-coding-in-projects"><a href="#（1）problems-with-coding-in-projects" class="headerlink" title="（1）problems with coding in projects"></a>（1）problems with coding in projects</h4><ol><li>Synchronization（同步） of files (no one knows which file is the most up-to-date)</li><li>Collaboration（合作） of files (if there are two version of the same file, both of them fix a different problem, it’s hard to know how to join the files)</li><li>Version history (if we break something, we can’t go back to a working copy)</li></ol><h4 id="（2）what-does-git-do？-基本原理"><a href="#（2）what-does-git-do？-基本原理" class="headerlink" title="（2）what does git do？(基本原理)"></a>（2）what does git do？(基本原理)</h4><p>track changes  by doing math(computing the <strong>difference</strong> every time you make changes)</p><h4 id="（3）some-terminology（基本术语）"><a href="#（3）some-terminology（基本术语）" class="headerlink" title="（3）some terminology（基本术语）"></a>（3）some terminology（基本术语）</h4><p>1.<strong>Repository</strong>—— a set of files to track changes on(git仓库)</p><p>2.<strong>Commit</strong>——a set of  changes in a repository transitioning from one version to the next</p><p>3.<strong>Log</strong>——the set of commits for each version of the repository</p><ul><li>commit (n.)- a packaged set of changes</li><li>push (v.)- to send commits to the git server</li><li>pull (V.)- to get most updated files from the git server</li></ul><p>           </p><h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><p>git init</p><p>git status</p><p>git remote add origin <code>https://github.com/Yaodeer/catbook-react</code>(连接远程仓库)</p><p>git push </p><p>一些命令行语句：</p><p><a href="https://training.github.com/downloads/github-git-cheat-sheet/">GitHub Git Cheat Sheet - GitHub Cheatsheets</a></p><p>git clone了工程到电脑上并连接到了我自己的仓库，默认分支main：</p><p><code>git clone https://github.com/weblab-workshops/catbook-react.git</code></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>web开发课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发课程1--kick off</title>
    <link href="/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B1--kick-off/"/>
    <url>/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B1--kick-off/</url>
    
    <content type="html"><![CDATA[<p>准备花时间跟学一下MIT的web开发课程，希望可以坚持下去。本篇主要是着手学习之前需要了解的内容。</p><span id="more"></span><p>作业链接：<a href="https://gaudy-basketball-f66.notion.site/web-lab-Students-Page-2f46514f5dd441acbde22a3ae36d60ff">web.lab Students Page! (notion.site)</a></p><h3 id="一、课程安排"><a href="#一、课程安排" class="headerlink" title="一、课程安排"></a>一、课程安排</h3><p>week1——build an app from scratch together</p><p>week2——advanced topics</p><p>week3——code code code</p><p>week4——CODE CODE CODE</p><h3 id="二、简述"><a href="#二、简述" class="headerlink" title="二、简述"></a>二、简述</h3><p>HTML——build the structure of your website that contains all the components(组件) that we see and all the information、all the text images things like that.</p><p>CSS（Cascading Style Sheets层叠样式表）——basically tells the website how to look,how to make it look good</p><p>JavaScript——provides any sort of motion or information of fetching,so it can make your website more interactive and functional(功能性的)</p><p>Assets（资源）——like images,videos</p><h3 id="三、要求"><a href="#三、要求" class="headerlink" title="三、要求"></a>三、要求</h3><p>1、Functionally</p><p>2、Usability</p><p>3、Aesthetics</p><p>4、Concept Exection</p>]]></content>
    
    
    <categories>
      
      <category>web开发课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot学习记录</title>
    <link href="/2024/07/31/springboot%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/07/31/springboot%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>.<span id="more"></span></p><h3 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>1）搜索springboot.io查找使用手册（全英的我很难看懂……）</p><p>2）springboot提供了一种快速开发spring项目的方式（自动配置、起步依赖（Maven））</p><p>3）springboot项目构建时采用jar的打包方式</p><p>4）start.spring.io   在官网配置spring boot项目</p><p>5）sout——system.out.println</p><h4 id="2、实现基本案例"><a href="#2、实现基本案例" class="headerlink" title="2、实现基本案例"></a>2、实现基本案例</h4><p>搭建springboot工程，定义HelloController.hello()方法，返回指定内容。</p><p>1）创建Maven项目</p><p>2）导入SpringBoot起步依赖（创建项目时勾选SpringWeb和Thymeleaf依赖）</p><p>3）定义Controller</p><p>4）编写引导类（现在版本自动生成，是Springboot项目的入口）</p><p>5）启动测试</p><h4 id="3、起步依赖原理"><a href="#3、起步依赖原理" class="headerlink" title="3、起步依赖原理"></a>3、起步依赖原理</h4><p>1）在spring-boot-starter-parent中定义了各种技术的版本信息，组合了一套最优搭配的技术版本。</p><p>2）在各种starter中，定义了完成该功能需要的坐标合集，其中大部分版本信息来自于父工程。</p><p>3）我们的忠诚继承parent，引入starter后，通过依赖传递，就可以简单方便获得需要的jar包，并且不会存在版本冲突等问题。</p><h3 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h3><p>spring boot是基于约定的，所以很多配置都有默认值，如果想用自己的配置替换默认值，就可以用application.properties或者application.yml（&#x2F;yaml）进行配置。</p><h4 id="1、两种配置文件"><a href="#1、两种配置文件" class="headerlink" title="1、两种配置文件"></a>1、两种配置文件</h4><p>properties：   server.port&#x3D;8085（键&#x3D;值）</p><p>yml&#x2F;yaml:          server:                           （换行缩进）</p><p>​                      port: 8080</p><p>在同一级目录下的优先级：properties&gt;yml&gt;yaml</p><h4 id="2、YAML文件是以数据为核心的，比xml更加简洁，相对于properties来说更容易看出配置属于哪个层级。"><a href="#2、YAML文件是以数据为核心的，比xml更加简洁，相对于properties来说更容易看出配置属于哪个层级。" class="headerlink" title="2、YAML文件是以数据为核心的，比xml更加简洁，相对于properties来说更容易看出配置属于哪个层级。"></a>2、<strong>YAML</strong>文件是以数据为核心的，比xml更加简洁，相对于properties来说更容易看出配置属于哪个层级。</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801145449469.png" alt="image-20240801145449469" style="zoom:67%;" /><p>   1）大小写敏感、2）数值前必须有空格作为分隔符、3）缩进代表层级关系，不能使用Tab，只能使用空格，空格数不重要，只需要相同层级的元素左侧对齐即可。4）#表注释</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801150220414.png" alt="image-20240801150220414" style="zoom:67%;" /><p>参数引用： ${key}</p><h4 id="3、配置文件读取"><a href="#3、配置文件读取" class="headerlink" title="3、配置文件读取"></a>3、配置文件读取</h4><p><em>三种方法</em></p><p>​@value</p><p>​Environment</p><p>​@ConfigurationProperties:是我们配置文件的内容和对象做映射</p><h5 id="（1）读取实例方法一（-value）"><a href="#（1）读取实例方法一（-value）" class="headerlink" title="（1）读取实例方法一（@value）"></a>（1）读取实例方法一（@value）</h5><p>如果想要在&#x2F;hello路径输出一个字符串，controller文件可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demoa;<br><br>#<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span>      <span class="hljs-comment">//RESTful控制器，返回JSON数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>   <br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring Boot!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想要读取配置文件，可以将文件修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demoa;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span>      <span class="hljs-comment">//RESTful控制器，返回JSON数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>   <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span> <br>   <span class="hljs-keyword">private</span> String name;   <span class="hljs-comment">//读取name的赋给字符串name</span><br>   <span class="hljs-meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span>    <br>   <span class="hljs-keyword">private</span> String name1;<br>   <span class="hljs-meta">@Value(&quot;$&#123;address[1]&#125;&quot;)</span>   <span class="hljs-comment">//读取数组的第一个值</span><br>   <span class="hljs-keyword">private</span> String name2;<br>   <span class="hljs-meta">@RequestMapping(&quot;/hello2&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(name);     <span class="hljs-comment">//输出name的值，在控制台可以看到输出</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring Boot!&quot;</span>;<br>   &#125;<br>   <br>   <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring Boot!&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-08-01%20161321.png"  /><h5 id="（2）读取配置方法二（Environment）"><a href="#（2）读取配置方法二（Environment）" class="headerlink" title="（2）读取配置方法二（Environment）"></a>（2）读取配置方法二（Environment）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Enviroment env;  <span class="hljs-comment">//注入env对象，不要弄错包</span><br><br><span class="hljs-comment">//以下内容是写在函数体内</span><br>System.out.println(env.getProperty(<span class="hljs-string">&quot;person.name&quot;</span>));<br><br></code></pre></td></tr></table></figure><h5 id="（3）读取配置文件方法三（-ConfigurationProperties）"><a href="#（3）读取配置文件方法三（-ConfigurationProperties）" class="headerlink" title="（3）读取配置文件方法三（@ConfigurationProperties）"></a>（3）读取配置文件方法三（@ConfigurationProperties）</h5><p>注：yml文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8085</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">abc</span><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Yaoyao</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">21</span><br><span class="hljs-attr">address:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">beijing</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">shanghai</span><br></code></pre></td></tr></table></figure><p>1、第一步，新建一个person类，添加属性与yml对应。右键生成getter 和 setter，然后添加注解：@Component（让它被识别）和@ConfigurationProperties。此时如果生成一个Person对象叫person，再输出它的值，则输出的name值是abc，age读取不了因此输出默认值0.因此。导入@ConfigurationProperties时，要用这样的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;person&quot;)</span><br></code></pre></td></tr></table></figure><p>2、controller文件中注入一个Person对象，用@Autowired注解来注入。并打印。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">@Autowired</span><br><span class="hljs-keyword">private</span> Person person;<br><br>System.<span class="hljs-keyword">out</span>.println(person);<br></code></pre></td></tr></table></figure><p>我们会发现打印出来的结果是org.example.demo.Person@347d42b6，这是因为默认情况下会打印出对象的类名和对象的哈希码。如果想要打印出对象的具体属性值，则需要在Person类中重写toString（）方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;, age=&quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时打印出来的结果就变成了Person{name&#x3D;’Yaoyao’, age&#x3D;21}</p><p>3、读取数组</p><p>1）将address数组复制到person下，在Person里加入字符串数组private String[] address</p><p>并在Person里加入getter 和 setter，不需重写toString。</p><p>2）controller文件中输入person.getaddress，alt+enter键快捷生成常量。接着打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] address = person.getAddress();<br>    <span class="hljs-keyword">for</span>(String s : address)&#123;<br>        System.out.println(s);<br>    &#125;<br></code></pre></td></tr></table></figure><p>控制台会打印出beijing和shanghai。</p><h4 id="4、profile"><a href="#4、profile" class="headerlink" title="4、profile"></a>4、profile</h4><p>我们在开发spring boot应用时，通常同一套程序会被安装到不同的环境，比如开发、测试、生产等。其中数据库地址、服务器端口等配置都不同，如果每次打包时都要修改配置文件则非常麻烦，profile就是用来进行动态配置切换的。</p><h5 id="（1）profile配置——多profile文件方式"><a href="#（1）profile配置——多profile文件方式" class="headerlink" title="（1）profile配置——多profile文件方式"></a>（1）profile配置——多profile文件方式</h5><p>创建多个properties文件，分别命名为application-dev.properties（开发）、application-test.properties（测试）、application-pro.properties（生产）。如果分别在里面设置了端口号，这时候直接运行，会显示Tomcat仍旧运行在默认端口8080，因为没有配置文件被激活。如果想要激活某一个配置文件，可以在主配置文件中加入<strong>spring.profiles.active&#x3D;dev</strong>；这时就激活了application-dev.properties</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801175409410.png" alt="image-20240801175409410"></p><h5 id="（2）profile配置——yml多文档方式（更加简洁）"><a href="#（2）profile配置——yml多文档方式（更加简洁）" class="headerlink" title="（2）profile配置——yml多文档方式（更加简洁）"></a>（2）profile配置——yml多文档方式（更加简洁）</h5><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801214745825.png" alt="image-20240801214745825" style="zoom:67%;" /><p>（需要把刚刚的那些配置注释掉）(记得空格，不要把server写成sever。。服了，找半天错误)</p><h5 id="（3）不依赖idea修改配置和激活工程"><a href="#（3）不依赖idea修改配置和激活工程" class="headerlink" title="（3）不依赖idea修改配置和激活工程"></a>（3）不依赖idea修改配置和激活工程</h5><p>右边找到package选项将工程打包成jar文件</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801181439994.png" alt="image-20240801181439994" style="zoom: 67%;" /><p>找到文件位置打开终端，java -jar .\demo1-0.0.1-SNAPSHOT.jar运行。</p><p>如果想要在这里配置参数，java -jar .\demo1-0.0.1-SNAPSHOT.jar –spring.profiles.active&#x3D;test</p><h4 id="5、内外部配置文件加载顺序"><a href="#5、内外部配置文件加载顺序" class="headerlink" title="5、内外部配置文件加载顺序"></a>5、内外部配置文件加载顺序</h4><p>1）内部</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240803140132561.png" alt="image-20240803140132561" style="zoom:50%;" /><p>其中我们用的在resources目录下的properties配置文件属于第四种</p><p>2）外部</p><p>可以通过命令行的方式来修改配置。</p><p>方法一：在运行jar包语句后面加上 –server.port&#x3D;8053这样类似的配置语句</p><p>方法二：在运行jar包语句后面加上 –spring.config.location&#x3D;&#x2F;放置的外部配置文件的路径</p>]]></content>
    
    
    <categories>
      
      <category>xxx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-spring boot -java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过idea基于maven新建spring boot项目并运行（2024版本）</title>
    <link href="/2024/07/01/%E9%80%9A%E8%BF%87idea%E5%9F%BA%E4%BA%8Emaven%E6%96%B0%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%90%E8%A1%8C%EF%BC%882024%E7%89%88%E6%9C%AC%EF%BC%89/"/>
    <url>/2024/07/01/%E9%80%9A%E8%BF%87idea%E5%9F%BA%E4%BA%8Emaven%E6%96%B0%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%90%E8%A1%8C%EF%BC%882024%E7%89%88%E6%9C%AC%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>此博客记录如何成功运行一个spring boot项目并用APIFOX进行测试。</p><span id="more"></span><p>运行项目运行了很久都是不报错但是加载不出界面的情况，一开始以为是版本不匹配的原因，后来发现其实不是！（现在安装了JDK22、17、11三个版本……已老实）目前IDEA版本是最新版2024.1.4，JDK是22版本，maven也是最新版。</p><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="1、首先需要配置JDK、maven两个软件"><a href="#1、首先需要配置JDK、maven两个软件" class="headerlink" title="1、首先需要配置JDK、maven两个软件"></a>1、首先需要配置JDK、maven两个软件</h4><h5 id="（1）下载软件"><a href="#（1）下载软件" class="headerlink" title="（1）下载软件"></a>（1）下载软件</h5><p>JDK：<a href="https://www.oracle.com/java/technologies/downloads/#jdk22-windows">https://www.oracle.com/java/technologies/downloads/#jdk22-windows</a></p><p>我一般会下载最新版（但是老版兼容性会更好一些）</p><p>maven：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a>  下滑找到如图所示版本下载</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701104309249.png" alt="image-20240701104309249"></p><h5 id="（2）配置环境变量"><a href="#（2）配置环境变量" class="headerlink" title="（2）配置环境变量"></a>（2）配置环境变量</h5><p>在系统变量下添加如下所示两个环境变量，变量值是文件的地址（按照自己的文件地址添加）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-01%20110538.png" alt="屏幕截图 2024-07-01 110538"></p><p>在系统变量中找到Path变量，点击编辑，在后面添加如下所示两条</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701110456636.png" alt="image-20240701110456636"></p><p>cmd打开终端，输入如下命令，出现如图所示的信息，显示了maven和JDK版本，说明配置成功。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">mvn -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701110615522.png" alt="image-20240701110615522"></p><h4 id="2、-下载IntelliJ-IDEA"><a href="#2、-下载IntelliJ-IDEA" class="headerlink" title="2、  下载IntelliJ IDEA"></a>2、  下载IntelliJ IDEA</h4><p>仍旧是去官网下载：<a href="https://www.jetbrains.com.cn/idea/download/?section=windows">下载 IntelliJ IDEA – 领先的 Java 和 Kotlin IDE (jetbrains.com.cn)</a></p><p>但是我们会发现这是收费的，于是只能去下载破解版。此处贴上我当时参考的链接：</p><p><a href="https://www.quanxiaoha.com/idea-pojie/idea-pojie-20241.html">IDEA 2024.1 最新激活码，破解版安装教程（亲测有效~） - 犬小哈教程 (quanxiaoha.com)</a></p><h3 id="二、开始创建项目"><a href="#二、开始创建项目" class="headerlink" title="二、开始创建项目"></a>二、开始创建项目</h3><p>我运行出来的结果是这样的：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701144938865.png" alt="image-20240701144938865" style="zoom: 67%;" /><p>虽然很简单但是搞了一下午加一晚上……不知道为什么跟着教程或者GPT都弄不出来，总是各种报错……后来GPT突然活了，我调整了一下文件结构然后就成功了！！</p><h4 id="1、安装插件（可选）"><a href="#1、安装插件（可选）" class="headerlink" title="1、安装插件（可选）"></a>1、安装插件（可选）</h4><p>很多插件都是内置的，我只迷迷糊糊安装了一个wl spring assistant，也不知道有什么用。不过首先要安装的还是汉化包。按照我搜到的教程，应该是要安装Spring Initializr这个插件的，但是它需要Spring  boot helper这个插件才能正常工作。但是Spring  boot helper也需要购买，免费的老版本也需要老版本的idea才行。（在我激情卸载新版本下载老版本后，我发现老版本的破解帖子大多都失效了……）</p><h4 id="2、新建项目"><a href="#2、新建项目" class="headerlink" title="2、新建项目"></a>2、新建项目</h4><p>（1）如图，由于我没有下载Spring Initializr这个插件，所以我只能选择Spring Boot这个选项，和网上的教程都不一样（所以我才急切想下载过去的版本，但是失败了anyway）。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701145920537.png" alt="image-20240701145920537" style="zoom: 50%;" /><p>但是当我最终放弃下载老版本，又灰溜溜把新版本装好后，把鼠标放在Spring Boot这个选项上面时，它显示了这样一句话。。。。（所以其实是一样的，好像没有什么不同！）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701150249468.png" style="zoom: 80%;" /><p>（2）右边我选的就是这样，只改动了圈出的地方，最上面名称可以自己设置。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701150551021.png" alt="image-20240701150551021" style="zoom: 67%;" /><p>（3）选择依赖项</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701150654448.png" alt="image-20240701150654448"><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701150713132.png" alt="image-20240701150713132"></p><p>由于这个项目比较简单所以就选择了这两个，暂时不需要数据库的依赖项。</p><p>然后项目就创建好了！</p><h3 id="三、配置项目"><a href="#三、配置项目" class="headerlink" title="三、配置项目"></a>三、配置项目</h3><p>进入项目后，把重要文件夹展开后是这样（刚新建项目没有target文件夹）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701152318300.png" alt="image-20240701152318300" style="zoom:67%;" /><p>其实我不是很明白为什么会出现test文件夹（不管项目怎么命名都会出现，但是最开始是没有的……不知道是不是我按了什么不该按的）下面这两个文件是可以运行的。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701152517651.png" alt="image-20240701152517651"><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701152534710.png" alt="image-20240701152534710"></p><p>第一步：需要添加两个文件。右键下面任意一个软件包，选择添加一个java类，我命名为了helloController</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701152723798.png" alt="image-20240701152723798" style="zoom:67%;" /><p>在这个文件中添加如下代码（请看注释要点！不然会报错）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.test; <span class="hljs-comment">//注意test这个单词是要改成你的项目名字的</span><br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;  <span class="hljs-comment">//不用改</span><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;  <span class="hljs-comment">//不用改</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">helloController</span> &#123;  <span class="hljs-comment">//这个类名要和刚刚创建的java类名一致</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>; <span class="hljs-comment">// 返回模板文件的名称，不需要扩展名</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后右键这个文件夹选择新建一个html文件，命名为index</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701153234536.png" alt="image-20240701153234536"></p><p>在文件中添加如下代码（body内添加内容，&lt; br&#x2F; &gt;是换行符）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>##################<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>  <br>############<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步就可以点击运行了。但是此时可能会报错，如你的报错原因是如下图，那么应该是跟我一样，因为默认端口号8080已经被占用了。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701153703817.png" alt="image-20240701153703817"></p><p>解决方法也很简单，就是换个端口号，点开下面的文件，在其最上方添加一行代码server.port&#x3D;8016（可以自己改端口号）（当然也可以选择在管理员终端终止8080端口运行，但是还是改个端口更简单）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701153818223.png" alt="image-20240701153818223" style="zoom:80%;" /><p>然后应该就能运行成功了！这时我们在电脑上访问localhost:8016（端口号），就可以看见我们在html中写的内容了。</p><h3 id="四、API测试"><a href="#四、API测试" class="headerlink" title="四、API测试"></a>四、API测试</h3><h4 id="1、在官网下载APIFox"><a href="#1、在官网下载APIFox" class="headerlink" title="1、在官网下载APIFox"></a>1、在官网下载APIFox</h4><p><a href="https://apifox.com/">https://apifox.com/</a></p><h4 id="2、创建一个新的项目"><a href="#2、创建一个新的项目" class="headerlink" title="2、创建一个新的项目"></a>2、创建一个新的项目</h4><p>项目类型选择html</p><h4 id="3、添加一个新的接口"><a href="#3、添加一个新的接口" class="headerlink" title="3、添加一个新的接口"></a>3、添加一个新的接口</h4><p>配置请求：</p><ul><li>请求方法：GET</li><li>请求 URL：&#96;<a href="http://localhost:8016‘">http://localhost:8016‘</a></li><li>添加查询参数：name（可选）</li><li>返回相应的内容格式选html</li></ul><h4 id="4、点击发送按钮查看响应"><a href="#4、点击发送按钮查看响应" class="headerlink" title="4、点击发送按钮查看响应"></a>4、点击发送按钮查看响应</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701163121572.png" alt="image-20240701163121572"></p><h3 id="五、一些问题记录"><a href="#五、一些问题记录" class="headerlink" title="五、一些问题记录"></a>五、一些问题记录</h3><h4 id="1、依赖项thymeleaf的作用"><a href="#1、依赖项thymeleaf的作用" class="headerlink" title="1、依赖项thymeleaf的作用"></a>1、依赖项thymeleaf的作用</h4><p>将 Thymeleaf 集成到 Spring Boot 应用中，使得你可以使用 Thymeleaf 作为模板引擎来渲染 HTML 页面。</p><p>如果一开始新建项目时没有添加这个依赖项，也可以打开pom.xml文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、Controller文件的作用"><a href="#2、Controller文件的作用" class="headerlink" title="2、Controller文件的作用"></a>2、Controller文件的作用</h4><p>控制器（Controller）是用于处理 HTTP 请求的核心组件。控制器的主要职责是接收用户的输入，并根据该输入返回相应的响应。控制器通常与视图模板或 RESTful API 结合使用。</p><p>上面的helloController文件按理来说应该命名为HomeController，表示端口号域名不加任何后续路径，处理根路径’ &#x2F; ‘并返回index.html模板。</p><p>然后我们还可以新建一个HelloController文件，用于处理 ’ hello ‘ 路径并返回一个简单的字符串响应。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demoa;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span>      <span class="hljs-comment">//RESTful控制器，返回JSON数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span>  <span class="hljs-comment">//括号里是路径</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;Hello, %s!&quot;</span>, name);  <span class="hljs-comment">//返回Hello World！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>xxx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
      <tag>IntelliJ IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置服务器记录</title>
    <link href="/2024/06/29/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/06/29/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>在阿里云平台免费领取了七个月服务器使用权，在这里记录一下配置经过。</p><span id="more"></span><h3 id="一、服务器"><a href="#一、服务器" class="headerlink" title="一、服务器"></a>一、服务器</h3><h4 id="1、云服务器的使用流程"><a href="#1、云服务器的使用流程" class="headerlink" title="1、云服务器的使用流程"></a>1、云服务器的使用流程</h4><p>（1）<strong>获取</strong>云服务器ECS——登录<a href="http://www.aliyun.com,购买或免费领用云服务器ecs/">www.aliyun.com，购买或免费领用云服务器ECS</a></p><p>（2）<strong>登录</strong>云服务器ECS——远程登录ECS实例配置主机环境</p><p>（3）<strong>管理</strong>云服务器ECS——在云服务器上搭建个人网站，管理并维护网站</p><p>（4）<strong>释放</strong>云服务器ECS——不需要ECS实例时释放资源，节省费用</p><h4 id="2、登录云服务器-windows系统"><a href="#2、登录云服务器-windows系统" class="headerlink" title="2、登录云服务器(windows系统)"></a>2、登录云服务器(windows系统)</h4><p>（1）点击远程管理之后点击立即登录，进入以下界面，第一次登陆的时候需要设置密码，需要记住这个密码。确定后就登陆上了这个服务器；</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701100745300.png" alt="image-20240701100745300" style="zoom: 50%;" /><p>（2）我一般在电脑终端进行登录，cmd打开终端，输入以下语句登录；</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">root@</span>公网IP<br></code></pre></td></tr></table></figure><p>出现以下界面，说明登陆成功，现在可以在服务器中进行配置了。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701101436004.png" alt="image-20240701101436004" style="zoom:50%;" /><h3 id="二、配置MySQL"><a href="#二、配置MySQL" class="headerlink" title="二、配置MySQL"></a>二、配置MySQL</h3>]]></content>
    
    
    <categories>
      
      <category>xxx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>ECS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode刷题记录（不分类版）</title>
    <link href="/2024/05/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%8D%E5%88%86%E7%B1%BB%E7%89%88%EF%BC%89/"/>
    <url>/2024/05/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%8D%E5%88%86%E7%B1%BB%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>尽量保证每天至少做两题，保持手感。累计11题。</p><span id="more"></span><h3 id="2024-5-24"><a href="#2024-5-24" class="headerlink" title="2024&#x2F;5&#x2F;24"></a>2024&#x2F;5&#x2F;24</h3><h4 id="（1）接雨水"><a href="#（1）接雨水" class="headerlink" title="（1）接雨水"></a>（1）接雨水</h4><p><a href="https://leetcode.cn/problems/trapping-rain-water/description/">42. 接雨水 - 力扣（LeetCode）</a></p><p>记得第一次看到这题，两眼一黑就没管了。昨晚睡觉时突然想到，想了半天，今天写的时候也没写出来。总结错误原因是：1、想到了要记录左边最大值和右边最大值，但是记录的非常笨拙；2、记录的最大值不是真的最大值，而是每个凹陷两边的最大值。还是题感不够以及思路不够灵活。刚好这道题用到的很多方法是我不会的，遂记录。</p><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>（已超时）分别记录高度为1、2、3……等这一行能接多少雨水。需要遍历两层，记录当前列的左边和右边是否有值，若有则这一块可以接到雨水。时间复杂度O(n2);</p><h5 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h5><p>动态规划：1、用两个数组leftmax[]和rightmax[]分别记录某个位置左边高度的最大值和右边高度的最大值。两个最大值中小的那个减去它的高度就是这一列能接到的雨水量；2、如何得到两个数组的值？（动态规划）leftmax[0]&#x3D;h[0]，rightmax[n-1]&#x3D;h[n-1]。从左向右遍历，得到等式：left[ i ]&#x3D;max( left[ i-1],h[ i] ) , 从右向左遍历，得到right[i]&#x3D;max(right[ i+1],h[ i ])；</p><p>时间复杂度：O（n），空间复杂度：O（n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left[<span class="hljs-number">20004</span>],right[<span class="hljs-number">20004</span>];  <br><span class="hljs-type">int</span> cnt,tmp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; h)</span> </span>&#123;<br>   <span class="hljs-type">int</span> n=h.<span class="hljs-built_in">size</span>();<br>   left[<span class="hljs-number">0</span>]=h[<span class="hljs-number">0</span>],right[n<span class="hljs-number">-1</span>]=h[n<span class="hljs-number">-1</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>      left[i]=<span class="hljs-built_in">max</span>(left[i<span class="hljs-number">-1</span>],h[i]);<br>      right[n-i<span class="hljs-number">-1</span>]=<span class="hljs-built_in">max</span>(right[n-i],h[i]);<br>   &#125;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>      tmp=<span class="hljs-built_in">min</span>(left[i],right[i]);<br>      cnt+=tmp-h[i];<br>   &#125;<br>   <span class="hljs-keyword">return</span> cnt;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h5><p>单调栈：单调栈内存储的是下标。如果该下标高度小于栈顶，入栈；否则开始计算两个下标之间可以接的雨水量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> cnt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; h)</span> </span>&#123;<br>   stack&lt;<span class="hljs-type">int</span>&gt; r;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h.<span class="hljs-built_in">size</span>();i++)&#123;<br>      <span class="hljs-keyword">while</span>(!r.<span class="hljs-built_in">empty</span>()&amp;&amp;h[r.<span class="hljs-built_in">top</span>()]&lt;h[i])&#123;<br>         <span class="hljs-type">int</span> cur=r.<span class="hljs-built_in">top</span>();<br>         r.<span class="hljs-built_in">pop</span>();<br>         <span class="hljs-keyword">if</span>(r.<span class="hljs-built_in">empty</span>())<br>            <span class="hljs-keyword">break</span>;<br>         cnt+=(<span class="hljs-built_in">min</span>(h[r.<span class="hljs-built_in">top</span>()],h[i])-h[cur])*(i-r.<span class="hljs-built_in">top</span>()<span class="hljs-number">-1</span>);<br>      &#125;<br>      r.<span class="hljs-built_in">push</span>(i);<br>   &#125;<br>   <span class="hljs-keyword">return</span> cnt;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2024-5-28"><a href="#2024-5-28" class="headerlink" title="2024&#x2F;5&#x2F;28"></a>2024&#x2F;5&#x2F;28</h3><h4 id="（1）合并两个有序数组（字符串、数组）"><a href="#（1）合并两个有序数组（字符串、数组）" class="headerlink" title="（1）合并两个有序数组（字符串、数组）"></a>（1）合并两个有序数组（字符串、数组）</h4><p><a href="https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150">88. 合并两个有序数组 - 力扣（LeetCode）</a></p><h5 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h5><p>直接合并然后排序（时间复杂度O(m+n)log(m+n)）</p><h5 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h5><p>逆序双指针：m、n分别指向两个数组最后一个（不是0的）元素，然后每次作比较，将大的数字放在数组的最后一个位置，相应指针和位置前移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;<br> <span class="hljs-type">int</span> i=m+n<span class="hljs-number">-1</span>;<br>   <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">0</span>&amp;&amp;nums1[m<span class="hljs-number">-1</span>]&gt;nums2[n<span class="hljs-number">-1</span>])&#123;<br>         nums1[i--]=nums2[m<span class="hljs-number">-1</span>];<br>         m--;<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>nums1[i--]=nums2[n<span class="hljs-number">-1</span>];<br>         n--;         <br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2024-5-29"><a href="#2024-5-29" class="headerlink" title="2024&#x2F;5&#x2F;29"></a>2024&#x2F;5&#x2F;29</h3><h4 id="（1）长度最小的子数组（二分、前缀和、滑动窗口）"><a href="#（1）长度最小的子数组（二分、前缀和、滑动窗口）" class="headerlink" title="（1）长度最小的子数组（二分、前缀和、滑动窗口）"></a>（1）长度最小的子数组（二分、前缀和、滑动窗口）</h4><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/?envType=study-plan-v2&envId=top-interview-150">209. 长度最小的子数组 - 力扣（LeetCode）</a></p><h5 id="方法一：暴力法（超时）"><a href="#方法一：暴力法（超时）" class="headerlink" title="方法一：暴力法（超时）"></a>方法一：暴力法（超时）</h5><h5 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h5><p>前缀和+二分查找：在想到使用前缀和之后，需要使用二分查找找到想要的下标才能使时间复杂度下降。而在每个语言中都已经有内置的二分查找函数，找到大于或者等于某个数的第一个位置。c++：lower_bound。时间复杂度：nlog(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-type">int</span> ans=INT_MAX;   <span class="hljs-comment">//表示最大的整数，在后面的比较时有用</span><br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;   <span class="hljs-comment">//sum[i]存储的是nums[0]到nums[i-1]的和，因此要设置n+1的长度，sum[0]=0,sum[1]=nums[0]……</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>      sum[i]=sum[i<span class="hljs-number">-1</span>]+nums[i];   <span class="hljs-comment">//计算前缀和</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>      <span class="hljs-type">int</span> s=target+sum[i<span class="hljs-number">-1</span>];   <span class="hljs-comment">//将目标加上当前坐标的前缀和，方便查找（i-1为子串第一个坐标）</span><br>      <span class="hljs-keyword">auto</span> bound=<span class="hljs-built_in">lower_bound</span>(sum.<span class="hljs-built_in">begin</span>(),sum.<span class="hljs-built_in">end</span>(),s);  <span class="hljs-comment">//注意查找得到的是位置</span><br>      <span class="hljs-keyword">if</span>(bound!=sum.<span class="hljs-built_in">end</span>())<br>         ans=<span class="hljs-built_in">min</span>(ans,bound-sum.<span class="hljs-built_in">begin</span>()-(i<span class="hljs-number">-1</span>));  <br>   &#125;<br>   <span class="hljs-keyword">return</span> ans==INT_MAX?<span class="hljs-number">0</span>:ans;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法三：-1"><a href="#方法三：-1" class="headerlink" title="方法三："></a>方法三：</h5><p>滑动窗口：设置左右指针表示窗口的两边，保证窗口内元素之和满足要求时，左指针右移，不断保存左右指针相差最小的那个值。当窗口不符合要求时，右指针继续右移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-type">int</span> target,vetor&lt;<span class="hljs-type">int</span>&gt; num)</span></span>&#123;<br>   <span class="hljs-type">int</span> n=num.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">if</span>(!n)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-type">int</span> ans=INT_MAX,l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span>(r&lt;n)&#123;<br>      sum+=num[r];<br>      <span class="hljs-keyword">while</span>(sum&gt;=target)&#123;<br>         ans=<span class="hljs-built_in">min</span>(ans,r-l+<span class="hljs-number">1</span>);<br>         sum-=num[l];<br>         l++;<br>      &#125;<br>      r++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ans==INT_MAX?<span class="hljs-number">0</span>:ans;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）搜索二维矩阵（二分法）"><a href="#（2）搜索二维矩阵（二分法）" class="headerlink" title="（2）搜索二维矩阵（二分法）"></a>（2）搜索二维矩阵（二分法）</h4><h5 id="方法一：两次二分查找"><a href="#方法一：两次二分查找" class="headerlink" title="方法一：两次二分查找"></a>方法一：两次二分查找</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">searchMatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; num, <span class="hljs-type">int</span> t)</span> </span>&#123;<br><span class="hljs-keyword">auto</span> row=<span class="hljs-built_in">upper_bound</span>(num.<span class="hljs-built_in">begin</span>(),num.<span class="hljs-built_in">end</span>(),t,[](<span class="hljs-type">const</span> <span class="hljs-type">int</span> b,<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;a)&#123;<span class="hljs-keyword">return</span> b&lt;a[<span class="hljs-number">0</span>];&#125;);  <span class="hljs-comment">//找到第一个元素大于给定元素的那一行</span><br>   <span class="hljs-keyword">if</span>(row==num.<span class="hljs-built_in">begin</span>())  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   --row;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">binary_search</span>(row-&gt;<span class="hljs-built_in">begin</span>(),row-&gt;<span class="hljs-built_in">end</span>(),t);<br>   <span class="hljs-comment">//二分查找函数，找到等于给定元素的下标，找不到就返回false</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：一次二分查找（假想成一维数组）"><a href="#方法二：一次二分查找（假想成一维数组）" class="headerlink" title="方法二：一次二分查找（假想成一维数组）"></a>方法二：一次二分查找（假想成一维数组）</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">searchMatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; num, <span class="hljs-type">int</span> t)</span> </span>&#123;<br>   <span class="hljs-type">int</span> m=num.<span class="hljs-built_in">size</span>(),n=num[<span class="hljs-number">0</span>].size;   <span class="hljs-comment">//得到行数(m)和列数(n)</span><br>   <span class="hljs-type">int</span> low=<span class="hljs-number">0</span>,high=m*n<span class="hljs-number">-1</span>;<br>   <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>      <span class="hljs-type">int</span> mid=(high-low)/<span class="hljs-number">2</span>+low;  <span class="hljs-comment">//防止溢出</span><br>      <span class="hljs-type">int</span> x=num[mid/n][mid%n];   <span class="hljs-comment">//注意是n！！！不是m</span><br>      <span class="hljs-keyword">if</span>(x&lt;t)<br>         low=mid+<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;t)<br>         high=mid<span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">else</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）打家劫舍（一维动态规划）"><a href="#（3）打家劫舍（一维动态规划）" class="headerlink" title="（3）打家劫舍（一维动态规划）"></a>（3）打家劫舍（一维动态规划）</h4><p><a href="https://leetcode.cn/problems/house-robber/description/?envType=study-plan-v2&envId=top-interview-150">198. 打家劫舍 - 力扣（LeetCode）</a></p><p>第一步：定义子问题：从k间房屋中可以偷到的最大金额</p><p>第二步：列出递推关系。题目要求不能够偷两间相邻的房屋，因此偷k间房屋就有了两个选择，f[k]&#x3D;max( f[k-1] , f[k-2]+num[k-1] )；</p><p>第三步：写出已知值。f[0]&#x3D;0,f[1]&#x3D;num[0];</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; num)</span></span>&#123;<br>   <span class="hljs-type">int</span> n=num.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">if</span>(!n)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>   add[<span class="hljs-number">1</span>]=num[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>      add[i+<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(add[i],add[i<span class="hljs-number">-1</span>]+num[i]);<br>   &#125;<br>   <span class="hljs-keyword">return</span> add[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>第四步：空间优化。我们发现每次都只需要用到数组的最后两个值，因此用两个整数保存这两个值即可，不需要多余空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; num)</span></span>&#123;<br>   <span class="hljs-type">int</span> pre=<span class="hljs-number">0</span>,cur=<span class="hljs-number">0</span>,ans;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:num)&#123;<br>      ans=<span class="hljs-built_in">max</span>(pre+i,cur);<br>      pre=cur;<br>      cur=ans;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）三角形最小路径和（二维动态规划）"><a href="#（4）三角形最小路径和（二维动态规划）" class="headerlink" title="（4）三角形最小路径和（二维动态规划）"></a>（4）三角形最小路径和（二维动态规划）</h4><p><a href="https://leetcode.cn/problems/triangle/description/?envType=study-plan-v2&envId=top-interview-150">120. 三角形最小路径和 - 力扣（LeetCode）</a></p><h5 id="方法一：动态规划（自底向上）-不改动原数组"><a href="#方法一：动态规划（自底向上）-不改动原数组" class="headerlink" title="方法一：动态规划（自底向上）(不改动原数组)"></a>方法一：动态规划（自底向上）(不改动原数组)</h5><p>设dp[i] [j]表示第i行第j个元素到最后一行的最短路径，则可以得到状态转移方程：                      dp[i] [j]&#x3D;min(dp[i+1] [j] , dp[i+1] [j+1]) +triangle[i] [j]，则dp[0] [0]为所需值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumTotal</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;<br>   <span class="hljs-type">int</span> n=triangle.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span>[][] dp=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i;j++)&#123;<br>         dp[i][j]=<span class="hljs-built_in">min</span>(dp[i+j][j],dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>])+triangle[i][j];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：动态规划（空间优化）"><a href="#方法二：动态规划（空间优化）" class="headerlink" title="方法二：动态规划（空间优化）"></a>方法二：动态规划（空间优化）</h5><p>我们会发现每次只需要用到两个先前值，因此不需要用到二维数组。dp数组不断保存每一行每个值遍历到最后一行的最短路径之和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumTotal</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;<br>   <span class="hljs-type">int</span> n=triangle.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i;j++)&#123;<br>         dp[j]=<span class="hljs-built_in">min</span>(dp[j],dp[j+<span class="hljs-number">1</span>])+triangle[i][j];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2024-5-30"><a href="#2024-5-30" class="headerlink" title="2024&#x2F;5&#x2F;30"></a>2024&#x2F;5&#x2F;30</h3><h4 id="（1）最小路径和（二维动态规划）"><a href="#（1）最小路径和（二维动态规划）" class="headerlink" title="（1）最小路径和（二维动态规划）"></a>（1）最小路径和（二维动态规划）</h4><p><a href="https://leetcode.cn/problems/minimum-path-sum/description/?envType=study-plan-v2&envId=top-interview-150">64. 最小路径和 - 力扣（LeetCode）</a></p><p>跟昨天做的题思路很像（相当于偷个小懒hhh），也是丝滑地ac了，就是没有空间优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m=grid.<span class="hljs-built_in">size</span>(),n=grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> dp[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br>        dp[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>]=grid[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            dp[i][n<span class="hljs-number">-1</span>]=dp[i+<span class="hljs-number">1</span>][n<span class="hljs-number">-1</span>]+grid[i][n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            dp[m<span class="hljs-number">-1</span>][i]=dp[m<span class="hljs-number">-1</span>][i+<span class="hljs-number">1</span>]+grid[m<span class="hljs-number">-1</span>][i];  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=n<span class="hljs-number">-2</span>;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>                dp[i][j]=<span class="hljs-built_in">min</span>(dp[i+<span class="hljs-number">1</span>][j],dp[i][j+<span class="hljs-number">1</span>])+grid[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>试着空间优化一下：(分类讨论地好狗屎，但是不知道怎么分情况更简单了。。。)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>   <span class="hljs-type">int</span> m=grid.<span class="hljs-built_in">size</span>(),n=grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<br>   dp[<span class="hljs-number">0</span>]=grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>         <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>&amp;&amp;j!=<span class="hljs-number">0</span>)<br>            dp[j]=dp[j<span class="hljs-number">-1</span>]+grid[i][j];<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>&amp;&amp;i!=<span class="hljs-number">0</span>)<br>            dp[j]=dp[j]+grid[i][j];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>&amp;&amp;j!=<span class="hljs-number">0</span>)<br>            dp[j]=<span class="hljs-built_in">min</span>(dp[j<span class="hljs-number">-1</span>],dp[j])+grid[i][j];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp[n<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）不同路径（二维动规、障碍物）"><a href="#（2）不同路径（二维动规、障碍物）" class="headerlink" title="（2）不同路径（二维动规、障碍物）"></a>（2）不同路径（二维动规、障碍物）</h4><p><a href="https://leetcode.cn/problems/unique-paths-ii/description/?envType=study-plan-v2&envId=top-interview-150">63. 不同路径 II - 力扣（LeetCode）</a></p><h5 id="方法一：动规数组存储该位置的路径和，遇到障碍物该位置路径数变为零。"><a href="#方法一：动规数组存储该位置的路径和，遇到障碍物该位置路径数变为零。" class="headerlink" title="方法一：动规数组存储该位置的路径和，遇到障碍物该位置路径数变为零。"></a>方法一：动规数组存储该位置的路径和，遇到障碍物该位置路径数变为零。</h5><p>AC，但是空间复杂度有点高，而且在初始化的时候容易犯错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePathsWithObstacles</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;<br><span class="hljs-type">int</span> m=obstacleGrid.<span class="hljs-built_in">size</span>(),n=obstacleGrid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span> dp[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br>   dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)<br>      dp[i][<span class="hljs-number">0</span>]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>      dp[<span class="hljs-number">0</span>][i]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;n;j++)&#123;<br>         <span class="hljs-keyword">if</span>(obstacleGrid[i][j])<br>            dp[i][j]=<span class="hljs-number">0</span>;<br>         <span class="hljs-keyword">else</span><br>            dp[i][j]=dp[i<span class="hljs-number">-1</span>][j]+dp[i][j<span class="hljs-number">-1</span>];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：空间优化（滚动数组）"><a href="#方法二：空间优化（滚动数组）" class="headerlink" title="方法二：空间优化（滚动数组）"></a>方法二：空间优化（滚动数组）</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePathsWithObstacles</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;<br>   <span class="hljs-type">int</span> m=obstacleGrid.<span class="hljs-built_in">size</span>(),n=obstacleGrid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<br>   dp[<span class="hljs-number">0</span>]=obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>         <span class="hljs-keyword">if</span>(obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>            dp[j]=<span class="hljs-number">0</span>;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">0</span>)<br>            dp[j]+=dp[j<span class="hljs-number">-1</span>];<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）最长回文子串"><a href="#（3）最长回文子串" class="headerlink" title="（3）最长回文子串"></a>（3）最长回文子串</h4><p><a href="https://leetcode.cn/problems/longest-palindromic-substring/description/?envType=study-plan-v2&envId=top-interview-150">5. 最长回文子串 - 力扣（LeetCode）</a></p><h5 id="方法一：中心扩展法"><a href="#方法一：中心扩展法" class="headerlink" title="方法一：中心扩展法"></a>方法一：中心扩展法</h5><p>分为两种情况：1、回文串长度是奇数；2、回文串长度是偶数。因此从中心向外扩展时也就有两种情况：1、中心是当前值；2、中心是当前值与右边值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>   <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>(),pre=<span class="hljs-number">0</span>,maxL=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>      <span class="hljs-type">int</span> l=i<span class="hljs-number">-1</span>,r=i;<br>      <span class="hljs-keyword">for</span>(;l&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;s[l]==s[r];l--,r++);<br>      <span class="hljs-keyword">if</span>(maxL&lt;r-l+<span class="hljs-number">1</span>)&#123;<br>         maxL=r-l+<span class="hljs-number">1</span>;<br>         pre=l+<span class="hljs-number">1</span>;<br>      &#125;<br>      l=i<span class="hljs-number">-1</span>,r=i+<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">for</span>(;l&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;s[l]==s[r];l--,r++);<br>      <span class="hljs-keyword">if</span>(maxL&lt;r-l+<span class="hljs-number">1</span>)&#123;<br>         maxL=r-l+<span class="hljs-number">1</span>;<br>         pre=l+<span class="hljs-number">1</span>;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(pre,maxL);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h4><p>不知道为什么力扣不能完全通过……不理解</p><p>理解了，因为没有初始化为false啊啊啊啊我要气死了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> len=s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>,res=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录左右边界和右-左的长度</span><br>    <span class="hljs-type">bool</span> dp[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]=&#123;<span class="hljs-literal">false</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;len;j++)&#123;<span class="hljs-comment">//j=i这步就将每个单个字符dp赋为了true</span><br>            <span class="hljs-keyword">if</span>(s[i]==s[j]&amp;&amp;(j - i &lt;= <span class="hljs-number">1</span> || dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]))&#123;<br>                dp[i][j] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(j-i&gt;res)&#123;<br>                    res=j-i;<span class="hljs-comment">//res记得也得更新！</span><br>                    left=i;<br>                    right=j;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(left,res+<span class="hljs-number">1</span>);<span class="hljs-comment">//左闭右开</span><br>&#125; <br></code></pre></td></tr></table></figure><h4 id="（4）删除有序数组中的重复项-II（双指针）"><a href="#（4）删除有序数组中的重复项-II（双指针）" class="headerlink" title="（4）删除有序数组中的重复项 II（双指针）"></a>（4）删除有序数组中的重复项 II（双指针）</h4><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/">80. 删除有序数组中的重复项 II</a></p><h5 id="方法一：双指针（？）"><a href="#方法一：双指针（？）" class="headerlink" title="方法一：双指针（？）"></a>方法一：双指针（？）</h5><p>自己写的，有点丑陋……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-type">int</span> j=i+<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">while</span>(j&lt;nums.<span class="hljs-built_in">size</span>()&amp;&amp;nums[i]==nums[i+<span class="hljs-number">1</span>]&amp;&amp;nums[i]==nums[j])&#123;<br>                nums.<span class="hljs-built_in">erase</span>(nums.<span class="hljs-built_in">begin</span>()+j);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(nums[i]==nums[i+<span class="hljs-number">1</span>])<br>                i+=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span><br>                i+=<span class="hljs-number">1</span>;<br>        &#125; <br>        <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();       <br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：单指针"><a href="#方法二：单指针" class="headerlink" title="方法二：单指针"></a>方法二：单指针</h5><p>首先，定义一个指针 <code>i</code>，用来记录不重复元素的位置。</p><p>遍历数组 <code>nums</code>，对于数组中的每个元素 <code>num</code>：</p><ul><li>如果 <code>i</code> 小于 2（即数组前两个元素），或者当前元素 <code>num</code> 大于 <code>nums[i - 2]</code>（说明当前元素和前两个元素不相同），则将当前元素 <code>num</code> 赋值给 <code>nums[i]</code>，并将指针 <code>i</code> 向后移动一位，相当于将当前元素保留下来。</li><li>如果当前元素 <code>num</code> 和 <code>nums[i - 2]</code> 相同（说明当前元素已经重复出现两次以上），则不做任何操作，直接继续遍历下一个元素。</li></ul><p>最后返回指针 <code>i</code>，即为删除重复元素后数组的新长度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> </span>&#123;<br>       <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>           <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">2</span> || num &gt; nums[i - <span class="hljs-number">2</span>]) &#123;<br>               nums[i++] = num;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> i;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）买卖股票的最佳时机"><a href="#（5）买卖股票的最佳时机" class="headerlink" title="（5）买卖股票的最佳时机"></a>（5）买卖股票的最佳时机</h4><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></p><p>自己写的代码太丑陋了而且还有bug（不知道为啥），这是chatgpt写的，跟我一样的思路怎么就这么简洁呢呃呃呃，怎么不算天才呢</p><p>我用了两个数组去记录……左边最小值和右边最大值，怎么不算愚蠢呢……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>    <span class="hljs-type">int</span> minPrice = INT_MAX;<br>    <span class="hljs-type">int</span> maxProfit = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> price : prices) &#123;<br>        minPrice = <span class="hljs-built_in">min</span>(minPrice, price);   <span class="hljs-comment">//记录到目前位置的股票价格最小值</span><br>        maxProfit = <span class="hljs-built_in">max</span>(maxProfit, price - minPrice);  <span class="hljs-comment">//维护利润最大值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> maxProfit;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2024-5-31"><a href="#2024-5-31" class="headerlink" title="2024&#x2F;5&#x2F;31"></a>2024&#x2F;5&#x2F;31</h3><h4 id="（1）买卖股票的最佳时机-（动规、贪心）"><a href="#（1）买卖股票的最佳时机-（动规、贪心）" class="headerlink" title="（1）买卖股票的最佳时机||（动规、贪心）"></a>（1）买卖股票的最佳时机||（动规、贪心）</h4><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/?envType=study-plan-v2&envId=top-interview-150">122. 买卖股票的最佳时机 II - 力扣（LeetCode）</a></p><h5 id="方法一：直接求解-贪心"><a href="#方法一：直接求解-贪心" class="headerlink" title="方法一：直接求解&#x2F;贪心"></a>方法一：直接求解&#x2F;贪心</h5><p>按照直接求解的思路，如果要使利润最大化，只需要把股票价格看成折线图，计算每一次上升的利润。如果把距离看为1，就看每两天是否有利润，只要有就增加利润值。</p><p>按照贪心的思路，由于股票的购买没有限制，因此相当于找到若干个不相交的区间，使区间内利润和最大。如果区间长度为1，也就等同于了刚刚的思路。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br><span class="hljs-type">int</span> maxp=<span class="hljs-number">0</span>,n=prices.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>     maxp+=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,prices[i+<span class="hljs-number">1</span>]-prices[i]);  <span class="hljs-comment">//省去了每次判断两个股票值的大小</span><br>   <span class="hljs-keyword">return</span> maxp;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：动态规划-1"><a href="#方法二：动态规划-1" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h5><p>虽然知道可以动态规划但是就是想不到怎么规划！！！</p><p>首先要设置状态，可以设置dp[i] [0]表示第i天交易完时手里没有股票的最大利润，dp[i] [1]则表示手里有股票。下面就可以列状态转移方程。（一开始真的想复杂了，所以完全不知道这怎么转移）对于dp[i] [0]，有两种情况：1、dp[i] [0]&#x3D;dp[i-1] [0]（和前一天保持一致）                              2、dp[i] [0]&#x3D;dp[i-1] [1]+prices[i]（前一天有股票，今天卖出，获得今天的收益，不用管成本）对于dp[i] [1]：1、dp[i] [1]&#x3D;dp[i-1] [1]；2、dp[i] [1]&#x3D;dp[i-1] [0]-prices[i]</p><p>遍历结束后，我们手中有两个值，dp[n-1] [0]和dp[n-1] [1]，显然最后手里没有股票的话利润才是最大的，因此应该返回dp[n-1] [0]。</p><p>对于这道题也可以空间优化，因为每次都只是用到了前一天的两个值而已。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br><span class="hljs-type">int</span> n=prices.<span class="hljs-built_in">size</span>(),dp0,dp1,newdp0,newdp1;<br>   dp0=<span class="hljs-number">0</span>,dp1=-prices[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>      newdp0=<span class="hljs-built_in">max</span>(dp0,dp1+prices[i]);<br>      newdp1=<span class="hljs-built_in">max</span>(dp1,dp0-prices[i]);<br>      dp0=newdp0;<br>      dp1=newdp1;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp0;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）三数之和（双指针）"><a href="#（2）三数之和（双指针）" class="headerlink" title="（2）三数之和（双指针）"></a>（2）三数之和（双指针）</h4><p><a href="https://leetcode.cn/problems/3sum/description/?envType=study-plan-v2&envId=top-interview-150">15. 三数之和 - 力扣（LeetCode）</a></p><h5 id="方法一-自己写的（我也想写双指针法？？）"><a href="#方法一-自己写的（我也想写双指针法？？）" class="headerlink" title="方法一:自己写的（我也想写双指针法？？）"></a>方法一:自己写的（我也想写双指针法？？）</h5><p>通过了308&#x2F;313个用例呜呜呜我哭死。最后是时间超了，我的代码好丑陋……感觉超时间应该是因为用到了查找函数，有点丑陋。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>(),cur;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; num;<br>     <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">3</span>||nums[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>||nums[n<span class="hljs-number">-1</span>]&lt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> num;<br>        vector&lt;<span class="hljs-type">int</span>&gt; tmp;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-2</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&gt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>           <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]=nums[i+<span class="hljs-number">1</span>])<br>              <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;n<span class="hljs-number">-1</span>;j++)&#123;<br>                cur=nums[i]+nums[j];<br>                cur=<span class="hljs-number">0</span>-cur;<br>                <span class="hljs-keyword">auto</span> it=<span class="hljs-built_in">find</span>(nums.<span class="hljs-built_in">begin</span>()+j+<span class="hljs-number">1</span>,nums.<span class="hljs-built_in">end</span>(),cur);<br>                <span class="hljs-keyword">if</span>(it!=nums.<span class="hljs-built_in">end</span>())&#123;<br>                    tmp=&#123;nums[i],nums[j],nums[it-nums.<span class="hljs-built_in">begin</span>()]&#125;;<br>                    <span class="hljs-keyword">if</span>(num.<span class="hljs-built_in">empty</span>()||<span class="hljs-built_in">find</span>(num.<span class="hljs-built_in">begin</span>(),num.<span class="hljs-built_in">end</span>(),tmp)==num.<span class="hljs-built_in">end</span>())<br>                    num.<span class="hljs-built_in">push_back</span>(tmp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：（相向）双指针法"><a href="#方法二：（相向）双指针法" class="headerlink" title="方法二：（相向）双指针法"></a>方法二：（相向）双指针法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>   <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">//第一步排序</span><br>   vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; num;    <br>   <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();   <span class="hljs-comment">//我好不容易严谨一会上来就判断n是不是小于3，结果题目写了n&gt;=3</span><br>   <span class="hljs-keyword">if</span>(nums[n<span class="hljs-number">-1</span>]+num[n<span class="hljs-number">-2</span>]+nums[n<span class="hljs-number">-3</span>]&lt;<span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> num;   <span class="hljs-comment">//最大三数和都小于0了</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-2</span>;i++)&#123;<br>      <span class="hljs-type">int</span> x=nums[i];<br>      <span class="hljs-keyword">if</span>(i&amp;&amp;x=nums[i<span class="hljs-number">-1</span>])   <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//跳过重复元素</span><br>      <span class="hljs-keyword">if</span>(nums[i]+num[i+<span class="hljs-number">1</span>]+nums[i+<span class="hljs-number">2</span>]&gt;<span class="hljs-number">0</span>)   <span class="hljs-keyword">break</span>;   <span class="hljs-comment">//三数之和已经大于0</span><br>      <span class="hljs-keyword">if</span>(nums[n<span class="hljs-number">-1</span>]+num[n<span class="hljs-number">-2</span>]+nums[i]&lt;<span class="hljs-number">0</span>)   <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//和最大两个数相加都大于0</span><br>      <span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>,k=n<span class="hljs-number">-1</span>;   <span class="hljs-comment">//一前一后两个指针</span><br>      <span class="hljs-keyword">while</span>(j&lt;k)&#123;<br>         <span class="hljs-type">int</span> t=x+nums[j]+nums[k];<br>         <span class="hljs-keyword">if</span>(t&gt;<span class="hljs-number">0</span>)  k--;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t&lt;<span class="hljs-number">0</span>)  s--;<br>         <span class="hljs-keyword">else</span>&#123;<br>            num.push_back&#123;x,nums[j],nums[k]&#125;;<br>            <span class="hljs-keyword">for</span>(++j;j&lt;k&amp;&amp;nums[j]==nums[j<span class="hljs-number">-1</span>];++j);<br>            <span class="hljs-keyword">for</span>(--k;j&lt;k&amp;&amp;nums[k]==nums[k+<span class="hljs-number">1</span>];--k);  <span class="hljs-comment">//跳过重复的数字</span><br>         &#125;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）买卖股票的最佳时机-（k次）-动态规划"><a href="#（3）买卖股票的最佳时机-（k次）-动态规划" class="headerlink" title="（3）买卖股票的最佳时机|||（k次）(动态规划)"></a>（3）买卖股票的最佳时机|||（k次）(动态规划)</h4><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/">188. 买卖股票的最佳时机 IV - 力扣（LeetCode）</a></p><p>我是真的没有想到还有|||……后面好像还有IV。今天下午都要买卖股票啦，哈哈哈（苦笑）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=INT_MIN/<span class="hljs-number">2</span>;  <span class="hljs-comment">//除以二是为了防止溢出</span><br>   <span class="hljs-type">int</span> n=prices.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span> buy1=inf; <span class="hljs-comment">//第一次买后的最大收益，初始值设置为最低</span><br>   <span class="hljs-type">int</span> sell1=<span class="hljs-number">0</span>;  <span class="hljs-comment">//第一次卖掉后的最大收益</span><br>   <span class="hljs-type">int</span> buy2=inf;<br>   <span class="hljs-type">int</span> sell2=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;  <span class="hljs-comment">//变量更新的顺序可以随意调换</span><br>      sell1=<span class="hljs-built_in">max</span>(sell1,buy1+prices[i]);<br>      buy1=<span class="hljs-built_in">max</span>(buy1,-prices[i]);<br>      sell2=<span class="hljs-built_in">max</span>(sell2,buy2+prices[i]);<br>      buy2=<span class="hljs-built_in">max</span>(buy2,sell1-prices[i]);<br>   &#125;<br>   <span class="hljs-keyword">return</span> sell2;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）买卖股票的最佳时期（k次）"><a href="#（4）买卖股票的最佳时期（k次）" class="headerlink" title="（4）买卖股票的最佳时期（k次）"></a>（4）买卖股票的最佳时期（k次）</h4><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/?envType=study-plan-v2&envId=top-interview-150">188. 买卖股票的最佳时机 IV - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span> k, vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br><span class="hljs-type">int</span> n=prices.<span class="hljs-built_in">size</span>();<br>   k=<span class="hljs-built_in">min</span>(k,n/<span class="hljs-number">2</span>);<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">buy</span><span class="hljs-params">(k+<span class="hljs-number">1</span>)</span></span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sell</span><span class="hljs-params">(k+<span class="hljs-number">1</span>)</span></span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>      buy[i]=INT_MIN/<span class="hljs-number">2</span>;<br>      sell[i]=<span class="hljs-number">0</span>;<br>   &#125;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)&#123;<br>         buy[j]=<span class="hljs-built_in">max</span>(buy[j],sell[j<span class="hljs-number">-1</span>]-prices[i]);<br>         sell[j]=<span class="hljs-built_in">max</span>(sell[j],buy[j<span class="hljs-number">-1</span>]+prices[i]);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> sell[k];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）阶乘后的0（数学）"><a href="#（5）阶乘后的0（数学）" class="headerlink" title="（5）阶乘后的0（数学）"></a>（5）阶乘后的0（数学）</h4><p><a href="https://leetcode.cn/problems/factorial-trailing-zeroes/description/?envType=study-plan-v2&envId=top-interview-150">172. 阶乘后的零 - 力扣（LeetCode）</a></p><p>这居然是中等？？你的中等我的中等好像不一样？？自己ac了但是贴个复杂度更小的解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trailingZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>   <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span>(n)&#123;<br>      n=n/<span class="hljs-number">5</span>;<br>      ans+=n;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ans;  <span class="hljs-comment">//就是~这么简单</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-6-1"><a href="#2024-6-1" class="headerlink" title="2024&#x2F;6&#x2F;1"></a>2024&#x2F;6&#x2F;1</h2><p>休息一天。。头疼</p><h3 id="2024-6-2"><a href="#2024-6-2" class="headerlink" title="2024&#x2F;6&#x2F;2"></a>2024&#x2F;6&#x2F;2</h3><h4 id="（1）直线上最多的点数"><a href="#（1）直线上最多的点数" class="headerlink" title="（1）直线上最多的点数"></a>（1）直线上最多的点数</h4><p><a href="https://leetcode.cn/problems/max-points-on-a-line/description/?envType=study-plan-v2&envId=top-interview-150">149. 直线上最多的点数 - 力扣（LeetCode）</a></p><p>枚举直线+哈希表：外层循环遍历每一个点，求出跟该点在同一条直线上的点的最大值，然后再得到所有点中的最大值。题目中用字符串保存斜率，求出x坐标差和y坐标差后，求出他们的最大公约数，分别除去再存储，可以有效的维护相同斜率的哈希表，也可以很好地使x坐标差为0的情况方便存储。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxPoints</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = points.<span class="hljs-built_in">size</span>(), ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            map&lt;string, <span class="hljs-type">int</span>&gt; map;  <span class="hljs-comment">//每次循环都要重新构造哈希表</span><br>            <span class="hljs-type">int</span> maxv = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-type">int</span> x1 = points[i][<span class="hljs-number">0</span>], y1 = points[i][<span class="hljs-number">1</span>], x2 = points[j][<span class="hljs-number">0</span>], y2 = points[j][<span class="hljs-number">1</span>];<br>                <span class="hljs-type">int</span> a = x1 - x2, b = y1 - y2;<br>                <span class="hljs-type">int</span> k = <span class="hljs-built_in">gcd</span>(a, b);<br>                string key = <span class="hljs-built_in">to_string</span>(a / k) + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-built_in">to_string</span>(b / k);<br>                map[key]++;<br>                maxv = <span class="hljs-built_in">max</span>(maxv, map[key]);<br>            &#125;<br>            ans = <span class="hljs-built_in">max</span>(ans, maxv + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<span class="hljs-comment">// 求最大公约数的代码</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> b == <span class="hljs-number">0</span> ? a : <span class="hljs-built_in">gcd</span>(b, a % b);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>求最小公倍数的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">// 先求最大公约数</span><br>    <span class="hljs-type">int</span> num = <span class="hljs-built_in">gcd</span>(a, b);<br>    <span class="hljs-comment">// 利用最大公约数求最小公倍数</span><br>    <span class="hljs-keyword">return</span> (a * b) / num;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）零钱兑换（一维动规）"><a href="#（2）零钱兑换（一维动规）" class="headerlink" title="（2）零钱兑换（一维动规）"></a>（2）零钱兑换（一维动规）</h4><p><a href="https://leetcode.cn/problems/coin-change/?envType=study-plan-v2&envId=top-interview-150">322. 零钱兑换 - 力扣（LeetCode）</a></p><p>很好的题目，使我小脑萎缩。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span>&#123;<br>   <span class="hljs-type">int</span> MAX=amount+<span class="hljs-number">1</span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(amount+<span class="hljs-number">1</span>,MAX)</span></span>;  <span class="hljs-comment">//若最后dp(amount)为max证明凑不到</span><br>   dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=amount;i++)<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-type">int</span>)coins.<span class="hljs-built_in">size</span>();++j)<br>         <span class="hljs-keyword">if</span>(coins[j]&lt;=i)<br>            dp[i]=<span class="hljs-built_in">min</span>(dp[i],dp[i-coins[j]]+<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> dp[amount]==MAX?<span class="hljs-number">-1</span>:dp[amount];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++二叉树详解（概念+例题）</title>
    <link href="/2024/05/20/c++%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%A6%82%E5%BF%B5+%E4%BE%8B%E9%A2%98%EF%BC%89/"/>
    <url>/2024/05/20/c++%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%A6%82%E5%BF%B5+%E4%BE%8B%E9%A2%98%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>二叉树的学习记录</p><span id="more"></span><h3 id="一、二叉树相关概念"><a href="#一、二叉树相关概念" class="headerlink" title="一、二叉树相关概念"></a>一、二叉树相关概念</h3><h4 id="（1）二叉树的结构（照搬力扣网站）"><a href="#（1）二叉树的结构（照搬力扣网站）" class="headerlink" title="（1）二叉树的结构（照搬力扣网站）"></a>（1）二叉树的结构（照搬力扣网站）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br><span class="hljs-type">int</span> val;<br>TreeNode *left;<br>TreeNode *right;<br><span class="hljs-built_in">TreeNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x, TreeNode *left, TreeNode *right) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(left), <span class="hljs-built_in">right</span>(right) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>满二叉树&#x2F;完全二叉树（只有最后一层缺失，且只有右边缺失）</p><h4 id="（2）二叉搜索树"><a href="#（2）二叉搜索树" class="headerlink" title="（2）二叉搜索树"></a>（2）二叉搜索树</h4><h4 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h4><p>一个节点左子树上的所有节点的值全部小于该节点，右子树上所有结点的值全部大于该节点。</p><p>作用：树如其名，二叉搜索树在搜索某个节点的值时速度更快。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240522195705342.png" alt="image-20240522195705342" style="zoom: 67%;" /><p>如图，若想要找节点6，从根节点开始，小于根节点，找左子树；大于节点3，找右子树；等于节点6，找到节点。</p><p>除此之外，我们会发现这棵二叉搜索树的中序遍历：1.3.4.6.7.8.10.13.14</p><h4 id="2、二叉搜索树的搭建"><a href="#2、二叉搜索树的搭建" class="headerlink" title="2、二叉搜索树的搭建"></a>2、二叉搜索树的搭建</h4><p>(1)笨蛋版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>   TreeNode* temp=root;<br>   TreeNode* prev=<span class="hljs-literal">nullptr</span>;<br>   <span class="hljs-keyword">while</span>(temp)&#123;<br>      prev=temp;<br>      <span class="hljs-keyword">if</span>(k&lt;temp-&gt;val)<br>         temp=temp-&gt;next;<br>      <span class="hljs-keyword">else</span><br>         temp=temp-&gt;right;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(k&lt;prev-&gt;val)&#123;<br>      TreeNode* curr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(k);<br>      prev-&gt;left=curr;<br>      curr-&gt;left=curr-&gt;right=<span class="hljs-literal">nullptr</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(k&gt;prev-&gt;val)&#123;<br>      TreeNode* curr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(k);<br>      prev-&gt;right=curr;<br>      curr-&gt;left=curr-&gt;right=<span class="hljs-literal">nullptr</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）调用自身搭建</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">add</span><span class="hljs-params">(TreeNode* root,<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(root=<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(num);<br>   <span class="hljs-keyword">if</span>(root-&gt;val&gt;num)<br>      root-&gt;left=<span class="hljs-built_in">add</span>(root-&gt;left,num);<br>   <span class="hljs-keyword">else</span><br>      root-&gt;right=<span class="hljs-built_in">add</span>(root-&gt;right,num);<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、二叉搜索树的例题"><a href="#3、二叉搜索树的例题" class="headerlink" title="3、二叉搜索树的例题"></a>3、二叉搜索树的例题</h4><h5 id="1-由二叉搜索树的中序遍历搭建二叉搜索树（傻眼）"><a href="#1-由二叉搜索树的中序遍历搭建二叉搜索树（傻眼）" class="headerlink" title="1&gt;由二叉搜索树的中序遍历搭建二叉搜索树（傻眼）"></a>1&gt;由二叉搜索树的中序遍历搭建二叉搜索树（傻眼）</h5><p>方法一：总是选取中序遍历中间位置左边的数字作为根节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">sortedArrayToBST</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">helper</span>(nums, <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function">TreeNode* <span class="hljs-title">helper</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span>(left&gt;right)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>   <span class="hljs-type">int</span> mid=(right+left)/<span class="hljs-number">2</span>;<br>   TreeNode* root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(num[mid]);<br>   root-&gt;left=<span class="hljs-built_in">helper</span>(nums,left,mid<span class="hljs-number">-1</span>);<br>   root-&gt;right=<span class="hljs-built_in">helper</span>(nums,mid+<span class="hljs-number">1</span>,right);<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：总是选取中序遍历中间位置左边的数字作为根节点（只需mid加一）</p><h5 id="2-找到二叉搜索树中第k大的节点值（k-cnt）"><a href="#2-找到二叉搜索树中第k大的节点值（k-cnt）" class="headerlink" title="2&gt;找到二叉搜索树中第k大的节点值（k&#x3D;cnt）"></a>2&gt;找到二叉搜索树中第k大的节点值（k&#x3D;cnt）</h5><p>方法一：（自写）（占用额外空间）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myinorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">myinorder</span>(root-&gt;right,nums);<br>    nums.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br>    <span class="hljs-built_in">myinorder</span>(root-&gt;left,nums);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findTargetNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> cnt)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums;<br>    <span class="hljs-built_in">myinorder</span>(root,nums);<br>    <span class="hljs-keyword">return</span> nums[cnt<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：优化（空间复杂度O(1)）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> k;<span class="hljs-type">int</span> res;   <span class="hljs-comment">//必须是全局变量</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myinorder</span><span class="hljs-params">(TreeNode* root)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">myinorder</span>(root-&gt;right);<br>    k--;<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//迭代到倒数第k节点，是第k大的节点</span><br>       res=root-&gt;val;<br>       <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">myinorder</span>(root-&gt;left);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findTargetNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> cnt)</span> </span>&#123;<br>    k=cnt;<br>    <span class="hljs-built_in">myinorder</span>(root);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-前序遍历构造二叉搜索树"><a href="#3-前序遍历构造二叉搜索树" class="headerlink" title="3&gt;前序遍历构造二叉搜索树"></a>3&gt;前序遍历构造二叉搜索树</h5><p>方法一：通过构建二叉搜索树的函数来构造</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">bstFromPreorder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder)</span> </span>&#123;<br>   TreeNode* root =<span class="hljs-built_in">add</span>(<span class="hljs-literal">nullptr</span>, preorder[<span class="hljs-number">0</span>]);<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; preorder.<span class="hljs-built_in">size</span>(); i++) &#123;<br>       root=<span class="hljs-built_in">add</span>(root, preorder[i]);<br>   &#125;<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：已知二叉搜索树的中序遍历是有序的，因此我们现在知道了二叉树的前序和中序遍历（中序遍历可由前序遍历排序得出），就可以搭建了。（见下面第八道例题）</p><p>方法三：递归（分析前序遍历的特点：我们会发现，由根节点开始，第一个大于根节点的节点及其后均为右子树，中间的是左子树，依此类推）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">bstFromPreorder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">mybst</span>(preorder,<span class="hljs-number">0</span>,preorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-function">TreeNode* <span class="hljs-title">mybst</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(left&gt;right)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>   <span class="hljs-type">int</span> root=preorder[left];<br>   <span class="hljs-type">int</span> mid=left;<br>   <span class="hljs-keyword">for</span>(;mid&lt;=right+<span class="hljs-number">1</span>;mid++)<br>      <span class="hljs-keyword">if</span>(preorder[mid]&gt;root)<br>         <span class="hljs-keyword">break</span>;<br>   TreeNode* node=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(root);<br>   node-&gt;left=<span class="hljs-built_in">mybst</span>(preorder,left+<span class="hljs-number">1</span>,mid<span class="hljs-number">-1</span>);<br>   node-&gt;right=<span class="hljs-built_in">mybst</span>(preorder,mid,right);<br>   <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-二叉搜索树的最近公共祖先"><a href="#4-二叉搜索树的最近公共祖先" class="headerlink" title="4&gt;二叉搜索树的最近公共祖先"></a>4&gt;二叉搜索树的最近公共祖先</h5><p>给定一个二叉树，找到该树中两个指定节点的最近公共祖先。（一个节点也可以是自己的祖先；最近：深度之差最小）</p><p>方法：递归（思路：找到分叉点。也就是两个节点都大于或者小于某个节点时，这个节点一定不是他们的最近公共祖先）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123; <span class="hljs-keyword">if</span>(p-&gt;val&lt;root-&gt;val&amp;&amp;q-&gt;val&lt;root-&gt;val)<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">lowestCommonAncestor</span>(root-&gt;left,p,q);<br>   <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">lowestCommonAncestor</span>(root-&gt;right,p,q);<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）二叉树的层次遍历（自顶向下）"><a href="#（3）二叉树的层次遍历（自顶向下）" class="headerlink" title="（3）二叉树的层次遍历（自顶向下）"></a>（3）二叉树的层次遍历（自顶向下）</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">102. 二叉树的层序遍历 - 力扣（LeetCode）</a></p><p>题目描述：给你二叉树的根节点 <code>root</code> ，返回其节点值的层序遍历。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240520152406792.png" alt="image-20240520152406792" style="zoom:50%;" /><p>输入：root &#x3D; [ 3 , 9 , 20 , null , null , 15 , 7 ]<br>        输出：[ [3] , [ 9 , 20 ] , [ 15 , 7 ] ]</p><p><strong>广度优先搜索法：</strong></p><p>（一直以为广度优先搜索都是固定的那种函数模板，函数体里总会调用自身函数，现在看来不是这样。）</p><p>（广度：一层一层全部搜索完再去下一层；深度：走到底再返回）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector &lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">levelOrder</span>(TreeNode* root) &#123;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; ret;  <span class="hljs-comment">//存储返回值</span><br>   <span class="hljs-keyword">if</span>(!root)<br>      <span class="hljs-keyword">return</span> ret;    <span class="hljs-comment">//空树，返回空向量</span><br>   queue &lt;TreeNode*&gt; q;   <span class="hljs-comment">//存储每一层的节点</span><br>   q.<span class="hljs-built_in">push</span>(root);    <span class="hljs-comment">//先压入第一层（根节点）</span><br>   <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;   <span class="hljs-comment">//第一层循环：表示各层的存储过程</span><br>      <span class="hljs-type">int</span> curl=q.<span class="hljs-built_in">size</span>();<br>      ret.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;());   <span class="hljs-comment">//每一层都要先添加一个空的向量，来存储这一层的节点值</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=curl;++i)&#123;   <span class="hljs-comment">//第二层循环：某一层的更新以及存储过程</span><br>         <span class="hljs-keyword">auto</span> node=q.<span class="hljs-built_in">front</span>();q.<span class="hljs-built_in">pop</span>();<br>         ret.<span class="hljs-built_in">back</span>().<span class="hljs-built_in">push_back</span>(node-&gt;val);  <span class="hljs-comment">//向最后一个向量后添加节点值</span><br>         <span class="hljs-keyword">if</span>(node-&gt;left) q.<span class="hljs-built_in">push</span>(node-&gt;left);  <span class="hljs-comment">//在队列内存储下层的节点值</span><br>         <span class="hljs-keyword">if</span>(node-&gt;right) q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>思路亦可改为每次循环新创建一个向量，然后压入每层节点值，最后再把这个向量压入二级向量中。</p><p><em><strong>二级向量数组</strong></em>：内层是向量，向量大小不固定；外层是存储这些向量的向量。</p><p><em><strong>emplace_push</strong></em>:据说速度要大于push_back。</p><h3 id="二、力扣刷题记录"><a href="#二、力扣刷题记录" class="headerlink" title="二、力扣刷题记录"></a>二、力扣刷题记录</h3><h4 id="（1）装饰树"><a href="#（1）装饰树" class="headerlink" title="（1）装饰树"></a>（1）装饰树</h4><p>装饰过程：在每个父节点与其子节点之间都插入一个值为-1的节点。返回完成装饰后树的根节点。<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240520171910175.png" alt="image-20240520171910175" style="zoom:67%;" /></p><p><strong>递归法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">expandBinaryTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span>(root!=<span class="hljs-literal">nullptr</span>)&#123;<br>      <span class="hljs-built_in">expandBinaryTree</span>(root-&gt;left);<br>      <span class="hljs-keyword">if</span>(root-&gt;left!=<span class="hljs-literal">nullptr</span>)&#123;<br>         TreeNode* T=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">-1</span>);<br>         T-&gt;left=root-&gt;left;<br>         root-&gt;left=T;<br>      &#125;<br>      <span class="hljs-built_in">expandBinaryTree</span>(root-&gt;right);<br>      <span class="hljs-keyword">if</span>(root-&gt;right!=<span class="hljs-literal">nullptr</span>)&#123;<br>         TreeNode* T=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">-1</span>);<br>         T-&gt;right=root-&gt;right;<br>         root-&gt;right=T;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）求二叉树的最小深度"><a href="#（2）求二叉树的最小深度" class="headerlink" title="（2）求二叉树的最小深度"></a>（2）求二叉树的最小深度</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/">111. 二叉树的最小深度 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>   <span class="hljs-comment">//只有左节点或右节点只能返回此节点的最小深度了（非叶子节点）</span><br>   <span class="hljs-keyword">if</span>(root-&gt;left==<span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> <span class="hljs-built_in">minDepth</span>(root-&gt;right)+<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">if</span>(root-&gt;right == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">minDepth</span>(root-&gt;left) + <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">minDepth</span>(root-&gt;left), <span class="hljs-built_in">minDepth</span>(root-&gt;right)) + <span class="hljs-number">1</span>;<br>   <span class="hljs-comment">//叶子节点来选择最小深度</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）N叉树的前序遍历"><a href="#（3）N叉树的前序遍历" class="headerlink" title="（3）N叉树的前序遍历"></a>（3）N叉树的前序遍历</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/description/">589. N 叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> val;<br>vector&lt;Node*&gt; children;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorder</span><span class="hljs-params">(Node* root)</span></span>&#123;<br>      vector&lt;<span class="hljs-type">int</span>&gt; res;<br>      <span class="hljs-built_in">helper</span>(root,res);<br>      <span class="hljs-keyword">return</span> res;<br>   &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">helper</span><span class="hljs-params">(<span class="hljs-type">const</span> Node* root, vector&lt;<span class="hljs-type">int</span>&gt; &amp; res)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>         <span class="hljs-keyword">return</span>;<br>      res.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp; ch:root-&gt;children)<br>         <span class="hljs-built_in">helper</span>(ch,res);  <span class="hljs-comment">//对每个子节点都进行前序遍历</span><br>   &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（4）克隆二叉树（递归）（无连接）"><a href="#（4）克隆二叉树（递归）（无连接）" class="headerlink" title="（4）克隆二叉树（递归）（无连接）"></a>（4）克隆二叉树（递归）（无连接）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">cloneTree</span><span class="hljs-params">(TreeNode root)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(root==null)<br>      <span class="hljs-keyword">return</span> null;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode&#123;root.val,<span class="hljs-built_in">cloneTree</span>(root.left),<span class="hljs-built_in">cloneTree</span>(root.right)&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）翻转二叉树-递归"><a href="#（5）翻转二叉树-递归" class="headerlink" title="（5）翻转二叉树(递归)"></a>（5）翻转二叉树(递归)</h4><p><a href="https://leetcode.cn/problems/invert-binary-tree/description/">226. 翻转二叉树 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(root==null)<br>      <span class="hljs-keyword">return</span> null;<br>   TreeNode* left=<span class="hljs-built_in">invertTree</span>(root-&gt;left);<br>   TreeNode* right=<span class="hljs-built_in">invertTree</span>(root-&gt;right);<br>   root-&gt;left=right;<br>   root-&gt;right=left;<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（6）相同的树-终于自己写会的递归，只是有细节不到位"><a href="#（6）相同的树-终于自己写会的递归，只是有细节不到位" class="headerlink" title="（6）相同的树(终于自己写会的递归，只是有细节不到位)"></a>（6）相同的树(终于自己写会的递归，只是有细节不到位)</h4><p><a href="https://leetcode.cn/problems/same-tree/description/">100. 相同的树 - 力扣（LeetCode）</a></p><p>错误版本：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(TreeNode* p, TreeNode* q)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(p-&gt;val!=q-&gt;val)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span>(p==q==null)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">isSameTree</span>(p-&gt;left,q-&gt;left)+<span class="hljs-built_in">isSameTree</span>(p-&gt;right,q-&gt;right)==<span class="hljs-number">2</span>?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确版本：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(TreeNode* p, TreeNode* q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">nullptr</span>&amp;&amp;q==<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">nullptr</span>||q==<span class="hljs-literal">nullptr</span>)  <span class="hljs-comment">//这个情况不要漏掉了</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(p-&gt;val!=q-&gt;val)   <span class="hljs-comment">//一定要先判断是不是空再取节点值！！！！！！！</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">isSameTree</span>(p-&gt;left,q-&gt;left)&amp;&amp;<span class="hljs-built_in">isSameTree</span>(p-&gt;right,q-&gt;right);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（7）对称二叉树"><a href="#（7）对称二叉树" class="headerlink" title="（7）对称二叉树"></a>（7）对称二叉树</h4><p><a href="https://leetcode.cn/problems/symmetric-tree/description/">101. 对称二叉树 - 力扣（LeetCode）</a></p><p>方法一：根据前几道题解来判断（反转后如果和原树相同说明是对称的）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>TreeNode root1=<span class="hljs-built_in">invertTree</span>(root);<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">isSameTree</span>(root1,root);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：递归（和判断是否是相同树很像）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">issame</span>(root,root);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">issame</span><span class="hljs-params">(TreeNode* l,TreeNode* r)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(l==<span class="hljs-literal">nullptr</span>&amp;&amp;r==<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">if</span>(l==<span class="hljs-literal">nullptr</span>||r==<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">return</span> l-&gt;val==r-&gt;val&amp;&amp;<span class="hljs-built_in">issame</span>(l-&gt;left,r-&gt;right)&amp;&amp;<span class="hljs-built_in">issame</span>(l-&gt;right,r-&gt;left);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（8）由遍历构造二叉树"><a href="#（8）由遍历构造二叉树" class="headerlink" title="（8）由遍历构造二叉树"></a>（8）由遍历构造二叉树</h4><h5 id="1-由前序遍历和中序遍历构造二叉树"><a href="#1-由前序遍历和中序遍历构造二叉树" class="headerlink" title="1&gt;由前序遍历和中序遍历构造二叉树"></a>1&gt;由前序遍历和中序遍历构造二叉树</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(pre.<span class="hljs-built_in">empty</span>())<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>   TreeNode* root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(pre[<span class="hljs-number">0</span>]);<br>   <span class="hljs-comment">//pre.erase(pre.begin());</span><br>   <span class="hljs-type">int</span> size=<span class="hljs-built_in">find</span>(in.<span class="hljs-built_in">begin</span>(),in.<span class="hljs-built_in">end</span>(),pre[<span class="hljs-number">0</span>]);<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">prel</span><span class="hljs-params">(pre.begin()+<span class="hljs-number">1</span>,pre.begin()+size+<span class="hljs-number">1</span>)</span></span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">prer</span><span class="hljs-params">(pre.begin()+size+<span class="hljs-number">1</span>,pre.end())</span></span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inl</span><span class="hljs-params">(in.begin(),in.begin()+size)</span></span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inr</span><span class="hljs-params">(in.begin()+size+<span class="hljs-number">1</span>,in.end())</span></span>;<br>   root-&gt;left=<span class="hljs-built_in">mybuildTree</span>(prel,inl);<br>   root-&gt;right=<span class="hljs-built_in">mybuildTree</span>(prer,inr);<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++链表详解（概念+例题）</title>
    <link href="/2024/05/14/c++%E9%93%BE%E8%A1%A8%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%A6%82%E5%BF%B5+%E4%BE%8B%E9%A2%98%EF%BC%89/"/>
    <url>/2024/05/14/c++%E9%93%BE%E8%A1%A8%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%A6%82%E5%BF%B5+%E4%BE%8B%E9%A2%98%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>学不懂链表，写个博客浅浅记录一下链表的学习叭。</p><span id="more"></span><h3 id="一、数组与链表的区别"><a href="#一、数组与链表的区别" class="headerlink" title="一、数组与链表的区别"></a>一、数组与链表的区别</h3><p>面试中除了会问到栈和队列的区别，还可能会询问数组（顺序表）与链表的区别。我们也可以先从熟悉的数据结构：数组，通过分析它和链表的区别来体会链表的特征。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240517152625892.png" alt="image-20240517152625892"></p><h3 id="二、单链表的介绍"><a href="#二、单链表的介绍" class="headerlink" title="二、单链表的介绍"></a>二、单链表的介绍</h3><h4 id="1、单链表的结构"><a href="#1、单链表的结构" class="headerlink" title="1、单链表的结构"></a>1、单链表的结构</h4><h4 id="（1）图示"><a href="#（1）图示" class="headerlink" title="（1）图示"></a>（1）图示</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240523151418436.png" alt="image-20240523151418436" style="zoom: 33%;" /><h4 id="（2）代码"><a href="#（2）代码" class="headerlink" title="（2）代码"></a>（2）代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Listnode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Listnode* next;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2、头插"><a href="#2、头插" class="headerlink" title="2、头插"></a>2、头插</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listcreatf</span><span class="hljs-params">(Listnode** head,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    Listnode* newnode=<span class="hljs-keyword">new</span> Listnode &#123;x,<span class="hljs-literal">NULL</span>&#125;;<br>    newnode-&gt;next=*head;  <span class="hljs-comment">//新指针指向原来的头指针</span><br>    *head=newnode;  <span class="hljs-comment">//新指针成为头指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>函数的第一个参数类型应该为<strong>二级指针</strong>，因为涉及到改变&#x2F;初始化头节点，这个操作需要为一级指针的值赋值。</p><h4 id="3、单链表的创建（尾插）"><a href="#3、单链表的创建（尾插）" class="headerlink" title="3、单链表的创建（尾插）"></a>3、单链表的创建（尾插）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listcreatb</span><span class="hljs-params">(Listnode** head,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//用new来创建一个新指针，值为x，指向为空   </span><br>    Listnode* newnode=<span class="hljs-keyword">new</span> Listnode &#123;x,<span class="hljs-literal">NULL</span>&#125;;<br>    <span class="hljs-keyword">if</span>(*head==<span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">//如果是空链表，将newnode作为头节点</span><br>        *head=newnode;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        Listnode* tail=*head;  <span class="hljs-comment">//每次插入新的节点都需要从头遍历</span><br>        <span class="hljs-keyword">while</span>(tail-&gt;next!=<span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//目的是找到尾节点（它的指向为空）</span><br>            tail=tail-&gt;next;<br>        tail-&gt;next=newnode;  <span class="hljs-comment">//将新节点连接在尾节点后面，作为新的尾节点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、链表的释放"><a href="#4、链表的释放" class="headerlink" title="4、链表的释放"></a>4、链表的释放</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listfree</span><span class="hljs-params">(Listnode** head)</span></span><br><span class="hljs-function"></span>&#123;<br>Listnode* cur;  <span class="hljs-comment">//新建一个节点</span><br>    <span class="hljs-keyword">while</span>(*head)&#123;<br>        cur=*head;  <span class="hljs-comment">//cur指向当前的头节点</span><br>        *head=cur-&gt;next;  <span class="hljs-comment">//下一位节点成为头节点</span><br>        <span class="hljs-built_in">delete</span>(cur);   <span class="hljs-comment">//删除头节点</span><br>        cur=<span class="hljs-literal">nullptr</span>;  <span class="hljs-comment">//必须置空，否则会成为野指针</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、链表的打印"><a href="#5、链表的打印" class="headerlink" title="5、链表的打印"></a>5、链表的打印</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listprint</span><span class="hljs-params">(Listnode* head)</span></span><br><span class="hljs-function"></span>&#123;<br>   listnode* cur=head;  <span class="hljs-comment">//cur节点指向头节点</span><br>   <span class="hljs-keyword">while</span>(cur)&#123;<br>      cout&lt;&lt;cur-&gt;data&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>;  <span class="hljs-comment">//依次打印</span><br>      cur=cur-&gt;next;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、删除链表中的节点"><a href="#6、删除链表中的节点" class="headerlink" title="6、删除链表中的节点"></a>6、删除链表中的节点</h4><h4 id="（1）删除头节点"><a href="#（1）删除头节点" class="headerlink" title="（1）删除头节点"></a>（1）删除头节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listdeletef</span><span class="hljs-params">(Listnode** head)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(*head==<span class="hljs-literal">NULL</span>)<br>      <span class="hljs-keyword">return</span>;<br>   <span class="hljs-keyword">else</span>&#123;<br>      Listnode* newnode=(*head)-&gt;next;<br>      <span class="hljs-built_in">delete</span>(*head);<br>      *head=newnode;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）删除尾节点"><a href="#（2）删除尾节点" class="headerlink" title="（2）删除尾节点"></a>（2）删除尾节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listdeleteb</span><span class="hljs-params">(Listnode** head)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(*head==<span class="hljs-literal">NULL</span>) <span class="hljs-comment">//空链表</span><br>      <span class="hljs-keyword">return</span>;<br>   <span class="hljs-keyword">if</span>((*head)-&gt;next==<span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">//只有一个节点</span><br>      <span class="hljs-built_in">delete</span>(*head);<br>      *head=n;  <span class="hljs-comment">//需要置空</span><br>   &#125;<br>   <span class="hljs-keyword">else</span>&#123;<br>      Listnode* cur=*head;  <br>      Listnode* tmp=<span class="hljs-literal">NULL</span>;  <br>      <span class="hljs-keyword">while</span>(cur-&gt;next)&#123;<br>         tmp=cur;<br>         cur=cur-&gt;next;  <span class="hljs-comment">//找到尾节点</span><br>      &#125;<br>      <span class="hljs-built_in">delete</span>(cur);<br>      cur=<span class="hljs-literal">NULL</span>;<br>      tmp-&gt;next=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//tmp成为尾节点</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）删除等于给定值的所有节点"><a href="#（3）删除等于给定值的所有节点" class="headerlink" title="（3）删除等于给定值的所有节点"></a>（3）删除等于给定值的所有节点</h4><p>注意这个函数里会返回头节点因为函数参数只需要是一级指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Listnode* <span class="hljs-title">Listdelete</span><span class="hljs-params">(Listdode* head,<span class="hljs-type">int</span> x)</span>  </span><br><span class="hljs-function"></span>&#123;<br>   Listnode* tmp=<span class="hljs-literal">NULL</span>;Listnode* cur=head;<br>   <span class="hljs-keyword">while</span>(cur)&#123;<br>      <span class="hljs-keyword">if</span>(cur-&gt;data==x)&#123;<br>         <span class="hljs-keyword">if</span>(cur==head)&#123;   <span class="hljs-comment">//如果头节点就是要删除的节点</span><br>            head=cur-&gt;next;<br>            <span class="hljs-built_in">delete</span>(cur);<br>            cur=head;<br>         &#125;<br>         <span class="hljs-keyword">else</span>&#123;<br>            tmp-&gt;next=cur-&gt;next;<br>            <span class="hljs-built_in">delete</span>(cur);<br>            cur=tmp-&gt;next;<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>         tmp=cur;<br>         cur=cur-&gt;next;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）删除指定位置的节点"><a href="#（4）删除指定位置的节点" class="headerlink" title="（4）删除指定位置的节点"></a>（4）删除指定位置的节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">Listdeletepos</span><span class="hljs-params">(Listnode** head,Listnode* pos)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(*head==pos)&#123;<br>      *head=pos-&gt;next;<br>      <span class="hljs-built_in">delete</span>(pos);<br>      pos=<span class="hljs-literal">nullptr</span>;<br>   &#125;<br>   <span class="hljs-keyword">else</span>&#123;<br>      Listnode* cur=*head;<br>      <span class="hljs-keyword">while</span>(cur-&gt;next!=pos)&#123;<br>         cur=cur-&gt;next;<br>      &#125;<br>      cur-&gt;next=pos-&gt;next;<br>      <span class="hljs-built_in">delete</span>(pos);<br>      pos=<span class="hljs-literal">nullptr</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-链表元素的查找"><a href="#7-链表元素的查找" class="headerlink" title="7.链表元素的查找"></a>7.链表元素的查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Listnode* <span class="hljs-title">Listfind</span><span class="hljs-params">(Listnode* head,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>Listnode* cur=head;<br>   <span class="hljs-keyword">while</span>(cur)&#123;<br>      <span class="hljs-keyword">if</span>(cur-&gt;data==x)<br>         <span class="hljs-keyword">return</span> cur;<br>      <span class="hljs-keyword">else</span><br>         cur=cur-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-在指定位置后插入节点"><a href="#8-在指定位置后插入节点" class="headerlink" title="8.在指定位置后插入节点"></a>8.在指定位置后插入节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listinsertb</span><span class="hljs-params">(Listnode* pos,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>   Listnode* newnode=<span class="hljs-keyword">new</span> Listnode &#123;x,<span class="hljs-literal">NULL</span>&#125;;<br>   newnode-&gt;next=pos-&gt;next;<br>   pos-&gt;next=newnode;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、单链表的应用-例题"><a href="#三、单链表的应用-例题" class="headerlink" title="三、单链表的应用&amp;例题"></a>三、单链表的应用&amp;例题</h3><h4 id="1-链表反转"><a href="#1-链表反转" class="headerlink" title="1.链表反转"></a>1.链表反转</h4><p>力扣题目连接：<a href="https://leetcode.cn/problems/reverse-linked-list/description/">206. 反转链表 - 力扣（LeetCode）</a></p><img src="C:/Users/姚姚/AppData/Roaming/Typora/typora-user-images/image-20240518103637208.png" alt="image-20240518103637208" style="zoom: 67%;" /><p><strong>方法一：迭代</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span></span>&#123;<br>         ListNode* prev=<span class="hljs-literal">nullptr</span>;<br>         ListNode* curr=head;<br>         <span class="hljs-keyword">while</span>(curr)&#123;<br>            ListNode* next=curr-&gt;next;<br>            curr-&gt;next=prev;<br>            pre=curr;<br>            curr=next;<br>         &#125;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>**-&gt;**图解分析：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240523151338924.png" alt="image-20240523151338924" style="zoom: 33%;" /><p><strong>方法二：递归</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span></span>&#123;<br>         <span class="hljs-keyword">if</span>(!head||!head-&gt;next)<br>            <span class="hljs-keyword">return</span> head;<br>         ListNode* newhead=<span class="hljs-built_in">reverseList</span>(head-&gt;next);<br>         head-&gt;next-&gt;next=head;<br>         head-&gt;next=<span class="hljs-literal">nullptr</span>;<br>         <span class="hljs-keyword">return</span> newhead;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-找到链表的中间节点"><a href="#2-找到链表的中间节点" class="headerlink" title="2.找到链表的中间节点"></a>2.找到链表的中间节点</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/middle-of-the-linked-list/description/">876. 链表的中间结点 - 力扣（LeetCode）</a></p><p>题目描述：给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。</p><p><strong>方法一：遍历法</strong></p><p>先遍历一遍找到一共有多少个节点，再遍历一遍找到中间节点。当链表长度较长的时候，这种方法较为浪费时间。下面的方法只需要遍历一次。</p><p><strong>方法二：快慢指针法：</strong></p><p>定义两个指针，慢指针依次只走一步，快指针一次走两步。当快指针走到终点时，慢指针就刚好走到了中间节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">middleNode</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>ListNode* slow,ListNode* fast;<br>   slow=fast=head;<br>   <span class="hljs-keyword">while</span>(fast&amp;&amp;fast-&gt;next)&#123;<br>      slow=slow-&gt;next;<br>      fast=fast-&gt;next-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-移除重复节点"><a href="#3-移除重复节点" class="headerlink" title="3.移除重复节点"></a>3.移除重复节点</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/remove-duplicate-node-lcci/description/">面试题 02.01. 移除重复节点 - 力扣（LeetCode）</a></p><p>题目描述：编写代码，移除未排序链表中的重复节点。保留最开始出现的节点。</p><p><strong>哈希表法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">removeDuplicateNodes</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>   ListNode* pre=<span class="hljs-literal">NULL</span>,*cur=head;  <span class="hljs-comment">//前后指针</span><br>   unordered_set&lt;<span class="hljs-type">int</span>&gt; list;  <span class="hljs-comment">//初始化哈希表</span><br>   <span class="hljs-keyword">while</span>(cur)&#123;  <span class="hljs-comment">//当指针不为空</span><br>      <span class="hljs-keyword">if</span>(list.<span class="hljs-built_in">find</span>(cur&gt;val)==list.<span class="hljs-built_in">end</span>())&#123;  <span class="hljs-comment">//没有该元素</span><br>         list.<span class="hljs-built_in">insert</span>(cur-&gt;val);  <span class="hljs-comment">//插入</span><br>         pre=cur;<br>      &#125;     <br>      <span class="hljs-keyword">else</span><br>         pre-&gt;next=cur-&gt;next;  <span class="hljs-comment">//如果表中已经有该元素，删除该指针</span><br>      cur=cur-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> head;  <span class="hljs-comment">//若头指针就为空则直接返回</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-找到链表的倒数第k个指针"><a href="#4-找到链表的倒数第k个指针" class="headerlink" title="4.找到链表的倒数第k个指针"></a>4.找到链表的倒数第k个指针</h4><p>力扣题目链接：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kthToLast</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>ListNode* pre,*cur;<br>   pre=cur=head;<br>   <span class="hljs-keyword">while</span>(k--)<br>      pre=pre-&gt;next;<br>   <span class="hljs-keyword">while</span>(pre)&#123;<br>      pre=pre-&gt;next;<br>      cur=cur-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> cur.val;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-判断链表是否为回文链表"><a href="#5-判断链表是否为回文链表" class="headerlink" title="5.判断链表是否为回文链表"></a>5.判断链表是否为回文链表</h4><p>力扣题目链接：</p><p><strong>方法一：复制元素到数组中再进行判断</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; list;<br>   <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">nullptr</span>)&#123;<br>      list.<span class="hljs-built_in">emplace_back</span>(head-&gt;val);<br>      head=head-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=list.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&lt;j;i++,j--)&#123;<br>      <span class="hljs-keyword">if</span>(list[i]!=list[j])<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二：递归</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    ListNode* frontPointer;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">recursivelyCheck</span><span class="hljs-params">(ListNode* currentNode)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (currentNode != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">recursivelyCheck</span>(currentNode-&gt;next)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (currentNode-&gt;val != frontPointer-&gt;val) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            frontPointer = frontPointer-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        frontPointer = head;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursivelyCheck</span>(head);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="6-相交链表"><a href="#6-相交链表" class="headerlink" title="6.相交链表"></a>6.相交链表</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">面试题 02.07. 链表相交 - 力扣（LeetCode）</a></p><p>题目描述：给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。题目数据 保证 整个链式结构中不存在环。注意，函数返回结果后，链表必须 保持其原始结构 。</p><p><strong>双指针法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(headA==<span class="hljs-literal">nullptr</span>||headB==<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> null;<br>   ListNode* n1=headA,*n2=headB;<br>   <span class="hljs-keyword">while</span>(n1!=n2)&#123;<br>      n1=n1==<span class="hljs-literal">nullptr</span>?headB:n1-&gt;next;<br>      n2=n2==<span class="hljs-literal">nullptr</span>?headA:n2-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> n1;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-环路检测"><a href="#7-环路检测" class="headerlink" title="7.环路检测"></a>7.环路检测</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/linked-list-cycle-lcci/description/">面试题 02.08. 环路检测 - 力扣（LeetCode）</a></p><p>题目描述：给定一个链表，如果它是有环链表，实现一个算法返回环路的开头节点。若环不存在，请返回 null。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。注意：<code>pos</code> 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p><strong>哈希表法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>   unordered_set&lt;ListNode*&gt; list;<br>   <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">nullptr</span>)&#123;<br>      <span class="hljs-keyword">if</span>(list.<span class="hljs-built_in">count</span>(head))<br>         <span class="hljs-keyword">return</span> head;<br>      list.<span class="hljs-built_in">insert</span>(head);<br>      head=head-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> null;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络面经</title>
    <link href="/2024/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F/"/>
    <url>/2024/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<p>三、网络的七层协议，TCP UDP的区别 ，mac地址，ip 端口 子网掩码分别是干什么用的</p><p><strong>https 攻击方式</strong></p><p>1、数据被监听2、数据被篡改</p><p><strong>进程间有哪些通信方式</strong></p><p>管道、共享内存、消息队列、信号</p><p><strong>https是怎么加密的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509223423753.png" alt="image-20240509223423753"></p><p>加密就是把明⽂(要传输的信息)进行⼀系列变换, ⽣成密文；解密就是把密⽂再进⾏⼀系列变换, 还原成明文。</p><p>对称加密（算法公开、计算量⼩、加密速度快、加密效率高）、非对称加密（算法强度复杂、运算速度很慢）、数据摘要</p><p><strong>cpu调度算法的评价指标?</strong></p><p>cpu利用率、系统吞吐量、周转时间、等待时间、响应时间</p><p><strong>为什么说tcp是可靠的?</strong></p><p>TCP保证可靠性一般有以下几种方法：</p><p>检验和：在数据传输过程中，把传输的数据当作一个16位整数。吧所有的数据加起来，最前面的进位补到最后一位，然后取反得到校验和。发送方和接收方验证校验和是否相同。不相同则数据传输有误，相同也可能有问题。<br>确认应答：ACK和序列号（一应一答）机制保证数据的完整性（三次握手于四次挥手过程中通过比对Seq和ACK来实现）<br>超时重传：发送数据包在一定的时间周期内没有收到相应的ACK，等待一定的时间，超时之后就认为这个数据包丢失，就会重新发送（也就是发送数据后，长时间没收到回应，会把数据再发一次。）<br>连接管理：三次握手，四次挥手<br>最大消息长度：理想的情况下是该长度的数据刚好不被网络层分块。<br>拥塞控制：控制传输上流量（发送数据时开始是慢启动，先发送一点点数据去探测网络拥塞不拥塞，如果不拥塞了，则大量的发送数据。如果突然拥塞了，则又很慢的发送数据。这样是为了尽可能快的发送数据，避免网络拥塞造成一系列问题）<br>流量控制：TCP利用滑动窗口实现流量控制，流量控制是为了控制发送方的发送速率，保证接收方可以及时接收</p><p><strong>网络协议有哪些？</strong></p><p>1、HTTP（Hypertext Transfer Protocol）协议是一种用于传输超文本的协议，通常用于在Web浏览器和Web服务器之间传递数据。它基于请求-响应模型：客户端发送HTTP请求，服务器返回HTTP响应。通信使用明文进行，不具备加密性。lHTTP广泛应用于Web开发，用于获取网页、传输HTML、CSS、JavaScript等资源。它的无状态特性使其适用于快速、轻量级的数据传输。</p><p>HTTP协议的特点</p><p>支持服务器&#x2F;客户端模式</p><p>传输较快速，客户端向服务器发送请求，只需要传输请求方法和路径</p><p>灵活，HTTP允许传输任意类型的数据对象</p><p>无连接，每次连接只能处理一个请求，服务器处理完客户端请求，客户端收到响应后就断开连接</p><p>无状态，协议本身对事务处理没有记忆能力，如果后序连接需要之前发送的信息时就需要重传</p><p>(1)HTTP1.0和HTTP1.1的区别：</p><p>长连接：HTTP1.0只支持浏览器与服务器的短连接，即每次请求都要重新建立连接，服务器无法记录每个历史请求，HTTP1.1支持长连接即在一次连接下，浏览器可以向服务器发送多次请求</p><p>增加Host字段：HTTP1.0中认为每个服务器都绑定这唯一一个IP，所有发送的请求头URL中没有host信息，而HTTP1.1在请求和响应中都支持了host头域，且请求消息中如果没有Host头域会报告一个错误(400 Bad Request)</p><p>缓存：HTTP1.1在1.0的基础上加入了一些cache的新特性，当缓存对象的Age超过Expire时变为stale对象，cache不需要直接抛弃stale对象，而是与源服务器进行重新激活（revalidation）。</p><p>错误提示：HTTP1.0中定义了16个状态码，对错误或警告的提示不够具体。HTTP1.1引入了一个Warning头域，增加对错误或警告信息的描述，并且还新增了24个状态响应码，如409(Conflict)表示请求的资源与资源的当前状态发生冲突；410(Gone)表示服务器上的某个资源被永久性的删除</p><p>(2)HTTP1.X和HTTP2.0的区别</p><p>增加二进制格式解析：HTTP1.X解析基于文本，而文本格式本身就具有多样性，很多场景下不方便，而引入二进制后，只有0和1组合，使解析更加方便也增强了健壮性</p><p>多路复用：即每个request都是是用作连接共享机制的，每个request都对应一个id，使一个连接可以有多个请求，再根据id将request归属到不同的服务端请求里</p><p>header压缩：HTTP1.X中，每次传输都要写点header头，占用了大量数据，因此HTTP2.0在客户端和服务端各保存了一份header fields表，每次传输时只需传输header的更新信息，将header fields表更新即可实现header传输</p><p>2、SMTP（Simple Mail Transfer Protocol）是一种电子邮件传输协议，用于在邮件客户端和邮件服务器之间传递电子邮件。它定义了邮件的格式以及在不同设备之间的传递方式。</p><p>3、FTP（File Transfer Protocol）是一种用于在计算机之间传输文件的协议。它支持用户通过用户名和密码进行身份验证，并提供文件上传和下载功能。</p><p>4、DNS（Domain Name System）是一种将域名映射到IP地址的分布式数据库系统。它允许用户使用易记的域名而不是复杂的IP地址访问互联网资源。</p><p><strong>避免缓存雪崩如何实现</strong></p><p>缓存雪崩是指在某个时间点，大量缓存同时失效，导致大量请求直接落到<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1001.2101.3001.7020">数据库</a>上，造成数据库负载激增的现象。</p><p>1 合理设置缓存失效时间：<br>将缓存的失效时间分散开，避免同时失效。可以在原有的失效时间基础上，加上一个随机的时间偏移，或者使用带有范围的失效时间。</p><p>2 采用永不过期策略：<br>对于热点数据，可以考虑使用永不过期的策略，即在缓存中永远不主动删除，而在数据更新时手动刷新缓存。这样可以避免大量缓存同时失效的情况。</p><p>3 使用多级缓存：<br>引入多级缓存架构，例如本地缓存、分布式缓存（如Redis）、全局缓存（如CDN），这样即使一个级别的缓存失效，其他级别的缓存仍然可以提供服务，降低缓存雪崩的风险。</p><p>4 缓存预热：<br>在系统启动或低峰期，提前加载热门数据到缓存中，避免在高峰期大量请求涌入时触发缓存失效。</p><p>5 限流和熔断：<br>实施限流和熔断机制，控制并发访问的数量，防止瞬时请求过多导致缓存雪崩。</p><p>6 缓存穿透保护：<br>使用类似布隆过滤器算法，防止缓存穿透，即查询一个不存在的数据导致缓存和数据库都不命中。</p><p>7 灾备机制：<br>部署灾备机制，当主缓存出现问题时，可以切换到备用缓存，保障系统的可用性。</p><p>8 分批更新缓存：<br>当大量数据需要更新时，采用分批更新的方式，避免一次性大规模的缓存更新。</p><p><strong>protocol buffer</strong></p><p><strong>Speed协议</strong></p><p><strong>2.TCP和UDP区别</strong><br>① TCP协议是有连接的，即在传输实际数据之前TCP的客户端和服务器端必须通过三次握手建立连接，会话结束后还要结束连接。而UDP是无连接的。<br>②TCP协议保证数据按序发送以及到达，超时重传来保证可靠性，但是UDP不保证按序到达，不保证到达，只是努力交付，即使是按序发送的序列，也不保准按序送到。<br>③TCP协议所需的资源多，首部需要20个字节，UDP首部只需要8个字节<br>④TCP有流量控制和拥塞控制，UDP有没有网络堵塞不会影响发送端的发送速率。<br>⑤TCP是一对一连接，而UDP是一对一 一对多 多对多的通信<br>⑥TCP面向的是字节流的服务，UDP面向的是报文的服务。</p><p>4.<strong>进程和程序的区别</strong><br>①进程是程序的一次执行。<br>②进程是可以并行执行的计算<br>③进程是一个程序与其使用的数据在处理机上顺序执行时发生的活动。<br>④进程是系统进行资源分配和调度的一个独立单位<br>本质区别：<br>①程序是永存的，进程是暂时的<br>②进程有并发性，程序没有<br>③二者不是一一对应关系，一个程序可以对应多个进程，多个进程可执行同一个程序，一个进程可执行一个或者几个程序<br>④进程是竞争计算机资源的基本单位，但是程序不是。</p><h5 id="为啥不多进程而是多线程呢？"><a href="#为啥不多进程而是多线程呢？" class="headerlink" title="为啥不多进程而是多线程呢？"></a>为啥不多进程而是多线程呢？</h5><p>答：线程廉价且启动较快，对系统资源的冲击比较小，多进程不可预测且测试困难。</p><p>7.读写锁（这个不会，但好像也挺基础的）<br>读锁是共享的<br>　写锁是排他的<br>　<br>读-读能共存，<br>读-写不能共存，<br>写-写不能共存。</p><p>8.堆和栈<br>栈内存：存储局部变量，更新速度快，声明周期短<br>堆内存：存储数组和对象，凡是new建立的都是在堆中，堆中存放的是实体，实体用于封装数据，java垃圾回收（不定时）。</p><p>9.虚拟内存和实际内存（操作系统学的，有点久远）<br>当虚拟内存中的值真正需要用的时候，物理内存才会开辟一段地址来存储虚拟内存中的值<br>所以真正能使用的物理内存的大小则为：虚拟内存(pagefile.sys) + 物理内存</p><p>10.抢占式进程调度（这个也不会，菜哭了）<br>最常见的现象是你这个进程运行时间太长了，是时候切换到另一个进程了</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509221747850.png" alt="image-20240509221747850"></p><h6 id="tcp和udp应用场景"><a href="#tcp和udp应用场景" class="headerlink" title="tcp和udp应用场景"></a>tcp和udp应用场景</h6><p>tcp：文件传输、接收邮件、远程登录<br>udp：在线视频、qq聊天、广播通信</p><p>对于3次握手：主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。<br>对于4次挥手：其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。</p><p>拥塞控制主要是四个算法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">慢启动<br>拥塞避免<br>拥塞发生<br>快速恢复<br></code></pre></td></tr></table></figure><p><strong>浏览器输入一个URL按下回车后，其流程是？</strong></p><p>分析：如果要连接到远程服务器，首先要知道服务器的IP地址和端口，然后发送请求到服务器，服务器再响应。因此寻址和如何建立连接是关键。</p><p>步骤：</p><p>（1）进行寻址：若浏览器缓存中存有URL的对应IP，则直接查询IP；否则访问DNS（Domain Name System）进行寻址（Domain Name Resolution）。</p><p>（2） DNS或者URL Cache返回网页服务器的IP地址。</p><p>（3）浏览器与网页服务器进行三次握手建立TCP连接。由于是网页浏览服务，故连接到服务器的80端口。</p><p>（4）浏览器与服务器建立HTTP会话（Session），接收来自服务器的HTTP数据。</p><p>（5）浏览器解析HTTP数据，在本地窗口内渲染并显示网页。</p><p>（6）当浏览器页面被关闭时，终止HTTP会话并关闭连接。</p><p><strong>多线程建立有哪几种方法</strong></p><p>继承thread、建立线程池、实现Runnable、实现Callable</p><p><strong>多线程并发的三大特性</strong></p><p>可见性、原子性（要么全部执行且不会被打乱要么全部不执行）、有序性</p><h3 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h3><p>浏览器多样化，需要考虑兼容性的问题，传统方式布局比较繁杂</p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>移动端浏览器大部分内核为<a href="https://so.csdn.net/so/search?q=webkit&spm=1001.2101.3001.7020">webkit</a>，不需要考虑兼容性的问题，且移动端可以放心使用flex弹性布局</p><p>移动端技术解决方案</p><p>移动端浏览器<br>移动端浏览器基本以webkit内核为主,因此我们就考虑webkit兼容性问题<br>我们可以放心使用H5标签和css3样式<br>同时我们浏览器的私有前缀我们只需要考虑添加webkit即可</p><p>css初始化 normalize.css<br>移动端css初始化推荐使用normalize.css<br>好处<br>保护了有价值的默认值<br>修复了浏览器的bug<br>是模块化的<br>拥有详细的文档<br>网址 : <a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><p>css3 盒子模型 box-sizing<br>box-sizing:border-box<br>padding和border不会在撑大盒子了<br>默认值<br>box-sizing:content-box<br>padding和border和原来一样会在撑大盒子</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>计网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp面经（杂乱版）</title>
    <link href="/2024/05/09/cpp%E9%9D%A2%E7%BB%8F/"/>
    <url>/2024/05/09/cpp%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>什么是虚函数？</strong><br>被 <a href="https://so.csdn.net/so/search?q=virtual&spm=1001.2101.3001.7020">virtual</a> 关键字修饰的成员函数称为虚函数。<br><a href="https://so.csdn.net/so/search?q=%E8%99%9A%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">虚函数</a>的作用是实现多态性，即通过基类访问派生类的函数。<br><strong>什么是纯虚函数？</strong><br>在虚函数后面添加 &#x3D;0 ，虚函数就成为<a href="https://so.csdn.net/so/search?q=%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">纯虚函数</a>，<br>在很多情况下，基类生成对象很不合理。为了解决这个问题，引入了纯虚函数的概念，将函数定义为纯虚函数，派生类中必须重写实现纯虚函数。对于实现了纯虚函数的子类，该纯虚函数在子类中就变成了虚函数。</p><h5 id="auto-ptr能作为vector的元素吗？为什么？"><a href="#auto-ptr能作为vector的元素吗？为什么？" class="headerlink" title="auto_ptr能作为vector的元素吗？为什么？"></a>auto_ptr能作为vector的元素吗？为什么？</h5><p>答：不可以。<br>当复制一个auto_ptr时，它所指向的对象的所有权被交到复制的auto_ptr上面，而它自身将被设置为null。复制一个auto_ptr意味着改变它的值。</p><p><strong>死锁的四个必要条件</strong></p><p>1、 互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</p><p>2、不可剥夺条件:进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能由获得该资源的进程自己来释放（只能是主动释放)。</p><p>3、 请求与保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</p><p>4、循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被链中下一个进程所请求。</p><pre><code class="hljs">预防：通过设置某些限制条件，以破坏产生死锁的条件，来防止发生死锁。避免：系统在分配资源时根据资源的使用情况提前作出预测，从而避免死锁的发生。检测：允许系统在运行的过程中产生死锁，但是，系统中有相应的管理模块可以及时检测出已经产生的死锁，并且精确地确定与死锁有关的进程和资源，然后采取适当措施，清除系统中已经产生的死锁。解除：与检测死锁相配套的一种措施，用于将进程从死锁状态下解脱出来。</code></pre><p><strong>进程调度</strong></p><p>在多道程序系统中，进程的数量往往多于处理机的个数，因此进程争用处理机的情况在所难免。处理机调度是对处理机进行分配，即从就绪队列中按照一定的算法（公平、高效）选择一个进程并将处理机分配给它运行，以实现进程并发执行。</p><p>先来先服务（FCFS）调度算法、短作业优先（SJF）调度算法、优先级调度算法、高响应比优先调度算法</p><p><strong>进程与线程的区别</strong></p><p>本质区别：进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位。</p><p>包含关系：一个进程至少有一个线程，线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p><p>资源开销：每个进程都有独立的地址空间，进程之间的切换会有较大的开销；线程可以看做轻量级的进程，同一个进程内的线程共享进程的地址空间，每个线程都有自己独立的运行栈和程序计数器，线程之间切换的开销小。</p><p>影响关系：一个进程崩溃后，在保护模式下其他进程不会被影响，但是一个线程崩溃可能导致整个进程被操作系统杀掉，所以多进程要比多线程健壮。</p><p><strong>一个基本的事实前提</strong>：<strong>一个CPU在一个瞬间只能处理一个任务</strong>。</p><p>并发（Concurrent）：在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。<br>同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</p><p>并行（Parallel）：当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。其实决定并行的因素不是CPU的数量，而是CPU的核心数量，比如一个CPU多个核也可以并行。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509203458598.png" alt="image-20240509203458598"></p><p><strong>哈希冲突</strong></p><p>当两个不同的数经过哈希函数计算后得到了同一个结果，即他们会被映射到哈希表的同一个位置时，即称为发生了哈希冲突。简单来说就是哈希函数算出来的地址被别的元素占用了。</p><h6 id="开放定址法：我们在遇到哈希冲突时，去寻找一个新的空闲的哈希地址。（链地址法、公共溢出区法）"><a href="#开放定址法：我们在遇到哈希冲突时，去寻找一个新的空闲的哈希地址。（链地址法、公共溢出区法）" class="headerlink" title="开放定址法：我们在遇到哈希冲突时，去寻找一个新的空闲的哈希地址。（链地址法、公共溢出区法）"></a><strong>开放定址法：我们在遇到哈希冲突时，去寻找一个新的空闲的哈希地址。</strong>（链地址法、公共溢出区法）</h6><p>数据库索引<br><strong>堆栈的区别</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">一个由c/C++编译的程序占用的内存分为以下几个部分 <br>  <span class="hljs-number">1</span>、栈区（stack）―   由编译器自动分配释放。用来存储函数调用时的临时信息的结构，存放为运行时函数分配的局部变量、函数参数、返回数据、返回地址等。 <br>  <span class="hljs-number">2</span>、堆区（heap） ―   一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。<br>     注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。 <br>  <span class="hljs-number">3</span>、全局区（静态区）（<span class="hljs-type">static</span>）―，全局变量和静态变量的存储是放在一块的，<br>     初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 - 程序结束后有系统释放 <br>  <span class="hljs-number">4</span>、文字常量区  ―常量字符串就是放在这里的。 程序结束后由系统释放 <br>  <span class="hljs-number">5</span>、程序代码区―存放函数体的二进制代码。<br></code></pre></td></tr></table></figure><p><strong>栈和队列的区别、数组和链表有什么区别</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509163720074.png" alt="image-20240509163720074"></p><p>c语言中常用的数据结构<br><strong>两个堆怎么实现一个队列</strong><br>二叉树的前中后序遍历输出结果</p><ul><li><p>HashMap原理，为什么每次扩容都是2的倍数，为什么由头插改成了尾插，环化是怎么引起的</p></li><li><p>快排和堆排的原理</p><p>当面试官询问 C++ 相关的常见八股知识时，他们可能会深入以下几个方面：</p><ol><li><p><strong>C++ 的特性和优势</strong>：</p><ul><li>C++ 是一种通用编程语言，继承了 C 语言的功能并加入了面向对象编程的特性。</li><li>C++ 具有高效性、灵活性和可移植性等优势，可以直接操作硬件并实现高性能的应用程序。</li></ul></li><li><p><strong>类与对象</strong>：</p><ul><li>类是用户自定义的数据类型，用于描述具有相同属性和行为的对象的集合。</li><li>对象是类的一个实例，具有类定义的属性和行为。</li><li>构造函数用于初始化对象的状态，析构函数用于清理对象所占用的资源。</li></ul></li><li><p><strong>继承与多态</strong>：</p><ul><li>继承是面向对象编程中一种机制，允许一个类继承另一个类的属性和行为。</li><li>多态性允许不同对象对同一消息做出不同的响应，提高了代码的灵活性和可扩展性。</li><li>虚函数是在基类中声明的带有 virtual 关键字的函数，派生类可以重写这些函数以实现多态。</li></ul></li><li><p><strong>模板与泛型编程</strong>：</p><ul><li>模板是一种通用的代码结构，可以用于生成特定数据类型的函数或类。</li><li>模板的特化和偏特化允许针对特定类型提供定制的实现。</li><li>泛型编程是一种编程范式，旨在编写与特定数据类型无关的代码。</li></ul></li><li><p><strong>异常处理</strong>：</p><ul><li>异常是程序执行过程中发生的意外事件。</li><li>异常处理是一种机制，用于在程序中检测、报告和处理异常。</li><li>C++ 中的异常处理关键字包括 try、catch 和 throw。</li></ul></li><li><p><strong>内存管理</strong>：</p><ul><li>栈是一种自动分配和释放内存的数据结构，用于存储函数调用、局部变量等。</li><li>堆是一种动态分配和释放内存的数据结构，用于存储程序运行时动态创建的对象。</li></ul></li><li><p><strong>STL（标准模板库）</strong>：</p><ul><li>STL 提供了丰富的数据结构和算法，包括向量、链表、映射、集合等容器以及排序、搜索、迭代等算法。</li><li>迭代器是一种抽象的数据访问接口，用于遍历容器中的元素。</li></ul></li><li><p><strong>并发编程</strong>：</p><ul><li>C++11 引入了一套新的并发编程库，包括线程、原子操作、互斥量、条件变量等。</li><li>线程同步的机制包括互斥量、条件变量和原子操作，用于确保多个线程之间的数据一致性和同步执行。</li></ul></li></ol><p>以上是对常见 C++ 八股知识的详细解答，你可以根据自己的理解和经验进一步扩展和完善。</p></li><li><p><strong>重载重写隐藏</strong></p><p>一、重载</p><ul><li>相同的作用域内</li><li>参数列表不同（参数的类型，个数，顺序不同）</li><li>函数名字相同；函数返回类型相同</li></ul><p>二、重写</p><ul><li>不在同一个作用域（分别位于<a href="https://so.csdn.net/so/search?q=%E6%B4%BE%E7%94%9F%E7%B1%BB&spm=1001.2101.3001.7020">派生类</a>与基类） ；</li><li>基类函数必须有 <strong>virtual</strong> 关键字，不能有 static 。</li><li>函数名字相同；参数相同；返回值相同</li><li>函数体不同</li></ul><p>三、隐藏</p><p>​不在同一个作用域（分别位于派生类与基类） ；</p><p>​函数名字相同；</p><p>​参数、返回值、函数体都可以不同；</p></li><li><p><strong>什么函数可以&#x2F;不可以声明为虚函数</strong></p></li></ul><p>​<a href="https://so.csdn.net/so/search?q=%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">析构函数</a> 普通的成员函数</p><p>​普通函数（非成员函数）、构造函数、内联函数、静态函数、友元函数。</p><ul><li><p><strong>vector和list的使用场景</strong></p><p>vector适用：对象数量变化少，简单对象，随机访问元素频繁<br>list适用：对象数量变化大，对象复杂，插入和删除频繁<br>最大的区别是,list是双向的，而vector是单向的。<br>因此在实际使用时，如何选择这三个容器中哪一个，应根据你的需要而定，一般应遵循下面的原则：<br>1）、如果你需要高效的随即存取，而不在乎插入和删除的效率，使用vector<br>2)、如果你需要大量的插入和删除，而不关心随即存取，则应使用list<br>3)、如果你需要随即存取，而且关心两端数据的插入和删除，则应使用deque。</p></li><li><p><strong>stack适配器的底层容器是什么，能不能用vector，为什么</strong></p></li></ul><p>1 stack 堆栈适配器 （ 可用的容器类型 vector deque list）默认是deque<br>2 queue 队列适配器 ( 可用的容器类型 deque list)默认的容器是deque<br>3 priority_queue 优先级队列 (可用的容器类型 deque vector)默认是vector|<br>                        底层容器必须支持随机访问迭代器，因此底层容器可以是deque，不能是list</p><ul><li><strong>什么情况下需要使用多继承</strong></li></ul><p>一个子类拥有很多父类 ,一般指一个类有2个以上父类。</p><ul><li>STL中的多继承</li><li><strong>虚继承原理</strong></li></ul><p>所谓虚继承（virtual）就是子类中只有一份间接父类的数据。该技术用于解决<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BB%A7%E6%89%BF&spm=1001.2101.3001.7020">多继承</a>中的父类为非虚基类时出现的数据冗余问题，即菱形继承问题。</p><p>在上图中，父类数据并不存放在虚继承的子类中，那么子类怎么找到父类数据呢？</p><p>——在虚继承的类中，会定义一个<strong>虚基表指针vbptr</strong>，<strong>指向虚基表</strong>。(虚表在<strong>构造函数之前</strong>写入)</p><p>而虚<strong>基表中会存在偏移量，这个量就是表的地址到父类数据地址的距离</strong>。</p><p>我们可以通过调试，找到虚基表指针和虚基表：</p><ul><li><strong>右值引用和移动语义</strong></li></ul><p>可以被取地址的、有名字的都是左值，反之不能取地址的、没有名字的就是右值。</p><p>右值：<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F&spm=1001.2101.3001.7020">字面常量</a>，表达式，函数的非引用返回值，在表达式求值过程中临时创建的对象，这些使用过后就被销毁的资源</p><p>在现有的 C++ 机制中，我们可以定义拷贝构造函数和赋值函数。要实现转移语义，需要定义转移构造函数，还可以定义转移赋值操作符。如果转移构造函数和转移拷贝操作符没有定义，那么就遵循现有的机制，拷贝构造函数和赋值操作符会被调用。普通的函数和操作符也可以利用右值引用操作符实现转移语义。</p><ul><li><strong>C++内存管理方式</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509170056071.png" alt="image-20240509170056071"></p><p>一、自动存储</p><p>在函数内部定义的常规变量使用自动存储空间，被称为<strong>自动变量</strong>（automatic variable），这意味着它们在所属的函数被调用时自动产生，在该函数结束时消亡。<strong>自动变量通常存储在栈中</strong>。这意味着执行代码块时，其中的变量将依次加入到栈中，而在离开代码块时，将按相反的顺序释放着些变量，着被称为<a href="https://so.csdn.net/so/search?q=%E5%90%8E%E8%BF%9B%E5%85%88%E5%87%BA&spm=1001.2101.3001.7020">后进先出</a>（LIFO）。因此，在程序执行过程中，栈将不断地增大和缩小。</p><p>二、静态存储</p><p>静态存储是整个程序执行期间都存在的存储方式。使变量称为静态的方式有两种：一种是在函数外面定义它；另一种是在声明变量时使用关键字static</p><p>三、动态存储<br>new和delete运算符提供了一种比自动变量和静态变量更灵活的方法。它们管理了一个内存池，这在C++中被称为自由存储空间（free store）或堆（heap）。该内存池同用于静态变量和自动变量的内存是分开的。new和delete让您能够在一个函数中分配内存，而在另一个函数中释放它。因此，数据的声明周期不完全受程序或函数的生命时间控制。与使用常规变量相比，使用new和delete让程序员对程序如何使用内存有更大的控制权。然而，内存管理也更复杂了。在栈中，自动添加和删除机制使得占用的内存总是连续的，单new和delete的相互影响可能导致占用的自由存储区不连续，这使得跟踪新分配内存的位置更困难。</p><p>四、线程存储</p><ul><li>shared ptr的具体实现（问的很细</li></ul><p><strong>栈、堆、内存泄漏</strong><br>如果使用new在自由存储空间（或堆）上创建变量后，没有调用delete。会发生什么？</p><p>即使包含指针的内存（由于作用域规则和对象生命周期的原因而）被释放，在自由存储空间上动态分配的变量或结构依然存在。</p><p>则将会无法访问自由存储空间的结构，因为指向这些内存的指针无效。</p><p>这将导致<strong>内存泄露</strong>，被泄漏的内存在程序的整个生命周期将不可使用，这些内存被分配，但无法被使用。</p><p><strong>引用和指针的区别</strong></p><p>\1. 指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元；而引用仅是个别名；</p><p>\2. 引用使用时无需解引用(*)，指针需要解引用；</p><p>\3. 引用只能在定义时被初始化一次，之后不可变；指针可变；</p><p>\4. 引用没有 const，指针有 const；</p><p>\5. 引用不能为空，指针可以为空；</p><p>\6. “sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p><p>\7. 指针和引用的自增(++)运算意义不一样；</p><p>\8. 指针可以有多级，但是引用只能是一级（int **p；合法 而 int &amp;&amp;a是不合法的）</p><p>9.从内存分配上看：程序为指针变量分配内存区域，而引用不需要分配内存区域。</p><p><strong>tcp滑动窗口</strong></p><p>滑动窗口机制是TCP协议中实现流量控制和可靠传输的关键技术。它的主要工作原理如下：</p><ol><li>发送方维护一个发送窗口，这是一个连续的字节序列，表示发送方可以发送的字节数范围。发送窗口由两个参数定义：窗口的起始字节和窗口的大小。发送方将数据分成多个数据段，并按顺序发送到接收方。</li><li>接收方使用确认号来通知发送方已成功接收到的数据。确认号表示接收方期望接收的下一个字节的序列号。同时，接收方还会通告一个窗口大小，告诉发送方自己的接收缓冲区还能容纳多少字节的数据。</li><li>发送方根据接收方通告的窗口大小进行数据发送控制。如果接收方的窗口变大，发送方可以发送更多的数据；如果接收方的窗口变小，发送方需要适应减少的窗口大小。这样，发送方可以持续发送数据而不需要等待每个数据段的确认，从而提高了传输效率。</li></ol><p>滑动窗口机制在数据传输中起到了流量控制和可靠性传输的重要作用。通过动态调整窗口大小，接收方可以控制发送方的数据发送速率，避免网络拥塞和数据丢失。同时，滑动窗口机制还确保了数据的顺序传输和可靠接收，为TCP协议提供了可靠的传输服务。</p><p><strong>二分查找的时间复杂度、二分查找的具体操作</strong></p><p>O(logn)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (L &lt; R)&#123;                      <span class="hljs-comment">//一直二分，直到区间[L,R]缩小到L=R</span><br>    <span class="hljs-type">int</span> mid = (L + R) / <span class="hljs-number">2</span>;          <span class="hljs-comment">//mid是L、R的中间值</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))  R = mid;       <span class="hljs-comment">//答案在左半部分[L,mid]，更新R=mid</span><br>    <span class="hljs-keyword">else</span>             L = mid + <span class="hljs-number">1</span>;   <span class="hljs-comment">//答案在右半部分[mid+1, R]，更新L=mid+1</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>11.n个数中找出最小的k个数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">GetLeastNumbers_Solution</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; input, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ret;<br>        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span> || input.<span class="hljs-built_in">size</span>() &lt; k)<br>            <span class="hljs-keyword">return</span> ret;<br>        priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt; &gt; pq;(大根堆)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt; input.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(pq.<span class="hljs-built_in">size</span>() &lt; k)<br>                pq.<span class="hljs-built_in">push</span>(input[i]);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(input[i] &lt; pq.<span class="hljs-built_in">top</span>())&#123;<br>                    pq.<span class="hljs-built_in">pop</span>();<br>                    pq.<span class="hljs-built_in">push</span>(input[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!pq.<span class="hljs-built_in">empty</span>())&#123;<br>            ret.<span class="hljs-built_in">push_back</span>(pq.<span class="hljs-built_in">top</span>());<br>            pq.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>priority_queue&lt;int,vector<int>,greater<int> &gt;q;  (小根堆)</p><p><strong>为什么父类的析构函数为什么不调用子类的虚函数</strong>（因为子类早就被析构了）<br>IO多路复用select&#x2F;poll&#x2F;epoll<br>什么情况下select比epoll好</p><p><strong>全局变量和static全局变量有啥不同</strong></p><p>1.两者<a href="https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&spm=1001.2101.3001.7020">作用域</a>不同，全局变量的作用域是整个工程项目，静态全局变量作用域只在当前文件</p><p>2.全局变量在其他文件引用时，需使用<a href="https://so.csdn.net/so/search?q=extern&spm=1001.2101.3001.7020">extern</a>声明</p><p>3.全局变量和静态全局变量都存储在静态存储区</p><p>4.全局变量和静态全局变量都是定义在函数外或类外</p><p><strong>define和type define的不同</strong></p><p>1、作用域不同<br>#define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用。<br>typedef有自己的作用域，只能在作用域内使用。</p><p>2、对指针的操作不同<br>例如：</p><p>typedef    int*      INTp1 ;</p><p>#define    INTp2    int* ;<br>上面两种看似效果一样，实则不同！具体区别如下：<br>INTp1 a,b等同于int *a; int *b;表示定义了两个整型指针变量。<br>而INTp2 a,b等同于int *a, b; 表示定义了一个整型指针变量a和整型变量b。</p><p>3、 功能不同<br>#define 虽然只是简单的替换，但是也可为为类型取别名，还可以定义常量、变量和编译开关等；<br>typedef可用来定义类型的别名，这些类型不只包含内部类型（int，double，long long,char等），还包括自定义类型（如struct），可以起到使类型易于记忆的功能,增强程序的可读性。</p><p>4、原理不同<br>define不分配内存，给出的是⽴即数，有多少次使⽤就进⾏多少次替换。</p><p>typedef在静态存储区中分配空间，在程序运⾏过程中内存中只有⼀个拷贝。</p><p><strong>互斥锁</strong></p><p>互斥锁、自旋锁和读写锁用于解决多线程同步的问题</p><p>sizeof和strlen的区别</p><p>violate关键字</p><h5 id="14-set的使用场景，map使用场景"><a href="#14-set的使用场景，map使用场景" class="headerlink" title="14.set的使用场景，map使用场景"></a>14.set的使用场景，map使用场景</h5><p>set可以做到整数数组的去重，但是对象就不可以。<br>map中的集合，元素成对存在，每个元素由键和值两部分组成。</p><p><strong>问2：C和C++的区别？</strong></p><p>答：c++在c的基础上增添类，C是一个结构化语言，它的重点在于算法和数据结构。C程序的设计首要考虑的是如何通过一个过程，对输入（或环境条件）进行运算处理得到输出（或实现过程（事务）控制），而对于C++，首要考虑的是如何构造一个对象模型，让这个模型能够契合与之对应的问题域，这样就可以通过获取对象的状态信息得到输出或实现过程（事务）控制。</p><p>1.<br>   语言本身：</p><ol><li>C++是面向对象语言，C是面向过程语言。</li><li>结构：C以结构体struct为核心结构；C++以类class为核心结构。</li><li>多态：C可以以宏定义的方式“自定义”部分地支持多态；C++自身提供多态，并以模板templates支持编译期多态，以虚函数virtual function支持运行期多态。</li><li>头文件的调用：C++用&lt; &gt;代替” “代表系统头文件；且复用C的头文件时，去掉”.h”在开头加上”C”。</li><li>输入输出：鉴于C++中以对象作为核心，输入和输出都是在流对象上的操作。</li><li>封装：C中的封装由于struct的特性全部为公有封装，C++中的封装由于class的特性更加完善、安全。</li><li>常见风格：C中常用宏定义来进行文本替换，不具有类型安全性；C++中常建议采用常量定义，具有类型安全性。</li><li>效率：常见的说法是同等目的C通常比C++更富有效率(这其实有一定的误解，主要在于C++代码更难于优化且少有人使用编译期求值的特性)。</li><li>常用语言&#x2F;库特性：<ol><li>数组：C中采用内建数组，C++中建议采用vector。相比之下vector的大小可以动态增长，且使用一些技巧后增长并不低效，且成员函数丰富。</li><li>字符串 C中采用C风格的string(实则为字符串数组)，C++中建议采用string，对比与上一条类似。</li><li>内存分配：C中使用malloc与free，它们是是C标准库函数，C++中建议使用new&#x2F;delete代替前者，他们说是C++的运算符(这是笔试面试常考点)以C++中的new为例，new可分为operator new(new 操作)、new operator(new 操作符)和placement new(定位 new)。其中operator new执行和malloc相同的任务，即分配内存，但对构造函数一无所知；而 new operator则调用operator new，分配内存后再调用对象构造函数进行对象的构造。其中operator new是可以重载的。placement new，就是operator new的一个重载版本，允许你在一个已经分配好的内存中构造一个新的对象。</li><li>指针：C中通常使用的是原生指针(raw pointer)，由于常出现程序员在申请后忘记释放造成资源泄漏的问题，在C++98中加入了“第一代”基于引用计数的智能指针auto_ptr，由于初代的各种问题(主要是无法解决循环指针)，在03标准也就是TR1中引入了shared_ptr,weak_ptr和unique_ptr这三个功能各异的智能指针，并与11标准中正式确定，较好的解决了上述问题。</li></ol></li><li>仅有C++才有的常用特性：<ol><li>语言(范式)特性：<ol><li>面向对象编程：C++中以关键字class和多态特性支持的一种编程范式；</li><li>泛型编程：C++中以关键字template支持的一种编程范式；</li><li>模板元编程 ：C++中以模板特化和模板递归调用机制支持的一种编程范式。</li><li>C++中以对象和类型作为整个程序的核心，在对象方面，时刻注意对象创建和析构的成本，例如有一个很常用的(具名)返回值优化((N)RVO);<br>在类型方面，有运行时类型信息(RTTI)等技术作为C++类型技术的支撑。</li><li>函数重载：C++允许拥有不同变量但具有相同函数名的函数(函数重载的编译器实现方式、函数重载和(主)模板特化的区别都曾考过)。</li><li>异常：以catch、throw、try等关键字支持的一种机制。</li><li>名字空间：namespace，可以避免和减少命名冲突且让代码具有更强的可读性。</li><li>谓词用法：通常以bool函数或仿函数(functor)或lambda函数的形式，出现在STL的大多数算法的第三个元素。</li></ol></li><li>常见关键字(操作符)特性：<ol><li>auto：在C中，auto代表自动类型通常都可省略；而在C++11新标准中，则起到一种“动态类型”的作用——通常在自动类型推导和decltype搭配使用。</li><li>空指针：在C中常以NULL代表空指针，在C++中根据新标准用nullptr来代表空指针。</li><li>&amp;: 在C中仅代表取某个左值(lvalue)的地址，在C++中还可以表示引用(别名)。</li><li>&amp;&amp;：在C中仅能表示逻辑与，在C++中还可以表示右值引用。</li><li>[]：在C中仅能表示下标操作符，在C++中还可以表示lambda函数的捕捉列表。</li><li>{}：在C中仅能用于数组的初始化，在C++中由于引入了初始化列表(initializer_list)，可用于任何类型、容器等的初始化。</li><li>常量定义：C中常以define来定义常量，C++中用const来定义运行期常量，用constexpr来定义编译器常量。</li></ol></li><li>常用新特性：<ol><li>右值引用和move语义(太多内容，建议自查)。</li><li>基于范围的for循环(与python中的写法类似，常用于容器)。</li><li>基于auto——decltype的自动类型推导。</li><li>lambda函数(一种局部、匿名函数，高效方便地出现在需要局部、匿名语义的地方)。</li><li>标准规范后的多线程库。</li></ol></li></ol></li></ol><p><strong>问3：什么是面向对象（OOP）？</strong></p><p>答：面向对象是一种对现实世界理解和抽象的方法、思想，通过将需求要素转化为对象进行问题处理的一种思想。面向对象就是把现实问题抽象为对象，通过调用每个对象的属性或功能去解决问题。</p><p>对象<br>对象是由数据（描述事物的属性）和作用于数据的操作（体现事物的行为）组成的封装体，描述客观事物的一个实体，是构成系统的基本单元。</p><p>类<br>类是对一组有相同数据和相同操作的对象的定义，是对象的模板，其包含的方法和数据描述一组对象的共同行为和属性。类是在对象之上的抽象，对象则是类的具体化，是类的实例。类可有其子类，也可有其他类，形成类层次结构。1）类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。</p><p>2）类是一组具有相同属性和行为的对象的抽象。我们可以将类看做是创建对象<strong>蓝图</strong>，对象根据这个蓝图去具体实现某个东西。</p><p><strong>问4：什么是多态？</strong></p><p>答：多态是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态。</p><p><strong>问5：设计模式懂嘛，简单举个例子？</strong></p><p>答：设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>比如单例模式，保证一个类仅有一个实例，并提供一个访问它的全局访问点。将构造函数、析构函数、复制构造函数、赋值操作符声明为私有，即可实现单例模式</p><p>适用于：当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时；当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</p><p>比如工厂模式，定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。</p><p>适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p><strong>问8：const知道吗？解释其作用。</strong></p><p>答：</p><p>1.const 修饰类的成员变量，表示成员常量，不能被修改。</p><p>2.const修饰函数承诺在本函数内部不会修改类内的数据成员，不会调用其它非 const 成员函数。</p><p>3.如果 const 构成函数重载，const 对象只能调用 const 函数，非 const 对象优先调用非 const 函数。</p><p>4.const 函数只能调用 const 函数。非 const 函数可以调用 const 函数。</p><p>5.类体外定义的 const 成员函数，在定义和声明处都需要 const 修饰符。。</p><p><strong>问12：解释下封装、继承和多态？</strong></p><p>答：</p><p><strong>一、封装：</strong></p><p>封装是实现面向对象程序设计的第一步，封装就是将数据或函数等集合在一个个的单元中（我们称之为类）。封装(encapsulation)即信息隐蔽。它是指在确定系统的某一部分内容时，应考虑到其它部分的信息及联系都在这一部分的内部进行，外部各部分之间的信息联系应尽可能的少。</p><p>封装的意义在于保护或者防止代码（数据）被我们无意中破坏。</p><ul><li>public：对外公开，访问级别最高</li><li>protected：只对同一个包中的类或者子类公开</li><li>默认：只对同一个包中的类公开</li><li>private：不对外公开，只能在对象内部访问，访问级别最低</li></ul><p><strong>二、继承：</strong></p><p>让某个类型的对象获得另一个类型的对象的属性和方法。继承就是<a href="https://so.csdn.net/so/search?q=%E5%AD%90%E7%B1%BB%E7%BB%A7%E6%89%BF%E7%88%B6%E7%B1%BB&spm=1001.2101.3001.7020">子类继承父类</a>的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><p>继承主要实现<strong>重用代码</strong>，节省开发时间。</p><p>子类可以继承父类的一些东西。</p><p><strong>三、多态</strong></p><p>多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。多态：对于同一个行为，不同的子类对象具有不同的表现形式。多态存在的3个条件：<br>1）继承 2）重写 3）父类引用指向子类对象。</p><p><strong>问15：常用的排序算法有哪些？简单描述几个排序算法的优缺点？</strong></p><p>答：选择、冒泡、快速、**、希尔、归并、堆排等。</p><p>1.快排：是冒泡排序的一种改进。</p><p>优点：快，数据移动少</p><p>缺点：稳定性不足</p><p>2.归并：分治法排序，稳定的排序算法，一般用于对总体无序，但局部有序的数列。</p><p>优点：效率高O(n)，稳定</p><p>缺点：比较占用内存</p><p><strong>问16：new和malloc的区别？</strong></p><p>答：</p><p>1、new是关键字，需要编译器支持；malloc是库函数，需要头文件支持。</p><p>2、new申请内存无需指定内存大小，编译器会根据类型信息自行计算。除此之外，new会调用构造函数。malloc必须由我们计算需要申请的字节数，需要显式指出所需内存的尺寸，并且返回后强行转换为实际类型的指针。而且malloc只管分配内存，并不能对所得的内存进行初始化，所以得到的一片新内存中，其值是随机的。</p><p>3、new可以重载，malloc不可以重载。</p><p>4、new是关键字，malloc是库函数，new的效率高于malloc。<br>new和malloc都可用于申请动态内存和释放内存。对于<strong>非内部数据类型</strong>的对象而言，光用maloc&#x2F;free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于malloc&#x2F;free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc&#x2F;free。 C++语言需要一个能完成动态内存分配和初始化工作的运算符new，以及一个能完成清理与释放内存工作的运算符delete。所以说new的效率高于malloc。</p><p>5、new出来的指针是直接带类型信息的。而malloc返回的都是void指针。</p><p><strong>问18：同步IO和异步IO的区别？</strong></p><p>答：</p><p><strong>A. 同步</strong></p><p>所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。</p><p>按照这个定义，其实绝大多数函数都是同步调用（例如sin isdigit等）。</p><p>但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。</p><p>最常见的例子就是 SendMessage。</p><p>该函数发送一个消息给某个窗口，在对方处理完消息之前，这个函数不返回。</p><p>当对方处理完毕以后，该函数才把消息处理函数所返回的值返回给调用者。</p><p><strong>B. 异步</strong></p><p>异步的概念和同步相对。</p><p>当一个异步过程调用发出后，调用者不会立刻得到结果。</p><p>实际处理这个调用的部件是在调用发出后，通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p><h5 id="C-是不是类型安全的？"><a href="#C-是不是类型安全的？" class="headerlink" title="C++是不是类型安全的？"></a>C++是不是类型安全的？</h5><p>答案：不是。两个不同类型的指针之间可以强制转换（用reinterpret cast)。C#是类型安全的。</p><h5 id="main-函数执行以前，还会执行什么代码？"><a href="#main-函数执行以前，还会执行什么代码？" class="headerlink" title="main 函数执行以前，还会执行什么代码？"></a>main 函数执行以前，还会执行什么代码？</h5><p>答案：全局对象的构造函数会在main 函数之前执行。</p><p><strong>请说出const与#define 相比，有何优点？</strong><br>答案：</p><p>const作用：定义常量、修饰函数参数、修饰函数返回值三个作用。被Const修饰的东西都受到强制保护，可以预防意外的变动，能提高程序的健壮性。</p><p>1） const 常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误。</p><p>2） 有些集成化的调试工具可以对const 常量进行调试，但是不能对宏常量进行调试。</p><h5 id="vector的reserve和capacity的区别"><a href="#vector的reserve和capacity的区别" class="headerlink" title="vector的reserve和capacity的区别?"></a>vector的reserve和capacity的区别?</h5><p>答：reserve()用于让容器预留空间，避免再次内存分配；capacity() 返回在重新进行内存分配以前所能容纳的元素数量。</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端/移动端面经</title>
    <link href="/2024/05/09/%E5%89%8D%E7%AB%AF%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    <url>/2024/05/09/%E5%89%8D%E7%AB%AF%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>cookie</strong></p><p>cookie其实就是一些数据信息，类型为“<strong>小型文本文件</strong>”，存储于电脑上的文本文件中。游览器保存了我们的cookie，里面记录了一些信息。当我们打开一个网站时，如果这个网站我们曾经登录过，那么当我们再次打开网站时，发现就不需要再次登录了，而是直接进入了首页。</p><p>（名字、值、可访问目录、有效时间、大小）</p><p> cookie有2种存储方式，一种是会话性，一种是持久性。（可以人为设置）</p><p><strong>session和cookie的区别</strong></p><p><strong>2.1、</strong>保存的位置不同<br>cookie保存在浏览器端，session保存在服务端。<br><strong>2.2、</strong>使用方式不同<br>cookie如果在浏览器端对cookie进行设置对应的时间，则cookie保存在本地硬盘中，此时如果没有过期，则就可以使用，如果过期则就删除。如果没有对cookie设置时间，则默认关闭浏览器，则cookie就会删除。<br>session：我们在请求中，如果发送的请求中存在sessionId，则就会找到对应的session对象，如果不存在sessionId,则在服务器端就会创建一个session对象，并且将sessionId返回给浏览器，可以将其放到cookie中，进行传输，如果浏览器不支持cookie，则应该将其通过encodeURL(sessionID)进行调用，然后放到url中。<br><strong>2.3、</strong>存储内容不同：cookie只能存储字符串，而session存储结构类似于hashtable的结构，可以存放任何类型。<br><strong>2.4</strong>、存储大小：&#96;&#96;cookie最多可以存放4k大小的内容，session则没有限制。<br><strong>2.5、</strong>session的安全性要高于cooKie<br><strong>2.6、</strong>cookie的session的应用场景：cookie可以用来保存用户的登陆信息，如果删除cookie则下一次用户仍需要重新登录<br>session就类似于我们拿到钥匙去开锁，拿到的就是我们个人的信息，一般我们可以在session中存放个人的信息或者购物车的信息。<br><strong>2.7、</strong>session和cookie的弊端：cookie的大小受限制，cookie不安全，如果用户禁用cookie则无法使用cookie。如果过多的依赖session，当很多用户同时登陆的时候，此时服务器压力过大。sessionId存放在cookie中，此时如果对于一些浏览器不支持cookie，此时还需要改写代码，将sessionID放到url中，也是不安全。</p><p><strong>localstorage和sessionstorage的区别</strong></p><p>1、localStorage存储在硬盘里，sessionStorage存储在内存里；</p><p>2、数据大小不同；</p><p>3、localStorage的生命周期是永久的，除非主动删除，sessionStorage的生命周期是临时的，当关闭当前窗口或标签页，数据就会被清空；</p><p>4、localStorage可以跨页面使用，sessionStorage只能在当前窗口使用。</p><p><strong>css选择器</strong></p><p>1.！important 优先级10000<br>2.内联选择器 优先级1000<br>3.ID选择器 优先级100<br>4.类别选择器 优先级10<br>5.属性选择器 优先级10<br>6.伪类 优先级10<br>7.元素选择器 优先级1<br>8.通配符选择器 优先级0<br>9.继承选择器 没有优先级</p><p>1、标签选择器：**标签名{css属性名：属性值}**通过标签名找到页面中的这类标签，设置样式</p><p>2、类选择器： **.类名{css属性名：属性值；}**通过类名找到页面中的带有这个类名的标签，设置样式</p><p>3、id选择器：**#id属性值{css属性名：属性值;}**通过id属性值，找到页面中带有这个id属性值的标签，设置样式</p><p>4、通配符选择器：***{css属性名：属性值}**找到页面中所有的标签，然后设置样式（开发中应用最少）</p><p><strong>css权重</strong></p><p>1.从0开始，一个<a href="https://so.csdn.net/so/search?q=%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F&spm=1001.2101.3001.7020">行内样式</a>+1000<br>2.一个id选择器+100<br>3.一个属性选择器、class或者伪类+10<br>4.一个元素选择器，或者伪元素+1，通配符+0。</p><p>权重决定了你css规则怎样被浏览器解析直到生效。“css权重关系到你的css规则是怎样显示的”。 当很多的样式被应用到某一个元素上时，权重是一个决定哪种样式生效，或者是优先级的过程。</p><p>!important &gt; 行内样式 &gt; 内联样式 and 外联样式</p><p><strong>css盒模型</strong></p><p>html中的各个元素都类似一个一个的盒子里面的物品，但是却叫做css盒模型，是因为css盒模型像一个盒子，把各种html元素包起来，将html元素进行封装，以便于网页布局与排版。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513102005071.png" alt="image-20240513102005071" style="zoom: 33%;" /><pre><code class="hljs">    1，上面图中蓝色方框指的是html元素，也是内容部分context，可以是一张图片、一个h1标题、一个表格、一个表单等。但是他的大小并不一定是100×100，而是可以修改的。属性width和height用于修改内容部分的大小。    2，绿色部分，也就是padding部分，指的是内边距，是元素内容与其最近一层束缚框的距离，类似于在一个方格里写字我们写在方格的中间，而与边框保持一定距离一样。    3，浅橘色部分，也就是border部分，指的是这个边框的宽度，我们常见的就是宽度为1，也就是一条线。    4，深橘色部分，也就是margin部分，也叫边缘部分，类似于人与人之间保持一定的距离一样，他的作用是保证html元素之间的距离，比如网页上的两种图片需要保持一定的间距才显得好看。    5，padding，border，margin实际上是每个html元素都存在的css属性。他们可以对元素的上下左右四个方向进行限制。    6，当存在盒子里嵌套盒子时，也就是html的标签嵌套时，里面的元素默认以左上角作为停靠点。    7，盒子模型可用简记为：4个矩形套娃。</code></pre><p><strong>css 有哪几种定位</strong></p><p><strong>1、</strong>静态定位：默认值。（没有指定定位方式时）按照文档的书写布局自动分配在一个合适的地方，用margin改变位置。</p><p><strong>2、</strong>相对定位：脱离正常的文档流，但是其在文档流中的位置依然存在，视觉上相对原来的位置有移动。（设置left、top等值）</p><p><strong>3、</strong>绝对定位：默认情况下依赖浏览器的左上角为定位基准;如果绝对定位的元素存在父、祖先元素且存在相对定位的时候该元素将依赖具备相对定位的元素来进行定位，而不是左上角。（设置top、right、bottom、left这些偏移值，相对于 static 定位以外的第一个父元素进行定位）在没有父元素的条件下，它的参照为body，该方式脱离文档流</p><p><strong>4、</strong>固定定位：生成绝对定位的元素，相对于浏览器窗口进行定位。只需设置它相对于各个方向的偏移值，就可以将该元素固定在页面固定的位置，通常用来显示一些提示信息，脱离文档流；</p><h5 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h5><ol><li>块级元素会独占一行，从上向下顺序排列。</li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。</li></ol><p><strong>12. 如果制作一个访问量很大的网站，对css，js和图片应该怎么处理?</strong></p><p>方法1：资源文件按模块进行放置，有利于团队开发</p><p>方法2：图片尽量采取聚合技术</p><p>方法3：精简压缩css和js文件，减少文件大小</p><p>方法4：类库、媒体使用CDN加速，减轻服务器压力</p><p><strong>解释jsonp的原理</strong></p><p>JSONP是一种非正式传输协议，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p><p><strong>JS怎么创建一个类?</strong></p><p>方式1 : var obj &#x3D; new Object();</p><p>方式2 : var obj &#x3D; {};</p><p><strong>ajax原理，什么是同步异步(主观题，答案不唯一)?</strong></p><p>Ajax的工作原理：相当于在用户和服务器之间加了—个中间层，使用户操作与服务器响应异步化。这样把以前的一些服务器负担的工作转嫁到客户端，利于客户端闲置的处理能力来处理，减轻服务器和带宽的负担，从而达到节约ISP的空间及带宽租用成本的目的。</p><p><strong>xml和json</strong></p><p>json相比xml可读性和可扩张性好、编码及解码难度较低、在数据交互中带宽占用少，并且在当下是最流行的数据交互格式。</p><p><strong>css怎么清除浮动</strong></p><p>1、给父元素单独定义高度</p><p>2、在标签结尾处(前)加空标签并设置<code>clear:both;</code></p><p>3、父元素div定义 伪元素:after</p><p>4、父元素定义 <code>overflow:hidden;</code></p><p>5、父元素定义 <code>overflow:auto;</code></p><p><strong>浮动的作用</strong>：可以让多个块级元素一行内排列显示。浮动可以改变元素标签默认的排列方式。</p><p><code>float</code> 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><p><strong>js数据类型</strong></p><p>未定义 (Undefined)，空 (Null)，数字 (Number)，字符串 (String)，布尔值 (Boolean)，符号 (Symbol)，任意大整数 (BigInt)，对象 (Object)。</p><p> <strong>js 的作用域链</strong></p><p>各个作用域的嵌套关系组成一条作用域链。</p><p>作用域链主要是进行标识符（变量和函数）的查询，标识符解析就是沿着作用域链一级一级的搜索标识符的过程，而作用域链就是保证对变量和函数的有序访问。<br>（1）如果自身作用域中声明该变量，则无需使用作用域链<br>在上面的例子中，如果要在 bar 函数中查询变量 a ，则直接使用 LHS 查询，赋值为 100 即可。<br>（2）如果自身作用域中未声明该变量，则需要使用作用域链进行查找</p><p><strong>js 的作用域，块级作用域，函数作用域</strong></p><p>（由于 JavaScript 存在变量提升这种特性，从而导致很多与直觉不符的代码，这也是 JavaScript 的一个重要设计缺陷，这种设计缺陷带来的问题可以去看看JS变量和函数提升。所以 ES6 通过引入块级作用域并配合 let、const 关键字来避开了这种设计缺陷，但是由于 JavaScript 需要向下兼容，所以变量提升在相当长一段时间内还会继续存在。）</p><p>作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。在 JS 中作用域分为全局作用域和函数作用域，另外函数作用域可以互相嵌套。（ES6增加了块级作用域）</p><p>1、全局作用域：全局作用域中的对象在代码中的任何地方都能访问，其生命周期伴随着页面的生命周期。</p><p>2、函数作用域：函数作用域就是在函数内部定义的变量或函数，并且定义的变量或函数只能在函数内部被访问，函数执行结束后，函数内部定义的变量就会被销毁。</p><p>3、块级作用域：ES6 中给 JavaScript 新增了块级作用域</p><ul><li><p>块级作用域由<code>&#123;&#125;</code>包括，<code>if</code>语句和<code>for</code>语句里面的<code>&#123;&#125;</code>都属于块级作用域</p></li><li><p><code>var</code>定义的变量没有块级作用域概念，可以跨块级作用域访问</p></li><li><p><code>let</code>和<code>const</code>定义的变量只能在块级作用域里访问</p><p>块级作用域是通过词法环境的栈结构来实现的，而变量提升是通过变量环境来实现的，通过两者的结合，JavaScript 引擎也就同时支持了变量提升和块级作用域了。</p></li></ul><p><strong>同源和跨域，跨域问题怎么解决</strong></p><p><strong>1、</strong>同源策略：它是浏览器最核心也最基本的安全功能。如果缺少了同源策略，浏览器很容易受到 XSS、 CSFR 等攻击。同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。</p><p><strong>2、</strong>跨域：当浏览器中一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域。（什么情况下触发同源策略）</p><p>（1）CORS技术（跨源资源共享）：服务器在返回响应报文的时候，在响应头中设置一个允许的header</p><p>（2）原生<a href="https://so.csdn.net/so/search?q=jsonp&spm=1001.2101.3001.7020">jsonp</a>：通过动态创建script标签,通过script标签的src,向一个不同源的接口发送一个get请求（jsonp不支持post）</p><ul><li>获取客户端发送过来的回调函数的名字</li><li>得到要通过JSONP形式发送给客户端的数据</li><li>根据前两步得到的数据，拼接出一一个函数调用的字符串</li><li>把上一步拼接得到的字符串，响应给客户端的<code>&lt;script&gt;</code>标签进行解析执行</li></ul><p>具有局限性，不安全，可能会受到XSS攻击；只支持跨域 HTTP 请求这种情况，不能解决不同域的两个页面之间如何进行 Javascript 调用的问题</p><p>（3）jQuery中的jsonp：设置dataType为jsonp，<a href="https://so.csdn.net/so/search?q=jq&spm=1001.2101.3001.7020">jq</a>会自动动态帮我们创建一个script标签，将url放到src属性中。<em>细节注意点</em>：jq使用jsonp不需要自己设置callback，jq会自动帮我们发送callback参数，参数值就是jq的success回调函数</p><p>（4）浏览器设置跨域：通过修改一些设置，让被设置的浏览器没有同源的限制,自然可以实现跨域</p><p><strong>PNG格式和JPG格式的区别</strong></p><p>1、JPG 使用的是有损压缩——这意味着当图像变小时，图像中的某些数据会被永久删除。从长远来看，这可能会影响文件的质量，因为每次编辑和保存文件时，都会丢失更多数据。<br>PNG 使用无损压缩。这意味着压缩图像时不会丢失任何数据——无论编辑保存文件多少次，质量都保持不变。图像不会变得模糊或扭曲。</p><p>2、最好以 PNG 格式创建屏幕截图，这是几乎所有屏幕截图工具的默认设置。手机端一般会自动将屏幕截图保存为 PNG 格式。主要是因为屏幕截图一般包含具有清晰对比度的精确直线和没有颜色渐变的单色区域。这些都是JPG 格式的主要弱点。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513111239223.png" alt="image-20240513111239223" style="zoom: 67%;" /><p>JPG适合用于照片，在风景或人物图片中几乎看不到压缩伪像。由于尺寸小，适合在网站中使用和网络传输。PNG适用于所有包含锐边和纯色的图形。用于保存屏幕截图、图标和需要透明背景的图片。</p><p>协商缓存和强缓存</p><p><strong>懒加载的原理和你是怎么实现的</strong></p><p>1、对于页面有很多静态资源的情况下（比如网商购物页面），为了节省用户流量和提高页面性能，可以在用户浏览到当前资源的时候，再对资源进行请求和加载。</p><p>2、原理：监听onscroll事件判断资源位置</p><p>首先为所有懒加载的静态资源添加自定义属性字段，比如如果是图片，可以指定data-src为真实的图片地址，src指向loading的图片。<br>然后当资源进入视口的时候，将src属性值替换成data-src的值。<br>可以使用元素的getBoundingRect().top判断是否在视口内，也可以使用元素距离文档顶部的距离offsetTop和scrollTop是否小于视口高度来判断：</p><p>React setState之后的流程</p><p><strong>有什么办法实现深拷贝？</strong></p><p>1、浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是指向内存的地址 ，所以如果其中一个对象改变了这个引用类型的值，就会影响到另一个对象。<br>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。<br>2、方法：递归调用、lodash函数库（**lodash.cloneDeep()**）实现深拷贝、通过js的内置对象JSON来进行深拷贝、通过jQuery的extend方法实现深拷贝、Object.assign()拷贝</p><p><strong>怎么调试 JS 代码</strong></p><p>1、直接在js代码中加入断点进行调试</p><p>2、在事件监听器上设置断点</p><p>3、在DOM节点中设置断点</p><p>（下一步、跳过一些代码、进入函数、跳出函数、跳到下一个断点）</p><p>4、使用vs code（安装某些插件）</p><p>web安全问题，答了（xss、csrf），怎么防御攻击</p><p>\1. 地图展示为什么不用 Google<br>\2. 小程序为什么不使用框架<br>\3. 没有学 react 吗<br><strong>前后端分离是什么</strong></p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513113123476.png" alt="image-20240513113123476" style="zoom:67%;" /><p>1、”前”特指浏览器端(或客户端)，直接呈现给用户的；后端是服务器端，处理业务逻辑和数据，不呈现给用户（JSP不是前端技术）</p><p>2、静态资源和服务(实现接口的业务逻辑)，在开发阶段就分离开发，而部署阶段分离部署在不同服务器上，算是严格意义上的前后端分离。</p><p>3、前端人员和后端人员约定好接口后，前端人员彻底不用再关心业务处理是怎么回事，他只需要把界面做好就可以了，后端人员也不用再关系前端界面是什么样的，他只需要做好业务逻辑处理即可。服务的切离，代码管理，服务部署也都独立出来分别管理，系统的灵活性也获得了极大的提升。</p><p>4、最核心的就是无论你后端换了什么语言，换了什么人去编写，换了什么样的服务器，只要你们定义的一个接口规则不变，然后不会影响到用户的使用，数据的一个展示。同时反过来也一样，无论你前端换了什么UI框架，欸，我今天用easyui，明天我用layui，后天我用bootstrap，你也能够根据定义的接口文档去展示相关数据和效果，那么就是前后端分离。</p><p><strong>闭包是什么</strong></p><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p><p>1.让外部访问函数内部变量变成可能</p><p>2.变量会常驻在内存中</p><p>3.可以避免使用全局变量,防止全局变量污染;</p><p>4.可能会造成<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F&spm=1001.2101.3001.7020">内存泄漏</a>或溢出。</p><p><strong>闭包要注意什么</strong></p><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，<strong>在退出函数之前，将不使用的局部变量全部删除。</strong></p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><p>\12. this 指向<br>\13. var、const、let<br>\14.</p><p> <strong>flex 布局</strong></p><p>flex是Flexible Box的缩写，意为弹性布局，用来为<a href="https://so.csdn.net/so/search?q=%E7%9B%92%E6%A8%A1%E5%9E%8B&spm=1001.2101.3001.7020">盒模型</a>提供最大的灵活性</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513135451485.png" alt="image-20240513135451485"></p><p>（主轴方向、如何换行、如何对齐、项目放大、缩小比例）</p><p><strong>CSS引入的方式有哪些?link和@import的区别是?</strong></p><p>内联 内嵌 外链 导入<br>区别 ：同时加载<br>前者无兼容性，后者CSS2.1以下浏览器不支持<br>Link 支持使用javascript改变样式，后者不可</p><p><strong>XSS</strong>(反射型、存储型、DOM型)</p><ul><li>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）。</li><li>诱使受害者打开受到攻击的服务器URL。</li><li>受害者在Web浏览器中打开URL，恶意脚本执行。</li></ul><p>防范：</p><p>（1）编码：对用户输入的数据进行HTML Entity编码</p><p>（2）过滤：移除用户上传的DOM属性，如onerror等，移除用户上传的style节点，script节点，iframe节点等。</p><p>（3）校正：避免直接对HTML Entity编码，使用DOM Prase转换，校正不配对的DOM标签。</p><p><strong>CSRF</strong></p><p>跨站请求伪造</p><p>攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账…造成的问题包括：个人隐私泄露以及财产安全。</p><ol><li>登录受信任网站A，并在本地生成Cookie</li><li>在不登出A的情况下，访问危险网站B</li></ol><p><strong>Node.js的适用场景？</strong></p><p>高并发、聊天、实时消息推送</p><p> <strong>404、500、301 分别是什么</strong></p><p>100-199 用于指定客户端应相应的某些动作。</p><p>   200-299 用于表示请求成功。</p><p>   300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。</p><p>   400-499 用于指出客户端的错误。400    1、语义有误，当前请求无法被服务器理解。401   当前请求需要用户验证 403  服务器已经理解请求，但是拒绝执行它。</p><p>   500-599 用于支持服务器错误。 503 – 服务不可用</p><p>301：永久移动（网页移动到新的位置）</p><p>302：临时移动</p><p>400：错误请求（服务器不理解请求的语法）</p><p>403：服务器拒绝请求</p><p>404：服务器找不到请求的网页</p><p>500：服务器内部错误，无法完成请求</p><p>502：错误网关</p><p><strong>几种CSS布局方式及其特点</strong>。 </p><p>答案：常见的CSS布局方式包括浮动、定位、弹性布局和网格布局。</p><p> <strong>404、500 错误如何检查</strong></p><p>\21. 临时重定向是什么，二者区别<br>\22. http 2.0<br>\23. React 没学过吗<br>\24. vue 如何实现响应式<br>\25. v-if 和 v-show 区别<br>\26. 组件间通信方式<br>\27. 性能优化（使用异步请求)<br>\28. 给请求排序</p><p><strong>框架 vue和react的异同</strong></p><p>一、同</p><p>①都使用虚拟dom。<br>②提供了响应式和组件化的视图组件。<br>③把注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</p><p>二、异</p><p>vue：1、渐进式框架、自底向上增量开发</p><p>​          2、可以在任意其他类型的项目中使用，使用成本较低，更灵活，主张较弱</p><p>3、易用（使用成本低），灵活（生态系统完善，适用于任何规模的项目），高效（体积小，优化好，性能好）</p><p>react：主张是函数式编程的理念， 实现了前端界面的高性能高效率开发，react很擅长处理组件化的页面。在 React 中，所有的组件的渲染功能都依靠 JSX，它是JavaScript的语法扩展，它在创建UI组件和调试时非常简单有用。</p><p>三、总结</p><p>1、React：整体是函数式的思想，在react中，是单向数据流，推崇结合immutable来实现数据不可变。<br>Vue：的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立Watcher来监听，当属性变化的时候，响应式的更新对应的虚拟dom。</p><p>2、React：思路是all in js，通过js来生成html，所以设计了jsx，还有通过js来操作css，社区的styled-component、jss等。<br>Vue：把html，css，js组合到一起，用各自的处理方式，Vue有单文件组件，可以把html、css、js写到一个文件中，html提供了模板引擎来处理。</p><p>3、当组件的状态发生变化时，React的机制会触发整个组件树的重新呈现。您可能需要使用额外的属性来避免不必要地重新渲染子组件。虽然Vue的重新渲染功能是开箱即用的，但Vue提供了优化的重新渲染，其中系统在渲染过程中跟踪依赖关系并相应地工作。重新渲染是Vue最显着的特征，也使其成为全世界开发人员广泛接受的框架。</p><p>4、react是类式的写法，api很少，而Vue是声明式的写法，通过传入各种options，api和参数都很多。所以react结合typescript更容易一起写，Vue稍微复杂。</p><p>手写防抖节流</p><p><strong>浏览器性能优化策略</strong></p><p>一、感知性能优化（loading图标或者骨架屏）</p><p>如果一个页面的加载时间很长，我们也可以通过一些方式让用户觉得没有那么慢。</p><p>二、HTML优化</p><p>1、HTML代码压缩，将注释、空格和新行从生产文件中删除。减少HTML的大小，加快网站的页面加载时间，并显著减少用户的下载时间。 </p><p>2、删除不必要的注释</p><p>3、删除不必要的属性： <code>type=&quot;text/javascript&quot;</code> or <code>type=&quot;text/css&quot;</code> </p><p>4、使用语义化标签<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513150309276.png" alt="image-20240513150309276" style="zoom:33%;" /></p><p>易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</p><p>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</p><p>方便其他设备解析，如盲人阅读器根据语义渲染网页</p><p>有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。</p><p>5、减少iframe数量</p><p>6、削减DOM数量和层级数量</p><p>7、减少HTTP请求次数（将多个 CSS 和 JavaScript 文件合并为一个文件）</p><p>三、JS优化</p><p>1、<script>标签尽量尽可能放到<body>标签的底部。</p><p>2、尽量减少 DOM 操作的次数和复杂度，可以提高页面的响应速度和性能。</p><p>3、删除重复的脚本</p><p>4、节流与防抖：日常开发过程中，滚动事件做复杂计算频繁调用回调函数很可能会造成页面的卡顿，这时候我们更希望把多次计算合并成一次，只操作一个精确点，JS把这种方式称为debounce（防抖）和throttle（节流）。</p><p>5、</p><p>四、CSS优化</p><p>1、少用@import（影响浏览器的并行下载、导致下载顺序紊乱）</p><p>2、避免！important选择器（破坏了样式表中固有的级联规则、尽量靠近html或body元素）</p><p>3、不在id选择器之前嵌套其他的选择器</p><p>4、压缩CSS文件</p><p>5、CSS层级嵌套尽量不超过三层</p><p>五、图片优化</p><p>1、根据实际需要压缩照片</p><p>2、小图片引入雪碧图</p><p>3、图片懒加载</p><p><strong>React</strong>中的组件生命周期有哪些阶段？ 答案：在React中，组件的生命周期分为三个阶段：挂载阶段、更新阶段和卸载阶段。</p><p><strong>vue 生命周期</strong></p><p>Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -> 渲染、更新 -> 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。</p><p>什么是事件代理</p><p>vue2和vue3响应式的区别</p><p>vue2组件间通信方式</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DFS刷题记录</title>
    <link href="/2024/05/04/DFS%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/05/04/DFS%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>DFS：广度优先搜索</p><span id="more"></span><h3 id="一、分糖果"><a href="#一、分糖果" class="headerlink" title="一、分糖果"></a>一、分糖果</h3><p>​       假如有有两种糖果，每种分别有m和q个，要分给k个人，并且每个人手上的糖果不少于2个不多于5个，一共有多少种分法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> res;<br><span class="hljs-type">int</span> k,m,q;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span>(n==k)<br>    <span class="hljs-keyword">if</span>(a==m&amp;&amp;b==q)  res++;  <span class="hljs-comment">//分好了</span><br>    <span class="hljs-keyword">return</span>;  <span class="hljs-comment">//n若已达到k，不管有没有分好都需要return</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=m;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=q;j++)<br>      <span class="hljs-keyword">if</span>(i+j&gt;=<span class="hljs-number">2</span>&amp;&amp;i+j&lt;=<span class="hljs-number">5</span>)<br>        <span class="hljs-built_in">dfs</span>(n+<span class="hljs-number">1</span>,a+i,b+j);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  cin&gt;&gt;k&gt;&gt;m&gt;&gt;q;<br>  <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>  cout&lt;&lt;res&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP算法详解+图示（附优化版）</title>
    <link href="/2024/04/25/KMP%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3+%E5%9B%BE%E7%A4%BA%EF%BC%88%E9%99%84%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89/"/>
    <url>/2024/04/25/KMP%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3+%E5%9B%BE%E7%A4%BA%EF%BC%88%E9%99%84%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="一、KMP算法的意义"><a href="#一、KMP算法的意义" class="headerlink" title="一、KMP算法的意义"></a>一、KMP算法的意义</h3><p>​在求解这样的算法问题时：已知两个字符串s1和s2，其中s2是s1的字串，请找到s2在s1中的位置。传统的寻找方法即暴力解法：分别从两个字串的第一个字符开始找起，若可以匹配就继续下一个字符；若匹配失败，s1回溯到第二个字符，s2回溯到第一个字符，依此类推……</p><p>​暴力解法在字串长度过大时往往时间复杂度很高，而其主要原因是因为回溯的次数太多，而KMP算法的作用就是用已知的信息量去尽可能减少回溯次数，达到简洁且迅速的效果。</p><h3 id="二、KMP算法的步骤"><a href="#二、KMP算法的步骤" class="headerlink" title="二、KMP算法的步骤"></a>二、KMP算法的步骤</h3><h4 id="1-计算字符串中每个位置之前字串的最长相等前后缀长度"><a href="#1-计算字符串中每个位置之前字串的最长相等前后缀长度" class="headerlink" title="1.计算字符串中每个位置之前字串的最长相等前后缀长度"></a>1.计算字符串中每个位置之前字串的最长相等前后缀长度</h4><p>（1）最长相等前后缀的概念</p><p>​已知一个字符串abaaba,它的前缀字串和后缀字串分别为：</p><p>前缀：a,ab,<strong>aba</strong>,abaa,abaab;</p><p>后缀：a,ba,<strong>aba</strong>,aaba,baaba;</p><p>​那么很明显，aba是它的最长相等前后缀，即这个字符串的最长相等前后缀长度为3。</p><p>（2）next[n]数组</p><p>​对于字符串abaabac，我们想要用数组next[n]中的元素next[i]来保存字符串第i个字符前的字串的最长相等前后缀的长度。</p><p>​首先，我们规定next[0]&#x3D;-1（前面没有字串），next[1]&#x3D;0(字串没有前后缀)。那么就可以得到next[n]的值：</p><p>​ abaabac</p><p>next[0]  [1] [2]      [3]     [4]      [5]     [6]</p><p>​    -1    0    0    1    1    2        3</p><h4 id="2-根据next数组，对字串进行匹配"><a href="#2-根据next数组，对字串进行匹配" class="headerlink" title="2.根据next数组，对字串进行匹配"></a>2.根据next数组，对字串进行匹配</h4><p>​创建如下图所示的两个字符串。</p><p>​已知在进行前六个字符的匹配时，由于都能够匹配成功，因此箭头同步向右移动。当匹配到如图所示的位置时，匹配失败了。如果按照暴力解法，那么上面的字符串应该从第一个b开始匹配，而子串需要从头匹配。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425170716134.png" alt="image-20240425170716134"></p><p>​而KMP算法则利用上一步我们求解的next数组，已知子串中字符<strong>c</strong>的位置是6，而<strong>next[6]&#x3D;3</strong>。因此下一次匹配时，我们直接移动子串，使得子串位置为<strong>3</strong>的字符<strong>a</strong>对准箭头所在的地方，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425171406127.png" alt="image-20240425171406127"></p><p>​接下来让我们理解一下这一步的原理是什么。我会讲解地通俗一点（可能我的理解比较浅显，但是这个思路是可以弄清楚这个算法的）。</p><p>​我们知道KMP算法的作用是要减少回溯的次数，那么如何减少呢？当我们已经走到图一的位置时，我们很容易发现按照暴力方法很浪费时间，因为很明显直接按图二移动是最方便快捷的。由于字符串的匹配不可能每次都让我们用眼睛看到，因此我们需要将信息存储在数组里，需要的时候就可以使用。而next数组就是存储这个重要信息的数组。比如在图一的位置，next数组可以告诉程序，在已知匹配的字符串中，前三位字符和后三位字符是相等的。而此时只有最后一位是不匹配的，因此，我们只需要把前三位平移过来，那么就可以得到图二的结果：有三位字符是匹配的，然后我们继续判断下一位是否和p匹配。既然最大相等前后缀字符串的长度为3，那么对应的，箭头就应该指向子串位置为3的字符（从0计）。</p><p>​以此类推，由于next[3]&#x3D;1,那么相应的，箭头应该指向第二个字符b。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425172526743.png" alt="image-20240425172526743"></p><p>​接下来，聪明的你应该知道，箭头应该指向a了。可是这时候仍然是不匹配的，而且next[0]&#x3D;-1，这时候应该怎么办呢？很简单，这时候应该将字符串的箭头向右移动了，而子串的箭头位置不变，因为它已经指向字串的第0个字符了。</p><h3 id="三、KMP算法的代码实现"><a href="#三、KMP算法的代码实现" class="headerlink" title="三、KMP算法的代码实现"></a>三、KMP算法的代码实现</h3><h4 id="1-计算next数组"><a href="#1-计算next数组" class="headerlink" title="1.计算next数组"></a>1.计算next数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getnext</span><span class="hljs-params">(string s,<span class="hljs-type">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br>    next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>||s[i]==s[k])&#123;<br>            i++,k++;<br>            next[i]=k;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            k=next[k];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​这个函数真的很不好理解。如果让我直接去想这个代码我是肯定想不到的，因此只能就着代码理清思路，这样做题的时候不至于忘记。</p><p>​首先，由于k的初始值是-1，所以一定会进入if函数里，这样一来，next[1]就被赋为0了。</p><p>​当k&#x3D;-1或者s[i]&#x3D;s[k]的时候，会将i和k同时右移。我们先分析，什么时候k&#x3D;-1呢？只有上一次循环时k&#x3D;0，并且s[0]!&#x3D;s[i]时，在k&#x3D;next[k]这个公式里，才会将k又赋为-1。故而此时，i+1前并无相等前后缀，也就又将next[i+1]赋为0。接着，又会判断s[i+1]与s[0]是否相等，如果相等，则i+2前最大相等前后缀长度就为1了。</p><p>​若前面已经有相等前后缀，此时s[i]&#x3D;s[k]，那么相当于相等前后缀的延长，因此s和k会同时后移观察下一位是否也相等。</p><p>​比较复杂的情况如下图（理解k&#x3D;next[k]）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425211350229.png" alt="image-20240425211350229"></p><p>​如图是一串字符串，下标i和next[i]的值分别在其上下标出。在i&#x3D;6，k&#x3D;3之前，可以发现最大前后缀是3，而此时s[i]&#x3D;s[k]不相等。而这个函数的关键之处：k&#x3D;next[k]，将k的值改变成了1（next[3]&#x3D;1)。我们可以发现，如果将k和i分别向前移一位，此时k&#x3D;0，i&#x3D;5，而s[i]的值刚好等于s[k]。这并不是巧合。因为i&#x3D;6之前最大前后缀长度为3，也就是说明字符串前三位和i&#x3D;6之前的三位是相等的。而下标i&#x3D;3之前的最大前后缀长度为1，也就是说明i&#x3D;0、i&#x3D;2、i&#x3D;3、i&#x3D;5这几个数的值也是相等的。所以现在我们向前回溯到，与i&#x3D;6不相等的那个下标（此处为3）之前的子串中的相等前后缀，它的长度对应的下标前的子串一定和i&#x3D;6前的某个后缀相等。然后我们继续比较该下标的值和i&#x3D;6处的值是否相等，以此类推。</p><p>​如果还是不太明白可以多试几个字符串多多验证几次，推导几遍，就会渐渐思路清晰。（其实我们会发现这个思想和前面讲到的KMP思想很类似）</p><p>​ps:while函数中之所以i&lt;s.size()-1，是因为每次都是先i++再赋值的。</p><h4 id="2-KMP算法的代码"><a href="#2-KMP算法的代码" class="headerlink" title="2.KMP算法的代码"></a>2.KMP算法的代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">KMPinit</span><span class="hljs-params">(string s,string p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> len=p.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> next[len],i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化</span><br>    <span class="hljs-built_in">getnext</span>(p,next);<span class="hljs-comment">//求出next数组</span><br>    <span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;j&lt;len)&#123;<span class="hljs-comment">//跳出循环要么找完s字符串都没找到，要么已经找完了</span><br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>||s[i]==s[j])&#123;<span class="hljs-comment">//根据图示理解</span><br>            i++,j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            j=next[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j&gt;=len)&#123;<span class="hljs-comment">//如果跳出循环是因为已经匹配完毕，那么就可以返回位置了</span><br>        <span class="hljs-type">int</span> index=i-len;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//找不到匹配项</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、KMP代码的优化"><a href="#四、KMP代码的优化" class="headerlink" title="四、KMP代码的优化"></a>四、KMP代码的优化</h3><p>​假设子串为aaaaaab，并且字符串为aaaaaacccc。我们会发现b与c不匹配，接着便是前一位的a与c进行匹配，但是依旧不匹配，而紧接着会将前面的a依次与c匹配，得到的结果仍旧是不匹配，因此当next数组指向的字符和它本身相等时，便没有必要再匹配下去。</p><p>​所以我们可以把next函数做以下修正(KMP函数无需改变)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getnext</span><span class="hljs-params">(string s,<span class="hljs-type">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br>    next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>||s[i]==s[k])&#123;<br>            i++,k++;<br>            <span class="hljs-keyword">if</span>(s[i]!=s[k])<br>            next[i]=k;<br>            <span class="hljs-keyword">else</span><br>                next[i]=next[k];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            k=next[k];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考博客：CSDN（哈顿之光）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>KMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为博客配置waline评论模块需要注意什么</title>
    <link href="/2024/04/22/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEwaline%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88/"/>
    <url>/2024/04/22/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEwaline%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>​想要在Github博客中部署一个评论模块有许多选择，其中waline是在valine的基础上衍化而来，因此功能也会更多。但是在跟着官方文档配置的时候需要注意一些问题，否则会一直出错😿……（如果你因fail to fetch这个错误而来，那真是找对人了）</p><span id="more"></span><p>​先附上官方教程文档：<a href="https://waline.js.org/guide/get-started/#vercel-%E9%83%A8%E7%BD%B2-%E6%9C%8D%E5%8A%A1%E7%AB%AF">快速上手 | Waline</a></p><p>​首先要注意的是在注册LeanCloud账号时最好注册国际版，这样比较方便。</p><h3 id="一、vercel部署部分"><a href="#一、vercel部署部分" class="headerlink" title="一、vercel部署部分"></a>一、vercel部署部分</h3><h5 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422144225513.png" alt="image-20240422144225513"></p><p>如上图所示，首先需要点击Deploy然后进行登录，登陆完成之后，会显示这个界面：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422144718930.png" alt="image-20240422144718930"></p><p>这时我一脸蒙，于是就真的随便找了一个项目creat了（页面和教程不一样但我并未在意）……</p><p>其实应该退回到教程页，再点一遍deploy，就可以和教程一致了。</p><h5 id="2-环境变量配置"><a href="#2-环境变量配置" class="headerlink" title="2.环境变量配置"></a>2.环境变量配置</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422145045708.png" alt="image-20240422145045708"></p><p>​第一次看这段话的时候我有点疑惑，加上这时候设置的界面和教程有细微差别，所以我的配置也出错了。如下图所示，正确的配置应该是KEY栏分别写入LEAN_ID<code>, </code>LEAN_KEY和LEAN_MASTER_KEY，Value栏分别写入它们三个的值。（需要add more新创建两个栏）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422145236754.png" alt="image-20240422145236754"></p><h5 id="3-获取服务端地址"><a href="#3-获取服务端地址" class="headerlink" title="3.获取服务端地址"></a>3.获取服务端地址</h5><p>​教程中写到，部署结束后点击visit后跳转到的网页的网址即是服务器地址，也就是后面的serverURL，在HTML文件部署的时候也需要用到。</p><p>​重点来了！！！！在我把所有东西全部部署结束，且保证绝对无误的情况下，虽然我的博客网页上已经展现出了评论的模块，我居然还是评论不了（会显示fail to fetch）……（此时心态已崩🤯）我反反复复找了很久的错误，翻看了视频教程下的评论，终于发现了和我一样错误的友友。他说原因是“<strong>完成后访问的visit地址和第二次在ver项目中打开的server地址不一样</strong>”。我反复琢磨了很久，因为我反复点开visit，这个网址一直不变啊。。。突然，一切都变了，某个瞬间当我点开visit时，它居然显示网页停止访问😨。我三分疑惑四分愤怒地又点开了很多次，终于它加载出来了，定睛一看网页的域名居然变了😇😇😇😇😇😇😇</p><p>​当我把变化后的域名代替先前的域名后，错误就解决了！</p><h3 id="二、HTML引入"><a href="#二、HTML引入" class="headerlink" title="二、HTML引入"></a>二、HTML引入</h3><h5 id="1-找到index-html"><a href="#1-找到index-html" class="headerlink" title="1.找到index.html"></a>1.找到index.html</h5><p>​（ps：不知道不同主题是否对这个配置文件名有影响，我所用的是fluid这个主题）</p><p>​这里我又犯错了，因为我发现.deploy_git和public文件夹下都有一个这样的文件。由于先前我知道了每次hexo clean后都会删掉public文件夹，因此我毅然决然地选择修改了.deploy_git里的文件。于是每次部署网页之后，我都惊奇地发现回到这个文件后我做的修改都离奇消失了。直到我在hexo d时仔细地看了一眼运行结果，发现它赫然写着delete  .deploy_git以及保留public，我的小脑都萎缩了🫠。</p><p>​因此结论就是，一定要<strong>修改public文件夹下的index.html文件</strong>，这样才能生效。</p><h5 id="2-如何修改"><a href="#2-如何修改" class="headerlink" title="2.如何修改"></a>2.如何修改</h5><p>​注意在修改的时候不要把教程文档的所有代码全部粘贴进html文件。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151514648.png" alt="image-20240422151514648"></p><p>​第一部分：head部分，只将中间的那一部分添加入自己html文件的head部分里。记得缩进一定要规范。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151659178.png" alt="image-20240422151659178"></p><p>​第二部分：body部分。我们在html文件中找到<body>后点开方便的符号就可以折叠，这样就可以找到body部分的末尾在哪里<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151922923.png" alt="image-20240422151922923"></p><p>而第二部分最好添加进body部分的最后面。由于我的文件里写道要把某部分保留在最后，因此这一部分代码我就放在那部分前面了。仍然要注意缩进的格式！但是因为我的文件中，body内的很多代码都没有缩进，因此这一部分代码我也没有缩进一格。</p><h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><h5 id="1-部署博客主题配置文件"><a href="#1-部署博客主题配置文件" class="headerlink" title="1.部署博客主题配置文件"></a>1.部署博客主题配置文件</h5><p>​在我配置评论功能的时候，不仅部署了html文件，还部署了yml文件。具体的部署要视各主题而定。因为主题部署文件可能并未默认开启评论功能，因此要去文件中找到“comment”部分，打开评论功能，并配置其他相应必要代码。</p><h5 id="2-重新创建项目"><a href="#2-重新创建项目" class="headerlink" title="2.重新创建项目"></a>2.重新创建项目</h5><p>​如果在第一次配置时出错了，想要再次配置，一定要先删掉之前的项目，删除方法如下图所示，点开Geberal下滑到最下面就可以删掉了。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422152645310.png" alt="image-20240422152645310"></p><p>​但是仅仅在这里删掉是没有用的。还需要进入自己的GitHub网站，你会发现那里也创建了一个同名项目，需要将它也删除。</p><p>​（这个错误也硬控我半小时😾）</p><p>​如果跟着教程文档配置结束后，也排除了我的文章里的问题，还是没有成功，可以在这里或教程下留下评论，让大家一起找找。听说有官方QQ群，但是不知道是哪个😴</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>waline</tag>
      
      <tag>comments</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora基本使用教程</title>
    <link href="/2024/04/21/Typora%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/21/Typora%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文旨在帮助刚刚入门Typora的大家写博文👻。</p><span id="more"></span><p>​打开Typora后，看到一片空白一定有些蒙圈。不要害怕！学会文中的几个指令后就能丝滑写出像样的文章啦，其实Typora和word相差也没有太大。</p><h4 id="一、如何写Frontmatter？"><a href="#一、如何写Frontmatter？" class="headerlink" title="一、如何写Frontmatter？"></a>一、如何写Frontmatter？</h4><h5 id="1-何为frontmatter？"><a href="#1-何为frontmatter？" class="headerlink" title="1.何为frontmatter？"></a>1.何为frontmatter？</h5><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421141453727.png" alt="image-20240421141453727"></p><p>它定义了你的博文标题、这篇博文的分类、标签和作者名等。</p><p>对于我的博客来说，作者一般都是我自己，在主题配置文件修改过后就不用每次都写一遍了。除此之外，时间一般会默认为创建博文文档的时间，也可自行修改。</p><h5 id="2-写frontmatter的格式是什么？"><a href="#2-写frontmatter的格式是什么？" class="headerlink" title="2.写frontmatter的格式是什么？"></a>2.写frontmatter的格式是什么？</h5><p>若想在博文中插入frontmatter，需要打出三个短横线“—”，再Enter，可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142133810.png" alt="image-20240421142133810"></p><p>示例：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142500459.png" alt="image-20240421142500459"></p><p>注意：1.只有在博文最上方打frontmatter才会生效</p><p>​2.要使用英文冒号，冒号后需要有空格。</p><p>​3.若需要打多个标签，格式如下：<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142627174.png" alt="image-20240421142627174"></p><h5 id="3-常见的frontmatter"><a href="#3-常见的frontmatter" class="headerlink" title="3.常见的frontmatter"></a>3.常见的frontmatter</h5><p>title：标题</p><p>auther：作者</p><p>date：建立日期</p><p>updated：更新日期</p><p>comments：是否开启文章评论功能（默认值true）</p><p>tags：标签</p><p>categories：分类</p><p>permalink：覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</p><p>published：文章是否发布</p><h4 id="二、写文章常用指令"><a href="#二、写文章常用指令" class="headerlink" title="二、写文章常用指令"></a>二、写文章常用指令</h4><h5 id="1-多级标题"><a href="#1-多级标题" class="headerlink" title="1.多级标题"></a>1.多级标题</h5><p>在写文章时，往往需要用到多级标题。在Typora里，一级标题的字大小最大。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br></code></pre></td></tr></table></figure><p>依次类推。#后要加空格才会生效。</p><h5 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2.代码块"></a>2.代码块</h5><p>如果想要在文中加入可直接复制的代码块，只需要打出”&#96;&#96;&#96;“再Enter。</p><p>代码块右下方可以调整代码语言。</p><h5 id="3-emjoy"><a href="#3-emjoy" class="headerlink" title="3.emjoy"></a>3.emjoy</h5><p>很多好看的emjoy都在这个网页：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp; more (webfx.com)</a></p><p>下滑找到喜欢的emjoy点击就能够复制了哦😋。</p><h5 id="4-加粗字体-斜体等"><a href="#4-加粗字体-斜体等" class="headerlink" title="4.加粗字体&#x2F;斜体等"></a>4.加粗字体&#x2F;斜体等</h5><p>只要鼠标圈出想要修改的文本，右键就可以修改啦。</p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github图床配置教程</title>
    <link href="/2024/04/15/Typora%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/15/Typora%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文详细地描述了如何利用Typora+PicGo+Github建立图床，并且列出了很多新手容易踩的坑（自己淋过雨要为大家撑伞）。如果对于某些步骤有疑惑或者出错了可以留下评论。</p><span id="more"></span><h3 id="一、建立Github仓库"><a href="#一、建立Github仓库" class="headerlink" title="一、建立Github仓库"></a>一、建立Github仓库</h3><h5 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h5><p>先登录进自己的Github账号，按图示依次点击，就能新建一个仓库了。</p><p>（1）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415201356717.png" alt="image-20240415201356717"></p><p>（2）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415201449418.png" alt="image-20240415201449418"></p><p>（3）填写仓库名，设置为公开，记得要勾选添加README文件，这样才能在仓库中直接创建一个默认的main分支。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415202107013.png" alt="image-20240415202107013"></p><h5 id="2-生成一个token，用于PicGo访问Github"><a href="#2-生成一个token，用于PicGo访问Github" class="headerlink" title="2.生成一个token，用于PicGo访问Github"></a>2.生成一个token，用于PicGo访问Github</h5><p>（1）依次进入settings&#x2F;Developer settings&#x2F;Personal access tokens</p><p>（反正作者的Github上真的找不到这样一个路径，所以以上工作做好后，可以直接访问如下网站进入这个界面，亲测无误。网址：<a href="https://github.com/settings/tokens">Personal Access Tokens (Classic) (github.com)</a>）</p><p>（2）（据说选上面的Beta选项会变得不幸，虽然作者第一次失败时也是选了上面的Beta选项，但是由于还存在其他漏洞，所以它究竟可不可用不得而知）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415203006752.png" alt="image-20240415203006752"></p><p>（3）Note随便写就行，时间限度我选了永久，因为害怕token失效；</p><p>下面的其他选项都不用管，只要将repo勾选上就好。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415203417667.png" alt="image-20240415203417667"></p><p>（4）得到token后好好保存（它只会在这里显示一次），等会还需要用上。</p><p>tips：如果因为某些步骤失误，需要重新生成token，记得把先前生成的token删掉。</p><h3 id="二、PicGo配置"><a href="#二、PicGo配置" class="headerlink" title="二、PicGo配置"></a>二、PicGo配置</h3><h5 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1.下载PicGo"></a>1.下载PicGo</h5><p>（1）点击链接，直达：<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1">Release 2.3.1 · Molunerfinn&#x2F;PicGo (github.com)</a></p><p>（2）我所给出的链接是2.3.1正式版，如果需要最新版，可以点击releases，如图<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415204546713.png" alt="image-20240415204546713"></p><p>（3）在2.3.1这个版本界面一直下滑，直到如图，点击Assets会出现以下版本，可根据需求下载。比如我的设备是Windows11，我下载的版本已在图中圈出。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415204936447.png" alt="image-20240415204936447"></p><p>（4）下载后进行安装，步骤比较简单就省略了。记住安装时的路径，后面会需要。</p><p>（5）然后！是作者踩得一个大坑。在安装后，我怎么都无法打开这个软件。一开始我以为是版本不兼容等问题，但是设置之后仍旧无法打开。但是任务管理器上它明明就在运行……我还卸载重新安装了很多次。后来才发现，点开如图的地方，才发现它在偷偷运行呢！不知道为什么它运行时居然不显示界面，需要点一下才会显示。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415205718027.png" alt="image-20240415205718027"></p><h5 id="2-PicGo配置"><a href="#2-PicGo配置" class="headerlink" title="2.PicGo配置"></a>2.PicGo配置</h5><p>（1）进入PicGo后，将框住的地方修改为Github</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415205845506.png" alt="image-20240415205845506"></p><p>（2）点击图床设置，选择Github设置，进入如下界面。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415210205262.png" alt="image-20240415210205262"></p><p>仓库名格式：“Github用户名&#x2F;仓库名”</p><p>分支名：main（不要用master）</p><p>token：在第一步保存的token直接粘贴进来</p><p>存储路径：可设可不设</p><p>自定义域名格式：<a href="https://cdn.jsdelivr.net/gh/[Github%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]@main">https://cdn.jsdelivr.net/gh/[Github用户名]/[仓库名]@main</a></p><p>（这个域名据说可以加快访问图片的速度，不知道日后会不会失效，但是暂时是可以用的）</p><p>点击确定，PicGo就配置好啦。</p><p>（3）补充：点击PicGo设置中的设置sever，如果下图处不是36677要修改为36677，否则会出错</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415210909195.png" alt="image-20240415210909195"></p><h3 id="三、Typora配置"><a href="#三、Typora配置" class="headerlink" title="三、Typora配置"></a>三、Typora配置</h3><p>（1）点击右上角文件，进入偏好设置</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211109267.png" alt="image-20240415211109267"></p><p>（2）进入图像设置，插入图片时选择上传图片，并将如图所示的选项打勾；</p><p>上传服务设定设置为PicGo（app），下面填写PicGo安装的路径，一定要填写完整，把PicGo.exe也要放到路径里。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211453817.png" alt="image-20240415211453817"></p><p>（3）至此所有的配置已经完成。</p><p>确保网络已经连接好，点击上图左下角的验证图片上传选项，若出现如下图的界面，证明上传成功，PicGo应用也会发来通知说上传成功。此时在自己的Github仓库里也能够找到相应图片。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211851779.png" alt="image-20240415211851779"></p><p>如果仍然不成功也不要气馁呀。作者配置了快一天才成功…………因为先配置了Gitee结果发现它失效了（失效了还不删教程，太过分了！！！！）</p><p>如果配置成功啦就恭喜你啦，从此以后就可以丝滑地在Typora里粘贴图片了~</p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>Github</tag>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【踩雷合辑】利用Hexo搭建以fluid为主题的Github博客需要注意什么？</title>
    <link href="/2024/04/13/github%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/13/github%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​搭建博客是一个非常漫长的过程，在期间我参照过几十篇教程，在非常厉害的Gina同学的帮助下，反反复复试验了很多很多次，经过很多天后才终于能通过我的博客网址访问我的博客主页啦。<span id="more"></span>中间踩过不少雷，有时候一度绝望过（因为在网上根本搜不到和我一样的错误QAQ），好在最终坚持下来了。</p><p>​先附上fluid主题的官方文档：<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a>里面有很详细的配置教程哦。</p><h4 id="一、-config-yml配置文件撰写"><a href="#一、-config-yml配置文件撰写" class="headerlink" title="一、_config.yml配置文件撰写"></a>一、_config.yml配置文件撰写</h4><p>​它就在你所搭建的博客文档的根目录里，是非常重要的配置文档。</p><h5 id="1-博客主题修改"><a href="#1-博客主题修改" class="headerlink" title="1.博客主题修改"></a>1.博客主题修改</h5><p>​打开文档后拉到下面，找到<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240416163624718.png" alt="image-20240416163624718"></p><p>​将theme后改为fluid，注意fluid主题的文件要放入themes文件夹里。如果是下载了zip压缩包，需要将其解压到该文件夹里并修改名字为fluid。</p><h5 id="2-deploy配置"><a href="#2-deploy配置" class="headerlink" title="2.deploy配置"></a>2.deploy配置</h5><p>​这个代码块就在主题配置的下方。注意不要按照网上搜索的教程配置，因为很多教程都已经很老了，所以可能会出问题。按照下面的格式配置是没有问题的。（分支必须是main）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># <span class="hljs-title class_">Deployment</span><br>## <span class="hljs-title class_">Docs</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy</span>:<br>  <span class="hljs-attr">type</span>: git<br>  <span class="hljs-attr">repo</span>: git@github.<span class="hljs-property">com</span>:[博客名]/[仓库名].<span class="hljs-property">github</span>.<span class="hljs-property">io</span>.<span class="hljs-property">git</span><br>  <span class="hljs-attr">branch</span>: main<br></code></pre></td></tr></table></figure><p>注意：每个冒号后都有一个空格。</p><h5 id="3-记得保存修改"><a href="#3-记得保存修改" class="headerlink" title="3.记得保存修改"></a>3.记得保存修改</h5><p>​我所用的编译软件是vscode，这个软件直接退出是不会保存的。快捷键Ctrl+s可以保存修改，然后不用退出就可以继续hexo g+hexo s两步走试看网页效果啦。</p><h4 id="二、博客部署的问题"><a href="#二、博客部署的问题" class="headerlink" title="二、博客部署的问题"></a>二、博客部署的问题</h4><p>​我们知道要搭建博客，就要去Github官网创建一个博客，然后再建立一个仓库用于保存我们的网页。博客的名字可以随意取，但是仓库名，如果你和我一样取的是英文名，<strong>第一个字母一定要小写！！！！！</strong></p><p>​因为我们会发现，当我们想要进入自己的博客官网时，输入的网址格式如下：https:&#x2F;&#x2F;[仓库名].github.io&#x2F;，而每次进入网址时，仓库名的第一个字母就会自动从大写变成小写，因此访问时就会显示404。</p><p>​不知道是主题的问题还是什么，反正这个问题害我找bug找了快两个小时……</p><h5 id="1-配置安装缺失"><a href="#1-配置安装缺失" class="headerlink" title="1.配置安装缺失"></a>1.配置安装缺失</h5><p>有时候hexo d后报错是因为有些配置没有安装,用下面的指令安装好就可</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h5 id="2-在根目录下部署"><a href="#2-在根目录下部署" class="headerlink" title="2.在根目录下部署"></a>2.在根目录下部署</h5><p>有时候搭建博客在部署时会忘记退出到根目录，此时也会出错。</p><h4 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h4><p>1.在部署博客时最好hexo clean后再hexo g+hexo d。</p><p>2.博文的文件放置在source文件夹下的_posts文件夹内。（fluid主题配置后都会默认创建一个这样的文件，里面有一篇默认的文档）</p><p>3.博客主题文档的配置需要很多图片，千万不要把他们放在public文件夹下。因为public是每次部署博客生成的静态文件，每次hexo clean之后就会将其删除。但是博客文件是会保留下来的，所以不用担心。那么<strong>这些照片，最好放在source文件夹下的img文件夹内保存</strong>（若没有就新建一个这样的文件夹）。</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About Me</title>
    <link href="/2024/04/12/About%20Me/"/>
    <url>/2024/04/12/About%20Me/</url>
    
    <content type="html"><![CDATA[<p>😽</p><span id="more"></span><h2 id="WHO-AM-I"><a href="#WHO-AM-I" class="headerlink" title="WHO AM I?"></a>WHO AM I?</h2><p>我是Yaodeer，这个博客主要用于记录在软件开发学习过程的知识汲取经历。对我来说，记录是一种很好的总结和复盘的过程。我也相信学无止境。或许以后我会记录更多领域的学习过程，因为正是学习丰富了我的世界。</p><p>不知道这些兀自的记录会不会也让其他人看到，如果对正在看的你有帮助，那就是我莫大的荣幸。如果文章中有错误也欢迎指出。</p><h2 id="WELCOME-TO-MY-WORLD"><a href="#WELCOME-TO-MY-WORLD" class="headerlink" title="WELCOME TO MY WORLD"></a>WELCOME TO MY WORLD</h2><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241023205754573.png" alt="image-20241023205754573"></p><p>🐶🐱喜欢一切可爱的事物。图片上是我找到工作后就要收养的小猫。它叫黄啾啾，是世界上最可爱的小猫之一。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241023210452844.png" alt="image-20241023210452844"></p><p>📸🌕🪐🌈🌊🌠🌱想要将世界万物拍摄进相机中永远保存。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241023211500601.png" alt="image-20241023211500601"></p><p>🎧🎤🎼热爱音乐。听音乐、唱歌、吹口琴……音乐是灵魂的解药。（如果你也喜欢霉霉、毛不易、周杰伦、孟凡明、王菲、久石让我们就是好朋友）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20241023213357769.png" alt="image-20241023213357769"></p><p>📔📽️📺热爱看书、电影、美剧、纪录片。爱的太多根本讲不完（老友记、摩登家庭、哈利波特、宫崎骏、爱乐之城、怦然心动、白日梦想家、楚门的世界、《乱世佳人》、《你当像鸟飞往你的山》、《悉达多》、《小王子》……）</p><p>📚喜欢写日记。</p><p>🖍️热爱绘画。</p><p>🗺️喜欢旅游。</p><p>💭……</p><h2 id="AT-LAST"><a href="#AT-LAST" class="headerlink" title="AT LAST"></a>AT LAST</h2><p>在这里放上我最爱的一句话：</p><p><strong>我还要和生活死磕几年，要么我就毁灭，要么我就注定辉煌。如果有一天，你发现我在平庸面前低了头，请向我开炮。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
