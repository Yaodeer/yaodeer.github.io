<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>react课程23-继续功能</title>
    <link href="/2024/09/27/react%E8%AF%BE%E7%A8%8B23-%E7%BB%A7%E7%BB%AD%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/09/27/react%E8%AF%BE%E7%A8%8B23-%E7%BB%A7%E7%BB%AD%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程22-实现较为完整的用户管理功能</title>
    <link href="/2024/09/26/react%E8%AF%BE%E7%A8%8B22-%E5%AE%9E%E7%8E%B0%E8%BE%83%E4%B8%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/09/26/react%E8%AF%BE%E7%A8%8B22-%E5%AE%9E%E7%8E%B0%E8%BE%83%E4%B8%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>本节负责实现身份验证和授权、用户注册、登陆登出、修改用户信息的功能</p><span id="more"></span><h3 id="一、身份验证和授权"><a href="#一、身份验证和授权" class="headerlink" title="一、身份验证和授权"></a>一、身份验证和授权</h3><h4 id="（1）-Authentication"><a href="#（1）-Authentication" class="headerlink" title="（1） Authentication"></a>（1） <strong>Authentication</strong></h4><blockquote><p>身份验证是确认用户的身份的过程，目的是验证用户是谁。</p></blockquote><p>首先我们在Authentication中新建了一个user，然后到API DOCS中的user management中寻找<code>Log in with Email/Password</code>这一段代码，copy下来放置进apiAuth中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">&#123; email, password &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">signInWithPassword</span>(&#123;<br>    email,<br>    password,<br>  &#125;);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后可以新建一个useLogin钩子，得到mutation函数来处理登陆。可以看出onSuccess函数可以得到data，于是可以记录到控制台查看信息。</p><p>调用 <code>queryClient.setQueryData([&#39;user&#39;], user.user);</code>：将登录成功的用户数据缓存到 <code>[&#39;user&#39;]</code> 查询中，这样应用的其他部分可以使用这个用户信息。（user是object，包含session和user，而我们想要的只是user：用户）</p><p>replace是为了替换浏览记录。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLogin</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: login, isLoading &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">&#123; email, password &#125;</span>) =&gt;</span> <span class="hljs-title function_">loginApi</span>(&#123; email, password &#125;),<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> &#123;<br>      queryClient.<span class="hljs-title function_">setQueryData</span>([<span class="hljs-string">&#x27;user&#x27;</span>], user.<span class="hljs-property">user</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);<br>      <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/dashboard&#x27;</span>，&#123;<span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>&#125;);<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      toast.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Provided email or password are incorrect&#x27;</span>);<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; login, isLoading &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用 <code>supabase.auth.signInWithPassword(&#123; email, password &#125;)</code> 时，<code>Supabase</code> 会将你提供的 <code>email</code> 和 <code>password</code> 发送到它的身份验证服务。</p><p><code>Supabase</code> 在后台会将提供的 <code>email</code> 和 <code>password</code> 与其数据库中存储的用户信息进行比较。验证流程包括：</p><ul><li><strong>查找用户</strong>：<code>Supabase</code> 会在其用户数据库中根据提供的 <code>email</code> 查找相应的用户记录。</li><li><strong>验证密码</strong>：找到用户后，<code>Supabase</code> 会对传入的 <code>password</code> 进行加密（通常是哈希处理），然后与数据库中存储的哈希值进行比较。密码在存储时是经过哈希加密的，数据库不直接存储明文密码。</li></ul><p>验证结果：</p><ul><li><strong>成功</strong>：如果邮箱存在且密码匹配，<code>Supabase</code> 会返回一个包含用户数据的响应（即 <code>data</code> 对象）。这表示用户身份验证成功，用户可以登录。</li><li><strong>失败</strong>：如果邮箱不存在或者密码不正确，<code>Supabase</code> 会返回一个 <code>error</code> 对象，其中包含错误信息（例如 “Invalid login credentials”）。</li></ul><p>我们会发现登陆成功后，在浏览器storage出现了token。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926145909054.png" alt="image-20240926145909054"></p><h4 id="（2）Authorization"><a href="#（2）Authorization" class="headerlink" title="（2）Authorization"></a>（2）Authorization</h4><blockquote><p>授权是在身份验证成功后，确定用户对系统资源或操作的访问权限的过程。</p></blockquote><p>建立一个<code>ProtectedRout</code>组件，并在<code>App.jsx</code>的Route中把<code>Applayout</code>组件用它包裹起来。由于其他界面都在<code>Applayout</code>中被渲染，所以用户必须通过身份验证，才能进入任何在 <code>AppLayout</code> 中渲染的页面。（代码简洁，性能优化，更好的维护性）</p><p><code>ProtectedRoute</code> 是一个自定义的路由组件，主要职责是限制对某些路由的访问，用来保护一组路由，通常是检查用户是否登录或是否有访问权限。</p><h5 id="1、从supabase中获取用户的信息"><a href="#1、从supabase中获取用户的信息" class="headerlink" title="1、从supabase中获取用户的信息"></a>1、从supabase中获取用户的信息</h5><blockquote><p><strong>会话</strong>（Session）是指在一段时间内，用户与系统之间的持续交互状态或连接。会话管理是现代应用程序和服务中的重要机制，用于跟踪用户的身份和状态。具体来说，会话与身份验证和授权密切相关。会话通常在用户登录或访问某个系统时开始，并在用户注销或超时后结束（详见文末）</p></blockquote><p>通过检查用户的当前会话，从本地内存中获取登录用户的信息。如果没有会话（即用户未登录），返回 <code>null</code>；如果会话有效，则获取并返回用户信息。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getCurrentUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: session &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">getSession</span>();<br>  <span class="hljs-keyword">if</span> (!session.<span class="hljs-property">session</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">getUser</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br><br>  <span class="hljs-keyword">return</span> data?.<span class="hljs-property">user</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、useUser-js"><a href="#2、useUser-js" class="headerlink" title="2、useUser.js"></a>2、useUser.js</h5><p>获取当前用户并将其存储到缓存中，这样就不用每次都重新下载。（获取isAuthenticated）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; isLoading, <span class="hljs-attr">data</span>: user &#125; = <span class="hljs-title function_">useQuery</span>(&#123;<br>    <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;user&#x27;</span>],<br>    <span class="hljs-attr">queryFn</span>: getCurrentUser,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; isLoading, user, <span class="hljs-attr">isAuthenticated</span>: user?.<span class="hljs-property">role</span> === <span class="hljs-string">&#x27;authenticated&#x27;</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>下图为登陆后React Query工具里得到的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926153141752.png" alt="image-20240926153141752"></p><h5 id="3、在ProtectRouter中来验证是否需要重定向到login界面"><a href="#3、在ProtectRouter中来验证是否需要重定向到login界面" class="headerlink" title="3、在ProtectRouter中来验证是否需要重定向到login界面"></a>3、在ProtectRouter中来验证是否需要重定向到login界面</h5><blockquote><p><code>navigate</code> 并<strong>不限于</strong>回调函数或 <code>useEffect</code> 中使用，但这些场景是最常见和安全的使用方式</p><p>不推荐在组件首次渲染的时候使用navigate。详见Router专题</p></blockquote><ol><li>得到 <code>isAuthenticated</code> </li><li>如果没有登陆就重定向到login界面</li><li>如果还在加载就返回一个加载指示器</li><li>如果已经登陆就渲染App</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProtectedRoute</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">const</span> &#123; isLoading, isAuthenticated &#125; = <span class="hljs-title function_">useUser</span>();<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (!isAuthenticated &amp;&amp; isLoading) <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>    &#125;,<br>    [isAuthenticated, isLoading, navigate]<br>  );<br><br>  <span class="hljs-keyword">if</span> (isLoading)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FullPage</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Spinner</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">FullPage</span>&gt;</span></span><br>    );<br><br>  <span class="hljs-keyword">if</span> (isAuthenticated) <span class="hljs-keyword">return</span> children;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）Log-out"><a href="#（3）Log-out" class="headerlink" title="（3）Log out"></a>（3）Log out</h4><h5 id="1、apiAuth"><a href="#1、apiAuth" class="headerlink" title="1、apiAuth"></a>1、apiAuth</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">&#123; email, password &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">signOut</span>();<br><br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、useLogout"><a href="#2、useLogout" class="headerlink" title="2、useLogout"></a>2、useLogout</h5><p><code>queryClient.removeQueries()</code>：清除 <code>react-query</code> 缓存中的所有数据，确保用户退出后，应用不再保留之前的查询数据。</p><p><code>navigate(&#39;/login&#39;, &#123; replace: true &#125;)</code>：将用户重定向到登录页面，并且使用 <code>replace: true</code> 替换当前的历史记录，这样用户在点击“返回”按钮时不会回到之前已登出的页面。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLogout</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: logout, isLoading &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: logoutApi,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      queryClient.<span class="hljs-title function_">removeQueries</span>();<br>      <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, &#123; <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;);<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; logout, isLoading &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、Logout组件"><a href="#3、Logout组件" class="headerlink" title="3、Logout组件"></a>3、Logout组件</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Logout</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; logout, isLoading &#125; = <span class="hljs-title function_">useLogout</span>();<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ButtonIcon</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isLoading&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;logout&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;!isLoading ? <span class="hljs-tag">&lt;<span class="hljs-name">HiArrowRightOnRectangle</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">SpinnerMini</span> /&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ButtonIcon</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、实现注册功能"><a href="#二、实现注册功能" class="headerlink" title="二、实现注册功能"></a>二、实现注册功能</h3><blockquote><p>在这个APP中，逻辑是只有登陆成功后才能注册其他用户。</p></blockquote><h4 id="（1）创建注册表单"><a href="#（1）创建注册表单" class="headerlink" title="（1）创建注册表单"></a>（1）创建注册表单</h4><h5 id="1、需要用到的工具"><a href="#1、需要用到的工具" class="headerlink" title="1、需要用到的工具"></a>1、需要用到的工具</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; register, formState, getValues, handleSubmit &#125; = <span class="hljs-title function_">useForm</span>();<br><span class="hljs-keyword">const</span> &#123; errors &#125; = formState;<br></code></pre></td></tr></table></figure><h5 id="2、验证信息"><a href="#2、验证信息" class="headerlink" title="2、验证信息"></a>2、验证信息</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;fullName&#x27;</span>, &#123; <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is required&#x27;</span> &#125;)&#125;<br><br>&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;email&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is required&#x27;</span>,<br>      <span class="hljs-attr">pattern</span>: &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-regexp">/\S+@\S+\.\S+/</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Please provide a valid email address&#x27;</span>,<br>   &#125;,<br>&#125;)&#125;<br><br>&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;password&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is required&#x27;</span>,<br>   <span class="hljs-attr">minLength</span>: &#123;<br>   <span class="hljs-attr">value</span>: <span class="hljs-number">8</span>,<br>       <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Password needs a minimum of 8 characters&#x27;</span>,<br>   &#125;,<br>&#125;)&#125;<br><br>&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;passwordConfirm&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is required&#x27;</span>,<br>   <span class="hljs-attr">validate</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span><br>       value === <span class="hljs-title function_">getValues</span>().<span class="hljs-property">password</span> || <span class="hljs-string">&#x27;Passwords need to match&#x27;</span>,<br>&#125;)&#125;<br></code></pre></td></tr></table></figure><h5 id="3、如何提交表单？错误如何展示"><a href="#3、如何提交表单？错误如何展示" class="headerlink" title="3、如何提交表单？错误如何展示?"></a>3、如何提交表单？错误如何展示?</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Form</span> onSubmit=&#123;<span class="hljs-title function_">handleSubmit</span>(onSubmit)&#125;&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FormRow</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Full name&quot;</span> <span class="hljs-attr">error</span>=<span class="hljs-string">&#123;errors?.fullName?.message&#125;</span>&gt;</span>  &#123;/以此类推/&#125;</span><br></code></pre></td></tr></table></figure><h4 id="（2）实现把用户注册到supabase"><a href="#（2）实现把用户注册到supabase" class="headerlink" title="（2）实现把用户注册到supabase"></a>（2）实现把用户注册到supabase</h4><p>伤到了，谁懂，supabase界面全英文，看到有一个警告，但是看不懂也没当回事，但是验证创建user的时候就出问题了。原来现在需要打开自定义SMTP的开关才能用随便的邮箱去注册用户了。在设置-Authentication里面。这个表单输入的信息要是真实的。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926172620751.png" alt="image-20240926172620751"></p><p>否则就会报错：Error: Email address “<a href="mailto:&#x32;&#x37;&#54;&#x38;&#x32;&#54;&#48;&#55;&#x35;&#52;&#64;&#x72;&#114;&#46;&#x63;&#111;&#109;">&#x32;&#x37;&#54;&#x38;&#x32;&#54;&#48;&#55;&#x35;&#52;&#64;&#x72;&#114;&#46;&#x63;&#111;&#109;</a>“ cannot be used as it is not authorized    at Object.signup [as mutationFn] </p><p>但是这还没有结束，下一小节是如何实现邮箱验证。supabase你关闭SMTP发送的功能好巧不巧，我现在要用到。。。💔</p><h5 id="1、apiAuth-1"><a href="#1、apiAuth-1" class="headerlink" title="1、apiAuth"></a>1、apiAuth</h5><p>传递给signUp的object中可以包含一个可选项，因为只有email和password是必需项，所以名字可以通过这样的方式传递进去，同时可以再传一个用户的头像。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">signup</span>(<span class="hljs-params">&#123; fullName, email, password &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">signUp</span>(&#123;<br>    email,<br>    password,<br>    <span class="hljs-attr">options</span>: &#123; <span class="hljs-attr">data</span>: &#123; fullName, <span class="hljs-attr">avatar</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125; &#125;,<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、useSignUp"><a href="#2、useSignUp" class="headerlink" title="2、useSignUp"></a>2、useSignUp</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useMutation, useQueryClient &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tanstack/react-query&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; signup <span class="hljs-keyword">as</span> signupApi &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../services/apiAuth&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> toast <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-hot-toast&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useSignup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: signup, isLoading &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: signupApi,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> &#123;<br>      toast.<span class="hljs-title function_">success</span>(<br>        <span class="hljs-string">&quot;Account successfully created!Please verify the new account from the user&#x27;s email address&quot;</span><br>      );<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      toast.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">message</span>);<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; signup, isLoading &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、onSubmit"><a href="#3、onSubmit" class="headerlink" title="3、onSubmit"></a>3、onSubmit</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params">&#123; fullName, email, password &#125;</span>) &#123;<br>  <span class="hljs-title function_">signup</span>(&#123; fullName, email, password &#125;, &#123; <span class="hljs-attr">onSettled</span>: reset &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里reset会引发问题。jonas还没改。</p><h5 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h5><ul><li>在Authentication-URL Configuration中的两个URL栏，分别填入了</li></ul><p>(<a href="http://localhost:5173/dashboard">http://localhost:5173/dashboard</a>)   和（<a href="http://localhost:5173）我不知道是干嘛用的">http://localhost:5173）我不知道是干嘛用的</a></p><ul><li><p>“Temp Mail”（临时邮件）是指一种可以临时使用的电子邮件服务，允许用户生成一个临时的电子邮件地址。用户可以使用这个地址接收邮件，而不需要使用自己的真实邮箱。</p><p>地址：<a href="https://temp-mail.org/en/">https://temp-mail.org/en/</a>          界面：（上面生成邮箱，下面是收件箱）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926192815075.png" alt="image-20240926192815075"></p><p>由于我们打开了SMTP的验证要求，所以用户在注册后都会在邮箱中收到一封需要验证的邮件，否则还是不能用这个邮箱登陆。<strong>并且后续的更改密码等功能也是需要用到邮箱验证的！！！！！！！！</strong></p><h4 id="（3）如何配置Resend解决supabase停止发送邮件"><a href="#（3）如何配置Resend解决supabase停止发送邮件" class="headerlink" title="（3）如何配置Resend解决supabase停止发送邮件"></a>（3）如何配置Resend解决supabase停止发送邮件</h4><p>这里是这个紧急变革的讨论区<a href="https://github.com/orgs/supabase/discussions/29370">https://github.com/orgs/supabase/discussions/29370</a></p><p>咱们也是跟supabase的维护者对上话了😂能写进简历里吗</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927091045026.png" alt="image-20240927091045026" style="zoom:80%;" /><p>一开始我以为只有那些专门的邮箱发送服务商才可以，于是打算使用看起来很靠谱的Resend，但是由于它需要自己有个域名，甚至去华为买了一个（首年1元的）域名。。。</p><p>但是后来发现Gmail居然也可以？！</p><h5 id="1、设置自定义SMTP"><a href="#1、设置自定义SMTP" class="headerlink" title="1、设置自定义SMTP"></a>1、设置自定义SMTP</h5><p>在supabase的设置中找到Auth，下滑找到这个地方，首先点击<em>here</em>，进入设置邮箱limit的地方，把第一条设置改成3以上（每小时能够发的邮件数）。下面的email和name就相应填，email一定要填gmail邮箱，name可以随意。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-27%20090706.png" alt="img" style="zoom: 50%;" /><p>下面的HOST和POST number就是smtp.gmail.com和465.</p><p><strong>Username需要再填一次邮箱地址，不是随便填的！！！！！！！！！！</strong></p><p><strong>密码也不是Gmail的登陆密码</strong>，而是需要专门的密码，在Gmail账户中打开两步验证后找到设置应用专用密码，然后生成一个，注意<strong>生成后只会出现一次</strong>，需要立马复制下来。</p><p>这里每次更改密码再回来会发现没有改变，这也是我去问supabase维护者的问题，但是其实没有影响的。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927092904298.png" alt="image-20240927092904298" style="zoom:50%;" /><h5 id="2、如果遇到问题怎么获得详细的错误原因？"><a href="#2、如果遇到问题怎么获得详细的错误原因？" class="headerlink" title="2、如果遇到问题怎么获得详细的错误原因？"></a>2、如果遇到问题怎么获得详细的错误原因？</h5><p>在我们supabase的项目sidebar中有一个是<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927093243940.png" alt="image-20240927093243940"></p><p>在里面可以找到关于Auth的所有日志，比如当SMTP没设置好就是这个错误：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927093406787.png" alt="image-20240927093406787"></p><p>点进去会有详细的信息。</p><h5 id="3、成功！🥳"><a href="#3、成功！🥳" class="headerlink" title="3、成功！🥳"></a>3、成功！🥳</h5><p>经过一番不懈的努力，我终于实现了邮箱验证的功能，为了确认真的可以收到邮件，我使用了Temp emial的随机地址<a href="mailto:&#119;&#x61;&#x6d;&#97;&#x63;&#101;&#x78;&#55;&#x37;&#53;&#x40;&#x65;&#120;&#x77;&#x65;&#109;&#x65;&#46;&#99;&#111;&#109;">&#119;&#x61;&#x6d;&#97;&#x63;&#101;&#x78;&#55;&#x37;&#53;&#x40;&#x65;&#120;&#x77;&#x65;&#109;&#x65;&#46;&#99;&#111;&#109;</a>（但是只要你不更换，每次进去都会是这个地址，所以很方便），并且在收件箱中真的看见了邮件：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-27%20092114.png" alt="img"></p><h4 id="（4）确保安全性"><a href="#（4）确保安全性" class="headerlink" title="（4）确保安全性"></a>（4）确保安全性</h4><p>修改Policy，否则未登录的用户也是可以访问到这些数据库的信息的。</p><h3 id="三、构建Header"><a href="#三、构建Header" class="headerlink" title="三、构建Header"></a>三、构建Header</h3><p>这是现在的Header：<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927093914593.png" alt="image-20240927093914593"></p><p>我们在注册用户的函数中，上传了除开email和密码的可选项，其中包含了avatar。这些信息可以在React Query工具里看到。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240926224628775.png" alt="image-20240926224628775"></p><p>我们的Header包含头像、还有两个图标。其中UserAvatar.jsx：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">UserAvatar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; user &#125; = <span class="hljs-title function_">useUser</span>();<br>  <span class="hljs-keyword">const</span> &#123; fullName, avatar &#125; = user.<span class="hljs-property">user_metadata</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledUserAvatar</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;avatar</span> || &#x27;<span class="hljs-attr">default-user.jpg</span>&#x27;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">Avatar</span> <span class="hljs-attr">of</span> $&#123;<span class="hljs-attr">fullName</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;fullName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledUserAvatar</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、实现更改密码和头像"><a href="#四、实现更改密码和头像" class="headerlink" title="四、实现更改密码和头像"></a>四、实现更改密码和头像</h3><h4 id="（1）准备工作"><a href="#（1）准备工作" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h4><h5 id="1、在storage中建立自己的头像库，命名为avatars"><a href="#1、在storage中建立自己的头像库，命名为avatars" class="headerlink" title="1、在storage中建立自己的头像库，命名为avatars"></a>1、在storage中建立自己的头像库，命名为avatars</h5><h5 id="2、添加Policy"><a href="#2、添加Policy" class="headerlink" title="2、添加Policy"></a>2、添加Policy</h5><p>选择这一条，然后为auth用户添加所有的操作权限</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927100812071.png" alt="image-20240927100812071" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927100757718.png" alt="image-20240927100757718" style="zoom: 50%;" /><h5 id="3、得到avatars中图片的URL路径"><a href="#3、得到avatars中图片的URL路径" class="headerlink" title="3、得到avatars中图片的URL路径"></a>3、得到avatars中图片的URL路径</h5><p>随便在其中上传一张图片，点击get url得到其URL路径，在后续的apiAuth中修改avatar的函数中需要用到。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927101356754.png" alt="image-20240927101356754"></p><h4 id="（2）建立更新用户信息的函数"><a href="#（2）建立更新用户信息的函数" class="headerlink" title="（2）建立更新用户信息的函数"></a>（2）建立更新用户信息的函数</h4><h5 id="1、函数参数"><a href="#1、函数参数" class="headerlink" title="1、函数参数"></a>1、函数参数</h5><p>函数updateCurrentUser接收一个object，包含密码、全名和头像。</p><p><code>export async function updateCurrentUser(&#123; password, fullName, avatar &#125;)</code></p><h5 id="2、更新password或fullName"><a href="#2、更新password或fullName" class="headerlink" title="2、更新password或fullName"></a>2、更新password或fullName</h5><p>之所以可以把更新这些信息的函数笼统地弄成一个，是因为修改密码和修改全名并不在一个表格中，所以可以条件性地得到updateData。记住fullName和avatar在注册的时候就是通过options中的data关键字注册的，在传递要更新的内容的时候，也要把它们包裹在一个对象中传递。</p><p>在没有上传avatar的时候，就可以结束了，因为下面是有关更新avatar的内容。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//更新密码或者全名</span><br><span class="hljs-keyword">let</span> updateData;<br><span class="hljs-keyword">if</span> (password) updateData = &#123; password &#125;;<br><span class="hljs-keyword">if</span> (fullName) updateData = &#123; <span class="hljs-attr">data</span>: &#123; fullName &#125; &#125;;<br><br><span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">updateUser</span>(updateData);<br><br><span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error.<span class="hljs-property">message</span>);<br><span class="hljs-keyword">if</span> (!avatar) <span class="hljs-keyword">return</span> data;<br></code></pre></td></tr></table></figure><h5 id="3、上传avatar"><a href="#3、上传avatar" class="headerlink" title="3、上传avatar"></a>3、上传avatar</h5><p>自定义filename，使用上面的操作返回的用户信息可以得到用户id，使用random()函数连接，放置图像名字重复。此处不需要返回data,这里是直接把图像上传到avatars库中。下面好更新。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> fileName = <span class="hljs-string">`avatar-<span class="hljs-subst">$&#123;data.user.id&#125;</span>-<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random()&#125;</span>`</span>;<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">error</span>: storageError &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">storage</span><br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;avatars&#x27;</span>)<br>    .<span class="hljs-title function_">upload</span>(fileName, avatar);<br><br>  <span class="hljs-keyword">if</span> (storageError) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(storageError.<span class="hljs-property">message</span>);<br></code></pre></td></tr></table></figure><h5 id="4、在用户信息中更新avatar"><a href="#4、在用户信息中更新avatar" class="headerlink" title="4、在用户信息中更新avatar"></a>4、在用户信息中更新avatar</h5><p>得到上面的URL中，把相应信息做一个替换，就可以更新了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx">  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: updatedUser, <span class="hljs-attr">error</span>: error2 &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">updateUser</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">avatar</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;supabaseUrl&#125;</span>/storage/v1/object/public/avatars/<span class="hljs-subst">$&#123;fileName&#125;</span>`</span>,<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">if</span> (error2) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error2.<span class="hljs-property">message</span>);<br><br>  <span class="hljs-keyword">return</span> updatedUser;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）useUpdate"><a href="#（3）useUpdate" class="headerlink" title="（3）useUpdate"></a>（3）useUpdate</h4><p>onSuccess中，<code>queryClient.setQueryData([&#39;user&#39;], user);</code><strong>查询参数必须是字符串</strong>，否则就会报下图的错误。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useUpdateUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: updateUser, <span class="hljs-attr">isLoading</span>: isUpdating &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: updateCurrentUser,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">&#123;user&#125;</span>) =&gt;</span> &#123;<br>      toast.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;User account successfully updated&#x27;</span>);<br>      queryClient.<span class="hljs-title function_">setQueryData</span>([<span class="hljs-string">&#x27;user&#x27;</span>], user);<br>      queryClient.<span class="hljs-title function_">invalidateQueries</span>(&#123;<br>        <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;user&#x27;</span>],<br>      &#125;);<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> toast.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">message</span>),<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; isUpdating, updateUser &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240927105001683.png" alt="image-20240927105001683"></p><p>原因是：</p><ul><li><strong>数据结构</strong>：React Query 在内部维护查询缓存时，期望查询键（比如 <code>[&#39;user&#39;]</code>）是一个数组，因为数组可以包含多个层次的键名和参数。直接使用字符串 <code>&#39;user&#39;</code> 会导致它无法正确处理查询数据的结构。</li><li><strong>查询数据格式</strong>：当你使用 <code>queryClient.setQueryData</code> 设置数据时，它希望能在内部维护一个对象结构。如果你只传递了一个字符串，它无法创建或修改必要的内部属性。</li></ul><h3 id="？-涉及到的知识点详细分析（COPY）"><a href="#？-涉及到的知识点详细分析（COPY）" class="headerlink" title="？.涉及到的知识点详细分析（COPY）"></a>？.涉及到的知识点详细分析（COPY）</h3><h4 id="（1）session（会话）"><a href="#（1）session（会话）" class="headerlink" title="（1）session（会话）"></a>（1）session（会话）</h4><p><strong>会话</strong>是用户与系统之间的持续交互状态，它保存用户的身份和状态信息，以便在多次请求中维持用户的登录状态和操作权限。在你提供的代码中，<code>session</code> 是 Supabase 通过 JWT 来管理的会话，它记录了用户的登录状态，并用来确定用户是否有权限访问某些资源。</p><h5 id="1-会话的定义："><a href="#1-会话的定义：" class="headerlink" title="1. 会话的定义："></a>1. <strong>会话的定义</strong>：</h5><ul><li>会话是用户在一段时间内与应用程序或服务器之间进行的交互过程。它可以持续几秒钟到数小时，甚至更久，取决于会话的管理方式和应用程序的配置。</li><li>会话通常在用户登录或访问某个系统时开始，并在用户注销或超时后结束。</li></ul><h5 id="2-会话的作用："><a href="#2-会话的作用：" class="headerlink" title="2. 会话的作用："></a>2. <strong>会话的作用</strong>：</h5><ul><li><strong>维持用户的身份验证状态</strong>：会话允许系统在多次请求之间记住用户的身份。例如，用户登录后，会话用于保存登录状态，以免用户每次访问页面时都需要重新登录。</li><li><strong>存储用户的临时信息</strong>：会话可以用来在不同页面间共享用户的临时数据，例如购物车信息、用户首选项等。</li><li><strong>确保安全性</strong>：通过会话，系统可以跟踪和验证用户的操作，防止未经授权的访问。</li></ul><h5 id="3-会话是如何工作的："><a href="#3-会话是如何工作的：" class="headerlink" title="3. 会话是如何工作的："></a>3. <strong>会话是如何工作的</strong>：</h5><ul><li>当用户登录系统时，服务器会为该用户创建一个唯一的会话 ID，并将会话信息（如用户身份、权限等）与该会话 ID 关联。</li><li>会话 ID 通常通过 <strong>Cookies</strong>、<strong>Token</strong>（例如 JWT，JSON Web Token），或其他机制（如 URL 参数）存储在客户端。</li><li>在每次用户发送请求时，客户端会将会话 ID 传递给服务器，服务器根据这个 ID 查找与之关联的会话数据，确认用户的身份和权限。</li></ul><h5 id="4-会话的生命周期："><a href="#4-会话的生命周期：" class="headerlink" title="4. 会话的生命周期："></a>4. <strong>会话的生命周期</strong>：</h5><ul><li><strong>创建</strong>：会话通常在用户成功登录后由服务器创建，分配一个唯一的会话 ID。</li><li><strong>维持</strong>：在会话存续期间，用户的每次请求都使用同一会话 ID，服务器根据这个 ID 确认用户身份。</li><li><strong>销毁</strong>：会话可以通过用户主动注销、会话超时（例如长时间不活动）或服务器强制结束而销毁。当会话销毁后，用户需要重新登录以继续访问系统。</li></ul><h5 id="5-会话在前端和后端的角色："><a href="#5-会话在前端和后端的角色：" class="headerlink" title="5. 会话在前端和后端的角色："></a>5. <strong>会话在前端和后端的角色</strong>：</h5><ul><li><strong>前端</strong>：前端通过 Cookies 或 Local Storage 来存储会话 ID 或 Token。在每次向服务器发出请求时，前端会自动携带这些凭据来验证用户身份。</li><li><strong>后端</strong>：后端负责生成和管理会话，保存会话相关的用户状态、信息，并在每次请求时验证用户的会话是否有效。</li></ul><h5 id="6-会话与-Token（如-JWT）的关系："><a href="#6-会话与-Token（如-JWT）的关系：" class="headerlink" title="6. 会话与 Token（如 JWT）的关系："></a>6. <strong>会话与 Token（如 JWT）的关系</strong>：</h5><ul><li><strong>传统会话</strong>：会话 ID 由服务器生成，并且服务器需要存储会话信息。这种方式通常需要维护一个会话存储，适用于基于服务器的应用程序。</li><li><strong>Token（如 JWT）</strong>：JWT 是一种常用的无状态会话机制，其中用户的身份信息通过加密后保存在 Token 中。服务器不需要存储会话信息，而是通过验证和解码 Token 来识别用户。</li></ul><h5 id="7-Supabase-中的会话："><a href="#7-Supabase-中的会话：" class="headerlink" title="7. Supabase 中的会话："></a>7. <strong>Supabase 中的会话</strong>：</h5><p>在你使用的 <code>Supabase</code> 中，会话是通过 <strong>JWT（JSON Web Token）</strong> 进行管理的。当用户登录时，<code>Supabase</code> 会生成一个 JWT，并将其保存在客户端。每次请求都会带上这个 Token，以证明用户的身份。</p><ul><li><code>supabase.auth.getSession()</code>：该方法用于获取当前会话信息（包括 JWT）。如果用户当前登录了，这个会话就会返回有效的 JWT。</li><li><code>supabase.auth.getUser()</code>：在有有效会话时，使用该方法获取当前会话中的用户详细信息。</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程21-完善table的显示功能以及booking的状态更改</title>
    <link href="/2024/09/25/react%E8%AF%BE%E7%A8%8B21-%E5%AE%8C%E5%96%84table%E7%9A%84%E6%98%BE%E7%A4%BA%E5%8A%9F%E8%83%BD%E4%BB%A5%E5%8F%8Abooking%E7%9A%84%E7%8A%B6%E6%80%81%E6%9B%B4%E6%94%B9/"/>
    <url>/2024/09/25/react%E8%AF%BE%E7%A8%8B21-%E5%AE%8C%E5%96%84table%E7%9A%84%E6%98%BE%E7%A4%BA%E5%8A%9F%E8%83%BD%E4%BB%A5%E5%8F%8Abooking%E7%9A%84%E7%8A%B6%E6%80%81%E6%9B%B4%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<p>本节实现在cabin、booking界面的过滤、排序、分页的功能，并实现修改booking状态。</p><span id="more"></span><h3 id="一、在客户端实现过滤cabin（可重用，排序功能）"><a href="#一、在客户端实现过滤cabin（可重用，排序功能）" class="headerlink" title="一、在客户端实现过滤cabin（可重用，排序功能）"></a>一、在客户端实现过滤cabin（可重用，排序功能）</h3><p>添加一个按钮，实现查看全部&#x2F;有折扣的&#x2F;没有折扣的cabin。并且在选择后需要相应地改变url。</p><p>新建了CabinTableOperation组件，把它代替之前的文本，放在标题的右边。这个组件包含Filter组件，这就是我们要实现的过滤功能。</p><h4 id="（1）创建Filter"><a href="#（1）创建Filter" class="headerlink" title="（1）创建Filter"></a>（1）创建Filter</h4><p>🔥《10.28》修改bug：每次过滤后要把page设置为1，否则会访问不存在的页数的数据</p><hr><h5 id="1、Filter-jsx"><a href="#1、Filter-jsx" class="headerlink" title="1、Filter.jsx"></a>1、Filter.jsx</h5><p>在这个组件里，我们要用到useParams Hook。（刚好之前不太懂）</p><p>Filter接收两个prop，一个是filterField，一个是options数组。</p><ul><li>filterField负责被设置成URL中查询参数的键，并将其值设置为value，随后<code>setSearchParams</code>函数更新查询参数对象，使得URL反映出修改后的查询参数</li><li>options是一个对象数组，含有value和label两个属性。value就是传递给handleClick参数的键值，label是过滤器显示在屏幕上的文本。</li></ul><p>根据传递的options数组来map出FilterButton，使得代码更具有重用性。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Filter</span>(<span class="hljs-params">&#123; filterField, options &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<br>  <span class="hljs-keyword">const</span> currentFilter = searchParams.<span class="hljs-title function_">get</span>(filterField) || options.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>).<span class="hljs-property">value</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">value</span>) &#123;<br>    searchParams.<span class="hljs-title function_">set</span>(filterField, value);<br>    <span class="hljs-title function_">setSearchParams</span>(searchParams);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledFilter</span>&gt;</span></span><br><span class="language-xml">      &#123;options.map((option) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">FilterButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleClick(option.value)&#125;</span><br><span class="language-xml">          key=&#123;option.value&#125;</span><br><span class="language-xml">          active=&#123;option.value === currentFilter&#125;</span><br><span class="language-xml">          disabled=&#123;option.value === currentFilter&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;option.label&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">FilterButton</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledFilter</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、CabinTableOperations-jsx"><a href="#2、CabinTableOperations-jsx" class="headerlink" title="2、CabinTableOperations.jsx"></a>2、CabinTableOperations.jsx</h5><p>这个组件的目的就是给Filter一个造型上的作用，并且把相应的参数传递</p><h5 id="3、CabinTable-jsx"><a href="#3、CabinTable-jsx" class="headerlink" title="3、CabinTable.jsx"></a>3、CabinTable.jsx</h5><p>这个组件之前的作用就是呈现出cabin table的header和下面的列表。但是由于我们想要加入过滤的功能，所以显示的cabin列表就要随着过滤器而改变。而方法就是通过读取URL上的查询参数的值，来条件更新应该展示的cabins。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [searchParams] = <span class="hljs-title function_">useSearchParams</span>();<br><br><span class="hljs-keyword">const</span> filterValue = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;discount&#x27;</span>) || <span class="hljs-string">&#x27;all&#x27;</span>;<br><br><span class="hljs-keyword">let</span> filteredCabins;<br><span class="hljs-keyword">if</span> (filterValue === <span class="hljs-string">&#x27;all&#x27;</span>) filteredCabins = cabins;<br><span class="hljs-keyword">if</span> (filterValue === <span class="hljs-string">&#x27;no-discount&#x27;</span>)<br>    filteredCabins = cabins.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">cabin</span>) =&gt;</span> cabin.<span class="hljs-property">discount</span> === <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (filterValue === <span class="hljs-string">&#x27;with-discount&#x27;</span>)<br>    filteredCabins = cabins.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">cabin</span>) =&gt;</span> cabin.<span class="hljs-property">discount</span> &gt; <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这里的要点有一个是：当初次进入cabin界面的时候，我们想要展示所有的cabin（all），但是此时查询参数是空的，所以就可以通过||短路运算符，使得默认值是“all”。</p><h4 id="（2）实现排序功能"><a href="#（2）实现排序功能" class="headerlink" title="（2）实现排序功能"></a>（2）实现排序功能</h4><h5 id="1、CabinTableOperations传递给sortBy的参数"><a href="#1、CabinTableOperations传递给sortBy的参数" class="headerlink" title="1、CabinTableOperations传递给sortBy的参数"></a>1、CabinTableOperations传递给sortBy的参数</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">options=&#123;[<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;name-asc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by name (A-Z)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;name-desc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by name (Z-A)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;regularPrice-asc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by Price (low first)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;regularPrice-desc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by Price (high first)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;maxCapacity-asc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by capacity (low first)&#x27;</span> &#125;,<br>     &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;maxCapacity-desc&#x27;</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Sort by capacity (high first)&#x27;</span> &#125;,<br>]&#125;<br></code></pre></td></tr></table></figure><p>这就是排序选项中的value和label数组，注意value的前值需要和cabin的属性保持一致。asc表示正序，desc表示倒序。</p><h5 id="2、sortBy（可重用）"><a href="#2、sortBy（可重用）" class="headerlink" title="2、sortBy（可重用）"></a>2、sortBy（可重用）</h5><p>这个组件的功能和刚刚的Filter很像，也是把相应的value设置到查询参数中，使得CabinTable可以读取并获得相应的参数。这个不用传递键的名字，因为不管谁用，键的名字都是“sortBy”。在这个函数中得到键值并传递给Select组件，是为了传递正在被选中的value的参数。然后把onChange函数传递过去，使得改变被选元素时改变查询参数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SortBy</span>(<span class="hljs-params">&#123; options &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<br>  <span class="hljs-keyword">const</span> sortBy = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sortBy&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">e</span>) &#123;<br>    searchParams.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;sortBy&#x27;</span>, e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-title function_">setSearchParams</span>(searchParams);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;options&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;white&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;sortBy&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、Select-jsx"><a href="#3、Select-jsx" class="headerlink" title="3、Select.jsx"></a>3、Select.jsx</h5><p>⭐<code>&quot;...props&quot;</code>接收所有剩余prop。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Select</span>(<span class="hljs-params">&#123; options, value, onChange, ...props &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledSelect</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;onChange&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125;&gt;</span></span><br><span class="language-xml">      &#123;options.map((option) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;option.value&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;option.value&#125;</span>&gt;</span></span><br><span class="language-xml">          &#123;option.label&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledSelect</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、CabinTable"><a href="#4、CabinTable" class="headerlink" title="4、CabinTable"></a>4、CabinTable</h5><p>第一步当然是得到查询参数的值。</p><p>但是由于它是由“-”连接，且两部分值都需要，所以可以用split函数分开。</p><p>sort函数复习：a-b是正序，b-a是倒序。因此这里用了一个巧妙的小技巧，就是使用modifier符号，如果是asc就是1，否则为-1，乘以相应逻辑，实现不同排序功能。</p><p>这里name是string，它的排序需要换一种方式，否则无法实现。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> sortBy = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sortBy&#x27;</span>) || <span class="hljs-string">&#x27;name-asc&#x27;</span>;<br><span class="hljs-keyword">const</span> [field, direction] = sortBy.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br><br><span class="hljs-keyword">const</span> modifier = direction === <span class="hljs-string">&#x27;asc&#x27;</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SortedCabins</span> = filteredCabins.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a[field] === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>       <span class="hljs-keyword">return</span> a[field].<span class="hljs-title function_">localeCompare</span>(b[field]) * modifier;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">return</span> (a[field] - b[field]) * modifier;<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>（怎么现在每个视频都是20分钟了😨😨😨😨😨😨要疯了我）</p><blockquote><p>此处穿插一条喜报，我发现了一条Jonas都没发现的bug，就是regularPrice 和 discount的值为300 80的时候竟然会报错说discount应该小于regularPrice。百思不得其解后，感觉应该是它们俩被当作字符串比较了。但是我还是很疑惑，于是GPT这样说：</p><p>即使在表单输入中将 <code>type</code> 设置为 <code>number</code>，在 JavaScript 中获取到的值仍然是字符串。这是因为 HTML 表单元素在提交时会将所有输入的值以字符串的形式传递给 JavaScript。</p></blockquote><h3 id="二、建立Booking-Table"><a href="#二、建立Booking-Table" class="headerlink" title="二、建立Booking Table"></a>二、建立Booking Table</h3><p>✅fetching data的时候，和getCabins不同，因为bookings连接了cabins和guests，所以也可以获取这两个表单的信息：（括号内可以写进任何想要获取的信息，此处挑选需要的）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>   .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>   .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*,cabins(name),guests(fullName,email)&#x27;</span>);<br></code></pre></td></tr></table></figure><p>把data文件夹中的UpLoader组件包含在SideBar中就会出现这样一个可以上传样本信息到表单中，这样就不用手动创建。（记得修改Policy）（浅浅看了一下，这个函数逻辑算是比较简单）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925171213178.png" alt="image-20240925171213178" style="zoom: 67%;" /><h4 id="（1）实现过滤booking"><a href="#（1）实现过滤booking" class="headerlink" title="（1）实现过滤booking"></a>（1）实现过滤booking</h4><h5 id="1、实现"><a href="#1、实现" class="headerlink" title="1、实现"></a>1、实现</h5><p>换一种方式：不在客户端过滤，而是在服务端</p><p>operation组件已经写好，过滤是通过status的状态，而排序是根据预定的开始日期和总价格。</p><p>既然要在接收数据的时候就过滤，那么难道应该在apiBookings的函数中实现吗？不尽然。因为既然要过滤，我们就要从URL读取数据，要使用useParams，在异步fetching data阶段，是不允许使用这种钩子的。（ <strong>Hooks 只能在函数组件或自定义 Hooks 中被调用</strong>）</p><p>因此我们可以在useBookings组件，也就是调用getBookings函数的地方得到查询参数的键和值，再传递给getBookings函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> filterValue = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;status&#x27;</span>);<br><span class="hljs-keyword">const</span> filter =<br>  !filterValue || filterValue === <span class="hljs-string">&#x27;all&#x27;</span><br>    ? <span class="hljs-literal">null</span><br>    : &#123; <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-attr">value</span>: filterValue, <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;eq&#x27;</span> &#125;;<br><br><span class="hljs-keyword">const</span> &#123;<br>  isLoading,<br>  <span class="hljs-attr">data</span>: bookings,<br>  error,<br>&#125; = <span class="hljs-title function_">useQuery</span>(&#123;<br>  <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;bookings&#x27;</span>, filter],<br>  <span class="hljs-attr">queryFn</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getBookings</span>(&#123; filter &#125;),<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后getBookings函数中在接收数据的时候根据键和值进行过滤。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> query = supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*,cabins(name),guests(fullName,email)&#x27;</span>);<br><span class="hljs-keyword">if</span> (filter !== <span class="hljs-literal">null</span>)<br>    query = query[filter.<span class="hljs-property">method</span> || <span class="hljs-string">&#x27;eq&#x27;</span>](filter.<span class="hljs-property">field</span>, filter.<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><h5 id="2、要点"><a href="#2、要点" class="headerlink" title="2、要点"></a>2、要点</h5><p>传递的filter是一个object，除开键和值以外还有一个method，因为query是根据method、键、值来进行过滤处理的。eq是等于，还有gte是大于等于的意思。</p><p>这里queryKey变成了一个对象，除开关键字“bookings”以外还有filter。这是因为React Query并不知道会在改变过滤的内容时就重新获取数据，于是我们切换过滤选项，页面不变，但URL会相应改变，刷新后才会显示过滤后的项目。于是把filter填进queryKey，类似于依赖数组的作用，每当filter发生变化的时候，都会重新fetch一次data。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925190720412.png" alt="image-20240925190720412"></p><p>（React Query的作用）</p><h4 id="（2）实现Sort-Booking"><a href="#（2）实现Sort-Booking" class="headerlink" title="（2）实现Sort Booking"></a>（2）实现Sort Booking</h4><h5 id="1、useBookings"><a href="#1、useBookings" class="headerlink" title="1、useBookings"></a>1、useBookings</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> sortByRaw = searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;sortBy&#x27;</span>) || <span class="hljs-string">&#x27;startDate-desc&#x27;</span>;<br><span class="hljs-keyword">const</span> [field, direction] = sortByRaw.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">const</span> sortBy = &#123; field, direction &#125;;<br></code></pre></td></tr></table></figure><p>比较简单</p><h5 id="2、getBookings"><a href="#2、getBookings" class="headerlink" title="2、getBookings"></a>2、getBookings</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (sortBy)<br>    query = query.<span class="hljs-title function_">order</span>(sortBy.<span class="hljs-property">field</span>, &#123;<br>      <span class="hljs-attr">ascending</span>: sortBy.<span class="hljs-property">direction</span> === <span class="hljs-string">&#x27;asc&#x27;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>order函数是作用于特定库来排序的，包括supabase，因此很方便。第一个参数传递根据什么来排序，第二个参数传递是否是根据升序排列。asc就是ascending的简称。</p><h4 id="（3）实现Pagination"><a href="#（3）实现Pagination" class="headerlink" title="（3）实现Pagination"></a>（3）实现Pagination</h4><blockquote><p>需要先看下一大节：如何建立<code>Pagination</code></p></blockquote><h5 id="1、从api中获取count"><a href="#1、从api中获取count" class="headerlink" title="1、从api中获取count"></a>1、从api中获取count</h5><p>我们可以直接在<code>bookingtable</code>中得到<code>bookings.length</code>，但是有一个更好的办法，是在获取数据的时候加上count。，然后将它返回，这样就可以容易得到获得的结果数了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">.<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*,cabins(name),guests(fullName,email)&#x27;</span>, &#123; <span class="hljs-attr">count</span>: <span class="hljs-string">&#x27;exact&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure><h5 id="2、useBookings"><a href="#2、useBookings" class="headerlink" title="2、useBookings"></a>2、useBookings</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> page = !searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;page&#x27;</span>) ? <span class="hljs-number">1</span> : <span class="hljs-title class_">Number</span>(searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;page&#x27;</span>));<br></code></pre></td></tr></table></figure><p>跟分页组件中的逻辑一样，不多言。记得传递page并将其加入queryKey。</p><h5 id="3、getBookings"><a href="#3、getBookings" class="headerlink" title="3、getBookings"></a>3、getBookings</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (page) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">from</span> = (page - <span class="hljs-number">1</span>) * <span class="hljs-variable constant_">PAGE_SIZE</span>;<br>    <span class="hljs-keyword">const</span> to = <span class="hljs-keyword">from</span> + <span class="hljs-variable constant_">PAGE_SIZE</span> - <span class="hljs-number">1</span>;<br>    query = query.<span class="hljs-title function_">range</span>(<span class="hljs-keyword">from</span>, to);<br>&#125;<br></code></pre></td></tr></table></figure><p>range也是supabase的特殊函数，它会自动接收从from到to的数据。由于数组第一位是0位，所以from不必加1.这里的小技巧是to可以直接用from+PAGE_SIZE（记得-1），就算超过了count，也不会有错误，只会返回范围内的结果。</p><h3 id="三、建立可重用的Pagination（分页）组件"><a href="#三、建立可重用的Pagination（分页）组件" class="headerlink" title="三、建立可重用的Pagination（分页）组件"></a>三、建立可重用的Pagination（分页）组件</h3><p>组件接收count prop，表示结果数。</p><h4 id="（1）组件部分"><a href="#（1）组件部分" class="headerlink" title="（1）组件部分"></a>（1）组件部分</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925195151800.png" alt="image-20240925195151800"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">StyledPagination</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span></span><br><span class="language-xml">        Showing <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;(currentPage - 1) * PAGE_SIZE + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> to&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">           &#123;currentPage === pageCount ? count : currentPage * PAGE_SIZE&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        of <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> results</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Buttons</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PaginationButton</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;prevPage&#125;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;currentPage</span> === <span class="hljs-string">1&#125;</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">HiChevronLeft</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Previous<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">PaginationButton</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PaginationButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;nextPage&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;currentPage</span> === <span class="hljs-string">pageCount&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Next<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">HiChevronRight</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">PaginationButton</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Buttons</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">StyledPagination</span>&gt;<br></code></pre></td></tr></table></figure><p>如果在最后一页的话，to后的数字就应该是count，防止出错。向前翻页和向后翻页的按钮条件禁用，原理比较易懂。</p><h4 id="（2）变量和函数部分"><a href="#（2）变量和函数部分" class="headerlink" title="（2）变量和函数部分"></a>（2）变量和函数部分</h4><p>首先定义在函数体外一个常量：每页的结果数。<code>const PAGE_SIZE = 10;</code></p><p>✅根据上一大节的内容，我们知道这个常量还需要在<code>apiBookings</code>文件中使用，因此我们可以在utils文件夹中创建一个文件：<code>Constants.jsx</code>来存储这样的常量，每次使用只需导入即可。</p><p>然后是其他代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<br><br>  <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-variable constant_">PAGE_SIZE</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">const</span> currentPage = !searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;page&#x27;</span>)<br>    ? <span class="hljs-number">1</span><br>    : <span class="hljs-title class_">Number</span>(searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;page&#x27;</span>));<br><br>  <span class="hljs-keyword">const</span> pageCount = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(count / <span class="hljs-variable constant_">PAGE_SIZE</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">nextPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> next = currentPage === pageCount ? currentPage : currentPage + <span class="hljs-number">1</span>;<br><br>    searchParams.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;page&#x27;</span>, next);<br>    <span class="hljs-title function_">setSearchParams</span>(searchParams);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">prevPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> prev = currentPage === <span class="hljs-number">1</span> ? currentPage : currentPage - <span class="hljs-number">1</span>;<br><br>    searchParams.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;page&#x27;</span>, prev);<br>    <span class="hljs-title function_">setSearchParams</span>(searchParams);<br>&#125;<br></code></pre></td></tr></table></figure><p>仍旧是通过强大的Param来得到当前的页数。当然刚进入这个界面的时候不存在那个查询参数，于是把当前页数设置为1，否则可以根据查询参数得到。</p><p>如果总结果数还没一页的结果多，那么直接不返回这个组件。</p><p>pageCount保留最大的页数。</p><p>每次翻页的时候都相应地更新查询参数。</p><h4 id="（3）Prefetching"><a href="#（3）Prefetching" class="headerlink" title="（3）Prefetching"></a>（3）Prefetching</h4><p><code>Prefetching</code> 是一种优化技术，用于在用户需要数据之前提前获取和加载数据，以加速应用程序的响应速度。它常用于提高用户体验，减少等待时间，特别是在网页应用和数据驱动的应用中。</p><p>现在要做的很简单，就是我们再切换页面的时候，不管是前翻还是后翻，总会出现一个加载页面。但是我们想要数据可以丝滑地出现在界面上，于是，在useBookings组件中：</p><p>首先获得：<code>const queryClient = useQueryClient();</code></p><p>然后在useQuery查询数据之后，返回所有数据之前：（有点简单不多说了）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> pageCount = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(count / <span class="hljs-variable constant_">PAGE_SIZE</span>);<br><br>  <span class="hljs-keyword">if</span> (page &lt; pageCount)<br>    queryClient.<span class="hljs-title function_">prefetchQuery</span>(&#123;<br>      <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;bookings&#x27;</span>, filter, sortBy, page + <span class="hljs-number">1</span>],<br>      <span class="hljs-attr">queryFn</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getBookings</span>(&#123; filter, sortBy, <span class="hljs-attr">page</span>: page + <span class="hljs-number">1</span> &#125;),<br>    &#125;);<br><br>  <span class="hljs-keyword">if</span> (page &gt; <span class="hljs-number">1</span>)<br>    queryClient.<span class="hljs-title function_">prefetchQuery</span>(&#123;<br>      <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;bookings&#x27;</span>, filter, sortBy, page - <span class="hljs-number">1</span>],<br>      <span class="hljs-attr">queryFn</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">getBookings</span>(&#123; filter, sortBy, <span class="hljs-attr">page</span>: page - <span class="hljs-number">1</span> &#125;),<br>    &#125;);<br></code></pre></td></tr></table></figure><h3 id="四、建立Booking的Detail界面"><a href="#四、建立Booking的Detail界面" class="headerlink" title="四、建立Booking的Detail界面"></a>四、建立Booking的Detail界面</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925232925950.png" alt="image-20240925232925950"></p><p>首先在App.js的Router中加上这样一条：</p><p><code>&lt;Route path=&quot;bookings/:bookingId&quot; element=&#123;&lt;Booking /&gt;&#125; /&gt;</code></p><p>我们新创建了一个界面：Booking，里面直接返回<code>BookingDetial</code>组件，而这个组件需要接收相应的booking数据，这个数据是由我们新创建的钩子中获得。</p><h4 id="（1）useBooking"><a href="#（1）useBooking" class="headerlink" title="（1）useBooking"></a>（1）useBooking</h4><p>要点有二：</p><ul><li>通过URL获得bookingId，使用了<code>useParams</code>钩子可直接获得</li><li>把id传递给getBooking函数中</li></ul><h4 id="（2）getBooking"><a href="#（2）getBooking" class="headerlink" title="（2）getBooking"></a>（2）getBooking</h4><p>这个函数位于api中，作用是返回相应id的Booking的所有详细信息</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getBooking</span>(<span class="hljs-params">id</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;bookings&#x27;</span>)<br>    .<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*, cabins(*), guests(*)&#x27;</span>)<br>    .<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, id)    <span class="hljs-comment">//提取等于id的booking内容</span><br>    .<span class="hljs-title function_">single</span>();<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Booking not found&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）BookingRow"><a href="#（3）BookingRow" class="headerlink" title="（3）BookingRow"></a>（3）BookingRow</h4><p>用到了先前创建的Menu复合组件。点击按钮会导航界面到相应的detail界面，因此把相应的id放入URL中方便被提取。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Menus</span>.<span class="hljs-property">Menu</span>&gt;<br>     <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menus.Toggle</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;bookingId&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Toggle</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menus.List</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;bookingId&#125;</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HiEye</span> /&gt;</span>&#125;</span><br><span class="language-xml">              onClick=&#123;() =&gt; navigate(`/bookings/$&#123;bookingId&#125;`)&#125;</span><br><span class="language-xml">           &gt;</span><br><span class="language-xml">              See details</span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Button</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.List</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Menus</span>.<span class="hljs-property">Menu</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="（4）BookingDetail"><a href="#（4）BookingDetail" class="headerlink" title="（4）BookingDetail"></a>（4）BookingDetail</h4><p>以下几行有一个要点：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; booking, isLoading &#125; = <span class="hljs-title function_">useBooking</span>();<br><span class="hljs-keyword">const</span> moveBack = <span class="hljs-title function_">useMoveBack</span>();<br><br><span class="hljs-keyword">if</span> (isLoading) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Spinner</span> /&gt;</span></span>;<br><br><span class="hljs-keyword">const</span> &#123; status, <span class="hljs-attr">id</span>: bookingId &#125; = booking;<br></code></pre></td></tr></table></figure><p>第一<code>useMoveBack</code>钩子不能放在<code>if</code>语句之后；</p><p>第二读取<code>&#123; status, id: bookingId &#125;</code>必须放在判断是否在加载语句之后，否则我们会在数据还没有加载完成的时候就试图读取，就会报错。（还让人百思不得其解）</p><h3 id="五、实现Checkin、Checkout、Delete的功能"><a href="#五、实现Checkin、Checkout、Delete的功能" class="headerlink" title="五、实现Checkin、Checkout、Delete的功能"></a>五、实现Checkin、Checkout、Delete的功能</h3><h4 id="（1）实现基本checkin功能"><a href="#（1）实现基本checkin功能" class="headerlink" title="（1）实现基本checkin功能"></a>（1）实现基本checkin功能</h4><p>新建了checkin&#x2F;：bookingId的界面。</p><p>在BookingRow和BookingDetial中都加入了“checkin”按钮，可以导航到checkin界面。这个界面中还有一个确认checkin的按钮，作用是需要修改booking的statu变成checkin，是否付钱变为Paid。（只有状态为unconfirmed的booking才能被checkin）</p><p><code>useCheckin：</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useCheckin</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>();<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: checkin, <span class="hljs-attr">isLoading</span>: isCheckingIn &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">bookingId</span>) =&gt;</span><br>      <span class="hljs-title function_">updateBooking</span>(bookingId, &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;checked-in&#x27;</span>, <span class="hljs-attr">isPaid</span>: <span class="hljs-literal">true</span> &#125;),<br><br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      toast.<span class="hljs-title function_">success</span>(<span class="hljs-string">`Booking #<span class="hljs-subst">$&#123;data.id&#125;</span> successfully checked in`</span>);<br>      queryClient.<span class="hljs-title function_">invalidateQueries</span>(&#123;<br>        <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>      &#125;);<br>      <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125;,<br><br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">() =&gt;</span> toast.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;There was an error while checking in&#x27;</span>),<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> &#123; checkin, isCheckingIn &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过代码可以看到，onSuccess函数是可以接收到返回的data数据的。</p><p><code>queryClient.invalidateQueries(&#123;&#125;);</code>之前是放置queryId，现在放置active设置为true</p><p>⭐<code>queryClient.invalidateQueries()</code> 是 React Query 中用于使缓存失效并触发重新获取数据的方法。在这里使用了一个配置对象 <code>&#123; active: true &#125;</code>，这表示使所有当前 “active”（即正在被观察或使用）的查询失效。</p><h4 id="（2）实现添加早饭的功能"><a href="#（2）实现添加早饭的功能" class="headerlink" title="（2）实现添加早饭的功能"></a>（2）实现添加早饭的功能</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;!hasBreakfast &amp;&amp; (<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Checkbox</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;addBreakfast&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                setAddBreakfast((addBreakfast) =&gt; !addBreakfast);</span><br><span class="language-xml">                setConfirmPaid(false);</span><br><span class="language-xml">           &#125;&#125;</span><br><span class="language-xml">             id=&quot;Breakfast&quot;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">             Want to add breakfast for &#123;formatCurrency(optionalBreakfastPrice)&#125;?</span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">Checkbox</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br>)&#125;<br></code></pre></td></tr></table></figure><p>除此之外确定付钱的checkbox也要把总钱数修改一下。</p><p>这个时候，在checkin的时候就要分情况讨论是否有添加早餐，传递给checkin函数的就不仅仅是bookingId了，而且需要是一个对象，包含：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">checkin</span>(&#123;<br>    bookingId,<br>    <span class="hljs-attr">breakfast</span>: &#123;<br>        <span class="hljs-attr">hasBreakfast</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">extrasPrice</span>: optionalBreakfastPrice,<br>        <span class="hljs-attr">totalPrice</span>: totalPrice + optionalBreakfastPrice,<br>&#125;,<br></code></pre></td></tr></table></figure><p>useCheckin中也需要发生改变：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">&#123; bookingId, breakfast &#125;</span>) =&gt;</span><br>   <span class="hljs-title function_">updateBooking</span>(bookingId, &#123;<br>   <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;checked-in&#x27;</span>,<br>      <span class="hljs-attr">isPaid</span>: <span class="hljs-literal">true</span>,<br>      ...breakfast,<br>&#125;),<br></code></pre></td></tr></table></figure><h4 id="（3）checkout和delete"><a href="#（3）checkout和delete" class="headerlink" title="（3）checkout和delete"></a>（3）checkout和delete</h4><p>delete中只有一个地方，就是在detail界面想要删掉后就返回booking界面。所以在这里传递一个对象，包含想要发生的事情，这里传递的onSettled意思是不管成功或失败均执行。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Modal</span>.<span class="hljs-property">Window</span> name=<span class="hljs-string">&quot;delete&quot;</span>&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ConfirmDelete</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">resourceName</span>=<span class="hljs-string">&quot;booking&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isDeletingBooking&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">onConfirm</span>=<span class="hljs-string">&#123;()</span> =&gt;</span></span><br><span class="language-xml">           deleteBooking(bookingId, &#123; onSettled: () =&gt; navigate(-1) &#125;)</span><br><span class="language-xml">       &#125;</span><br><span class="language-xml">   /&gt;</span><br>&lt;/<span class="hljs-title class_">Modal</span>.<span class="hljs-property">Window</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程20-Advanced React Patterns</title>
    <link href="/2024/09/24/react%E8%AF%BE%E7%A8%8B20-Advanced-React-Patterns/"/>
    <url>/2024/09/24/react%E8%AF%BE%E7%A8%8B20-Advanced-React-Patterns/</url>
    
    <content type="html"><![CDATA[<p>本节课要点：1、render props patern   2、HOC   3、Compound Component Pattern   </p><p>4、React Portal  5、react portal   5、javascript事件传播顺序  6、检测在窗体外的点击行为</p><span id="more"></span><p>“这节课看起来很高级，是因为它确实很高级🤫“</p><p>Jonas每次教新的知识都激动的很，搞得我也很激动，笑鼠。。。我倒要看看这节课讲的内容到底多么高级😋😋😋。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240924153709168.png" alt="image-20240924153709168"></p><p>（什么玩意进我脑子里了？？）</p><p>（怎么现在vite 和 creatreact app都不会自动配置prettier了）</p><h3 id="一、render-props-patern"><a href="#一、render-props-patern" class="headerlink" title="一、render props patern"></a>一、render props patern</h3><h3 id="二、HOC"><a href="#二、HOC" class="headerlink" title="二、HOC"></a>二、HOC</h3><h3 id="三、Compound-Component-Pattern"><a href="#三、Compound-Component-Pattern" class="headerlink" title="三、Compound Component Pattern"></a>三、Compound Component Pattern</h3><p><code>Compound Component Pattern</code>（复合组件模式） 是一种 React 设计模式，它允许你创建一组组件，这些组件可以一起工作并共享状态。这种模式通过将状态管理和 UI 逻辑分离，使得组件的组合更加灵活和可重用。</p><h4 id="（1）主要特征"><a href="#（1）主要特征" class="headerlink" title="（1）主要特征"></a>（1）主要特征</h4><ol><li><strong>状态共享</strong>：父组件管理状态，并通过上下文（<code>Context</code>）提供给子组件，使它们可以访问和操作该状态。</li><li><strong>易于组合</strong>：子组件可以灵活地组合在一起，形成复杂的 UI，而不需要关心状态的管理。</li><li><strong>清晰的 API</strong>：使用者可以清楚地知道如何使用这些组件，组件之间的关系一目了然。</li></ol><h4 id="（2）使用示例"><a href="#（2）使用示例" class="headerlink" title="（2）使用示例"></a>（2）使用示例</h4><h5 id="1-App-js"><a href="#1-App-js" class="headerlink" title="1.App.js"></a>1.<code>App.js</code></h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Counter</span>&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter.Decrease</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;-&quot;</span> /&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter.Count</span> /&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter.Increase</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;+&quot;</span> /&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter.Label</span>&gt;</span>My super flexible counter<span class="hljs-tag">&lt;/<span class="hljs-name">Counter.Label</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Counter</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="2-Couter-js"><a href="#2-Couter-js" class="headerlink" title="2.Couter.js"></a>2.<code>Couter.js</code></h5><p>居然使用到了尘封的contextAPI，已经被我忘得一干二净了hhh</p><p>根据我的理解，步骤如下：</p><ol><li>创建一个context</li><li>创建一个父组件，用以提供状态或更多东西</li><li>创造子组件，子组件接收想要的状态</li><li>把子组件连接到父组件上</li></ol><p>然后子组件就可以灵活地组合，还可以灵活地修改😋。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createContext, useContext, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">//1.create a context</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CounterContext</span> = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-comment">//2.create parent component</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increase</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">decrease</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c - <span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CounterContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">count</span>, <span class="hljs-attr">increase</span>, <span class="hljs-attr">decrease</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">CounterContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">//3.create child component to help implementing the common task</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Count</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; count &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">CounterContext</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Label</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Increase</span>(<span class="hljs-params">&#123; icon &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; increase &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">CounterContext</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increase&#125;</span>&gt;</span>&#123;icon&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Decrease</span>(<span class="hljs-params">&#123; icon &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; decrease &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">CounterContext</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;decrease&#125;</span>&gt;</span>&#123;icon&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-comment">//4.add child components as proeprties to parent compontent</span><br><span class="hljs-title class_">Counter</span>.<span class="hljs-property">Count</span> = <span class="hljs-title class_">Count</span>;<br><span class="hljs-title class_">Counter</span>.<span class="hljs-property">Label</span> = <span class="hljs-title class_">Label</span>;<br><span class="hljs-title class_">Counter</span>.<span class="hljs-property">Increase</span> = <span class="hljs-title class_">Increase</span>;<br><span class="hljs-title class_">Counter</span>.<span class="hljs-property">Decrease</span> = <span class="hljs-title class_">Decrease</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Counter</span>;<br></code></pre></td></tr></table></figure><p>（”恭喜你成为少数几个知道这种模式的React开发人员之一“ ，hhh，Jonas你是懂得捧杀的）</p><h3 id="三、使用React-Portal创建一个Modal-Window"><a href="#三、使用React-Portal创建一个Modal-Window" class="headerlink" title="三、使用React Portal创建一个Modal Window"></a>三、使用React Portal创建一个Modal Window</h3><h4 id="（1）自然创建"><a href="#（1）自然创建" class="headerlink" title="（1）自然创建"></a>（1）自然创建</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240924193002270.png" alt="image-20240924193002270" style="zoom: 33%;" /><p>这样的表单是不是好看多了？</p><h5 id="1、Modal组件"><a href="#1、Modal组件" class="headerlink" title="1、Modal组件"></a>1、Modal组件</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Modal</span>(<span class="hljs-params">&#123; children, onClose &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Overlay</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClose&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HiXMark</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>   &#123;/*这里是一个删除按钮，接受的函数就是隐藏表单的函数 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   &#123;/*这里接收children，显示相应表单*/&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Overlay</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、AddCabin组件"><a href="#2、AddCabin组件" class="headerlink" title="2、AddCabin组件"></a>2、AddCabin组件</h5><p>这里我们把之前在cabin.jsx（page页）的状态、按钮和表单组件都拿过来了；</p><p>把<code>onCloseModal</code>传递给表单组件是为了点击cancel和创建完cabin的时候都能关闭表单。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AddCabin</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOpenModal, setIsOpenModal] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpenModal((show) =&gt; !show)&#125;&gt;</span><br><span class="language-xml">        Add new cabin</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;isOpenModal &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Modal</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpenModal(false)&#125;&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">CreateCabinForm</span> <span class="hljs-attr">onCloseModal</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpenModal(false)&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、createCabinForm中所做的修改"><a href="#3、createCabinForm中所做的修改" class="headerlink" title="3、createCabinForm中所做的修改"></a>3、<code>createCabinForm</code>中所做的修改</h5><p>在创建cabin的onSubmit的函数中的onSuccess回调函数中加入<code>onCloseModal?.()</code>，使得创建cabin成功后关闭表单。同时cacel按钮的onClick函数中也加入。（？.很重要）</p><p>Form组件接收type道具，因为这个表单也可能在其他地方被重用。所以如果含有onCloseModal就说明这是modal组件，type设置为modal，否则为regular。以显示不同的style：<code>type=&#123;onCloseModal ? &#39;modal&#39; : &#39;regular&#39;</code></p><h4 id="（2）使用React-Portal"><a href="#（2）使用React-Portal" class="headerlink" title="（2）使用React Portal"></a>（2）使用React Portal</h4><p><code>React Portal</code> 是 React 中的一种机制，允许你将子组件渲染到父组件以外的 DOM 节点中。使用 Portal，你可以在应用的某个部分以外的地方呈现子组件，而不需要更改组件的层次结构。</p><h5 id="1、主要特性"><a href="#1、主要特性" class="headerlink" title="1、主要特性"></a>1、主要特性</h5><ol><li><strong>DOM 节点分离</strong>：Portal 允许你在 React 组件树之外渲染子组件，这对于模态框、弹出菜单、工具提示等 UI 组件非常有用。</li><li><strong>保持父组件的上下文</strong>：即使子组件被渲染到不同的 DOM 节点中，它仍然可以访问父组件的上下文。</li><li><strong>不改变 React 组件层级</strong>：Portal 的使用不会影响组件的层次结构，这使得组织和维护代码变得更加清晰。</li></ol><h5 id="2、重要特点"><a href="#2、重要特点" class="headerlink" title="2、重要特点"></a>2、重要特点</h5><p>通过使用 Portal 渲染的组件可以避免在其父容器或其他包含它的元素有 <code>overflow: hidden</code> 或 <code>overflow: scroll</code> 等样式时被裁剪或遮挡。</p><p>当一个组件（比如模态框、下拉菜单、工具提示等）被渲染在它的父组件内部，如果父组件有以下 CSS 属性：<code>overflow: hidden</code> 或 <code>overflow: scroll</code>，那么在父组件的边界之外的部分内容会被裁剪掉或滚动隐藏掉。这意味着如果你的模态框或菜单超出父组件的边界，它就会被遮挡，用户无法看到全部内容。</p><p>通过 <strong>React Portal</strong>，你可以将组件渲染到根节点或其他独立的 DOM 节点中，而不是当前的父组件内部。这样，它的渲染位置就不再受到父组件的 <code>overflow</code> 样式的限制，而是可以自由地显示在页面的任何地方。</p><h5 id="3、如何使用"><a href="#3、如何使用" class="headerlink" title="3、如何使用"></a>3、如何使用</h5><p>可以看到相较上面的版本，一共只做了两层修改：</p><p>return 后面添加<code>creatPortal</code>；返回值结尾加上<code>document.</code>{想要放置的位置}</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Modal</span>(<span class="hljs-params">&#123; children, onClose &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> createPortal (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Overlay</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClose&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HiXMark</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>   &#123;/*这里是一个删除按钮，接受的函数就是隐藏表单的函数 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   &#123;/*这里接收children，显示相应表单*/&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Overlay</span>&gt;</span></span>,<br>     <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）使用复合组件模式来创建Modal"><a href="#（3）使用复合组件模式来创建Modal" class="headerlink" title="（3）使用复合组件模式来创建Modal"></a>（3）使用复合组件模式来创建Modal</h4><p>我咋听不懂呢：这个modal是根据isOpenModal状态变量来控制是否打开的，但是这个modal本身应该知道它当前是否打开。</p><h5 id="1、为什么要使用复合组件模式"><a href="#1、为什么要使用复合组件模式" class="headerlink" title="1、为什么要使用复合组件模式"></a>1、为什么要使用复合组件模式</h5><p>😶当前版本的问题（简单状态控制）</p><ol><li><strong>状态和逻辑紧耦合</strong>：<code>isOpenModal</code> 状态存在于 <code>AddCabin</code> 组件中，Modal 组件不知道自己是否打开，所有状态都必须通过父组件控制。这种方式对于简单场景是可以的，但如果有更多的交互需求，代码会变得复杂。</li><li><strong>难以扩展</strong>：如果你需要为 <code>Modal</code> 添加更多功能，比如额外的子组件或控制多个 modal，这种结构不够灵活。</li></ol><p>😲为什么使用复合组件模式？</p><p>复合组件模式允许你把不同部分的逻辑和 UI 分离开，使得状态控制和 UI 展示更加解耦。可以将 <code>Modal</code> 组件内部的状态交给 <code>Modal</code> 自己管理，而不是完全依赖父组件。这样可以带来以下好处：</p><ol><li><strong>增强灵活性</strong>：通过复合组件模式，<code>Modal</code> 可以有更多子组件（比如标题、内容、关闭按钮等），这些子组件可以根据需要自由组合，避免将所有逻辑和样式硬编码在 <code>AddCabin</code> 中。</li><li><strong>状态管理解耦</strong>：Modal 内部可以自己知道它的状态（是否打开），从而让父组件不用过度管理 Modal 的内部逻辑。你只需要管理是否调用 <code>Modal</code>，不必关心 Modal 内部是如何关闭或显示的。</li></ol><h5 id="2、使用复合组件模式来创建Modal"><a href="#2、使用复合组件模式来创建Modal" class="headerlink" title="2、使用复合组件模式来创建Modal"></a>2、使用复合组件模式来创建Modal</h5><p>首先看一下AddCabin.js现在变成了什么样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AddCabin</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Open</span> <span class="hljs-attr">opens</span>=<span class="hljs-string">&quot;cabin-form&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Add new cabin<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Open</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Window</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cabin-form&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CreateCabinForm</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Window</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Open</span> <span class="hljs-attr">opens</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Show table<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Open</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Window</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CabinTable</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Window</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到它非常的简洁，只有子组件和传递给子组件的children组件，以及传递给子组件的必要prop。经过分析可以得出一共有两个子组件：Open和Window，Open传递要打开的window名字，并且会传递一个按钮，至于这个按钮如何实现onClick函数，需要看Mortal组件；Window传递本窗体的名字，并包裹需要显示的表单。两个window被条件渲染。</p><p>下面是Mortal.jsx的主要内容，实现复合组件的步骤与上面相同。（记得父组件要返回Provider来提供给子组件必要信息呀，Jonas美美忘记，当然我也没记住） 按钮的按动导致openName被设置为各个传递的名字，并在window函数中与接收到的窗体名字验证，如果相同就渲染，否则不渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ModalContext</span> = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Modal</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [openName, setOpenName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">close</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setOpenName</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> open = setOpenName;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ModalContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">openName</span>, <span class="hljs-attr">close</span>, <span class="hljs-attr">open</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ModalContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Open</span>(<span class="hljs-params">&#123; children, opens: opensWindowName &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; open &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ModalContext</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">cloneElement</span>(children, &#123; <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">open</span>(opensWindowName) &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Window</span>(<span class="hljs-params">&#123; children, name &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; openName, close &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ModalContext</span>);<br>  <span class="hljs-keyword">if</span> (name !== openName) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createPortal</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Overlay</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;close&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HiXMark</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;cloneElement(children, &#123; onCloseModal: close &#125;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledModal</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Overlay</span>&gt;</span></span>,<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>  );<br>&#125;<br><br><span class="hljs-title class_">Modal</span>.<span class="hljs-property">Open</span> = <span class="hljs-title class_">Open</span>;<br><span class="hljs-title class_">Modal</span>.<span class="hljs-property">Window</span> = <span class="hljs-title class_">Window</span>;<br></code></pre></td></tr></table></figure><p>💡接下来是要点！！！！既然AddCabin组件中没法传递关闭还是打开窗体的信息了，那按钮按动的函数如何绑定，又如何把onClseModal传递给createCabinForm组件呢？答案在下面⬇️</p><h4 id="（4）cloneElement"><a href="#（4）cloneElement" class="headerlink" title="（4）cloneElement"></a>（4）cloneElement</h4><p>在 React 中，<code>cloneElement</code> 是一个非常有用的工具，特别是在复合组件模式中，它允许你<strong>克隆一个 React 元素并向其添加新的属性或修改现有的属性</strong>，而不改变原始元素的外观和行为。它可以帮助你在不直接修改子组件的情况下，灵活地传递额外的 props 或绑定新的事件。</p><h5 id="1、要点"><a href="#1、要点" class="headerlink" title="1、要点"></a>1、要点</h5><ul><li><strong>克隆元素</strong>：它会基于一个现有的 React 元素（子组件）创建一个新的元素。这个克隆后的元素可以接收新的 <code>props</code> 或覆盖现有的 <code>props</code>。</li><li><strong>保持原始结构</strong>：克隆的元素仍然保持与原始元素相同的子组件层次结构和渲染方式，不会影响现有的 JSX 结构。</li><li>**传递额外的 <code>props</code>**：你可以在克隆的过程中向元素传递新的 <code>props</code>，比如传递 <code>onClick</code> 事件处理函数或状态信息。这是增强组件的一个强大工具，特别是在复合组件模式中。</li></ul><h5 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">cloneElement</span>(<br>  element,  <span class="hljs-comment">// 需要克隆的 React 元素</span><br>  [props],  <span class="hljs-comment">// 可选：要添加或覆盖的 props</span><br>  [...children]  <span class="hljs-comment">// 可选：可以指定新的子组件</span><br>)<br></code></pre></td></tr></table></figure><h5 id="3、优点"><a href="#3、优点" class="headerlink" title="3、优点"></a>3、优点</h5><ul><li><strong>避免直接修改子组件</strong>：你不需要在子组件的定义中明确处理某些 props，而是可以动态地通过 <code>cloneElement</code> 传递额外的属性。这种方式可以让组件更加灵活、可复用。</li><li><strong>保持组件封装性</strong>：父组件可以在不改变子组件内部实现的情况下，注入新的行为，比如添加 <code>onClick</code> 或其他事件处理器。</li><li><strong>动态扩展组件</strong>：使用 <code>cloneElement</code>，你可以根据上下文或者状态动态修改组件的行为，而不需要重新定义或重新渲染整个组件。</li></ul><h4 id="（5）检测在窗体外的点击行为"><a href="#（5）检测在窗体外的点击行为" class="headerlink" title="（5）检测在窗体外的点击行为"></a>（5）检测在窗体外的点击行为</h4><p>我们想要实现一个功能：点击form外的区域会关闭窗体，再把功能抽象成了一个custom hook。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useHandleClickOutside</span>(<span class="hljs-params">handler, listenCapturing = <span class="hljs-literal">true</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>();<br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ref.<span class="hljs-property">current</span> &amp;&amp; !ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">contains</span>(e.<span class="hljs-property">target</span>)) &#123;<br>          <span class="hljs-title function_">handler</span>();<br>        &#125;<br>      &#125;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handleClick, listenCapturing);<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handleClick, listenCapturing);<br>    &#125;,<br>    [handler, listenCapturing]<br>  );<br><br>  <span class="hljs-keyword">return</span> ref;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>Modal.js</code>中的<code>window</code>函数中使用该<code>hook</code>，并把ref绑定到组件树上：<StyledModal ref={ref}></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useHandleClickOutside</span>(close);<br></code></pre></td></tr></table></figure><p><strong>要点解析：</strong></p><h5 id="1、listenCapturing的必要性"><a href="#1、listenCapturing的必要性" class="headerlink" title="1、listenCapturing的必要性"></a>1、<code>listenCapturing</code>的必要性</h5><p>转移至本节最后一个模块讲解。</p><h5 id="2、if-ref-current-ref-current-contains-e-target"><a href="#2、if-ref-current-ref-current-contains-e-target" class="headerlink" title="2、if (ref.current &amp;&amp; !ref.current.contains(e.target))"></a>2、<code>if (ref.current &amp;&amp; !ref.current.contains(e.target))</code></h5><ul><li><code>ref.current</code> 是通过 React 的 <code>useRef</code> hook 获取到的 DOM 元素的引用。通常我们会使用 <code>useRef</code> 来保存一个对 DOM 元素的引用，从而能够在 React 的函数组件中访问它。<code>ref.current</code> 指向你想检测是否被点击的元素（比如模态框、弹窗等）。在这个例子中，<code>ref</code> 会保存模态框的引用。</li></ul><p>如果 <code>ref.current</code> 存在，说明元素已经渲染到页面上，并且 <code>ref</code> 正常指向该 DOM 元素。</p><ul><li><code>e.target</code> 是触发点击事件的元素，即用户点击的具体 DOM 元素。</li><li><code>ref.current.contains(e.target)</code> 是用来检查这个 <code>e.target</code> 是否在 <code>ref.current</code> 所引用的元素内部。</li></ul><h3 id="四、使用复合组件模式创建可重用的table"><a href="#四、使用复合组件模式创建可重用的table" class="headerlink" title="四、使用复合组件模式创建可重用的table"></a>四、使用复合组件模式创建可重用的table</h3><h4 id="（1）创建可复合使用的Table组件"><a href="#（1）创建可复合使用的Table组件" class="headerlink" title="（1）创建可复合使用的Table组件"></a>（1）创建可复合使用的Table组件</h4><p>重点：1、传递columns参数  2、Body接受的prop是data和render</p><p>子组件接受columns道具是为了提供给它们的条件渲染风格。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">TableContext</span> = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Table</span>(<span class="hljs-params">&#123; columns, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TableContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">columns</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledTable</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">StyledTable</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TableContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; columns &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TableContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledHeader</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">columns</span>=<span class="hljs-string">&#123;columns&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledHeader</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Row</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; columns &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">TableContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledRow</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">columns</span>=<span class="hljs-string">&#123;columns&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledRow</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Body</span>(<span class="hljs-params">&#123; data, render &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!data.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Empty</span>&gt;</span> No data to show at the moment<span class="hljs-tag">&lt;/<span class="hljs-name">Empty</span>&gt;</span></span>;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledBody</span>&gt;</span>&#123;data.map(render)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">StyledBody</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-title class_">Table</span>.<span class="hljs-property">Header</span> = <span class="hljs-title class_">Header</span>;<br><span class="hljs-title class_">Table</span>.<span class="hljs-property">Row</span> = <span class="hljs-title class_">Row</span>;<br><span class="hljs-title class_">Table</span>.<span class="hljs-property">Body</span> = <span class="hljs-title class_">Body</span>;<br><span class="hljs-title class_">Table</span>.<span class="hljs-property">Footer</span> = <span class="hljs-title class_">Footer</span>;<br></code></pre></td></tr></table></figure><h4 id="（2）修改Table组件"><a href="#（2）修改Table组件" class="headerlink" title="（2）修改Table组件"></a>（2）修改Table组件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Table</span> columns=<span class="hljs-string">&quot;0.6fr 1.8fr 2.2fr 1fr 1fr 1fr&quot;</span>&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Table.Header</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Cabin<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Capacity<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Price<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Discount<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Table.Header</span>&gt;</span></span><br><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Table.Body</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;cabins&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;(cabin)</span> =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">CabinRow</span> <span class="hljs-attr">cabin</span>=<span class="hljs-string">&#123;cabin&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;cabin.id&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      /&gt;</span><br>&lt;/<span class="hljs-title class_">Table</span>&gt;<br></code></pre></td></tr></table></figure><p>利用到了render属性。</p><h3 id="五、使用复合组件模式创建可重用的文字菜单"><a href="#五、使用复合组件模式创建可重用的文字菜单" class="headerlink" title="五、使用复合组件模式创建可重用的文字菜单"></a>五、使用复合组件模式创建可重用的文字菜单</h3><p>真的有那么一丢丢复杂。。。不知道从何下手来记录了我都</p><p>首先让我们看看这个Menu长什么样：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240925105934378.png" alt="image-20240925105934378" style="zoom: 67%;" /><h4 id="（1）Menu-jsx"><a href="#（1）Menu-jsx" class="headerlink" title="（1）Menu.jsx"></a>（1）Menu.jsx</h4><h5 id="1、父组件Menus"><a href="#1、父组件Menus" class="headerlink" title="1、父组件Menus"></a>1、父组件Menus</h5><p>两个状态变量：openId：控制打开菜单的cabin，position：控制菜单的位置，List的style的控制变量，因此需要通过计算得出，并传递给StyledList</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Menus</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [openId, setOpenId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">close</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setOpenId</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> open = setOpenId;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuContext.Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">openId</span>, <span class="hljs-attr">close</span>, <span class="hljs-attr">open</span>, <span class="hljs-attr">position</span>, <span class="hljs-attr">setPosition</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">MenuContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、子组件Toggle-jsx（开关-切换）"><a href="#2、子组件Toggle-jsx（开关-切换）" class="headerlink" title="2、子组件Toggle.jsx（开关&#x2F;切换）"></a>2、子组件Toggle.jsx（开关&#x2F;切换）</h5><p>rect常量是得到了Toggle的位置，然后再根据它的值来设置position</p><p>这里的逻辑运算的意思是：如果点击了这个开关，此时如果没有openId（也就是没有List被打开）或者当前的openId与此cabin的id不同（另外一个List现在正打开），就把openId设置为此cabin的id；否则的话，也就是说openId&#x3D;&#x3D;&#x3D;id（当前打开的List就是这个cabin的），就把List关上（将openId设置为空）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toggle</span>(<span class="hljs-params">&#123; id &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; openId, close, open, setPosition &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MenuContext</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> rect = e.<span class="hljs-property">target</span>.<span class="hljs-title function_">closest</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">getBoundingClientRect</span>();<br>    <span class="hljs-title function_">setPosition</span>(&#123;<br>      <span class="hljs-attr">x</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> - rect.<span class="hljs-property">width</span> - rect.<span class="hljs-property">x</span>,<br>      <span class="hljs-attr">y</span>: rect.<span class="hljs-property">y</span> + rect.<span class="hljs-property">height</span> + <span class="hljs-number">8</span>,<br>    &#125;);<br><br>    openId === <span class="hljs-string">&#x27;&#x27;</span> || openId !== id ? <span class="hljs-title function_">open</span>(id) : <span class="hljs-title function_">close</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledToggle</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HiEllipsisVertical</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledToggle</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、子组件List"><a href="#3、子组件List" class="headerlink" title="3、子组件List"></a>3、子组件List</h5><p>接收position并传递给styledList组件，并且使用<code>useHandleClickOutside</code>  hook，来使得它在检测到List外的点击后关闭。并且使用Portal，将组件呈现在body层次。</p><p>接收cabin的id，如果和openId不相同则不进行渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; id, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; openId, position, close &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MenuContext</span>);<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useHandleClickOutside</span>(close);<br><br>  <span class="hljs-keyword">if</span> (openId !== id) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createPortal</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledList</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&#123;position&#125;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledList</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、子组件Button"><a href="#4、子组件Button" class="headerlink" title="4、子组件Button"></a>4、子组件Button</h5><p>接收CabinRow传递的icon和onClick函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; children, icon, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; close &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">MenuContext</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    onClick?.();<br>    <span class="hljs-title function_">close</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StyledButton</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;icon&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">StyledButton</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5、子组件Menu"><a href="#5、子组件Menu" class="headerlink" title="5、子组件Menu"></a>5、子组件Menu</h5><p>直接等于styled component，不返回实际内容。</p><h4 id="（2）很不一样的CabinRow-jsx"><a href="#（2）很不一样的CabinRow-jsx" class="headerlink" title="（2）很不一样的CabinRow.jsx"></a>（2）很不一样的CabinRow.jsx</h4><p>因为我们的按钮打开的窗口也需要有Modal的形式，因此我们将两个复合组件模式组合在了一起。</p><p>仔细看会发现，Modal是在最外层，使得整个Menu都是其子组件，然后再用Menus.Menu包裹，首先要渲染的是Toggle（固定在屏幕上），然后是Menus.List包裹住相应的按钮，其中编辑和创建的按钮被Modal.Open包裹住，使得按钮按动后打开的窗户是Mortal形式的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"> &lt;<span class="hljs-title class_">Modal</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menus.Menu</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Toggle</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;cabinId&#125;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">Menus.List</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;cabinId&#125;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HiSquare2Stack</span> /&gt;</span>&#125; onClick=&#123;handleDuplicate&#125;&gt;</span><br><span class="language-xml">                  Duplicate</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Open</span> <span class="hljs-attr">opens</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HiPencil</span> /&gt;</span>&#125;&gt;Edit<span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Button</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Open</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Open</span> <span class="hljs-attr">opens</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">Menus.Button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">HiTrash</span> /&gt;</span>&#125;&gt;Delete<span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Button</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Open</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.List</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Window</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">CreateCabinForm</span> <span class="hljs-attr">cabinToEdit</span>=<span class="hljs-string">&#123;cabin&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Window</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Modal.Window</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">ConfirmDelete</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  <span class="hljs-attr">resourceName</span>=<span class="hljs-string">&quot;cabins&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isDeleting&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  <span class="hljs-attr">onConfirm</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> deleteCabin(&#123; id: cabinId &#125;)&#125;</span><br><span class="language-xml">              /&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Modal.Window</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">Menus.Menu</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Modal</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="？、事件触发阶段"><a href="#？、事件触发阶段" class="headerlink" title="？、事件触发阶段"></a>？、事件触发阶段</h3><p>在<code>useHandleClickOutside</code> Hook 中，<code>listenCapturing</code> 参数控制事件监听的方式（捕获阶段或冒泡阶段）。默认情况下，将 <code>listenCapturing</code> 设置为 <code>true</code>，表示事件是在捕获阶段被处理的。如果不传递 <code>true</code>，则会使用冒泡阶段监听事件。</p><h4 id="（1）详细原因"><a href="#（1）详细原因" class="headerlink" title="（1）详细原因"></a>（1）详细原因</h4><h5 id="1-事件传播机制："><a href="#1-事件传播机制：" class="headerlink" title="1. 事件传播机制："></a>1. 事件传播机制：</h5><ul><li><strong>捕获阶段（Capturing Phase）</strong>：事件从顶层元素（如 <code>document</code>）开始，一路向下传播到事件目标元素（你点击的元素）。</li><li><strong>目标阶段（Target Phase）</strong>：事件在目标元素上触发。</li><li><strong>冒泡阶段（Bubbling Phase）</strong>：事件从目标元素开始，向上传播回顶层元素。</li></ul><h5 id="2-代码中的事件监听器："><a href="#2-代码中的事件监听器：" class="headerlink" title="2. 代码中的事件监听器："></a>2. 代码中的事件监听器：</h5><p>在 <code>useHandleClickOutside</code> 中，当 <code>listenCapturing</code> 为 <code>false</code>（默认值）时，<code>document.addEventListener(&#39;click&#39;, handleClick)</code> 会在<strong>冒泡阶段</strong>添加事件监听器。</p><h5 id="3-事件触发的顺序："><a href="#3-事件触发的顺序：" class="headerlink" title="3. 事件触发的顺序："></a>3. 事件触发的顺序：</h5><p>当你点击打开按钮时：</p><ol><li><strong>目标元素的事件处理器</strong>：首先触发按钮的 <code>onClick</code> 事件处理器，调用 <code>open</code> 函数，打开模态框。</li><li>**事件冒泡到 <code>document</code>**：接下来，事件冒泡到 <code>document</code>，触发在 <code>document</code> 上注册的冒泡阶段的事件监听器，即你的 <code>handleClick</code> 函数。</li></ol><p>在 <code>handleClick</code> 中发生了什么：</p><ul><li>此时，模态框已经被打开，<code>ref.current</code> 已经被赋值为模态框的 DOM 元素。</li><li><code>handleClick</code>检查 <code>if (ref.current &amp;&amp; !ref.current.contains(e.target))</code><ul><li><code>e.target</code> 是点击的打开按钮，它不在模态框内部。</li><li>因此条件为 <code>true</code>，<code>handleClick</code> 调用 <code>close</code> 函数，关闭模态框。</li></ul></li></ul><h5 id="4-结果："><a href="#4-结果：" class="headerlink" title="4. 结果："></a>4. 结果：</h5><ul><li>模态框被打开后，立即又被关闭。</li><li>用户体验上表现为模态框无法被打开。</li></ul><h4 id="（2）为什么设置-listenCapturing-为-true-可以解决问题："><a href="#（2）为什么设置-listenCapturing-为-true-可以解决问题：" class="headerlink" title="（2）为什么设置 listenCapturing 为 true 可以解决问题："></a>（2）为什么设置 <code>listenCapturing</code> 为 <code>true</code> 可以解决问题：</h4><p>当将 <code>listenCapturing</code> 设置为 <code>true</code>，事件监听器会在<strong>捕获阶段</strong>触发。事件传播顺序变为：</p><ol><li><strong>事件捕获阶段</strong>：<ul><li>事件从 <code>document</code> 开始，向下传播。</li><li>在 <code>document</code> 上的捕获阶段，触发 <code>handleClick</code>。</li><li><strong>此时模态框还未被打开</strong>（因为按钮的 <code>onClick</code> 还未执行）。</li><li><code>ref.current</code> 尚未定义，<code>ref.current &amp;&amp; !ref.current.contains(e.target)</code> 为 <code>false</code>，<code>handleClick</code> 不执行任何操作。</li></ul></li><li><strong>目标元素的事件处理器</strong>：<ul><li>事件到达目标元素（打开按钮）。</li><li>触发按钮的 <code>onClick</code>，调用 <code>open</code>，模态框被打开。</li></ul></li><li><strong>事件冒泡阶段</strong>：<ul><li>事件从目标元素向上冒泡，但因为你的事件监听器只在捕获阶段，不会再次触发 <code>handleClick</code>。</li></ul></li></ol><p><strong>结果：</strong></p><ul><li>模态框成功打开。</li><li><code>handleClick</code> 不会在模态框打开后立即调用 <code>close</code>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程19-ReactQuery</title>
    <link href="/2024/09/22/react%E8%AF%BE%E7%A8%8B19-ReactQuery/"/>
    <url>/2024/09/22/react%E8%AF%BE%E7%A8%8B19-ReactQuery/</url>
    
    <content type="html"><![CDATA[<p>本节课学习能够远程管理supabase的React Query🤓</p><span id="more"></span><p>（Jonas终于能教他最爱的库了，他很激动🙉）</p><h3 id="一·、什么是React-Query"><a href="#一·、什么是React-Query" class="headerlink" title="一·、什么是React Query"></a>一·、什么是React Query</h3><h4 id="（1）特点"><a href="#（1）特点" class="headerlink" title="（1）特点"></a>（1）特点</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922103715683.png" alt="image-20240922103715683" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922103801784.png" alt="image-20240922103801784" style="zoom: 33%;" /></p><p><strong>✅数据获取</strong>：提供简洁的 API 来发起异步请求，支持 REST API、GraphQL 等数据源。</p><p>✅<strong>缓存管理</strong>：自动缓存数据，避免不必要的网络请求，提高性能。</p><p>✅<strong>实时更新</strong>：支持实时数据更新，通过轮询、WebSocket 或后台刷新机制来保持数据的新鲜度。</p><p><strong>✅自动重试</strong>：当请求失败时，可以自动重试请求，增强应用的稳定性。</p><p><strong>✅查询和变更</strong>：使用 <code>useQuery</code> 来获取数据，使用 <code>useMutation</code> 来处理数据的增删改操作。</p><p>✅<strong>状态管理</strong>：提供丰富的状态管理，允许开发者轻松处理加载、错误和成功状态。</p><p><strong>✅易于集成</strong>：可以与现有的 React 应用轻松集成，无需重构代码。</p><h4 id="（2）与其他类似的库相比的优点"><a href="#（2）与其他类似的库相比的优点" class="headerlink" title="（2）与其他类似的库相比的优点"></a>（2）与其他类似的库相比的优点</h4><p>React Query 相对于其他类似库（如 Redux、Apollo Client、SWR 等）有几个独特的优势和特点：</p><ol><li><strong>数据获取与缓存分离</strong></li></ol><p>React Query 专注于数据获取和缓存管理，而不是全局状态管理。这使得它更加简洁和高效，专注于异步数据的流动，而不需要管理其他状态。</p><ol start="2"><li><strong>自动缓存和无缝更新</strong></li></ol><p>React Query 会自动缓存请求的数据，并在数据过期时自动重新获取。它提供了强大的数据同步机制，允许实时更新和后台刷新，保持数据的新鲜度。</p><ol start="3"><li><strong>轻量级的 API</strong></li></ol><p>与 Redux 等库相比，React Query 提供了更简单的 API。使用 <code>useQuery</code> 和 <code>useMutation</code> 进行数据操作，无需编写复杂的 reducer 和 action。</p><ol start="4"><li><strong>内置的状态管理</strong></li></ol><p>React Query 内置了加载、错误和成功等状态管理，无需额外处理。开发者可以轻松获取请求状态，从而更好地处理 UI 渲染。</p><ol start="5"><li><strong>自动重试和错误处理</strong></li></ol><p>它可以自动重试失败的请求，并允许开发者自定义重试逻辑。这种机制提高了应用的鲁棒性。</p><ol start="6"><li><strong>无缝集成</strong></li></ol><p>React Query 可以与任何后端 API（REST、GraphQL 等）无缝集成，无需特定的配置。这种灵活性使得它适用于各种项目。</p><ol start="7"><li><strong>支持服务端渲染（SSR）</strong></li></ol><p>React Query 提供了服务端渲染支持，允许在服务器端预取数据，并在客户端使用，提升页面加载性能。</p><ol start="8"><li><strong>开箱即用的 DevTools</strong></li></ol><p>React Query 提供了开发者工具，方便查看当前的查询状态、缓存和数据。这对于调试和优化应用非常有帮助。</p><h3 id="二、set-up-React-Query✅"><a href="#二、set-up-React-Query✅" class="headerlink" title="二、set up React Query✅"></a>二、set up React Query✅</h3><blockquote><p><code>npm i date-fns</code>  日期功能（跟视频不一样了，导入方式，问GPT吧）</p></blockquote><h4 id="（1）安装配置"><a href="#（1）安装配置" class="headerlink" title="（1）安装配置"></a>（1）安装配置</h4><p>⭕<code>npm i @tanstack/react-query@4</code>       <a href="https://tanstack.com/query/v3">https://tanstack.com/query/v3</a></p><p>（23年是v4，现在已经是v5了🙉）</p><p> ⭕<code>npm i @tanstack/react-query-devtools@4</code>安装Dev Tool（这次不用浏览器内安装）</p><h4 id="（2）初步使用"><a href="#（2）初步使用" class="headerlink" title="（2）初步使用"></a>（2）初步使用</h4><p>在App.js中写入<code>const queryClient = new QueryClient(&#123;（可选项）&#125;）</code></p><p>用<code>&lt;QueryClientProvider client=&#123;queryClient&#125;&gt;</code>包裹整个App</p><p>子组件中写入<code>&lt;ReactQueryDevtools initialIsOpen=&#123;false&#125; /&gt;</code></p><h4 id="（3）示例"><a href="#（3）示例" class="headerlink" title="（3）示例"></a>（3）示例</h4><p>获取数据的方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123;<br>  isLoading,<br>  <span class="hljs-attr">data</span>: cabins,<br>  error,<br>&#125; = <span class="hljs-title function_">useQuery</span>(&#123;<br>  <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;cabins&#x27;</span>],<br>  <span class="hljs-attr">queryFn</span>: getCabins,<br>&#125;);<br></code></pre></td></tr></table></figure><p>设置数据由fresh到stale的时间：（在App.js）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> queryClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryClient</span>(&#123;<br>  <span class="hljs-attr">defaultOptions</span>: &#123;<br>    <span class="hljs-attr">queries</span>: &#123;<br>      <span class="hljs-attr">staleTime</span>: <span class="hljs-number">0</span>,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>getCabins:</code>（从API Docs中查看相应代码）（记得修改相应Policy权限）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getCabins</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>).<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;cabins could not be loaded&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、mutating（变异）数据"><a href="#三、mutating（变异）数据" class="headerlink" title="三、mutating（变异）数据"></a>三、mutating（变异）数据</h3><p>当在supabase中修改数据后，网站上加载出的表单会跟随staleTime改变。</p><p>但是如果是远程修改数据呢？（比如删除，如下所示）</p><h4 id="（1）删除方程（放置在apiCabins中）"><a href="#（1）删除方程（放置在apiCabins中）" class="headerlink" title="（1）删除方程（放置在apiCabins中）"></a>（1）删除方程（放置在apiCabins中）</h4><p>修改了eq（）中的内容，可以和Docs中的代码做照应</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteCabin</span>(<span class="hljs-params">&#123; id &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>).<span class="hljs-title function_">delete</span>().<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, id);<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;cabins could not be deleted&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第一个值</strong> <code>&#39;id&#39;</code>：</p><ul><li>这个值是数据库表中的列名，表示你要匹配的字段。在这里，它指的是小屋表中的 <code>id</code> 列。</li></ul><p><strong>第二个值</strong> <code>id</code>：</p><ul><li>这个值是你想删除的具体记录的唯一标识符。它是从传入的对象中解构出来的 <code>id</code> 值，代表要删除的小屋的 ID。</li></ul><h4 id="（2）连接删除组件"><a href="#（2）连接删除组件" class="headerlink" title="（2）连接删除组件"></a>（2）连接删除组件</h4><p>要点解析在代码注释中：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">CabinRow</span>(<span class="hljs-params">&#123; cabin &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-attr">id</span>: cabinId,  <span class="hljs-comment">//这里重构了名称，因此在onClick函数中不能只传递一个参数而是需要传递对象</span><br>    name,<br>    maxCapacity,<br>    regularPrice,<br>    discount,<br>    image,<br>  &#125; = cabin;<br><br>  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">useQueryClient</span>(); <span class="hljs-comment">//通过这个自定义hook来获取App.Js中建立的Client</span><br><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">isLoading</span>: isDeleting, mutate &#125; = <span class="hljs-title function_">useMutation</span>(&#123;  <span class="hljs-comment">//看这个hook！！！！</span><br>    <span class="hljs-attr">mutationFn</span>: deleteCabin,  <span class="hljs-comment">//这是变异数据的方程</span><br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">() =&gt;</span> &#123;       <span class="hljs-comment">//这是编译成功的回调函数</span><br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Cabin successfully deleted&#x27;</span>);<br>      queryClient.<span class="hljs-title function_">invalidateQueries</span>(&#123;<br>        <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;cabins&#x27;</span>],<br>      &#125;);   <span class="hljs-comment">//这里的目的是强制触发重新获取数据以更新界面，invalidate的意思就是更新</span><br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title function_">alert</span>(err.<span class="hljs-property">message</span>),  <span class="hljs-comment">//这里是失败后的回调函数，显示错误</span><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TableRow</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cabin</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Cabin</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Fits up to &#123;maxCapacity&#125; guests<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Price</span>&gt;</span>&#123;formatCurrency(regularPrice)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Price</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Discount</span>&gt;</span>&#123;formatCurrency(discount)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Discount</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> mutate(&#123; id: cabinId &#125;)&#125; disabled=&#123;isDeleting&#125;&gt;</span><br><span class="language-xml">        delete         &#123;/*就是这里的函数，参数使用&#123;id：cabinId&#125;而不是直接是cabinId*/&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TableRow</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）装饰通知（React-Toast）"><a href="#（3）装饰通知（React-Toast）" class="headerlink" title="（3）装饰通知（React Toast）"></a>（3）装饰通知（React Toast）</h4><p>⭕<code>npm i react-hot-toast</code>     <a href="https://react-hot-toast.com/%EF%BC%88%E5%A5%BD%E5%8F%AF%E7%88%B1%E7%9A%84%E7%95%8C%E9%9D%A2hhh%EF%BC%89">https://react-hot-toast.com/（好可爱的界面hhh）</a></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922164720981.png" alt="image-20240922164720981"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922164746787.png" alt="image-20240922164746787"></p><h5 id="1、首先：（先去查看官方文档）在App-js的架构中，在子组件的最后写上："><a href="#1、首先：（先去查看官方文档）在App-js的架构中，在子组件的最后写上：" class="headerlink" title="1、首先：（先去查看官方文档）在App.js的架构中，在子组件的最后写上："></a>1、首先：（先去查看官方文档）在App.js的架构中，在子组件的最后写上：</h5><p>（烤面包机当通知也太好笑了吧hhhh）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Toaster</span><br>        position=<span class="hljs-string">&quot;top-center&quot;</span>  <span class="hljs-comment">//位置</span><br>        gutter=&#123;<span class="hljs-number">12</span>&#125;          <span class="hljs-comment">//各个toast的间距</span><br>        containerStyle=&#123;&#123; <span class="hljs-attr">margin</span>: <span class="hljs-string">&#x27;8px&#x27;</span> &#125;&#125;    <span class="hljs-comment">//外边距</span><br>        toastOptions=&#123;&#123;   <span class="hljs-comment">//定义了不同类型 toast 的显示选项。</span><br>          <span class="hljs-attr">success</span>: &#123; <br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">3000</span>，    <span class="hljs-comment">//持续时间</span><br>          &#125;,<br>          <span class="hljs-attr">error</span>: &#123;<br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">5000</span>,<br>          &#125;,<br>          <span class="hljs-attr">style</span>: &#123;<br>            <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;16px&#x27;</span>,<br>            <span class="hljs-attr">maxWidth</span>: <span class="hljs-string">&#x27;500px&#x27;</span>,<br>            <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;16px 24px&#x27;</span>,<br>            <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;var(--color-grey-0)&#x27;</span>,<br>            <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;var(--color-grey-700)&#x27;</span>,<br>          &#125;,<br>        &#125;&#125;<br>      /&gt;<br></code></pre></td></tr></table></figure><h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">toast.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;Cabin successfully deleted&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="四、React-Hook-Form"><a href="#四、React-Hook-Form" class="headerlink" title="四、React Hook Form"></a>四、React Hook Form</h3><p>⭕<code>npm i react-hook-form@7</code></p><h4 id="（1）入门"><a href="#（1）入门" class="headerlink" title="（1）入门"></a>（1）入门</h4><p>非常好的库，使提交表格方便。</p><h5 id="1、const-register-handleSubmit-useForm"><a href="#1、const-register-handleSubmit-useForm" class="headerlink" title="1、const { register, handleSubmit } = useForm();"></a>1、<code>const &#123; register, handleSubmit &#125; = useForm();</code></h5><ul><li>**<code>register</code>**：这是一个函数，用于将表单字段注册到 React Hook Form 中，以便它能够跟踪其状态和验证。</li><li>**<code>handleSubmit</code>**：这是一个函数，用于处理表单提交事件。当用户提交表单时，它会调用你提供的提交处理函数。</li></ul><h5 id="2、在input字段中加入register："><a href="#2、在input字段中加入register：" class="headerlink" title="2、在input字段中加入register："></a>2、在input字段中加入register：</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Input</span> type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;name&quot;</span> &#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;name&#x27;</span>)&#125; /&gt;<br></code></pre></td></tr></table></figure><h5 id="3、添加提交函数"><a href="#3、添加提交函数" class="headerlink" title="3、添加提交函数"></a>3、添加提交函数</h5><p>这是我们自己创建的Form组件，添加onSubmit函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Form</span> onSubmit=&#123;<span class="hljs-title function_">handleSubmit</span>(onSubmit)&#125;&gt;  <br></code></pre></td></tr></table></figure><p>这里是onSubmit函数：（然后表格里的数据就完美出现了）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br> &#125;<br></code></pre></td></tr></table></figure><p>下面是被register后的input字段的prop，多了不一样的东西。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922182919583.png" alt="image-20240922182919583"></p><h5 id="4、使用Form创建新的Cabin"><a href="#4、使用Form创建新的Cabin" class="headerlink" title="4、使用Form创建新的Cabin"></a>4、使用Form创建新的Cabin</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createCabin</span>(<span class="hljs-params">newCabin</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>)<br>    .<span class="hljs-title function_">insert</span>([newCabin])<br>    .<span class="hljs-title function_">select</span>();<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;cabins could not be created&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实没啥特别的，注意表单的内容和cabin的结构一致就行。</p><h4 id="（2）表单的错误处理"><a href="#（2）表单的错误处理" class="headerlink" title="（2）表单的错误处理"></a>（2）表单的错误处理</h4><blockquote><p>”React Hook Form最闪亮耀眼的地方是表单错误验证“</p></blockquote><h5 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h5><p>先看看我们通过useForm获得了什么：</p><p>⭐<code>const &#123; register, handleSubmit, reset, getValues, formState &#125; = useForm();</code></p><ul><li>**<code>reset</code>**：用于重置表单的值到初始状态，通常在提交成功后调用。</li><li>**<code>getValues</code>**：获取当前表单字段的值，可以在需要时获取字段的最新值。</li><li>**<code>formState</code>**：包含表单的状态信息，如 <code>isSubmitting</code>、<code>isValid</code> 和 <code>errors</code> 等，方便进行表单状态的管理和展示。</li></ul><p>于是……</p><ul><li>可以在onSuccess的回调函数中添加 reset()，清空表单</li><li>const { errors } &#x3D; formState;来获得错误信息以显示在ui界面，Form的onSubmit函数中添加onError： <code>&lt;Form onSubmit=&#123;handleSubmit(onSubmit, onError)&#125;&gt;</code>，如果表单提交不成功就会调用onError函数，它的参数是errors</li></ul><h5 id="2、表单验证"><a href="#2、表单验证" class="headerlink" title="2、表单验证"></a>2、表单验证</h5><p>验证内容在register中添加，例如</p><ul><li>maxCapacity表单：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;maxCapacity&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is requied&#x27;</span>,<br>   <span class="hljs-attr">min</span>: &#123;<br>     <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Capacity should be at least 1&#x27;</span>,<br>     &#125;,<br>&#125;)&#125;<br></code></pre></td></tr></table></figure><ul><li>discount表单：（validate关键字：自定义验证）✅应用getValues函数访问表内数据</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;...<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;discount&#x27;</span>, &#123;<br>   <span class="hljs-attr">required</span>: <span class="hljs-string">&#x27;This field is requied&#x27;</span>,<br>   <span class="hljs-attr">validate</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span><br>      value &lt;= <span class="hljs-title function_">getValues</span>().<span class="hljs-property">regularPrice</span> ||<br>      <span class="hljs-string">&#x27;DisCount should be less than regular price &#x27;</span>,<br>&#125;)&#125;<br></code></pre></td></tr></table></figure><h3 id="五、上传图片到supabase"><a href="#五、上传图片到supabase" class="headerlink" title="五、上传图片到supabase"></a>五、上传图片到supabase</h3><p>⭕<a href="https://supabase.com/docs/reference/javascript/storage-from-upload%E8%AE%BF%E9%97%AE%E6%AD%A4%E7%BD%91%E7%AB%99%E6%89%BE%E5%AF%BB%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">https://supabase.com/docs/reference/javascript/storage-from-upload访问此网站找寻详细信息</a></p><p>首先需要设置rlp（Policy）</p><h4 id="（1）建立函数"><a href="#（1）建立函数" class="headerlink" title="（1）建立函数"></a>（1）建立函数</h4><h5 id="1、得到图片名和图片路径"><a href="#1、得到图片名和图片路径" class="headerlink" title="1、得到图片名和图片路径"></a>1、得到图片名和图片路径</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> imageName = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random()&#125;</span>-<span class="hljs-subst">$&#123;newCabin.image.name&#125;</span>`</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>使用 <code>Math.random()</code> 生成随机数，以防止图片名称冲突，并将其与原图片名称拼接。<code>replaceAll</code> 用于去除 <code>/</code> 字符。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> imagePath = <span class="hljs-string">`<span class="hljs-subst">$&#123;supabaseUrl&#125;</span>/storage/v1/object/public/cabin-images/<span class="hljs-subst">$&#123;imageName&#125;</span>`</span>;<br></code></pre></td></tr></table></figure><p><code>supabaseUrl</code>是在<code>supabase.js</code>中定义的。至于路径，我们在前面创建了两个Buket，其中一个是cabin-images，存储cabin图像，从那里复制而来。</p><h5 id="2、create-cabin"><a href="#2、create-cabin" class="headerlink" title="2、create cabin"></a>2、create cabin</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> supabase<br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>)<br>    .<span class="hljs-title function_">insert</span>([&#123; ...newCabin, <span class="hljs-attr">image</span>: imagePath &#125;]);<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Cabin could not be created&#x27;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>❓❓在这段代码中，将 <code>image</code> 单独列出来的原因主要有以下几点：</p><ol><li><p><strong>存储路径的动态性</strong>：</p><ul><li>图片的路径是通过生成随机名称和构造完整 URL 动态创建的。在插入到数据库之前，路径需要先确定。因此，在插入数据时，使用生成的 <code>imagePath</code> 作为字段的一部分。</li></ul></li><li><p><strong>解耦数据逻辑</strong>：</p><ul><li>将 <code>image</code> 单独列出可以清晰地分隔小屋的基本信息和图片信息，使数据结构更清晰。在数据表中，通常不直接存储文件的内容，而是存储文件的 URL 或路径。</li></ul></li><li><p><strong>确保数据完整性</strong>：</p><ul><li>在创建小屋的过程中，首先插入小屋信息，再上传图片。如果上传失败，可以根据存储的 <code>id</code> 删除对应的小屋记录。这种分步骤处理的方式使得在发生错误时能够更容易地回滚操作。</li></ul></li><li><p><strong>方便后续处理</strong>：</p><ul><li>如果将 <code>image</code> 与其他小屋信息合并在一起，后续处理时可能会变得复杂。例如，如果需要仅更新或删除图片，单独存储可以更加方便。</li></ul></li></ol><h5 id="3、upload-image"><a href="#3、upload-image" class="headerlink" title="3、upload image"></a>3、upload image</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">error</span>: storageError &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">storage</span><br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabin-images&#x27;</span>)  <span class="hljs-comment">//这里写buket的名字</span><br>    .<span class="hljs-title function_">upload</span>(imageName, newCabin.<span class="hljs-property">image</span>);   <span class="hljs-comment">//括号前面写文件名，后面是上传的文件本身</span><br></code></pre></td></tr></table></figure><h5 id="4、Delete-the-cabin-if-there-was-an-error-uploading-image"><a href="#4、Delete-the-cabin-if-there-was-an-error-uploading-image" class="headerlink" title="4、Delete the cabin if there was an error uploading image"></a>4、Delete the cabin if there was an error uploading image</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> (storageError) &#123;<br>    <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>).<span class="hljs-title function_">delete</span>().<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, data.<span class="hljs-property">id</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(storageError);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<br>      <span class="hljs-string">&#x27;Cabin image could not be uploaded and the cabin was not created&#x27;</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）修改submit函数"><a href="#（2）修改submit函数" class="headerlink" title="（2）修改submit函数"></a>（2）修改submit函数</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-title function_">mutate</span>(&#123; ...data, <span class="hljs-attr">image</span>: data.<span class="hljs-property">image</span>[<span class="hljs-number">0</span>] &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、修改cabin信息"><a href="#六、修改cabin信息" class="headerlink" title="六、修改cabin信息"></a>六、修改cabin信息</h3><p>改bug改的想鼠。。。💀💀💀💀💀💀（把Jonas没找到的bug找出来了，我真棒）</p><p>这一部分有点儿难理解，让我仔细地捋一下。</p><h4 id="（1）传递表单原有信息"><a href="#（1）传递表单原有信息" class="headerlink" title="（1）传递表单原有信息"></a>（1）传递表单原有信息</h4><p>在修改信息的时候，很明显我们是需要原有的信息的，然后在此基础上加以修改。由于这个修改信息的表单应该和创建信息的表单一样，所以我们可以偷懒直接借用。于是在CabinRow这个组件里，我们可以添加一个按钮：<code>edit</code>，onClick函数控制showForm状态变量，然后就可以在cabinRow的要修改的那一行下面显示CreateCabinForm组件了。（传递给它cabin的所有信息）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;showForm &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CreateCabinForm</span> <span class="hljs-attr">cabinToEdit</span>=<span class="hljs-string">&#123;cabin&#125;</span> /&gt;</span></span>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）改变CreateCabinForm"><a href="#（2）改变CreateCabinForm" class="headerlink" title="（2）改变CreateCabinForm"></a>（2）改变CreateCabinForm</h4><h5 id="1、接收原有的cabin信息"><a href="#1、接收原有的cabin信息" class="headerlink" title="1、接收原有的cabin信息"></a>1、接收原有的cabin信息</h5><p>组件函数接收object prop：<code>&#123; cabinToEdit = &#123;&#125; &#125;</code></p><p><code>=&#123;&#125;</code>是给它一个default值，因为创建cabin的时候没有传递cabinToEdit，所以就是空。</p><h5 id="2、运用原有的cabin信息"><a href="#2、运用原有的cabin信息" class="headerlink" title="2、运用原有的cabin信息"></a>2、运用原有的cabin信息</h5><ul><li>首先进行拆解：<code>const &#123; id: editId, ...editValues &#125; = cabinToEdit;</code></li></ul><p>这里把id重命名为editId是为了下面传递参数更加方便。</p><ul><li>然后定义变量：<code>const isEditSession = Boolean(editId);</code></li></ul><p>没有editId说明是创建cabin，这个变量决定了在mutate数据的时候究竟是创建cabin还是修改cabin，因为两个动作接受的参数也不愿意。</p><ul><li>接着给予表单defaultValues：<code>const &#123; register, handleSubmit, reset, getValues, formState &#125; = useForm(&#123;defaultValues: isEditSession ? editValues : &#123;&#125;, &#125;);</code></li></ul><p>这里也比较好理解，如果不是编辑默认值就为空。</p><h5 id="3、创建mutate"><a href="#3、创建mutate" class="headerlink" title="3、创建mutate"></a>3、创建mutate</h5><p>这里跟createCabin的逻辑很像，只是改变了名字和接收的参数而已。</p><p><code>mutationFn: (&#123; newCabinData, id &#125;) =&gt; createEditCabin(newCabinData, id)</code>其中这一行着重看。</p><p>（⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️请注意请注意这里onSuccess后不能reset（）！！！否则image就变成空（undefined）的了，不知道为什么，其他数据都没问题。。。）</p><p>判断失误，汗流浃背了，原来只是因为api里那个函数写错了，有个小bug，startsWith而不是startWith。。。真的汗流浃背了，我就说Jonas那里怎么没问题。。但是我真的很奇怪为什么在onSubmit函数里console.log（image）为什么是undifined。。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">mutate</span>: editCabin, <span class="hljs-attr">isLoading</span>: isEditing &#125; = <span class="hljs-title function_">useMutation</span>(&#123;<br>  <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">&#123; newCabinData, id &#125;</span>) =&gt;</span> <span class="hljs-title function_">createEditCabin</span>(newCabinData, id),<br>  <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    toast.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;Cabin successfully edited&#x27;</span>);<br>    queryClient.<span class="hljs-title function_">invalidateQueries</span>(&#123;<br>      <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&#x27;cabins&#x27;</span>],<br>    &#125;);<br>  &#125;,<br>  <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> toast.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">message</span>),<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4、修改表单disabled逻辑"><a href="#4、修改表单disabled逻辑" class="headerlink" title="4、修改表单disabled逻辑"></a>4、修改表单disabled逻辑</h5><p><code>const isWorking = isCreating || isEditing;</code>用新变量处理</p><h5 id="5、修改onSubmit函数"><a href="#5、修改onSubmit函数" class="headerlink" title="5、修改onSubmit函数"></a>5、修改onSubmit函数</h5><p>如果图片是新上传的，那么它应该是一个对象，我们需要得到得到的是它的名字来给它建立url，如果是旧的信息，那么它应该是string，直接返回它本身就好。</p><p>这里两个函数的参数不太一样，可以观察一下。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onSubmit</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// console.log(data);</span><br>    <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">typeof</span> data.<span class="hljs-property">image</span> === <span class="hljs-string">&#x27;string&#x27;</span> ? data.<span class="hljs-property">image</span> : data.<span class="hljs-property">image</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// console.log(image);</span><br><br>    <span class="hljs-keyword">if</span> (isEditSession)<br>      <span class="hljs-title function_">editCabin</span>(&#123; <span class="hljs-attr">newCabinData</span>: &#123; ...data, image &#125;, <span class="hljs-attr">id</span>: editId &#125;);<br>    <span class="hljs-keyword">else</span> <span class="hljs-title function_">createCabin</span>(&#123; ...data, <span class="hljs-attr">image</span>: image &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="（3）创建、修改Cabin函数合二为一"><a href="#（3）创建、修改Cabin函数合二为一" class="headerlink" title="（3）创建、修改Cabin函数合二为一"></a>（3）创建、修改Cabin函数合二为一</h4><p>从上到下讲一下要点：</p><h5 id="1、通过一个很巧妙的函数来判定图片需不需要重新创建Url"><a href="#1、通过一个很巧妙的函数来判定图片需不需要重新创建Url" class="headerlink" title="1、通过一个很巧妙的函数来判定图片需不需要重新创建Url"></a>1、通过一个很巧妙的函数来判定图片需不需要重新创建Url</h5><p>接收到传过来的数据时，如果image是旧的，那么它的开头应该是supabaseUrl，所以通过这个来判断是沿用这个image还是通过它新建Url。</p><h5 id="2、if（）条件语句下，需要换一种方式接收数据"><a href="#2、if（）条件语句下，需要换一种方式接收数据" class="headerlink" title="2、if（）条件语句下，需要换一种方式接收数据"></a>2、if（）条件语句下，需要换一种方式接收数据</h5><p><code>await supabase.from(&#39;cabins&#39;)</code> 本身是一个查询操作，返回的是一个查询对象。如果直接在 <code>if</code> 语句中使用它，可能导致控制流不清晰。你需要先构建查询，再执行它。所以我们在这里先创建了query来接收数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createEditCabin</span>(<span class="hljs-params">newCabin, id</span>) &#123;<br> <span class="hljs-comment">// console.log(newCabin, id);</span><br>  <span class="hljs-keyword">const</span> hasImagePath = newCabin.<span class="hljs-property">image</span>?.<span class="hljs-property">startsWith</span>?.(supabaseUrl);<br><br>  <span class="hljs-keyword">const</span> imageName = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random()&#125;</span>-<span class="hljs-subst">$&#123;newCabin.image.name&#125;</span>`</span>.<span class="hljs-title function_">replaceAll</span>(<br>    <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-string">&#x27;&#x27;</span><br>  );<br>  <span class="hljs-keyword">const</span> imagePath = hasImagePath<br>    ? newCabin.<span class="hljs-property">image</span><br>    : <span class="hljs-string">`<span class="hljs-subst">$&#123;supabaseUrl&#125;</span>/storage/v1/object/public/cabin-images/<span class="hljs-subst">$&#123;imageName&#125;</span>`</span>;<br><br>  <span class="hljs-comment">//1.create/edit cabin</span><br>  <span class="hljs-keyword">let</span> query = supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>);<br><br>  <span class="hljs-comment">//a)create</span><br>  <span class="hljs-keyword">if</span> (!id) query = query.<span class="hljs-title function_">insert</span>([&#123; ...newCabin, <span class="hljs-attr">image</span>: imagePath &#125;]);<br><br>  <span class="hljs-comment">//b)edit</span><br>  <span class="hljs-keyword">if</span> (id) query = query.<span class="hljs-title function_">update</span>(&#123; ...newCabin, <span class="hljs-attr">image</span>: imagePath &#125;).<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, id);<br><br>  <span class="hljs-keyword">const</span> &#123; data, error &#125; = <span class="hljs-keyword">await</span> query.<span class="hljs-title function_">select</span>().<span class="hljs-title function_">single</span>();<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Cabin could not be created&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//2.upload image</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">error</span>: storageError &#125; = <span class="hljs-keyword">await</span> supabase.<span class="hljs-property">storage</span><br>    .<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabin-images&#x27;</span>)<br>    .<span class="hljs-title function_">upload</span>(imageName, newCabin.<span class="hljs-property">image</span>);<br><br>  <span class="hljs-comment">//3.Delete the cabin if there was an error uploading image</span><br>  <span class="hljs-keyword">if</span> (storageError) &#123;<br>    <span class="hljs-keyword">await</span> supabase.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;cabins&#x27;</span>).<span class="hljs-title function_">delete</span>().<span class="hljs-title function_">eq</span>(<span class="hljs-string">&#x27;id&#x27;</span>, data.<span class="hljs-property">id</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(storageError);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<br>      <span class="hljs-string">&#x27;Cabin image could not be uploaded and the cabin was not created&#x27;</span><br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="七、复制cabins"><a href="#七、复制cabins" class="headerlink" title="七、复制cabins"></a>七、复制cabins</h3><h4 id="（1）创建custom-hook"><a href="#（1）创建custom-hook" class="headerlink" title="（1）创建custom hook"></a>（1）创建custom hook</h4><p>一共创建了四个：</p><ul><li>useCabins：得到cabin数据</li><li>useCreateCabin：得到创建cabin的函数</li><li>useDeleteCabin：得到删除cabin的函数</li><li>useEditCabin：得到修改cabin的函数</li></ul><p>reset（）函数不能放在这些文件里，但是可以放在onSubmit中，在调用mutate函数时通过onSuccess当作参数传递</p><h4 id="（2）复制Cabin"><a href="#（2）复制Cabin" class="headerlink" title="（2）复制Cabin"></a>（2）复制Cabin</h4><p>只需要创建一个新的按钮，把onClick函数写为creatCabin，传递的参数就是cabinRow中的cabin信息，把名字更改为<code>copy of $&#123;name&#125;</code>即可。</p><h3 id="八、修改设置"><a href="#八、修改设置" class="headerlink" title="八、修改设置"></a>八、修改设置</h3><p>由于只有一行设置，因此对它的改变比较简单。下面只讲一下要点。</p><p>下面是其中一个修改框：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">FormRow</span> label=<span class="hljs-string">&quot;Minimum nights/booking&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;min-nights&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;isUpdating&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&#123;minBookingLength&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> handleUpdate(e, &#x27;minBookingLength&#x27;)&#125;</span><br><span class="language-xml">  /&gt;</span><br>&lt;/<span class="hljs-title class_">FormRow</span>&gt;<br></code></pre></td></tr></table></figure><p>在 <code>onBlur</code>（失去焦点）时触发 <code>handleUpdate</code>，并将用户输入的值与字段名 <code>&#39;minBookingLength&#39;</code> 一起传递给 <code>handleUpdate</code> 函数。</p><p>下面是handleUpdate函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleUpdate</span>(<span class="hljs-params">e, field</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; value &#125; = e.<span class="hljs-property">target</span>;   <span class="hljs-comment">//解构赋值</span><br>    <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-title function_">updateSetting</span>(&#123; [field]: value &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、零碎"><a href="#九、零碎" class="headerlink" title="九、零碎"></a>九、零碎</h3><h4 id="（1）滚动条"><a href="#（1）滚动条" class="headerlink" title="（1）滚动条"></a>（1）滚动条</h4><h5 id="1、使得sidebar固定，只有main的部分滑动"><a href="#1、使得sidebar固定，只有main的部分滑动" class="headerlink" title="1、使得sidebar固定，只有main的部分滑动"></a>1、使得sidebar固定，只有main的部分滑动</h5><p>在Main的样式中加入： <code>overflow: scroll;</code></p><h5 id="2、隐藏全局滚动条（真的很丑）"><a href="#2、隐藏全局滚动条（真的很丑）" class="headerlink" title="2、隐藏全局滚动条（真的很丑）"></a>2、隐藏全局滚动条（真的很丑）</h5><p>在<code>GlobalStyles.js</code>中找到&#x2F;新建一个body元素，写入： <code>overflow: hidden;</code></p><h4 id="（2）children的prop也可以访问"><a href="#（2）children的prop也可以访问" class="headerlink" title="（2）children的prop也可以访问"></a>（2）children的prop也可以访问</h4><p>例如我们会创建cabin表新建的可重用组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FormRow</span>(<span class="hljs-params">&#123; label, error, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledFormRow</span>&gt;</span></span><br><span class="language-xml">      &#123;label &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&#123;children.props.id&#125;</span>&gt;</span>&#123;label&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Label</span>&gt;</span>&#125;</span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">      &#123;error &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Error</span>&gt;</span>&#123;error&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Error</span>&gt;</span>&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StyledFormRow</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）连接起来的两个表单不能直接删除元素哦"><a href="#（3）连接起来的两个表单不能直接删除元素哦" class="headerlink" title="（3）连接起来的两个表单不能直接删除元素哦"></a>（3）连接起来的两个表单不能直接删除元素哦</h4><p>{    “code”: “23503”,    “details”: “Key is still referenced from table &quot;booking&quot;.”,    “hint”: null,    “message”: “update or delete on table &quot;cabins&quot; violates <strong>foreign key</strong> constraint &quot;booking_cabinId_fkey&quot; on table &quot;booking&quot;“ }</p><p>想要删除一个cabin的时候报错了，因为它和另一张表单（booking）的内容连接起来了。</p><p>9&#x2F;24：终于完成这一节了呜呜呜呜呜，真不容易😭😭😭😭😭😭😭😭😭😭😭😭😭😭</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程18-Supabase</title>
    <link href="/2024/09/21/react%E8%AF%BE%E7%A8%8B18-Supabase/"/>
    <url>/2024/09/21/react%E8%AF%BE%E7%A8%8B18-Supabase/</url>
    
    <content type="html"><![CDATA[<p>本节课来学习Supabase😘</p><span id="more"></span><p>（Jonas为什么这么搞笑，一边教学一边认真地搞笑😂）</p><p>（迄今为止学习了52h的视频，还剩32h，赶进度啊啊啊啊啊啊）</p><h3 id="一、什么是Supabase"><a href="#一、什么是Supabase" class="headerlink" title="一、什么是Supabase"></a>一、什么是Supabase</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240921165507718.png" alt="image-20240921165507718"></p><p>Supabase 是一个开源的后端即服务（Backend-as-a-Service, BaaS）平台，旨在帮助开发者快速构建现代全栈应用程序。它基于 PostgreSQL 数据库构建，提供了类似 Firebase 的功能，但保持了对开发者友好的开源特性。</p><h4 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1. 数据库"></a>1. <strong>数据库</strong></h4><p>Supabase 的核心是基于 PostgreSQL，这是一个功能强大的关系型数据库。Supabase 在 PostgreSQL 的基础上提供了以下扩展和优化：</p><ul><li><strong>SQL 支持</strong>：开发者可以直接通过 SQL 查询和操作数据库，而不仅仅依赖于 ORM 工具。</li><li><strong>扩展性</strong>：可以使用 PostgreSQL 的功能，如触发器、存储过程和自定义函数，支持复杂查询和操作。</li><li><strong>自动生成的 API</strong>：Supabase 会为数据库中的每个表自动生成 RESTful API，支持 CRUD 操作，无需额外编写后端代码即可操作数据。</li></ul><h4 id="2-存储"><a href="#2-存储" class="headerlink" title="2. 存储"></a>2. <strong>存储</strong></h4><p>Supabase 提供了类似 Amazon S3 的文件存储功能，帮助开发者管理和存储文件。存储功能包括：</p><ul><li><strong>对象存储</strong>：可以存储图像、视频、文档等任意类型的文件。</li><li><strong>文件上传和下载</strong>：内置 API 支持文件上传和下载操作。</li><li><strong>CDN 集成</strong>：通过内置的 CDN 加速文件的传输速度，提高用户访问体验。</li><li><strong>访问控制</strong>：可以设置文件的公开或私有访问权限。</li></ul><h4 id="3-实时功能"><a href="#3-实时功能" class="headerlink" title="3. 实时功能"></a>3. <strong>实时功能</strong></h4><p>Supabase 的实时功能基于 PostgreSQL 的复制机制，并通过 WebSockets 实现，允许客户端实时获取数据库中的数据变化。此功能适合需要高实时性的数据同步应用，如聊天应用、协作工具或实时数据监控：</p><ul><li><strong>数据变化监听</strong>：当数据库中的某条记录发生变化时，客户端可以实时接收到数据更新。</li><li><strong>实时订阅</strong>：通过订阅表、行或事件，客户端可以随时保持与后端的实时同步。</li><li><strong>低延迟</strong>：得益于 WebSockets 和 PostgreSQL 的强大性能，数据变化几乎是瞬时传递。</li></ul><h4 id="4-自动生成的-API"><a href="#4-自动生成的-API" class="headerlink" title="4. 自动生成的 API"></a>4. <strong>自动生成的 API</strong></h4><p>Supabase 会为数据库中的每个表自动生成 RESTful 和 GraphQL API，开发者可以通过这些 API 直接与数据库交互。这减少了开发者编写复杂后端代码的需求。API 主要特性包括：</p><ul><li><strong>全自动</strong>：API 在数据库创建后即自动生成。</li><li><strong>RESTful</strong>：每个表对应一个完整的 CRUD API（创建、读取、更新、删除）。</li><li><strong>分页、排序、过滤</strong>：API 支持丰富的查询参数，可以通过简单的 URL 实现分页、排序、数据筛选等高级功能。</li></ul><h4 id="5-托管服务"><a href="#5-托管服务" class="headerlink" title="5. 托管服务"></a>5. <strong>托管服务</strong></h4><p>虽然 Supabase 是开源的，但它提供了托管服务，可以免去服务器运维和管理的复杂性。托管服务提供的功能包括：</p><ul><li><strong>弹性扩展</strong>：可以根据应用规模自动调整资源，避免服务器过载。</li><li><strong>自动备份</strong>：Supabase 提供了数据库的定期备份功能，确保数据安全。</li><li><strong>监控和分析</strong>：可以查看数据库的运行状态、查询性能、错误日志等。</li></ul><h4 id="6-客户端-SDK-和-API"><a href="#6-客户端-SDK-和-API" class="headerlink" title="6. 客户端 SDK 和 API"></a>6. <strong>客户端 SDK 和 API</strong></h4><p>Supabase 提供了多种客户端 SDK，支持不同的编程语言和框架：</p><ul><li><strong>JavaScript&#x2F;TypeScript SDK</strong>：最常用的 SDK，适用于 React、Vue、Next.js 等现代前端框架。</li><li><strong>Flutter SDK</strong>：适用于移动端开发，支持 iOS 和 Android。</li><li><strong>REST API</strong>：可以通过任何 HTTP 客户端访问 RESTful API，适用于跨平台应用开发。</li></ul><h4 id="7-安全与权限"><a href="#7-安全与权限" class="headerlink" title="7. 安全与权限"></a>7. <strong>安全与权限</strong></h4><p>Supabase 提供了详细的安全和权限管理功能：</p><ul><li>**基于行级别的安全性 (RLS)**：允许开发者基于用户身份控制每个用户对特定行的访问权限。</li><li><strong>角色管理</strong>：可以为用户分配不同的角色，以实现复杂的权限管理体系。</li></ul><h4 id="8-开源与社区"><a href="#8-开源与社区" class="headerlink" title="8. 开源与社区"></a>8. <strong>开源与社区</strong></h4><p>Supabase 的最大特点之一是其开源性，所有核心代码均可在 GitHub 上获取，开发者可以自由地修改、扩展和贡献代码。开源的优势包括：</p><ul><li><strong>自由托管</strong>：开发者可以选择在自己的服务器上托管 Supabase，完全自主控制数据和服务。</li><li><strong>活跃社区</strong>：Supabase 拥有一个活跃的开发者社区，提供丰富的学习资源、示例项目和支持。</li></ul><h4 id="9-适用场景"><a href="#9-适用场景" class="headerlink" title="9. 适用场景"></a>9. 适用场景</h4><p>Supabase 非常适合需要快速开发原型、MVP（最小可行产品）或全栈应用的开发者。其主要适用场景包括：</p><ul><li><strong>数据驱动应用</strong>：例如仪表板、实时监控、数据可视化等。</li><li><strong>用户管理和社交应用</strong>：需要复杂的用户管理和认证功能。</li><li><strong>移动端应用</strong>：通过 Flutter SDK 快速构建移动应用的后端。</li><li><strong>实时功能需求</strong>：例如聊天应用、协作工具或其他需要数据实时同步的应用。</li></ul><h3 id="二、使用supabase创建tables"><a href="#二、使用supabase创建tables" class="headerlink" title="二、使用supabase创建tables"></a>二、使用supabase创建tables</h3><ol><li><p>用GitHub账号登陆后创建一个project</p></li><li><p>思考需要的data table（本次项目几乎没有ui state而都是global state）</p></li><li><p>创建table，并且思考table之间的连接（比如booking要将guest和cabin连接起来）</p></li><li><p>在Authentication中的Policies选项中可以设置每个table的访问权限</p></li><li><p>在API Docs中可以查看访问table的api</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240921205233405.png" alt="image-20240921205233405"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240921205658958.png" alt="image-20240921205658958"></p><h3 id="三、连接React项目和supabase"><a href="#三、连接React项目和supabase" class="headerlink" title="三、连接React项目和supabase"></a>三、连接React项目和supabase</h3><p>⭕<code>npm install @supabase/supabase-js</code></p><p>⭕在services文件夹中新建supabase.js，内容如下：（从api docs搬运）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createClient &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@supabase/supabase-js&#x27;</span>;<br><span class="hljs-keyword">const</span> supabaseUrl = <span class="hljs-string">&#x27;https://mmyxdnpmmlqmyjxjypmw.supabase.co&#x27;</span>;<br><span class="hljs-keyword">const</span> supabaseKey = process.<span class="hljs-property">env</span>.<span class="hljs-property">SUPABASE_KEY</span>;<br><span class="hljs-keyword">const</span> supabase = <span class="hljs-title function_">createClient</span>(supabaseUrl, supabaseKey);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> supabase;<br></code></pre></td></tr></table></figure><p>✅将supabaseKey的内容替换成settings-&gt;API-&gt;Project API keys-&gt;(anon public)的key</p><p>⭕在services文件夹中建立apiCabins.js（为每个table都建立一个这样的文件，放置与api获取数据有关的函数）。查询api Docs目录选择想要查询的内容，copy相应js代码段到函数中。</p><p>（连接成功，好顺利……新技术就是好啊🤗）</p><p>⭕在supabase网站（个人项目主页的）的Storage中点击<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922095908254.png" alt="image-20240922095908254" style="zoom: 67%;" />，创建两个Buckets：avatars（存储用户头像）；cabin-images（存储木屋图片）。均设置为public。图片可直接拖动过去，点击图片，点击<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240922100118322.png" alt="image-20240922100118322" style="zoom:67%;" />，就可以直接在项目中访问它。在table中也可以将相应的url插入表单。</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程17-Thewildoasis项目起步</title>
    <link href="/2024/09/20/react%E8%AF%BE%E7%A8%8B17-Thewildoasis%E9%A1%B9%E7%9B%AE%E8%B5%B7%E6%AD%A5/"/>
    <url>/2024/09/20/react%E8%AF%BE%E7%A8%8B17-Thewildoasis%E9%A1%B9%E7%9B%AE%E8%B5%B7%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>全新的项目😼😼😼 本节重点：styled component</p><span id="more"></span><h3 id="一、项目分析（懒得打字版）"><a href="#一、项目分析（懒得打字版）" class="headerlink" title="一、项目分析（懒得打字版）"></a>一、项目分析（懒得打字版）</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165341339.png" alt="image-20240920165341339"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165419677.png" alt="image-20240920165419677"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165504593.png" alt="image-20240920165504593"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165522320.png" alt="image-20240920165522320"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240920165545636.png" alt="image-20240920165545636"></p><p>✅安装eslint和router见课程十四</p><h3 id="二、Styled-Components"><a href="#二、Styled-Components" class="headerlink" title="二、Styled Components"></a>二、Styled Components</h3><blockquote><p>怎么prettier需要自己配置文件了呀，不然就不能用，解决了半天，栓Q……</p><p>要先在根目录创建一个.prettierrc并提供基本配置:{  “singleQuote”: true,  “trailingComma”: “es5” }</p></blockquote><p>⭕ <code>npm i styled-components</code></p><p>⭕安装<code>vscode-styled-components</code>拓展使得css代码高亮</p><p>⭕<a href="https://styled-components.com/">https://styled-components.com/</a></p><h4 id="（1）基本用法"><a href="#（1）基本用法" class="headerlink" title="（1）基本用法"></a>（1）基本用法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Main</span> = styled.<span class="hljs-property">main</span><span class="hljs-string">`</span><br><span class="hljs-string">  background-color: var(--color-grey-200);</span><br><span class="hljs-string">  padding: 4rem 4.8rem 6.4rem;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h4 id="（2）属性"><a href="#（2）属性" class="headerlink" title="（2）属性"></a>（2）属性</h4><h5 id="1、-as-属性-："><a href="#1、-as-属性-：" class="headerlink" title="1、**as 属性**："></a>1、**<code>as</code> 属性**：</h5><ul><li><code>as</code> 属性允许你更改组件的根元素。例如，如果你有一个 <code>styled.button</code>，你可以使用 <code>as=&quot;a&quot;</code> 将其渲染为一个链接，而不是按钮。</li><li><code>as</code> 可以动态地根据需要更改渲染的 HTML 元素，非常灵活。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">StyledButton</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`</span><br><span class="hljs-string">  background-color: blue;</span><br><span class="hljs-string">  color: white;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 使用 as 属性</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StyledButton</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>Go Home<span class="hljs-tag">&lt;/<span class="hljs-name">StyledButton</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2、-type-属性-："><a href="#2、-type-属性-：" class="headerlink" title="2、**type 属性**："></a>2、**<code>type</code> 属性**：</h5><ul><li><code>type</code> 属性通常用于原生 HTML 元素（如 <code>&lt;input&gt;</code> 或 <code>&lt;button&gt;</code>），指定元素的类型。例如，按钮的类型可以是 <code>button</code>、<code>submit</code> 或 <code>reset</code>。</li><li><code>type</code> 属性是一个 HTML 属性，并不涉及 styled-components 的样式处理。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">StyledButton</span> type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<span class="hljs-title class_">Submit</span>&lt;/<span class="hljs-title class_">StyledButton</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="3、role属性"><a href="#3、role属性" class="headerlink" title="3、role属性"></a>3、<code>role</code>属性</h5><p><code>role</code> 是一个标准的 HTML 属性，用于指定元素的角色，通常与无障碍访问（Accessibility，简称 a11y）相关。它告诉屏幕阅读器等辅助技术，这个元素应该如何被解读或交互。</p><p><strong>使用场景</strong>：</p><ol><li>使用 <code>as</code> 可以在同一个 styled 组件上进行多种表现形式的渲染，增加了组件的复用性。</li><li><code>type</code> 用于控制元素的行为，通常在表单相关组件中使用。</li></ol><p>总的来说，<code>as</code> 提供了更大的灵活性和复用性，而 <code>type</code> 则是与元素行为相关的标准 HTML 属性。选择使用 <code>as</code> 而不是 <code>type</code> 主要是因为它与 styled-components 的设计理念相契合，允许更好地控制组件的呈现形式。</p><h4 id="（3）默认props"><a href="#（3）默认props" class="headerlink" title="（3）默认props"></a>（3）默认props</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Row</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;vertical&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（4）装饰第三方包内组件"><a href="#（4）装饰第三方包内组件" class="headerlink" title="（4）装饰第三方包内组件"></a>（4）装饰第三方包内组件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">StyledNavLink</span> = <span class="hljs-title function_">styled</span>(<span class="hljs-title class_">NavLink</span>)<br></code></pre></td></tr></table></figure><p>使用括号链接第三方包内组件</p><h4 id="（5）数组props"><a href="#（5）数组props" class="headerlink" title="（5）数组props"></a>（5）数组props</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> styled, &#123; css &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span>;<br><br><span class="hljs-keyword">const</span> sizes = &#123;<br>  <span class="hljs-attr">small</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.4rem</span> <span class="hljs-number">0.8rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-transform</span>: uppercase;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  `</span>,<br>  <span class="hljs-attr">medium</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span> <span class="hljs-number">1.6rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;</span><br><span class="language-css">  `</span>,<br>  <span class="hljs-attr">large</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span> <span class="hljs-number">2.4rem</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;</span><br><span class="language-css">  `</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> variations = &#123;<br>  <span class="hljs-attr">primary</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-brand-<span class="hljs-number">50</span>);</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-brand-<span class="hljs-number">600</span>);</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-brand-<span class="hljs-number">700</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  `</span>,<br>  <span class="hljs-attr">secondary</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-grey-<span class="hljs-number">600</span>);</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--color-grey-<span class="hljs-number">0</span>);</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--color-grey-<span class="hljs-number">200</span>);</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-grey-<span class="hljs-number">50</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  `</span>,<br>  <span class="hljs-attr">danger</span>: css`<span class="language-css"></span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-red-<span class="hljs-number">100</span>);</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-red-<span class="hljs-number">700</span>);</span><br><span class="language-css"></span><br><span class="language-css">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-red-<span class="hljs-number">800</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  `</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`</span><br><span class="hljs-string">  border: none;</span><br><span class="hljs-string">  border-radius: var(--border-radius-sm);</span><br><span class="hljs-string">  box-shadow: var(--shadow-sm);</span><br><span class="hljs-string"></span><br><span class="hljs-string">  <span class="hljs-subst">$&#123;(props) =&gt; sizes[props.size]&#125;</span></span><br><span class="hljs-string">  <span class="hljs-subst">$&#123;(props) =&gt; variations[props.variation]&#125;</span></span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-title class_">Button</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>  <span class="hljs-attr">variation</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,<br>  <span class="hljs-attr">size</span>: <span class="hljs-string">&#x27;medium&#x27;</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Button</span>;<br></code></pre></td></tr></table></figure><h3 id="三、零碎"><a href="#三、零碎" class="headerlink" title="三、零碎"></a>三、零碎</h3><h4 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h4><p>⭕<code>npm i react-icons</code>  图标集： <a href="https://react-icons.github.io/react-icons/">https://react-icons.github.io/react-icons/</a></p><h4 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">AppLayout</span> /&gt;</span>&#125;&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">index</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Navigate</span> <span class="hljs-attr">replace</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;dashboard&quot;</span> /&gt;</span>&#125; /&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将layout组件包裹住其他的Route，使用<Outlet />组件承接其他组件内容</p><p>index关键字认证主页面，replace关键字替代历史url</p><h4 id="（3）styled-component的其他重要属性"><a href="#（3）styled-component的其他重要属性" class="headerlink" title="（3）styled component的其他重要属性"></a>（3）styled component的其他重要属性</h4><h5 id="1、-ref-属性-："><a href="#1、-ref-属性-：" class="headerlink" title="1、**ref 属性**："></a>1、**<code>ref</code> 属性**：</h5><ul><li><code>ref</code> 属性允许你访问组件的 DOM 节点或 class 实例，用于直接操作 DOM，常见于需要获取元素引用的场景，例如焦点管理、动画、滚动等。</li></ul><h5 id="2、-key-属性-："><a href="#2、-key-属性-：" class="headerlink" title="2、**key 属性**："></a>2、**<code>key</code> 属性**：</h5><ul><li><code>key</code> 是 React 用来标识哪些元素被修改、添加或移除的特殊属性，尤其在渲染列表时非常重要。<code>styled-components</code> 内的组件同样遵循这个规则。</li></ul><h5 id="3、-className-属性-："><a href="#3、-className-属性-：" class="headerlink" title="3、**className 属性**："></a>3、**<code>className</code> 属性**：</h5><ul><li><code>className</code> 属性允许你给 <code>styled-component</code> 组件添加额外的 class 名，这对于在一个组件中应用多个样式规则或与外部 CSS 集成时特别有用。</li></ul><h5 id="4、-style-属性-："><a href="#4、-style-属性-：" class="headerlink" title="4、**style 属性**："></a>4、**<code>style</code> 属性**：</h5><ul><li><code>style</code> 属性是内联样式，可以直接在组件上设置行内样式，用于一些动态样式的设置，但不建议与 <code>styled-components</code> 的样式系统大量混用。</li></ul><h5 id="5、-style-属性-："><a href="#5、-style-属性-：" class="headerlink" title="5、**style 属性**："></a>5、**<code>style</code> 属性**：</h5><ul><li><code>style</code> 属性是内联样式，可以直接在组件上设置行内样式，用于一些动态样式的设置，但不建议与 <code>styled-components</code> 的样式系统大量混用。</li></ul><h5 id="6、children、onClick、defaultvalue等"><a href="#6、children、onClick、defaultvalue等" class="headerlink" title="6、children、onClick、defaultvalue等"></a>6、children、onClick、defaultvalue等</h5>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程16-继续使用Redux构建pizza项目</title>
    <link href="/2024/09/19/react%E8%AF%BE%E7%A8%8B16-%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8Redux%E6%9E%84%E5%BB%BApizza%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/09/19/react%E8%AF%BE%E7%A8%8B16-%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8Redux%E6%9E%84%E5%BB%BApizza%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>由于这部分内容比较简单，就简略记录一下重点叭（Redux快被我忘得一干二净了🥲🥲）</p><span id="more"></span><h4 id="（1）useSelector"><a href="#（1）useSelector" class="headerlink" title="（1）useSelector"></a>（1）useSelector</h4><p>在前面如果我们想要获取store里的状态，都是用useSelector在相应的组件函数里直接获取。但是现在发现其实更推荐在Slice文件中集中地写入selector函数，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCart</span> = (<span class="hljs-params">state</span>) =&gt; state.<span class="hljs-property">cart</span>.<span class="hljs-property">cart</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTotalCartQuantity</span> = (<span class="hljs-params">state</span>) =&gt;<br>  state.<span class="hljs-property">cart</span>.<span class="hljs-property">cart</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item.<span class="hljs-property">quantity</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTotalCartPrice</span> = (<span class="hljs-params">state</span>) =&gt;<br>  state.<span class="hljs-property">cart</span>.<span class="hljs-property">cart</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item.<span class="hljs-property">totalPrice</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这样的话如果将来需要改变某个状态名字，就可以只在这里修改一次了。</p><h4 id="（2）？？运算符"><a href="#（2）？？运算符" class="headerlink" title="（2）？？运算符"></a>（2）？？运算符</h4><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCurrentQuantityById</span> = (<span class="hljs-params">id</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span><br>  state.<span class="hljs-property">cart</span>.<span class="hljs-property">cart</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">pizzaId</span> === id)?.<span class="hljs-property">quantity</span> ?? <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p><code>??</code> 是<strong>空值合并运算符</strong>（Nullish Coalescing Operator）。它用于在左侧表达式为 <code>null</code> 或 <code>undefined</code> 时，返回右侧的值。</p><h4 id="（3）caseReducers"><a href="#（3）caseReducers" class="headerlink" title="（3）caseReducers"></a>（3）caseReducers</h4><p>在购物车中实现增加和减少pizza数量的时候遇到了老问题，就是pizza的数量会变成负值。我试图解决这个问题，于是写了一行代码：<code>if (!quantity) return;</code>这样如果pizza的数量减到0之后就不会呈现这个pizza，也就无法再使它的数量减下去了。然而随后又遇到了另一个问题，就是把所有pizza数量减为0的时候，没有展示预设的空购物车界面，也就是说cart的长度不为0，于是我得到cartprice，用它来决定是否展示空购物车界面。</p><p>但是很明显不是正确的方法，因为在store里，这时候仍旧有这些quantity为0的pizza的元素，只是个数为0而已，最好的办法是删除这些元素。于是可以在slice里的dcrease函数中添加代码：</p><p><code>if (item.quantity === 0) cartSlice.caseReducers.deleteItem(state, action);</code></p><h4 id="（4）creatAsyncThunk"><a href="#（4）creatAsyncThunk" class="headerlink" title="（4）creatAsyncThunk"></a>（4）creatAsyncThunk</h4><p><code>createAsyncThunk</code> 是 Redux Toolkit 提供的一个功能，用来简化在 Redux 中处理异步逻辑的操作。它自动生成相应的 action 类型并管理异步请求的生命周期，如 <code>pending</code>、<code>fulfilled</code> 和 <code>rejected</code> 状态，减少了手动书写异步逻辑的工作量。</p><p><code>createAsyncThunk</code> 的优点：</p><ol><li><strong>自动生成 action</strong>：无需手动编写 <code>pending</code>、<code>fulfilled</code> 和 <code>rejected</code> action，简化了代码。</li><li><strong>内置的错误处理机制</strong>：可以使用 <code>rejectWithValue</code> 返回自定义的错误信息。</li><li><strong>统一的异步逻辑管理</strong>：通过 <code>extraReducers</code> 来处理不同状态的逻辑，使代码更加可读。</li></ol><p>下列这段代码可以和课程13中的Thunk做对比。</p><p>首先，传入动作类型和需要执行的异步函数，一旦action被派遣，这里的函数就会被执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchAddress = <span class="hljs-title function_">createAsyncThunk</span>(<br>  <span class="hljs-string">&#x27;user/fetchAddress&#x27;</span>,<br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 1) We get the user&#x27;s geolocation position</span><br>    <span class="hljs-keyword">const</span> positionObj = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getPosition</span>();<br>    <span class="hljs-keyword">const</span> position = &#123;<br>      <span class="hljs-attr">latitude</span>: positionObj.<span class="hljs-property">coords</span>.<span class="hljs-property">latitude</span>,<br>      <span class="hljs-attr">longitude</span>: positionObj.<span class="hljs-property">coords</span>.<span class="hljs-property">longitude</span>,<br>    &#125;;<br><br>    <span class="hljs-comment">// 2) Then we use a reverse geocoding API to get a description of the user&#x27;s address, so we can display it the order form, so that the user can correct it if wrong</span><br>    <span class="hljs-keyword">const</span> addressObj = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getAddress</span>(position);<br>    <span class="hljs-keyword">const</span> address = <span class="hljs-string">`<span class="hljs-subst">$&#123;addressObj?.locality&#125;</span>, <span class="hljs-subst">$&#123;addressObj?.city&#125;</span> <span class="hljs-subst">$&#123;addressObj?.postcode&#125;</span>, <span class="hljs-subst">$&#123;addressObj?.countryName&#125;</span>`</span>;<br><br>    <span class="hljs-comment">// 3) Then we return an object with the data that we are interested in</span><br>    <span class="hljs-keyword">return</span> &#123; position, address &#125;;<br>  &#125;,<br>);<br></code></pre></td></tr></table></figure><h4 id="（5）value和defaultValue"><a href="#（5）value和defaultValue" class="headerlink" title="（5）value和defaultValue"></a>（5）value和defaultValue</h4><p><code>value</code></p><ul><li><strong>受控组件</strong>：当使用 <code>value</code> 属性时，表单元素的值完全由 React 组件的状态控制。这种方式称为“受控组件”（controlled component）。</li><li><strong>实时同步</strong>：<code>value</code> 需要与组件的状态保持同步，当输入发生变化时，必须通过状态更新来改变值。通常搭配 <code>onChange</code> 事件来更新状态。</li></ul><p><code>defaultValue</code></p><ul><li><strong>非受控组件</strong>：使用 <code>defaultValue</code> 时，表单元素的初始值仅在组件首次渲染时设置，之后它的值不再由 React 控制。这种方式称为“非受控组件”（uncontrolled component）。</li><li><strong>仅初始化</strong>：<code>defaultValue</code> 仅用于设置元素的初始值，表单控件在用户输入后会自己管理其值，React 不再负责后续的变化。</li></ul><h4 id="（6）fetcher"><a href="#（6）fetcher" class="headerlink" title="（6）fetcher"></a>（6）fetcher</h4><p>使用 <code>useFetcher</code> 钩子来处理非导航相关的表单提交，适合需要局部更新或是处理背景请求的场景。<code>fetcher.Form</code> 创建了一个 <code>&lt;form&gt;</code>，并且使用 <code>PATCH</code> 方法提交数据。这种方式让 <code>react-router</code> 能够在不刷新整个页面的情况下局部提交数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useFetcher &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../ui/Button&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; updateOrder &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../services/apiRestaurant&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">UpdateOrder</span>(<span class="hljs-params">&#123; order &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> fetcher = <span class="hljs-title function_">useFetcher</span>();<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">fetcher.Form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;PATCH&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Make priority<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">fetcher.Form</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">UpdateOrder</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">&#123; request, params &#125;</span>) &#123;<br>  <span class="hljs-comment">// console.log(&#x27;update&#x27;);</span><br>  <span class="hljs-keyword">const</span> data = &#123; <span class="hljs-attr">priority</span>: <span class="hljs-literal">true</span> &#125;;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">updateOrder</span>(params.<span class="hljs-property">orderId</span>, data);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在没有数据并且 <code>fetcher</code> 处于空闲 (<code>idle</code>) 状态时，通过 <code>fetcher.load(&#39;/menu&#39;)</code> 来发起请求加载菜单数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!fetcher.<span class="hljs-property">data</span> &amp;&amp; fetcher.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;idle&#x27;</span>) fetcher.<span class="hljs-title function_">load</span>(<span class="hljs-string">&#x27;/menu&#x27;</span>);<br>  &#125;,<br>  [fetcher.<span class="hljs-property">state</span>, fetcher.<span class="hljs-property">data</span>],<br>);<br></code></pre></td></tr></table></figure><h4 id="（7）join"><a href="#（7）join" class="headerlink" title="（7）join"></a>（7）join</h4><p><code>join()</code> 函数主要用于将一个列表或数组中的元素连接成一个字符串。它通常用于将多个字符串拼接在一起，中间插入指定的分隔符。</p><p><code>array.join(separator);</code></p><ul><li>**<code>separator</code>**：可选参数。指定分隔数组元素的字符。如果未指定，默认使用逗号 <code>,</code> 作为分隔符。</li><li>在没有指定 <code>separator</code> 时，默认使用逗号 <code>,</code> 分隔。</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程15-使用Tailwind设计项目界面</title>
    <link href="/2024/09/13/react%E8%AF%BE%E7%A8%8B15-%E4%BD%BF%E7%94%A8Tailwind%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE%E7%95%8C%E9%9D%A2/"/>
    <url>/2024/09/13/react%E8%AF%BE%E7%A8%8B15-%E4%BD%BF%E7%94%A8Tailwind%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE%E7%95%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>本次课程学习Tailwind，并使用它来设计fast pizza的界面🫡。</p><span id="more"></span><p>⭕<a href="https://tailwindcss.com/docs/installation">https://tailwindcss.com/docs/installation</a>（官网）</p><p>⭕<a href="https://tailwind.org.cn/docs/installation%EF%BC%88%E4%B8%AD%E6%96%87%E7%BD%91%E5%9D%80%EF%BC%89">https://tailwind.org.cn/docs/installation（中文网址）</a></p><p>按照步骤去使用</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240913103504395.png" alt="image-20240913103504395"></p><p>但是在css文件中会报错：<code>Unknown at rule @tailwindcss(unknownAtRules)</code></p><p>解决方法是打开setting.json文件，在里面添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><br> <span class="hljs-attr">&quot;*.css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tailwindcss&quot;</span><br><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>（思考了一个小时的问题😇，世界上还是聪明的人多哈）</p><p>⭕安装Tailwind CSS拓展</p><p>⭕<a href="https://github.com/tailwindlabs/prettier-plugin-tailwindcss?tab=readme-ov-file">https://github.com/tailwindlabs/prettier-plugin-tailwindcss?tab=readme-ov-file</a></p><p>安装prettier-plugin-tailwindcss插件：</p><p><code>npm install -D prettier prettier-plugin-tailwindcss</code></p><p>然后进行配置，新建prettier.config.cjs文件，在里面配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">module.exports = <span class="hljs-punctuation">&#123;</span><br>  plugins<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;prettier-plugin-tailwindcss&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-comment">// singleQuote: true,</span><br><span class="hljs-punctuation">&#125;</span>;<br></code></pre></td></tr></table></figure><p>这样可以自动排序类名</p><p>（我怎么配置了两个小时……我真的流泪了。。。。）</p><p>🆒<a href="https://css-tricks.com/emoji-as-a-favicon/">https://css-tricks.com/emoji-as-a-favicon/</a></p><h3 id="一、学习初步使用"><a href="#一、学习初步使用" class="headerlink" title="一、学习初步使用"></a>一、学习初步使用</h3><h4 id="（1）color"><a href="#（1）color" class="headerlink" title="（1）color"></a>（1）color</h4><p>在tailwind的官网中搜索text color、background color查找具体配置说明</p><p>index.html中也可以进行配置，来设置全局style</p><h4 id="（2）Text"><a href="#（2）Text" class="headerlink" title="（2）Text"></a>（2）Text</h4><p>font size（大小）、font weight（加粗）、uppercase（大写）、letter spacing（间距）</p><h4 id="（3）space"><a href="#（3）space" class="headerlink" title="（3）space"></a>（3）space</h4><p>margin（外边距）、padding（内边距）、border（边框）</p><p><strong><code>space</code><strong>：主要用于 Tailwind CSS 中，用于设置</strong>多个子元素</strong>之间的间距，不改变第一个和最后一个子元素的外边距。例如，<code>space-x-4</code> 会在每个子元素之间增加 4 的水平间距，但不会影响最外层的左右间距。</p><p>display：</p><ul><li>**<code>block</code>**：用来定义内容需要占满一整行的元素（如段落、容器等）。</li><li>**<code>inline</code>**：适合内容较短、需要与其他元素同一行显示的情况（如文字、链接等）。</li><li>**<code>inline-block</code>**：用于需要水平排列的元素，并且每个元素有独立的宽高控制（如导航栏中的按钮）。</li><li>**<code>flex</code>**：用来创建灵活的、响应式的布局，子元素可以自动调整排列。</li><li>**<code>grid</code>**：适合构建复杂的、结构化的页面布局，子元素可以按照网格规则自动排布。</li><li>**<code>none</code>**：用于隐藏不需要显示的元素。</li></ul><h4 id="（4）断点"><a href="#（4）断点" class="headerlink" title="（4）断点"></a>（4）断点</h4><p><code>breakpoints</code>（断点）用于实现响应式设计。断点定义了在不同的屏幕宽度范围内，如何应用不同的样式规则。这使得可以根据设备的屏幕大小调整页面布局和样式，以提供更好的用户体验。</p><ul><li><strong><code>sm</code></strong>: 小屏幕（手机，最小宽度 640px）</li><li><strong><code>md</code></strong>: 中等屏幕（平板，最小宽度 768px）</li><li><strong><code>lg</code></strong>: 大屏幕（桌面，最小宽度 1024px）</li><li><strong><code>xl</code></strong>: 超大屏幕（大桌面，最小宽度 1280px）</li><li><strong><code>2xl</code></strong>: 超超大屏幕（超大桌面，最小宽度 1536px）</li></ul><p>eg：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;!-- 默认字体大小，当屏幕宽度达到或超过 768px 时字体变大 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-base md:text-lg&quot;</span>&gt;</span>响应式字体大小<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果 Tailwind 的默认断点不符合你的需求，可以在 <code>tailwind.config.js</code> 文件中进行自定义配置。例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 添加一个新的断点 3xl，用于在屏幕宽度达到或超过 1600px 时应用样式。</span><br>module.exports = <span class="hljs-punctuation">&#123;</span><br>  theme<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    extend<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      screens<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        &#x27;<span class="hljs-number">3</span>xl&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">1600</span>px&#x27;<span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="（5）Flexbox"><a href="#（5）Flexbox" class="headerlink" title="（5）Flexbox"></a>（5）Flexbox</h4><p>items-center : 用于在 Flexbox 容器的交叉轴（垂直轴）上将所有子元素居中对齐。</p><p>justify-between :用于在 Flexbox 容器的主轴（水平轴）上，将所有子元素之间的空间均匀分配。</p><h4 id="（6）Grid"><a href="#（6）Grid" class="headerlink" title="（6）Grid"></a>（6）Grid</h4><p><code>grid h-screen grid-rows-[auto_1fr_auto]</code></p><h4 id="（7）Form-element"><a href="#（7）Form-element" class="headerlink" title="（7）Form element"></a>（7）Form element</h4><p>​    <code>className=&quot;w-28 rounded-full bg-yellow-100 px-4 py-2 text-sm transition-all duration-300 placeholder:text-stone-400 focus:outline-none focus:ring focus:ring-yellow-600 focus:ring-opacity-50 sm:w-64 sm:focus:w-72&quot;</code></p><h4 id="（8）重用"><a href="#（8）重用" class="headerlink" title="（8）重用"></a>（8）重用</h4><h5 id="1、在css中编写类名"><a href="#1、在css中编写类名" class="headerlink" title="1、在css中编写类名"></a>1、在css中编写类名</h5><p>此时在className&#x3D;“input”就可以运用这个类名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@layer</span> components &#123;<br>  <span class="hljs-selector-class">.input</span> &#123;<br>    <span class="hljs-keyword">@apply</span> w-full rounded-full border border-stone-<span class="hljs-number">200</span> px-<span class="hljs-number">4</span> py-<span class="hljs-number">2</span> text-sm <span class="hljs-attribute">placeholder</span>:text-stone-<span class="hljs-number">400</span> <span class="hljs-attribute">focus</span>:outline-none <span class="hljs-attribute">focus</span>:ring <span class="hljs-attribute">focus</span>:ring-yellow-<span class="hljs-number">300</span> <span class="hljs-attribute">md</span>:px-<span class="hljs-number">6</span> <span class="hljs-attribute">md</span>:py-<span class="hljs-number">3</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、在React中新建组件"><a href="#2、在React中新建组件" class="headerlink" title="2、在React中新建组件"></a>2、在React中新建组件</h5><p>eg：这里创建了一个既可以被当作button又可以被当作Link的可重用组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">LinkButton</span>(<span class="hljs-params">&#123; children, to &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">const</span> className = <span class="hljs-string">&#x27;text-sm text-blue-300 hover:text-blue-600 hover:underline&#x27;</span>;<br><br>  <span class="hljs-keyword">if</span> (to === <span class="hljs-string">&#x27;-1&#x27;</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(-1)&#125; className=&#123;className&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-symbol">&amp;larr;</span> Go back</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;to&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">LinkButton</span>;<br><br></code></pre></td></tr></table></figure><h4 id="（9）配置"><a href="#（9）配置" class="headerlink" title="（9）配置"></a>（9）配置</h4><p>可以查看默认配置</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240918155917608.png" alt="image-20240918155917608" style="zoom:50%;" /><p>修改默认配置：在<code>tailwind.config.js</code>中：</p><p>（按照默认配置文件的格式）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */</span><br><span class="hljs-comment">//eslint-disable-next-line  </span><br>export default <span class="hljs-punctuation">&#123;</span><br>  content<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;./index.html&#x27;<span class="hljs-punctuation">,</span> &#x27;./src<span class="hljs-comment">/**/</span>*.<span class="hljs-punctuation">&#123;</span>js<span class="hljs-punctuation">,</span>ts<span class="hljs-punctuation">,</span>jsx<span class="hljs-punctuation">,</span>tsx<span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  theme<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    fontFamily<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      sans<span class="hljs-punctuation">:</span> &#x27;Roboto Mono<span class="hljs-punctuation">,</span> monospace&#x27;<span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    extend<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  plugins<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span>;<br></code></pre></td></tr></table></figure><h4 id="（10）type"><a href="#（10）type" class="headerlink" title="（10）type"></a>（10）type</h4><p>Button组件：</p><p>接收type props，并使用styles来应用不同类名</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; children, disabled, to, type &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> base =<br>    <span class="hljs-string">&#x27;inline-block rounded-full bg-yellow-500 uppercase tracking-wide text-stone-800 transition-colors duration-300 hover:bg-yellow-300 focus:bg-yellow-300 focus:outline-none focus:ring focus:ring-yellow-300 focus:ring-offset-2 disabled:cursor-not-allowed&#x27;</span>;<br><br>  <span class="hljs-keyword">const</span> styles = &#123;<br>    <span class="hljs-attr">primary</span>: base + <span class="hljs-string">&#x27; px-4 py-3 md:px-6 md:py-4&#x27;</span>,<br>    <span class="hljs-attr">small</span>: base + <span class="hljs-string">&#x27; px-4 py-2 md:px-5 md:py-2.5 text-xs&#x27;</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (to)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles[type]&#125;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;to&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br>    );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;disabled&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles[type]&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Button</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程14.1-React-Router专题</title>
    <link href="/2024/09/11/react%E8%AF%BE%E7%A8%8B14.1-React-Router%E4%B8%93%E9%A2%98/"/>
    <url>/2024/09/11/react%E8%AF%BE%E7%A8%8B14.1-React-Router%E4%B8%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本篇文章重重整理一下React Router的工具和用法集合。</p><span id="more"></span><h3 id="一、useNavigate"><a href="#一、useNavigate" class="headerlink" title="一、useNavigate"></a>一、useNavigate</h3><p>用于通过编程方式在 React 应用中进行导航（页面跳转）。相比于传统的 <code>&lt;a&gt;</code> 标签或者 <code>Link</code> 组件，<code>useNavigate</code> 提供了更灵活的方式来实现跳转，例如基于用户交互或某些条件时自动跳转。</p><h4 id="（1）基本用法"><a href="#（1）基本用法" class="headerlink" title="（1）基本用法"></a>（1）基本用法</h4><p><code>useNavigate</code> 返回一个 <code>navigate</code> 函数，可以调用该函数并传入路径，实现导航。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>(); <span class="hljs-comment">// 使用 useNavigate 钩子</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">goToAboutPage</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/about&quot;</span>); <span class="hljs-comment">// 编程式导航到 &quot;/about&quot; 路由</span><br>  &#125;;<br></code></pre></td></tr></table></figure><p>跳转类型</p><ul><li><strong>绝对路径</strong>：从根路径开始，如 <code>navigate(&quot;/about&quot;)</code>。</li><li><strong>相对路径</strong>：相对于当前路径，如 <code>navigate(&quot;profile&quot;)</code>。</li></ul><h4 id="（2）replace替换历史记录"><a href="#（2）replace替换历史记录" class="headerlink" title="（2）replace替换历史记录"></a>（2）replace替换历史记录</h4><p>默认情况下，<code>navigate</code> 会在浏览器的历史记录中添加一个新条目，这样用户可以通过浏览器的“后退”按钮回到之前的页面。如果不想让用户通过后退按钮返回，可以使用 <code>replace</code> 选项。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/dashboard&quot;</span>, &#123; <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;);<br></code></pre></td></tr></table></figure><p>这样跳转后，<code>/dashboard</code> 会替换当前的页面，用户不能通过“后退”按钮返回到原页面。</p><h4 id="（3）前进和后退"><a href="#（3）前进和后退" class="headerlink" title="（3）前进和后退"></a>（3）前进和后退</h4><p><code>useNavigate</code> 还可以像浏览器的前进和后退按钮一样，基于历史记录进行导航。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 后退到上一个页面</span><br><span class="hljs-title function_">navigate</span>(-<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 前进到下一个页面</span><br><span class="hljs-title function_">navigate</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h4 id="（4）传递状态"><a href="#（4）传递状态" class="headerlink" title="（4）传递状态"></a>（4）传递状态</h4><p>可以通过 <code>navigate</code> 传递一些状态信息到目标页面，这些状态信息不会显示在 URL 中，但可以在目标页面中通过 <code>useLocation</code> 钩子来读取。</p><h4 id="（5）阻止导航"><a href="#（5）阻止导航" class="headerlink" title="（5）阻止导航"></a>（5）阻止导航</h4><p>在某些情况下，你可能需要阻止导航（例如用户没有保存表单数据时）。React Router 提供了 <code>usePrompt</code> 来处理这个需求。</p><h4 id="（6）注意事项"><a href="#（6）注意事项" class="headerlink" title="（6）注意事项"></a>（6）注意事项</h4><p>为什么 <code>navigate</code> 通常在回调函数或 <code>useEffect</code> 中使用？</p><ol><li><strong>避免过早执行</strong>：<code>navigate</code> 是一个会引起页面重定向的操作，调用它会导致组件状态发生改变。如果你在组件首次渲染的过程中调用它，可能会引发不必要的重渲染或不一致的状态。因此，它通常在回调函数（如 <code>onClick</code>）中使用，或放在 <code>useEffect</code> 中，确保页面已经完成初始渲染，且有合适的时机来执行导航操作。</li><li><strong>确保页面逻辑的正确性</strong>：像表单提交或身份验证这样的场景，通常在特定的回调或生命周期阶段发生。在这些阶段使用 <code>navigate</code> 能确保导航是在合适的时刻执行，不会打断应用的正常渲染逻辑。</li></ol><p>在用户交互（如按钮点击）时，可以在事件处理回调中使用 <code>navigate</code></p><h3 id="二、useNavigation"><a href="#二、useNavigation" class="headerlink" title="二、useNavigation"></a>二、useNavigation</h3><p><code>useNavigation</code> 是 React Router v6 提供的一个钩子，用于获取当前导航（页面跳转）的状态。它可以帮助你在组件中监控导航的进展，尤其是用于处理页面加载状态、异步数据请求等情况。</p><h4 id="（1）useNavigation-的主要用途"><a href="#（1）useNavigation-的主要用途" class="headerlink" title="（1）useNavigation 的主要用途"></a>（1）<code>useNavigation</code> 的主要用途</h4><ol><li><strong>监控导航状态</strong>：你可以检查当前的导航状态，例如是否处于加载、提交状态。</li><li><strong>显示加载指示器</strong>：可以根据导航状态显示一个“加载中”的提示，以提升用户体验。</li></ol><h4 id="（2）导航状态"><a href="#（2）导航状态" class="headerlink" title="（2）导航状态"></a>（2）导航状态</h4><p>**<code>idle</code>**：空闲状态，没有进行导航操作。</p><p>**<code>loading</code>**：正在加载新的页面或资源。</p><p>**<code>submitting</code>**：当前正在提交数据（例如表单提交）。</p><h3 id="三、Navigate"><a href="#三、Navigate" class="headerlink" title="三、Navigate"></a>三、Navigate</h3><p><code>&lt;Navigate&gt;</code> 组件用于重定向用户到指定的路由。它允许你在特定条件下从一个页面自动跳转到另一个页面，而无需用户手动点击。</p><p><code>&lt;Navigate&gt;</code> 组件的基本用法是将用户从一个路由重定向到另一个路由。你只需要指定 <code>to</code> 属性为目标路径即可。</p><h4 id="replace-属性"><a href="#replace-属性" class="headerlink" title="replace 属性"></a><code>replace</code> 属性</h4><p><code>&lt;Navigate&gt;</code> 组件中的 <code>replace</code> 属性控制是否用新页面替换当前页面在浏览器历史记录中的位置。如果不使用 <code>replace</code>，则默认会将新页面加入浏览器历史记录中，用户可以通过“后退”按钮返回原页面。</p><p>EG：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Route</span> index element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">replace</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;cities&quot;</span> /&gt;</span></span>&#125; /&gt;<br></code></pre></td></tr></table></figure><p><strong>不加 <code>replace</code></strong> 时，浏览器的历史记录中会保存 <code>Navigate</code> 重定向的路径（<code>/</code> -&gt; <code>/cities</code>），导致点击“返回”按钮时，路由会重新从 <code>/</code> 重定向到 <code>/cities</code>，使用户看起来无法退出 <code>CityList</code> 页面。</p><p><strong>加上 <code>replace</code></strong> 后，<code>Navigate</code> 的行为是替换 <code>/</code> 路由，不再保留 <code>/</code> 在历史记录中，这样浏览器返回按钮就不会触发从 <code>/</code> 重定向到 <code>/cities</code> 的循环。</p><h3 id="四、NavLink-和Link"><a href="#四、NavLink-和Link" class="headerlink" title="四、NavLink 和Link"></a>四、NavLink 和Link</h3><p><code>&lt;Link&gt;</code> 是 React Router 中的基础组件，用来创建页面之间的导航链接。它的功能类似于传统的 HTML <code>&lt;a&gt;</code> 标签，但不会引起页面的完整刷新，而是使用 React Router 的路由机制进行无刷新跳转。</p><p><code>&lt;NavLink&gt;</code> 是继承自 <code>&lt;Link&gt;</code> 的组件，除了拥有 <code>&lt;Link&gt;</code> 的所有功能外，还可以动态添加样式和类名来表明当前链接是否处于“选中”状态。它的主要作用是为导航链接添加激活状态，例如当前页面对应的导航项可以显示为高亮。</p><h3 id="五、params参数"><a href="#五、params参数" class="headerlink" title="五、params参数"></a>五、params参数</h3><p><code>params</code> 是 React Router 中路由参数的一个对象，通常用于获取 URL 中的动态部分（路径参数）。在示例代码中，<code>params</code> 是通过 <code>loader</code> 函数的参数对象解构出来的，用来获取 URL 路径中的动态数据，比如 <code>orderId</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">&#123; params &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> order = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getOrder</span>(params.<span class="hljs-property">orderId</span>);<br>  <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>params</code> 对象包含当前路由路径中定义的动态路径参数。在路由配置中使用了类似 <code>/order/:orderId</code> 的路径时，React Router 会将 URL 中对应的 <code>orderId</code> 提取出来，并将其放入 <code>params</code> 对象中。</p><h3 id="六、React-Router-Actions"><a href="#六、React-Router-Actions" class="headerlink" title="六、React Router Actions"></a>六、React Router Actions</h3><p>在 React Router v6 中，<code>Actions</code> 是处理表单提交或其他事件时发送数据到服务器的机制，通常和路由中的 <code>action</code> 函数结合使用。<code>action</code> 用于在特定路由下处理非 GET 请求（例如 POST、PUT、DELETE），在表单提交时或通过 JavaScript 发起的请求中使用。</p><h4 id="（1）基本概念"><a href="#（1）基本概念" class="headerlink" title="（1）基本概念"></a>（1）基本概念</h4><p><strong><code>action</code> 函数</strong>: 用于处理表单提交或其他需要更改数据的请求。它类似于 <code>loader</code> 函数，但专注于处理提交的数据并更新服务器端的状态。<code>action</code> 函数会接收到一些上下文信息（如表单数据和请求参数），并可以返回结果或错误。</p><p><strong><code>useSubmit()</code></strong>: React Router 提供的一个钩子，用来在表单提交时使用 JavaScript 来处理提交操作，避免刷新页面。</p><h4 id="（2）action的基本用法"><a href="#（2）action的基本用法" class="headerlink" title="（2）action的基本用法"></a>（2）action的基本用法</h4><blockquote><p>详细例子请见14节第九模块</p></blockquote><p><strong><code>action</code> 函数</strong>:</p><ul><li><strong>参数 <code>request</code></strong>: <code>action</code> 函数会接收到请求对象 <code>request</code>，包含提交表单的数据、请求类型（如 POST、PUT 等）和其他信息。</li><li><strong><code>request.formData()</code></strong>: 通过 <code>request.formData()</code> 可以获取表单中的数据。</li><li><strong><code>saveOrder(order)</code></strong>: 你可以在 <code>action</code> 中进行服务器端操作，比如保存数据或发送 API 请求。</li><li><strong>返回结果</strong>: <code>action</code> 函数可以返回处理结果，这些结果可以传递给组件进行渲染。</li></ul><h4 id="（3）使用表单与-action"><a href="#（3）使用表单与-action" class="headerlink" title="（3）使用表单与 action"></a>（3）使用表单与 <code>action</code></h4><p>React Router v6 提供了 <code>Form</code> 组件，它会自动与 <code>action</code> 函数配合，提交表单数据而不触发页面刷新。</p><p> <code>&lt; Form method=&quot;POST&quot; action=&quot;/order/new&quot; &gt;</code></p><p><code>action</code>指定提交到哪里，默认是最近路由</p><h4 id="（4）传统表单提交-vs-编程方式提交"><a href="#（4）传统表单提交-vs-编程方式提交" class="headerlink" title="（4）传统表单提交 vs. 编程方式提交"></a>（4）传统表单提交 vs. 编程方式提交</h4><p>在传统表单提交中，用户必须填写表单并点击“提交”按钮来触发提交操作。</p><p>通过编程方式提交表单，表单可以在不需要用户点击提交按钮的情况下被自动提交。可以在其他操作或事件触发时提交表单。通过编程方式提交表单意味着可以使用代码来触发表单提交操作，而不是让用户点击提交按钮。这种灵活性允许用户根据应用逻辑自动执行表单提交，提升用户体验和交互性。</p><p>使用场景：</p><ol><li><strong>自动保存</strong>：当用户修改某个输入字段时，表单可以立即通过编程方式提交并保存数据，而无需点击“保存”按钮。</li><li><strong>异步数据提交</strong>：你可以在某个事件（如点击、鼠标移开、定时器）发生时，自动提交表单数据进行验证或保存。</li><li><strong>根据条件自动提交</strong>：表单可以在某个后台逻辑验证通过或某个条件满足后自动提交，而不让用户手动提交。</li></ol><h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (isAuthenticated) <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/app&quot;</span>, &#123; <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;);<br>  &#125;,<br>  [isAuthenticated, navigate]<br>);<br></code></pre></td></tr></table></figure><p>代码段实现了当网页刷新或者断线导致状态变为未登录时，会自动跳转到app主界面的功能</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程0-八股集合（bushi）</title>
    <link href="/2024/09/11/react%E8%AF%BE%E7%A8%8B0-%E5%85%AB%E8%82%A1%E9%9B%86%E5%90%88%EF%BC%88bushi%EF%BC%89/"/>
    <url>/2024/09/11/react%E8%AF%BE%E7%A8%8B0-%E5%85%AB%E8%82%A1%E9%9B%86%E5%90%88%EF%BC%88bushi%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本篇来记录一下之前偷懒没认真了解的React基础知识😌🥱😪😴</p><span id="more"></span><h4 id="一、default导出和直接export导出的区别"><a href="#一、default导出和直接export导出的区别" class="headerlink" title="一、default导出和直接export导出的区别"></a>一、default导出和直接export导出的区别</h4><ul><li><p><strong>export default</strong>：用于导出模块中的<strong>默认值</strong>，每个模块只能有<strong>一个</strong>默认导出。导入时不需要使用大括号 <code>&#123;&#125;</code>，并且导入时的名称可以任意更改。</p></li><li><p><strong>export（命名导出）</strong>：<code>export</code> 允许导出多个值，导入时必须使用与导出的<strong>名称相同</strong>的名称，并且需要使用大括号 <code>&#123;&#125;</code>。你可以同时导出多个值，也可以导入多个值。<strong>可以通过as关键字重命名</strong>。</p></li></ul><p>两者可以混用。</p><h4 id="二、Data-loading-waterfalls"><a href="#二、Data-loading-waterfalls" class="headerlink" title="二、Data loading waterfalls"></a>二、Data loading waterfalls</h4><p>“Data loading waterfalls” 是一种可能在前端应用中遇到的性能问题，指的是当多个依赖数据的加载请求按照顺序（串行）进行，而不是并行进行时，导致整体加载时间比实际需要的要长。每个请求依赖上一个请求完成后才能开始，就像“瀑布”一样逐渐下落，这种模式会造成延迟，特别是在请求数据量较大或网络较慢的情况下。</p><h4 id="三、promise"><a href="#三、promise" class="headerlink" title="三、promise"></a>三、promise</h4><h4 id="四、suspense"><a href="#四、suspense" class="headerlink" title="四、suspense"></a>四、suspense</h4><h4 id="五、e-preventDefault"><a href="#五、e-preventDefault" class="headerlink" title="五、e.preventDefault();"></a>五、e.preventDefault();</h4><p><code>e.preventDefault()</code> 是 JavaScript 中 <code>Event</code> 对象的方法，用于取消事件的默认行为。它通常用于处理表单提交、链接点击等操作，以便你可以执行自定义逻辑而不是默认的浏览器行为。</p><h4 id="六、模板字面量"><a href="#六、模板字面量" class="headerlink" title="六、模板字面量"></a>六、模板字面量</h4><p>在 JavaScript 中，&#96;&#96;（反引号）用于创建模板字面量（Template Literals），这是一个强大的字符串处理特性。你需要使用反引号来包裹数据时，涉及到字符串插值和多行字符串等情况。</p><ol><li><strong>字符串插值</strong></li></ol><p>当你需要在字符串中插入变量或表达式时，可以使用模板字面量。模板字面量允许你将变量或表达式嵌入到字符串中，使用 <code>$&#123;&#125;</code> 语法：</p><ol start="2"><li><strong>多行字符串</strong></li></ol><p>模板字面量还支持多行字符串，不需要使用反斜杠 <code>\</code> 来换行：</p><ol start="3"><li><strong>表达式插值</strong></li></ol><p>除了简单的变量，模板字面量也支持嵌入表达式：</p><h4 id="七、order"><a href="#七、order" class="headerlink" title="七、order"></a>七、order</h4><p>八、钩子只能在组件内被调用？</p><p>九、StrictMode</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程14-使用Vite构建高级ReactProjiect</title>
    <link href="/2024/09/09/react%E8%AF%BE%E7%A8%8B14-%E4%BD%BF%E7%94%A8Vite%E6%9E%84%E5%BB%BA%E9%AB%98%E7%BA%A7ReactProjiect/"/>
    <url>/2024/09/09/react%E8%AF%BE%E7%A8%8B14-%E4%BD%BF%E7%94%A8Vite%E6%9E%84%E5%BB%BA%E9%AB%98%E7%BA%A7ReactProjiect/</url>
    
    <content type="html"><![CDATA[<p>Jonas老师真的很有鼓舞力😂</p><span id="more"></span><p>之前也使用过Vite来构建项目，但是没仔细分析它和Creact-react-app的区别……本节课居然回到了第一次构建的pizza项目，但是应该会更加modern。</p><h3 id="一、Vite-和-create-react-app-CRA-的区别"><a href="#一、Vite-和-create-react-app-CRA-的区别" class="headerlink" title="一、Vite 和 create-react-app (CRA)的区别"></a>一、<code>Vite</code> 和 <code>create-react-app (CRA)</code>的区别</h3><h4 id="1-启动速度"><a href="#1-启动速度" class="headerlink" title="1. 启动速度"></a>1. <strong>启动速度</strong></h4><ul><li><strong>Vite</strong>：Vite 使用现代的浏览器原生 ES 模块（ESM），按需加载项目中的模块。启动速度非常快，尤其在大型项目中优势明显，因为它只会加载应用程序中实际需要的部分。</li><li><strong>CRA</strong>：CRA 使用 Webpack 进行打包，启动时需要对整个项目进行预打包。这种方式在项目规模较大时，启动速度较慢，尤其是开发环境中的初次构建。</li></ul><h4 id="2-构建速度"><a href="#2-构建速度" class="headerlink" title="2. 构建速度"></a>2. <strong>构建速度</strong></h4><ul><li><strong>Vite</strong>：Vite 使用 <code>esbuild</code> 来进行构建，它是用 Go 语言编写的，构建速度极快。Vite 的热模块替换（HMR）也非常快，几乎是即时更新，提升了开发体验。</li><li><strong>CRA</strong>：CRA 依赖 Webpack 进行构建，构建速度相对较慢，特别是在项目规模增大时，打包时间会显著增加。</li></ul><h4 id="3-开发环境下的模块处理"><a href="#3-开发环境下的模块处理" class="headerlink" title="3. 开发环境下的模块处理"></a>3. <strong>开发环境下的模块处理</strong></h4><ul><li><strong>Vite</strong>：Vite 使用浏览器支持的 ES 模块加载，因此在开发模式下，不需要整体打包，可以按需加载模块，这使得项目在开发时能够更快速响应。</li><li><strong>CRA</strong>：CRA 需要先对整个项目进行打包，再通过 Webpack Dev Server 提供开发环境。这种方式在开发时需要处理大量文件，性能较差。</li></ul><h4 id="4-依赖预构建"><a href="#4-依赖预构建" class="headerlink" title="4. 依赖预构建"></a>4. <strong>依赖预构建</strong></h4><ul><li><strong>Vite</strong>：在开发模式下，Vite 使用 <code>esbuild</code> 预构建依赖，使得开发服务器加载依赖时速度更快，并且能优化依赖模块的重复打包问题。</li><li><strong>CRA</strong>：CRA 没有类似的依赖预构建机制，所有依赖在开发环境中会被打包成一个整体，导致开发时的响应较慢。</li></ul><h4 id="5-热模块替换（HMR）"><a href="#5-热模块替换（HMR）" class="headerlink" title="5. 热模块替换（HMR）"></a>5. <strong>热模块替换（HMR）</strong></h4><ul><li><strong>Vite</strong>：Vite 的 HMR 几乎是即时的，因为它只重新加载修改过的模块，而无需重新加载整个应用。这使得开发体验更加流畅。</li><li><strong>CRA</strong>：CRA 也支持 HMR，但由于它基于 Webpack，速度相对较慢，尤其是项目体积较大时，更新等待时间较长。</li></ul><h4 id="6-配置和扩展性"><a href="#6-配置和扩展性" class="headerlink" title="6. 配置和扩展性"></a>6. <strong>配置和扩展性</strong></h4><ul><li><strong>Vite</strong>：Vite 提供了轻量化的默认配置，但也允许通过插件进行高度定制。Vite 采用的插件机制类似于 Rollup，支持生态系统中的各种插件，且配置文件相对简洁。</li><li><strong>CRA</strong>：CRA 默认的配置相对封闭，开发者需要使用 <code>eject</code> 命令来暴露底层 Webpack 配置，这个过程是不可逆的，且配置复杂。对于初学者来说，CRA 更简单易用，但在需要自定义配置时不够灵活。</li></ul><h4 id="7-生态系统支持"><a href="#7-生态系统支持" class="headerlink" title="7. 生态系统支持"></a>7. <strong>生态系统支持</strong></h4><ul><li><strong>Vite</strong>：Vite 的生态系统正在快速发展，特别是在 Vue 和 React 项目中，Vite 正成为主流的选择。Vite 的插件生态也不断丰富，适配多种现代前端框架。</li><li><strong>CRA</strong>：CRA 基于 Webpack，Webpack 是非常成熟的打包工具，拥有丰富的插件和工具支持。不过 CRA 的封闭性限制了对这些工具的灵活使用。</li></ul><h4 id="8-生产构建"><a href="#8-生产构建" class="headerlink" title="8. 生产构建"></a>8. <strong>生产构建</strong></h4><ul><li><strong>Vite</strong>：在生产模式下，Vite 使用 Rollup 进行打包，构建出来的代码体积小，性能优化效果好。Rollup 擅长处理 ES 模块，并且支持树摇（tree-shaking）优化未使用的代码。</li><li><strong>CRA</strong>：CRA 使用 Webpack 进行生产构建，虽然 Webpack 也支持树摇和代码分割，但与 Vite 的 Rollup 相比，Webpack 的配置相对复杂，打包时间较长。</li></ul><h4 id="9-插件和框架集成"><a href="#9-插件和框架集成" class="headerlink" title="9. 插件和框架集成"></a>9. <strong>插件和框架集成</strong></h4><ul><li><strong>Vite</strong>：Vite 内置支持多种框架（如 Vue、React、Svelte 等），通过插件机制可以快速集成不同的框架和工具。Vite 的插件生态更灵活，使用 Rollup 插件也非常方便。</li><li><strong>CRA</strong>：CRA 是专门为 React 项目设计的，虽然可以手动配置支持其他工具，但其灵活性和扩展性不如 Vite。</li></ul><h4 id="10-社区和发展趋势"><a href="#10-社区和发展趋势" class="headerlink" title="10. 社区和发展趋势"></a>10. <strong>社区和发展趋势</strong></h4><ul><li><strong>Vite</strong>：Vite 是一款相对较新的工具，但它的增长速度非常快，已经成为现代前端开发的趋势之一，特别是在追求高性能的开发环境和生产环境中受到越来越多的欢迎。</li><li><strong>CRA</strong>：CRA 是 React 社区中最早的官方项目脚手架之一，适合初学者和小型项目，但在大型项目中的性能逐渐显现出局限性。</li></ul><h3 id="二、项目构建起步"><a href="#二、项目构建起步" class="headerlink" title="二、项目构建起步"></a>二、项目构建起步</h3><p>终端： <code>npm create vite@4</code></p><p>VScode：<code>npm i eslint vite-plugin-eslint eslint-config-react-app --save-dev</code></p><p><code>vite.config.js</code>文件：（要修改的部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> eslint <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite-plugin-eslint&quot;</span>;<br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>(), <span class="hljs-title function_">eslint</span>()],  <span class="hljs-comment">//添加了eslint</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><p><code>.eslintrc.cjs</code>文件：（默认配置加上react-app规则）（我把两个默认规则集都注释了，不然总报错🫠）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">🫠module.exports = <span class="hljs-punctuation">&#123;</span>🫠<br>  root<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示这是项目的根目录 ESLint 配置，防止 ESLint 搜索父级目录的配置。</span><br>  env<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    browser<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 设定代码运行的环境为浏览器，ESLint 会针对浏览器的全局变量（如 `window`）进行校验。</span><br>    es2020<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 支持 ES2020 语法特性。</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  extends<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    &#x27;react-app&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 加入 react-app 的 ESLint 规则</span><br>    &#x27;eslint<span class="hljs-punctuation">:</span>recommended&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 启用 ESLint 推荐的默认规则集。</span><br>    &#x27;plugin<span class="hljs-punctuation">:</span>react/recommended&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// React 推荐的 ESLint 规则集。</span><br>    &#x27;plugin<span class="hljs-punctuation">:</span>react/jsx-runtime&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 支持 React 17+ JSX 转换（即不需要显式导入 `React`）。</span><br>    &#x27;plugin<span class="hljs-punctuation">:</span>react-hooks/recommended&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// React Hooks 的推荐规则。</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  ignorePatterns<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;dist&#x27;<span class="hljs-punctuation">,</span> &#x27;.eslintrc.cjs&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 忽略 `dist` 目录和当前的 ESLint 配置文件，避免 ESLint 校验它们。</span><br>  parserOptions<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    ecmaVersion<span class="hljs-punctuation">:</span> &#x27;latest&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 使用最新的 ECMAScript 版本。</span><br>    sourceType<span class="hljs-punctuation">:</span> &#x27;module&#x27;<span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 代码是基于 ECMAScript 模块（ESM）的。</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  settings<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    react<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      version<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">18.2</span>&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 手动指定 React 版本，确保 ESLint 的 React 插件正确解析 JSX 语法。</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  plugins<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;react-refresh&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 使用 `react-refresh` 插件，用于开发时 React 的热更新。</span><br>  rules<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    &#x27;react-refresh/only-export-components&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      &#x27;warn&#x27;<span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span> allowConstantExport<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 仅允许导出 React 组件（针对 react-refresh 的特定规则），如果违反规则会发出警告。</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span>;<br><br></code></pre></td></tr></table></figure><p>⁉️在视频里构建完Vite项目后需要自己手动创建<code>.eslintrc.json</code>文件，和本文件有何区别？</p><ul><li><p><strong>.eslintrc.cjs</strong>：</p><ul><li>这是一个使用 CommonJS 模块格式的 ESLint 配置文件，文件内容是以 <code>module.exports = &#123;&#125;</code> 的方式导出配置对象，允许使用动态的 JavaScript 语法。</li><li>支持完整的 JavaScript 语法。你可以在其中使用变量、条件语句、函数等动态逻辑。这种格式适合需要根据环境或条件动态生成 ESLint 配置的场景。</li><li>基于 CommonJS 模块系统。导出配置使用 <code>module.exports = &#123;&#125;</code>，适用于 Node.js 环境中。</li></ul></li><li><p><strong>.eslintrc.json</strong>：</p><ul><li>这是一个标准的 JSON 格式的配置文件，不支持 JavaScript 语法，仅能定义静态的键值对配置。</li><li>只能使用 JSON 语法，不支持动态配置。如果你需要使用动态逻辑，必须转为 <code>.eslintrc.cjs</code> 或 <code>.eslintrc.js</code> 格式。</li><li>没有模块系统，纯粹是静态配置数据，使用 JSON 格式，适合简单的配置需求。</li></ul></li></ul><h3 id="三、Application-Planing"><a href="#三、Application-Planing" class="headerlink" title="三、Application Planing"></a>三、Application Planing</h3><h4 id="（1）Thinking-in-React"><a href="#（1）Thinking-in-React" class="headerlink" title="（1）Thinking in React"></a>（1）Thinking in React</h4><blockquote><p>在 Redux 中，features是一个概念化的术语，用来描述应用中的特定功能模块或子功能。每个 feature通常包含自己的状态和处理它的逻辑。</p></blockquote><p>✴️对小型程序而言：</p><ul><li>将UI分解成多个组件</li><li>建立静态网页</li><li>开始考虑状态管理和数据流</li></ul><p>✴️对大型真实程序：</p><ul><li><p>收集应用程序的需求（requirements）和所需的特性（features）（Redux）</p></li><li><p>将应用程序分成多个界面</p><ul><li>考虑整体和页面级别的UI（用户界面）</li><li>🔻将UI分解成多个组件</li><li>🔻建立静态网页</li></ul></li><li><p>将应用程序分为不同的特性类别</p><ul><li>🔻开始考虑状态管理和数据流</li></ul></li><li><p>决定我们想要用哪些库（technology decisions）</p></li></ul><h4 id="（2）项目分析"><a href="#（2）项目分析" class="headerlink" title="（2）项目分析"></a>（2）项目分析</h4><h5 id="1、项目需求"><a href="#1、项目需求" class="headerlink" title="1、项目需求"></a>1、项目需求</h5><ul><li>用户可以订购一个或多个pizza</li><li>不需要账户也不需要登陆，只需要输入名字就可以开始使用</li><li>可以改变pizza 菜单，需要一个虚假API</li><li>用户需要购物车来放置想要订购的pizza</li><li>需要用户的名字、电话号码、地址（来联系）</li><li>最好可以获得用户的GPS</li><li>用户可以将自己的订单标记为“优先”（需要多付20%的钱），并且在订单发送后也可以标记</li><li>订单是通过发送带有所有订单数据的POST请求来完成的（含有用户信息和挑选的pizza信息）</li><li>只有订单送达才会处理付款，在应用中不需要处理支付</li><li>每个订单都会得到一个专用ID，会显示在界面上，用户可以通过ID查看订单状态</li></ul><h5 id="2、分析特性和界面"><a href="#2、分析特性和界面" class="headerlink" title="2、分析特性和界面"></a>2、分析特性和界面</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240909195022266.png" alt="image-20240909195022266"></p><h5 id="3、考虑状态和数据流、决定要使用的库"><a href="#3、考虑状态和数据流、决定要使用的库" class="headerlink" title="3、考虑状态和数据流、决定要使用的库"></a>3、考虑状态和数据流、决定要使用的库</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240909195056831.png" alt="image-20240909195056831"></p><h3 id="四、建立项目结构"><a href="#四、建立项目结构" class="headerlink" title="四、建立项目结构"></a>四、建立项目结构</h3><p>ui：可重用的组件（按钮、输入等）</p><p>services：可重用代码，用于和API交互</p><p>utils：helper 函数，可重用，不产生任何side effect</p><p>features：用来描述应用中的特定功能模块或子功能，每个 <code>feature</code> 通常包含自己的状态和处理它的逻辑。在实际开发中，<code>features</code> 通常会对应到 Redux 的 slice 文件，即每个 <code>feature</code> 可能会有自己的 slice 来处理该功能模块的状态和逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240911161457628.png" alt="image-20240911161457628"></p><h3 id="五、执行Routes的新方法"><a href="#五、执行Routes的新方法" class="headerlink" title="五、执行Routes的新方法"></a>五、执行Routes的新方法</h3><p>⭕<code>npm i react-router-dom@6</code></p><hr><p><code>react router</code>文档链接：<a href="https://reactrouter.com/en/main/routers/create-browser-router">https://reactrouter.com/en/main/routers/create-browser-router</a></p><p><code>App.js</code>示例版：（见下）</p><h4 id="之前的方式：BrowserRouter-和-Routes（React-Router-v6）"><a href="#之前的方式：BrowserRouter-和-Routes（React-Router-v6）" class="headerlink" title="之前的方式：BrowserRouter 和 Routes（React Router v6）"></a>之前的方式：<code>BrowserRouter</code> 和 <code>Routes</code>（React Router v6）</h4><p>这是 React Router v6 的典型使用方式。主要特点如下：</p><ol><li><strong><code>BrowserRouter</code></strong>:<ul><li>包裹整个应用，提供路由功能。</li><li>内部使用 HTML5 的 History API，监听 URL 的变化。</li></ul></li><li><strong><code>Routes</code></strong>:<ul><li>取代了 React Router v5 中的 <code>Switch</code>，是 v6 中用于渲染路由的主要组件。</li><li><code>Route</code> 是嵌套在 <code>Routes</code> 组件中的，每一个 <code>Route</code> 定义了一个具体路径及其对应的组件。</li></ul></li><li><strong>嵌套路由</strong>：<ul><li>支持路由的嵌套，方便组织多层路由结构。例如，<code>path=&quot;app&quot;</code> 下的子路由 (<code>cities</code>, <code>countries</code>, <code>form</code>) 会渲染在 <code>AppLayout</code> 内。</li><li>子路由不需要写完整路径，可以相对父路由来定义路径。</li></ul></li><li><strong><code>Suspense</code></strong>:<ul><li>使用 <code>Suspense</code> 进行懒加载时，可以通过 <code>fallback</code> 属性定义加载时的占位组件，优化用户体验。</li></ul></li><li><strong><code>ProtectedRoute</code></strong>:<ul><li>在 <code>path=&quot;app&quot;</code> 中，使用了 <code>ProtectedRoute</code> 来实现路由的保护。只有满足特定条件时（比如用户已登录），路由才会渲染对应组件。</li></ul></li><li><strong>404页面处理</strong>：<ul><li>通过 <code>path=&quot;*&quot;</code> 来捕获所有未匹配的路由，显示 <code>PageNotFound</code> 组件。</li></ul></li></ol><h4 id="现在的方式：createBrowserRouter-和-RouterProvider（React-Router-v6-4-）"><a href="#现在的方式：createBrowserRouter-和-RouterProvider（React-Router-v6-4-）" class="headerlink" title="现在的方式：createBrowserRouter 和 RouterProvider（React Router v6.4+）"></a>现在的方式：<code>createBrowserRouter</code> 和 <code>RouterProvider</code>（React Router v6.4+）</h4><p>React Router v6.4 引入了新的 <code>Data API</code>，这意味着你可以使用 <code>createBrowserRouter</code> 和 <code>RouterProvider</code> 来定义和提供路由。它的特点包括：</p><ol><li><strong><code>createBrowserRouter</code></strong>:<ul><li>新的路由创建方式，提供了更直观的配置方式，将路由声明与数据获取逻辑（如 <code>loader</code>、<code>action</code>）结合起来，适合定义较为复杂的应用路由。</li><li>更加数据驱动，可以在路由定义时设置数据加载逻辑、错误处理等。</li></ul></li><li><strong><code>RouterProvider</code></strong>:<ul><li>提供了一个 <code>router</code> 对象，用于将创建好的路由配置传递给应用程序。这种方式相比 <code>BrowserRouter</code> 更灵活，可以在创建路由时进行更多的配置操作。</li></ul></li><li><strong>不再需要 <code>Routes</code> 和 <code>Route</code></strong>:<ul><li>使用 <code>createBrowserRouter</code> 后，不需要再单独使用 <code>Routes</code> 和 <code>Route</code> 组件，路由结构是直接在 <code>router</code> 对象内配置的。</li><li>路由配置的结构较为简洁，适合数据预加载和复杂路由需求。</li></ul></li></ol><h4 id="主要区别："><a href="#主要区别：" class="headerlink" title="主要区别："></a>主要区别：</h4><ol><li><strong>路由声明方式</strong>：<ul><li>第一种方式使用 <code>Routes</code> 和 <code>Route</code> 组件来声明路由，是 React Router v6 的常见方式。</li><li>第二种方式使用 <code>createBrowserRouter</code> 来声明路由，更加简洁，适用于 v6.4+ 版本，尤其适合数据驱动的路由需求。</li></ul></li><li><strong>数据加载与处理</strong>：<ul><li>在 React Router v6.4+ 中，<code>createBrowserRouter</code> 更加支持与数据加载和动作处理的结合，比如可以直接在路由定义时加入 <code>loader</code> 和 <code>action</code>。这可以让你在定义路由的同时处理数据加载逻辑。</li><li>而在传统的 <code>BrowserRouter</code> 方式中，数据加载通常是在组件内部通过 <code>useEffect</code> 或其他钩子完成的。</li></ul></li><li><strong>组件组织方式</strong>：<ul><li>在 <code>createBrowserRouter</code> 的方式下，路由定义集中在一个地方，比较适合大型应用。</li><li><code>BrowserRouter</code> 和 <code>Routes</code> 的方式适合小型和中型应用，使用起来更加直观。</li></ul></li><li><strong>嵌套路由的管理</strong>：<ul><li>两种方式都支持嵌套路由，但第一种方式通过 <code>Route</code> 的嵌套方式定义嵌套路由，而第二种方式是在 <code>createBrowserRouter</code> 的配置对象中通过层次化结构来实现。</li></ul></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong><code>BrowserRouter</code> 和 <code>Routes</code></strong> 的方式：更加直接、简单，适用于中小型应用。</p><p><strong><code>createBrowserRouter</code> 和 <code>RouterProvider</code></strong> 的方式：适合更复杂的应用，尤其是在需要数据预加载和处理时，这种方式更加高效。</p><h3 id="六、构建layout"><a href="#六、构建layout" class="headerlink" title="六、构建layout"></a>六、构建layout</h3><h4 id="（1）什么是layout？"><a href="#（1）什么是layout？" class="headerlink" title="（1）什么是layout？"></a>（1）什么是layout？</h4><p><strong>layout（布局）界面</strong>通常是指一个应用程序的整体框架或页面结构。它负责将不同的 UI 组件（如导航栏、侧边栏、页脚、内容区等）组织在一起，并确保它们在页面上以一致的方式显示。布局界面主要用于定义页面的骨架和各部分的排列方式，用户可以在这个基础上进行内容的填充和交互设计。</p><h4 id="（2）layout的作用"><a href="#（2）layout的作用" class="headerlink" title="（2）layout的作用"></a>（2）layout的作用</h4><ul><li><strong>保持一致性</strong>：每个页面在布局上的一致性有助于用户熟悉界面，减少学习成本。</li><li><strong>导航性</strong>：通过固定的导航栏或侧边栏，用户可以快速找到所需的功能或页面。</li><li><strong>复用性</strong>：通过将布局界面抽象出来，可以在多个页面间复用同一个结构，而只改变主内容区域的内容。</li></ul><h4 id="（3）嵌套路由"><a href="#（3）嵌套路由" class="headerlink" title="（3）嵌套路由"></a>（3）嵌套路由</h4><p>在 React Router 中，<strong>嵌套路由</strong>允许你在一个路由组件内部展示子路由的内容。这种方式非常适合实现像布局组件（Layout）这种页面结构，即主界面有一些固定不变的部分（比如导航栏、页眉），而其余部分根据不同路由切换。</p><p><code>&lt;Outlet&gt;</code> 组件是 React Router 用于渲染嵌套路由的关键部分。它起到“占位符”的作用，表示在这个位置会渲染匹配当前路由的子路由内容。</p><h4 id="（4）代码示例："><a href="#（4）代码示例：" class="headerlink" title="（4）代码示例："></a>（4）代码示例：</h4><p>本次项目所有界面使用同种layout布局界面，因此较为简单。</p><p><code>AppLayout.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">AppLayout</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">CartOverview</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>App.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Menu</span>, &#123; loader <span class="hljs-keyword">as</span> menuLoader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./features/menu/Menu&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([<br>  &#123;<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AppLayout</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/menu&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> /&gt;</span></span>,<br>        <span class="hljs-attr">loader</span>: menuLoader，<br>      &#125;,<br>    ],<br>  &#125;,<br>]);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RouterProvider</span> <span class="hljs-attr">router</span>=<span class="hljs-string">&#123;router&#125;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure><h3 id="七、Loaders"><a href="#七、Loaders" class="headerlink" title="七、Loaders"></a>七、Loaders</h3><p><code>Loaders</code> 通常指的是在数据加载过程中显示的组件或功能，来向用户展示数据正在获取的状态。它有助于提高用户体验，避免在数据还未加载完毕前呈现空白页面。</p><h4 id="（1）Loader的介绍和初步使用"><a href="#（1）Loader的介绍和初步使用" class="headerlink" title="（1）Loader的介绍和初步使用"></a>（1）Loader的介绍和初步使用</h4><p> 本次项目不同于之前<strong>使用useEffect获取数据加useState管理isLoading状态来显示加载界面</strong>的方法，由于运用了React Router v6.4，它自带了 <code>Loader</code> 功能用于在路由层面进行数据加载。可以结合路由直接展示加载状态。</p><p>使用方法如下：（直接给出例子）</p><p><code>Menu.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useLoaderData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getMenu &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../services/apiRestaurant&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MenuItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./MenuItem&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> menu = <span class="hljs-title function_">useLoaderData</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;menu.map((pizza) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">pizza</span>=<span class="hljs-string">&#123;pizza&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;pizza.id&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> menu = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getMenu</span>();<br>  <span class="hljs-keyword">return</span> menu;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Menu</span>;<br><br></code></pre></td></tr></table></figure><ol><li>在需要加载数据的文件中使用loader函数获取并返回数据（export导出，需是异步函数）</li><li>在该界面的Router中加入loader属性，并设置为导入的loader函数（可重命名）</li><li>在需要加载数据的组件函数中使用useLoaderData()函数获得数据</li></ol><p><code>useLoaderData</code> 是 React Router v6 提供的一个钩子，用于在路由加载时获取预加载的数据。它通过关联的 <strong>loader 函数</strong> 提供数据，确保在组件渲染时已经获得了所需的数据，避免了组件一开始就加载空白页面再去异步获取数据的情况。</p><p><code>loader</code> 是一个异步函数，专门用于在导航到该页面之前从服务端或其他数据源获取数据。这个 <code>loader</code> 函数会在渲染 <code>Menu</code> 组件之前执行，确保数据已经加载完毕。</p><h4 id="（2）navigation"><a href="#（2）navigation" class="headerlink" title="（2）navigation"></a>（2）navigation</h4><p><code>useNavigation</code> 是 React Router 提供的钩子，用于跟踪应用中的导航状态。它可以用来查看当前的导航状态（比如加载中、等待中等），并显示相应的界面状态。（详见React Router专题部分）</p><p>因此通过：</p><p><code>const navigation = useNavigation();</code></p><p> <code>// console.log(navigation);</code></p><p> <code>const isLoading = navigation.state === &quot;loading&quot;;</code></p><p>得到加载状态后即可条件显示Loader组件</p><h4 id="（3）全局Loader"><a href="#（3）全局Loader" class="headerlink" title="（3）全局Loader"></a>（3）全局Loader</h4><p>在代码中，我们把Loader组件放在了AppLayout组件中，由于它位于父路由，因此所有使用useLoaderData的子路由组件在加载的时候都会自动获取Loader组件。</p><h3 id="八、错误处理"><a href="#八、错误处理" class="headerlink" title="八、错误处理"></a>八、错误处理</h3><p>在Router的父路由中加上errorElement属性，指向显示错误信息的组件。</p><p> <code>const error = useRouteError();</code>       得到错误信息</p><p> <code>console.log(error);</code></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240911162903277.png" alt="image-20240911162903277"></p><p><code>error.data</code>或者<code>error.message</code>就是错误的具体信息（可以显示出获取信息失败的错误）</p><p>因此也可以在需要获取数据的子路由中加上这个错误属性，使得错误界面也拥有layout的布局。</p><h3 id="九、提交表单"><a href="#九、提交表单" class="headerlink" title="九、提交表单"></a>九、提交表单</h3><h4 id="（1）actions在提交表单中的用法"><a href="#（1）actions在提交表单中的用法" class="headerlink" title="（1）actions在提交表单中的用法"></a>（1）actions在提交表单中的用法</h4><p>首先需要将action函数链接到该组件的Router中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/order/new&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CreateOrder</span> /&gt;</span></span>,<br>    <span class="hljs-attr">action</span>: createOrderAction, <span class="hljs-comment">//已更名</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>另外，我们想要在提交表单数据的同时隐形提交cart中的数据，就在<Form />组件中的任意位置放上这一行代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;cart&quot;</span> value=&#123;<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(cart)&#125; /&gt;<br></code></pre></td></tr></table></figure><p>最后是action函数：（<code>action</code> 函数是在表单提交时执行的，它会处理表单提交的数据）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">&#123; request &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">formData</span>();  <span class="hljs-comment">//获得数据</span><br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(formData);  <span class="hljs-comment">//将 FormData 转换为普通的 JavaScript 对象，方便后续处理表单中的字段和值</span><br>  <span class="hljs-comment">//console.log(data);</span><br>  <span class="hljs-keyword">const</span> order = &#123;   <span class="hljs-comment">//重构data结构</span><br>    ...data,<br>    <span class="hljs-attr">cart</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data.<span class="hljs-property">cart</span>),  <span class="hljs-comment">//从字符串形式转化为javaScript对象</span><br>    <span class="hljs-attr">priority</span>: data.<span class="hljs-property">priority</span> === <span class="hljs-string">&quot;on&quot;</span>,<br>  &#125;;  <br>  <span class="hljs-comment">// console.log(order);</span><br>  <span class="hljs-keyword">const</span> newOrder = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createOrder</span>(order);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">redirect</span>(<span class="hljs-string">`/order/<span class="hljs-subst">$&#123;newOrder.id&#125;</span>`</span>);  <span class="hljs-comment">//重定向</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>重构前和重构后的数据如图（本来priority在不选时不会出现，现在由true和false描述）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240911194331654.png" alt="image-20240911194331654"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240911194427541.png" alt="image-20240911194427541"></p><h4 id="（2）隐藏字段解析"><a href="#（2）隐藏字段解析" class="headerlink" title="（2）隐藏字段解析"></a>（2）隐藏字段解析</h4><p>1.<strong><code>&lt;input type=&quot;hidden&quot;&gt;</code></strong></p><ul><li><strong>隐藏字段</strong>：<code>&lt;input type=&quot;hidden&quot;&gt;</code> 是一种不会显示在用户界面上的输入字段。它用于在表单中传递数据，但不让用户直接看到或修改这些数据。</li><li><strong>作用</strong>：主要用于传递用户不需要或不应该直接编辑的内容，例如表单的内部数据或与页面状态相关的信息。</li></ul><p>2.<strong><code>name=&quot;cart&quot;</code></strong></p><ul><li><strong>表单字段名</strong>：<code>name=&quot;cart&quot;</code> 指定了该字段在表单数据中的名称。当表单提交时，这个字段会作为表单数据的一部分发送到服务器，服务器可以通过 <code>name=&quot;cart&quot;</code> 这个名称来获取它对应的值。</li></ul><ol start="3"><li><strong><code>value=&#123;JSON.stringify(cart)&#125;</code></strong></li></ol><ul><li>**<code>JSON.stringify(cart)</code>**：<code>cart</code> 是一个 JavaScript 对象或数组，它被转换为 JSON 字符串并作为表单字段的值提交。因为 HTML 表单只能提交字符串类型的值，而 JavaScript 对象无法直接作为表单字段的值，因此需要使用 <code>JSON.stringify()</code> 将 <code>cart</code> 对象转换为 JSON 格式的字符串。</li></ul><h4 id="（3）代码运行流程"><a href="#（3）代码运行流程" class="headerlink" title="（3）代码运行流程"></a>（3）代码运行流程</h4><ol><li>用户在 <code>/order/new</code> 页面填写订单信息并提交表单。</li><li>表单提交后，<code>createOrderAction</code> 函数被调用，表单数据通过 <code>request.formData()</code> 获取。</li><li>将表单数据转换为 JavaScript 对象，并处理其中的复杂字段（如解析 JSON 和布尔值转换）。</li><li>调用 <code>createOrder(order)</code> 函数来创建新订单。</li><li>创建订单后，通过 <code>redirect(/order/$&#123;newOrder.id&#125;)</code> 将用户重定向到新创建的订单详情页。</li></ol><h4 id="（4）表单数据检测和错误处理"><a href="#（4）表单数据检测和错误处理" class="headerlink" title="（4）表单数据检测和错误处理"></a>（4）表单数据检测和错误处理</h4><h5 id="1、为了防止用户提供的数据格式不对，在创建新订单之前，需要做数据监测："><a href="#1、为了防止用户提供的数据格式不对，在创建新订单之前，需要做数据监测：" class="headerlink" title="1、为了防止用户提供的数据格式不对，在创建新订单之前，需要做数据监测："></a>1、为了防止用户提供的数据格式不对，在创建新订单之前，需要做数据监测：</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> error=&#123;&#125;;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isValidPhone</span>(order.<span class="hljs-property">phone</span>))<br>  errors.<span class="hljs-property">phone</span> =<br>    <span class="hljs-string">&quot;Please give us your correct phone number.We might need it to contact you.&quot;</span>;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(errors).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> errors;<br></code></pre></td></tr></table></figure><ol><li>创建一个空的对象 <code>errors</code>，用来存储所有的错误信息。这个对象会根据验证条件动态填充相应的错误消息。</li><li>如果电话号码无效，则在 <code>errors</code> 对象中添加一个 <code>phone</code> 错误字段，并设置一个对应的错误消息 </li><li><code>Object.keys(errors)</code> 返回 <code>errors</code> 对象中的所有键（即错误字段）的数组。如果 <code>errors</code> 中有任何错误信息，<code>Object.keys(errors).length</code> 的值就会大于 0，于是代码会返回这个 <code>errors</code> 对象，通常会在前端显示这些错误信息给用户。</li></ol><h5 id="2、在组件里需要接受错误信息并显示："><a href="#2、在组件里需要接受错误信息并显示：" class="headerlink" title="2、在组件里需要接受错误信息并显示："></a>2、在组件里需要接受错误信息并显示：</h5><p> <code>const formErrors = useActionData();</code></p><p><code>&#123;formErrors?.phone &amp;&amp; &lt;p&gt;&#123;formErrors.phone&#125;&lt;/p&gt;&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程13-Redux入门</title>
    <link href="/2024/09/07/react%E8%AF%BE%E7%A8%8B13-Redux%E5%85%A5%E9%97%A8/"/>
    <url>/2024/09/07/react%E8%AF%BE%E7%A8%8B13-Redux%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>🥳本节课开始学习Redux</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907143311436.png"></p><h3 id="一、Redux的定义"><a href="#一、Redux的定义" class="headerlink" title="一、Redux的定义"></a>一、Redux的定义</h3><hr><p>Redux 是一个用于管理 JavaScript 应用中状态的开源库，通常与 React 一起使用。Redux 的核心思想是将应用的状态存储在一个全局的单一状态树中，这样应用中的任何组件都可以访问和更新该状态。</p><ul><li><p><strong>Redux 的三个核心原则：</strong></p><ul><li><p><strong>单一数据源</strong>： 应用的所有状态保存在一个对象树中，并且这个状态对象树是只读的。</p></li><li><p><strong>状态是只读的</strong>： 唯一改变状态的方法是发出一个 <strong>action</strong>，action 是一个描述事件的普通 JavaScript 对象。</p></li><li><p><strong>使用纯函数来修改状态</strong>： 通过编写纯函数 <strong>reducers</strong> 来根据 action 描述的事件返回新的状态。</p></li></ul></li><li><p><strong>使用 Redux 的步骤：</strong></p><ul><li><p><strong>创建 store</strong>：<code>createStore()</code> 用于创建 Redux 的存储（store）。（含有多个Reducer，为每个应用程序特性或每个数据创建一个reducer）</p></li><li><p><strong>定义 reducer</strong>：reducer 是一个纯函数，接收当前的状态和 action，然后返回新的状态。</p></li><li><p><strong>分发 action</strong>：组件可以通过 <code>dispatch(action)</code> 来发送 action，进而触发状态的变化。</p></li><li><p><strong>连接组件与 store</strong>：通过 <code>connect()</code> 或者 hooks（如 <code>useSelector</code> 和 <code>useDispatch</code>）来让 React 组件与 Redux 的状态进行交互。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907151053166.png" alt="image-20240907151053166"></p></li></ul><h4 id="（1）什么是纯函数"><a href="#（1）什么是纯函数" class="headerlink" title="（1）什么是纯函数"></a>（1）什么是纯函数</h4><p>纯函数（Pure Function）是指在相同的输入下总是返回相同输出，并且没有副作用的函数。</p><p>1、<strong>相同的输入，得到相同的输出</strong>：<br>一个纯函数依赖于它的输入参数，任何时候只要输入相同，输出就一定相同。例如，<code>sum(a, b)</code> 函数总是返回 <code>a + b</code>，不论什么时候调用。</p><p>2、<strong>没有副作用</strong>：<br>纯函数不会修改外部的状态，也不会影响外部环境。比如它不会更改全局变量、修改传入的参数，也不会执行诸如 IO 操作、网络请求等副作用。</p><p>3、<strong>纯函数的优点</strong>：</p><ul><li>易于测试和调试：由于纯函数依赖于输入和输出，没有副作用，因此它们容易进行单元测试。</li><li>可组合性：多个纯函数可以组合使用，减少了复杂度。</li><li>可预测性：因为纯函数不会依赖外部状态或产生副作用，它的行为更容易预测。</li></ul><h4 id="（2）为什么修改状态不算副作用"><a href="#（2）为什么修改状态不算副作用" class="headerlink" title="（2）为什么修改状态不算副作用"></a>（2）为什么修改状态不算副作用</h4><p><strong>副作用</strong>指的是对外部环境的改变，例如修改外部的变量、执行 I&#x2F;O 操作、调用 API 等，这些操作会导致应用的外部环境在函数运行前后发生变化。而 Redux 中的 <strong>reducer</strong> 是一个纯函数，它接收旧的状态和 action，并返回一个新的状态对象，而不是修改现有的状态。</p><p><strong>不可变性</strong>：在 Redux 中，reducer 不直接修改传入的状态，而是创建并返回一个新的状态对象。这种方式保证了状态的不可变性，从而避免了副作用。</p><p>直接修改状态：</p><p><code>function reducer(state, action) &#123;</code>  </p><p>​<code>state.count += 1;</code> </p><p>​<code>return state; &#125;</code></p><p>返回新状态：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    ...state,  <span class="hljs-comment">// 创建一个新的状态对象</span><br>    <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>  <span class="hljs-comment">// 修改新状态的 count 属性</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、学习Redux"><a href="#二、学习Redux" class="headerlink" title="二、学习Redux"></a>二、学习Redux</h3><p>⭕npm install redux</p><hr><h4 id="（1）建立Store"><a href="#（1）建立Store" class="headerlink" title="（1）建立Store"></a>（1）建立Store</h4><h5 id="1、start"><a href="#1、start" class="headerlink" title="1、start"></a>1、start</h5><p><code>const store = createStore(reducer); </code>     &#x2F;&#x2F;建立store</p><p><code>store.dispatch(&#123; type: &quot;account/deposit&quot;, payload: 500 &#125;);</code>     &#x2F;&#x2F;发出动作</p><p><code>console.log(store.getState());</code>    &#x2F;&#x2F;获取状态值</p><h5 id="2、working-with-action-creators"><a href="#2、working-with-action-creators" class="headerlink" title="2、working with action creators"></a>2、working with action creators</h5><p><code>function deposit( amount ) &#123;</code></p><pre><code class="hljs"> `return &#123; type: &quot;account/deposit&quot;, payload: amount &#125;;`</code></pre><p><code>&#125;</code></p><p><code>store.dispatch(deposit(500));</code></p><h5 id="3、两个reducer"><a href="#3、两个reducer" class="headerlink" title="3、两个reducer"></a>3、两个reducer</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> rootReducer = <span class="hljs-title function_">combineReducers</span>(&#123;<br>  <span class="hljs-attr">account</span>: accountReducer,<br>  <span class="hljs-attr">customer</span>: customerReducer,<br>&#125;);<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(rootReducer);<br></code></pre></td></tr></table></figure><h5 id="4、state-slices（专业的状态结构）"><a href="#4、state-slices（专业的状态结构）" class="headerlink" title="4、state slices（专业的状态结构）"></a>4、state slices（专业的状态结构）</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907170229118.png" alt="image-20240907170229118"></p><p>slice文件存储与相关用户有关的状态以及action creactor函数；（<strong>export defaut</strong> reducer，<strong>export</strong> action creator 函数）</p><p>index.js文件：<code>import store from &quot;./store&quot;;</code></p><h4 id="（2）将redux和react连接起来"><a href="#（2）将redux和react连接起来" class="headerlink" title="（2）将redux和react连接起来"></a>（2）将redux和react连接起来</h4><p>⭕npm  i react-redux</p><hr><ul><li><p>首先导入Provider<code>import &#123; Provider &#125; from &quot;react-redux&quot;;</code>      😋和context API很类似哦</p></li><li><p>然后把app包裹进去：</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>接下来每个需要从Redux的store信息的组件都可以接收到了。</p><ul><li><p>读取信息：</p><ul><li>导入hook：<code>import &#123; useSelector &#125; from &quot;react-redux&quot;;</code></li><li>读取信息：<code>const customer = useSelector( (store) =&gt; store.customer );</code>   or</li></ul><p> <code>const customer = useSelector( (store) =&gt;store.customer.fullName</code>     （customer与在<code>store.js</code>中的命名对应）</p></li></ul><h5 id="1、dispatching-actions-from-our-react-app"><a href="#1、dispatching-actions-from-our-react-app" class="headerlink" title="1、dispatching actions from our react app"></a>1、dispatching actions from our react app</h5><p> <code>const dispatch=useDispatch();</code>     得到dispath函数，这样dispatch就会按照平常那样工作啦，只需要传递所需的参数就可以了</p><p>PS：（解构value）（冒号前的是重构前的名字，冒号后是此文件要用的名字）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-attr">loan</span>: currentLoan,<br>    <span class="hljs-attr">loanPurpose</span>: currntLoanPurpose,<br>    balance,<br>  &#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">store</span>) =&gt;</span> store.<span class="hljs-property">account</span>);<br></code></pre></td></tr></table></figure><h5 id="2、把组件连接到Redux的旧方法"><a href="#2、把组件连接到Redux的旧方法" class="headerlink" title="2、把组件连接到Redux的旧方法"></a>2、把组件连接到Redux的旧方法</h5><p><code>mapStateToProps</code> 是 Redux 中旧的（传统的）方法之一，用于将 Redux 的全局状态映射到 React 组件的 props 上，从而使组件能够访问 Redux 状态。在使用 <code>mapStateToProps</code> 的时候，通常搭配 <code>connect</code> 函数来将 Redux 状态和 React 组件连接起来。</p><p>例如：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907203055337.png" alt="image-20240907203055337"></p><p>1️⃣mapStateToProps函数的作用是从Redux的store中提取所需的状态，并通过props将这些状态传递给React组件，它接收两个参数：state、ownProps（可选，组件自身的props）</p><p>2️⃣使用connect接收mapStateToProps变成一个新的函数，这个函数接收Balance函数（想要连接的函数）作为参数，将状态传递给Balance组件</p><p>3️⃣Balance组件接收参数</p><h4 id="（3）Middleware"><a href="#（3）Middleware" class="headerlink" title="（3）Middleware"></a>（3）Middleware</h4><p>要引入这个问题，首先要知道Reducer中不能含有像API调用这样的异步操作，那么这些操作应该放在哪里呢🤔？（在组件中分散地fetching data显然不理想 ）（而store里显然也不行）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907205303059.png" alt="image-20240907205303059"></p><p>在 Redux 中，<strong>middleware（中间件）</strong> 是指一个扩展 Redux dispatch 功能的机制，允许你在发出 action 和 reducer 处理该 action 之间插入自定义的逻辑。它的主要作用是拦截 action，执行一些额外的处理，比如日志记录、异步请求、错误处理等。</p><h5 id="1、中间件的作用"><a href="#1、中间件的作用" class="headerlink" title="1、中间件的作用"></a>1、中间件的作用</h5><ul><li><strong>处理异步操作</strong>：Redux 本身只能处理同步的状态更新，而中间件可以让你执行异步操作，比如网络请求。常见的异步中间件有 <code>redux-thunk</code> 和 <code>redux-saga</code>。</li><li><strong>记录日志</strong>：可以在每次 action 被触发时记录日志。</li><li><strong>错误处理</strong>：在 action 到达 reducer 之前处理错误或异常情况。</li><li><strong>自定义扩展</strong>：可以在 <code>dispatch</code> 过程中加入自定义的逻辑，比如修改 action、延迟 dispatch 等。</li></ul><h5 id="2、中间件的工作流程"><a href="#2、中间件的工作流程" class="headerlink" title="2、中间件的工作流程"></a>2、中间件的工作流程</h5><p>Redux 的中间件基本上是一个函数，它接收 <code>store</code>，然后返回一个函数，该函数接收 <code>next</code>，最后返回一个函数处理 <code>action</code>。中间件在每次 action 被派发时会执行，并且可以控制 action 是否传递到下一个中间件或 reducer。</p><p>中间件执行顺序如下：</p><ul><li><code>dispatch(action)</code> -&gt; 中间件链 -&gt; reducer -&gt; 更新 store</li></ul><h4 id="（4）Redux-Thunk的应用"><a href="#（4）Redux-Thunk的应用" class="headerlink" title="（4）Redux Thunk的应用"></a>（4）Redux Thunk的应用</h4><p>⭕npm  i  redux-thunk</p><hr><h5 id="1、进入store-js做如下改动："><a href="#1、进入store-js做如下改动：" class="headerlink" title="1、进入store.js做如下改动："></a>1、进入<code>store.js</code>做如下改动：</h5><ul><li>添加导入：<code>import thunk from &quot;redux-thunk&quot;;</code></li><li>使用applyMiddleware创建store：<code>const store = createStore(rootReducer, applyMiddleware(thunk));</code></li></ul><p>❓为什么导入thunk不需要花括号？</p><p>​             在 JavaScript 中，模块可以有两种类型的导出方式：</p><p>​                      <strong>默认导出（default export）</strong>：一个模块只能有一个默认导出，导入时可以使用任意名字，并且不需要花括号。</p><p>​                      <strong>命名导出（named export）</strong>：一个模块可以有多个命名导出，导入时必须使用花括号，且必须与导出时的名字匹配。</p><p>​              在 <code>redux-thunk</code> 这个库中，<code>thunk</code> 是默认导出的内容，所以导入时不需要花括号。</p><p>​              尴尬的是不加花括号报错了哈哈哈所以到底是默认还是命名啊……</p><h5 id="2、在action-creator函数中做异步API调动"><a href="#2、在action-creator函数中做异步API调动" class="headerlink" title="2、在action creator函数中做异步API调动"></a>2、在action creator函数中做异步API调动</h5><p>要做API调用后返回action，因此先返回一个函数，React看到这个函数就会知道这是thunk，因此会先执行函数中的内容再返回action。</p><p>本次App需要用到的API如图所示，是一个钱币转换API，FROM：<a href="https://www.frankfurter.app/docs/">https://www.frankfurter.app/docs/</a></p><hr><p>➡️fetch(<code>https://api.frankfurter.app/latest?amount=10&amp;from=GBP&amp;to=USD</code>)</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240908131920242.png" alt="image-20240908131920242"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">amount, currency</span>) &#123;<br>  <span class="hljs-keyword">if</span> (currency === <span class="hljs-string">&quot;USD&quot;</span>) <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/deposit&quot;</span>, <span class="hljs-attr">payload</span>: amount &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">dispatch, getState</span>) &#123;   <span class="hljs-comment">//必须定义为异步函数</span><br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/convertingCurrency&quot;</span> &#125;);   <span class="hljs-comment">//想要设定一个Loading界面</span><br>     <br><span class="hljs-comment">//API call</span><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>( <span class="hljs-string">`https://api.frankfurter.app/latest?amount=<span class="hljs-subst">$&#123;amount&#125;</span>&amp;from=<span class="hljs-subst">$&#123;currency&#125;</span>&amp;to=USD`</span>);<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-keyword">const</span> converted = data.<span class="hljs-property">rates</span>.<span class="hljs-property">USD</span>;<br>   <br> <span class="hljs-comment">//return action</span><br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/deposit&quot;</span>, <span class="hljs-attr">payload</span>: converted &#125;);<br>  &#125;;<br><br><br></code></pre></td></tr></table></figure><p>⁉️为什么上面的操作可以直接return action，下面却要dispatch action？</p><ul><li><p>如果是一个普通的同步操作（如你代码中的 <code>if (currency === &quot;USD&quot;)</code> 情况），你可以直接返回一个 action 对象，Redux会立即处理这个 action。但在异步操作中（如 API 调用时），你不能直接返回 action，因为 action 的 <code>payload</code> 是异步获取的。此时，返回的不是普通的 action，而是一个异步的函数（即 <code>thunk</code> 函数），这个函数需要等到异步操作完成后再手动派发 action，更新 Redux store。这里的 <code>dispatch</code> 就是用来派发 action 的。</p></li><li><p>异步操作（如 <code>fetch</code> API）需要时间来完成。如果你在异步操作之前就返回一个 action，Redux 并不知道这个 action 应该在什么时候派发，它也无法等待异步操作的完成。使用 <code>dispatch</code> 可以确保在异步操作（如 API 请求）完成之后再将最终的结果派发给 Redux store。<code>dispatch</code> 是 Redux 中派发 action 的函数，它通知 Redux store 有一个新的 action 被触发，Redux  store 会根据这个 action 更新 state。</p></li></ul><p>😲每一次fetch Data后，得到data之后有一个很好的习惯是console.log（data），来查看data的格式，方便运用它</p><h4 id="（5）Redux-Dev-Tools"><a href="#（5）Redux-Dev-Tools" class="headerlink" title="（5）Redux Dev Tools"></a>（5）Redux Dev Tools</h4><h5 id="1、下载Dev-ToolsRedux-DevTools-Chrome-应用商店-google-com"><a href="#1、下载Dev-ToolsRedux-DevTools-Chrome-应用商店-google-com" class="headerlink" title="1、下载Dev ToolsRedux DevTools - Chrome 应用商店 (google.com)"></a>1、下载Dev Tools<a href="https://chromewebstore.google.com/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools - Chrome 应用商店 (google.com)</a></h5><h5 id="2、npm-i-redux-devtools-extension"><a href="#2、npm-i-redux-devtools-extension" class="headerlink" title="2、npm i redux-devtools-extension"></a>2、<code>npm i redux-devtools-extension</code></h5><p>与视频一致，但此时已经有报错了（表明 <code>redux-devtools-extension</code> 版本与当前安装的 <code>redux@5.0.1</code> 版本不兼容。<code>redux-devtools-extension@2.13.9</code> 需要 <code>redux</code> 的版本是 <code>^3.1.0</code> 或 <code>^4.0.0</code>，而我使用的是 <code>redux@5.0.1</code>，导致了依赖冲突）</p><p>因此只能<code>npm install redux-devtools-extension --legacy-peer-deps</code>来忽略 peerDependencies 的冲突，并继续安装</p><p>☑️在<code>store.js</code>中修改</p><p><code>import &#123; composeWithDevTools &#125; from &quot;redux-devtools-extension&quot;;</code></p><p><code>const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));</code></p><h5 id="3、界面展示"><a href="#3、界面展示" class="headerlink" title="3、界面展示"></a>3、界面展示</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240908143934918.png" alt="image-20240908143934918"></p><p>⭕左边可以看到所有动作，并且可以直接jump到所有历史的状态，右边可以看到状态，下面的滑块栏也可以抵达历史动作的状态。</p><p>⭕点击该处可以手动dispatch action</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240908144145452.png" alt="image-20240908144145452"></p><h4 id="（6）Redux-Toolkit"><a href="#（6）Redux-Toolkit" class="headerlink" title="（6）Redux Toolkit"></a>（6）Redux Toolkit</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240908152201707.png" alt="image-20240908152201707"></p><p>✅compatible: 兼容的                 ✅boilerplate样板代码                 ✅mutate:  可变的</p><p>✅immutable:  不可变的             ✅Immer:  Immer库（用于简化不可变数据处理的库）</p><h5 id="1、creating-store-with-RTK："><a href="#1、creating-store-with-RTK：" class="headerlink" title="1、creating store with RTK："></a>1、creating store with RTK：</h5><p>⭕<code>npm i @reduxjs/toolkit</code>（同样版本冲突，按照上面的方法安装）</p><hr><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">import</span> accountReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./features/account/accountSlice&quot;</span>;<br><span class="hljs-keyword">import</span> customerReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./features/customers/customerSlice&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">account</span>: accountReducer,<br>    <span class="hljs-attr">customer</span>: customerReducer,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><h5 id="2、改变Slice"><a href="#2、改变Slice" class="headerlink" title="2、改变Slice"></a>2、改变Slice</h5><p>介于不想占用太多空间，这里仅给出AccountSlice的示例（以及不用RTK的版本）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">balance</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">loan</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">loanPurpose</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> accountSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;account&quot;</span>,<br>  initialState,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-title function_">deposit</span>(<span class="hljs-params">state, action</span>) &#123;<br>      state.<span class="hljs-property">balance</span> += action.<span class="hljs-property">payload</span>;<br>      state.<span class="hljs-property">isLoading</span> = <span class="hljs-literal">false</span>;<br>    &#125;,<br>    <span class="hljs-title function_">withdraw</span>(<span class="hljs-params">state, action</span>) &#123;<br>      state.<span class="hljs-property">balance</span> -= action.<span class="hljs-property">payload</span>;<br>    &#125;,<br>    <span class="hljs-attr">requestLoan</span>: &#123;<br>      <span class="hljs-title function_">prepare</span>(<span class="hljs-params">amount, purpose</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">payload</span>: &#123; amount, purpose &#125;,<br>        &#125;;<br>      &#125;,<br><br>      <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>        <span class="hljs-keyword">if</span> (state.<span class="hljs-property">loan</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        state.<span class="hljs-property">balance</span> = state.<span class="hljs-property">balance</span> + action.<span class="hljs-property">payload</span>.<span class="hljs-property">amount</span>;<br>        state.<span class="hljs-property">loan</span> = action.<span class="hljs-property">payload</span>.<span class="hljs-property">amount</span>;<br>        state.<span class="hljs-property">loanPurpose</span> = action.<span class="hljs-property">payload</span>.<span class="hljs-property">purpose</span>;<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-title function_">payLoan</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">balance</span> -= state.<span class="hljs-property">loan</span>;<br>      state.<span class="hljs-property">loan</span> = <span class="hljs-number">0</span>;<br>      state.<span class="hljs-property">loanPurpose</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;,<br>    <span class="hljs-title function_">convertingCurrency</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">isLoading</span> = <span class="hljs-literal">true</span>;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; withdraw, requestLoan, payLoan &#125; = accountSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">amount, currency</span>) &#123;<br>  <span class="hljs-keyword">if</span> (currency === <span class="hljs-string">&quot;USD&quot;</span>) <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/deposit&quot;</span>, <span class="hljs-attr">payload</span>: amount &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">dispatch, getState</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/convertingCurrency&quot;</span> &#125;);<br>    <span class="hljs-comment">//API call</span><br><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>      <span class="hljs-string">`https://api.frankfurter.app/latest?amount=<span class="hljs-subst">$&#123;amount&#125;</span>&amp;from=<span class="hljs-subst">$&#123;currency&#125;</span>&amp;to=USD`</span><br>    );<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-keyword">const</span> converted = data.<span class="hljs-property">rates</span>.<span class="hljs-property">USD</span>;<br>    <span class="hljs-comment">//return action</span><br><br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;account/deposit&quot;</span>, <span class="hljs-attr">payload</span>: converted &#125;);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> accountSlice.<span class="hljs-property">reducer</span>;<br><br><span class="hljs-comment">//------------------V1-No RTK-------------------------</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">const initialStateAccount = &#123;</span><br><span class="hljs-comment">  balance: 0,</span><br><span class="hljs-comment">  loan: 0,</span><br><span class="hljs-comment">  loanPurpose: &quot;&quot;,</span><br><span class="hljs-comment">  isLoading: false,</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export default function accountReducer(state = initialStateAccount, action) &#123;</span><br><span class="hljs-comment">  switch (action.type) &#123;</span><br><span class="hljs-comment">    case &quot;account/deposit&quot;:</span><br><span class="hljs-comment">      return &#123;</span><br><span class="hljs-comment">        ...state,</span><br><span class="hljs-comment">        balance: state.balance + action.payload,</span><br><span class="hljs-comment">        isLoading: false,</span><br><span class="hljs-comment">      &#125;;</span><br><span class="hljs-comment">    case &quot;account/withdraw&quot;:</span><br><span class="hljs-comment">      return &#123; ...state, balance: state.balance - action.payload &#125;;</span><br><span class="hljs-comment">    case &quot;account/requestLoan&quot;:</span><br><span class="hljs-comment">      if (state.loan &gt; 0) return state;</span><br><span class="hljs-comment">      return &#123;</span><br><span class="hljs-comment">        ...state,</span><br><span class="hljs-comment">        balance: state.balance + action.payload.amount,</span><br><span class="hljs-comment">        loan: action.payload.amount,</span><br><span class="hljs-comment">        loanPurpose: action.payload.purpose,</span><br><span class="hljs-comment">      &#125;;</span><br><span class="hljs-comment">    case &quot;account/payLoan&quot;:</span><br><span class="hljs-comment">      return &#123;</span><br><span class="hljs-comment">        ...state,</span><br><span class="hljs-comment">        loan: 0,</span><br><span class="hljs-comment">        loanPurpose: &quot;&quot;,</span><br><span class="hljs-comment">        balance: state.balance - state.loan,</span><br><span class="hljs-comment">      &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    case &quot;account/convertingCurrency&quot;:</span><br><span class="hljs-comment">      return &#123; ...state, isLoading: true &#125;;</span><br><span class="hljs-comment">    default:</span><br><span class="hljs-comment">      return state;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export function deposit(amount, currency) &#123;</span><br><span class="hljs-comment">  if (currency === &quot;USD&quot;) return &#123; type: &quot;account/deposit&quot;, payload: amount &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  return async function (dispatch, getState) &#123;</span><br><span class="hljs-comment">    dispatch(&#123; type: &quot;account/convertingCurrency&quot; &#125;);</span><br><span class="hljs-comment">    //API call</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    const res = await fetch(</span><br><span class="hljs-comment">      `https://api.frankfurter.app/latest?amount=$&#123;amount&#125;&amp;from=$&#123;currency&#125;&amp;to=USD`</span><br><span class="hljs-comment">    );</span><br><span class="hljs-comment">    const data = await res.json();</span><br><span class="hljs-comment">    const converted = data.rates.USD;</span><br><span class="hljs-comment">    //return action</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    dispatch(&#123; type: &quot;account/deposit&quot;, payload: converted &#125;);</span><br><span class="hljs-comment">  &#125;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export function withdraw(amount) &#123;</span><br><span class="hljs-comment">  return &#123; type: &quot;account/withdraw&quot;, payload: amount &#125;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export function requestLoan(amount, purpose) &#123;</span><br><span class="hljs-comment">  return &#123; type: &quot;account/requestLoan&quot;, payload: &#123; amount, purpose &#125; &#125;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">export function payLoan() &#123;</span><br><span class="hljs-comment">  return &#123; type: &quot;account/payLoan&quot; &#125;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h5 id="3、使用RTK的优点🔆"><a href="#3、使用RTK的优点🔆" class="headerlink" title="3、使用RTK的优点🔆"></a>3、使用RTK的优点🔆</h5><ul><li><p><strong>代码简洁、减少样板代码</strong>：</p><ul><li><p>RTK 中的 <code>createSlice</code> 自动生成 action types 和 action creators，因此减少了手动定义 action type 和 creator 的代码量。</p></li><li><p>在不使用 RTK 的版本中，你需要手动编写大量的 <code>switch-case</code> 语句和 action creator，比如 <code>account/deposit</code>、<code>account/withdraw</code> 等。而在 RTK 中，<code>createSlice</code> 自动完成这些任务，简化了 reducer 和 action 的编写。</p></li></ul></li><li><p><strong>支持“可变”状态，简化状态更新逻辑</strong>：</p><ul><li>RTK 内部使用 <code>Immer</code>， 允许你在 reducer 中编写像变异对象一样的代码，但实际上它并没有真的修改原始状态，而是生成了一个新的状态对象。这意味着：你在 reducer 中“修改”状态对象的字段时，<code>Immer</code> 会追踪这些变更，并创建一个新的状态对象，保持 Redux 的不可变性原则；如果你没有修改状态，<code>Immer</code> 会返回原始状态（不创建新的对象），从而优化性能。</li><li>你可以直接修改状态对象，而不需要手动创建状态的深拷贝，这大大简化了状态更新的代码。</li></ul></li><li><p><strong>内置异步处理和 middleware 支持</strong>：</p><ul><li><p>RTK 提供了异步 action（如 <code>createAsyncThunk</code>）的简化处理，内置了 thunk 中间件，简化了异步数据请求的管理。在你的代码中，<code>deposit</code> 异步处理逻辑依然需要用 <code>thunk</code>，但使用 RTK 时可以通过 <code>createAsyncThunk</code> 或更好地支持异步流。</p></li><li><p>你可以直接定义异步 action，不需要像传统 Redux 那样额外引入 <code>redux-thunk</code> 或手动创建异步操作。</p></li></ul></li><li><p><strong>自动生成 action creators 和 action types</strong>：</p><ul><li>RTK 自动生成 action creators，避免了手动定义 action type 的重复劳动。这不仅减少了错误的可能性，还使代码更具可维护性和一致性。</li></ul></li><li><p><strong>开发工具集成</strong>：</p><ul><li>RTK 与 Redux DevTools 以及其他 Redux 开发工具更好地集成，带有默认的优化配置，例如减少手动配置、提供性能优化等。</li></ul></li></ul><h5 id="4、使用RTK的缺点⛈️"><a href="#4、使用RTK的缺点⛈️" class="headerlink" title="4、使用RTK的缺点⛈️"></a>4、使用RTK的缺点⛈️</h5><ul><li><strong>学习曲线</strong>：<ul><li>尽管 RTK 提供了很多简化的工具，但对于那些已经熟悉传统 Redux 的开发者来说，理解和掌握 RTK 的 API 和设计模式可能需要一定的时间。比如像 <code>createSlice</code>、<code>createAsyncThunk</code> 这些 API 对老用户来说可能需要一些时间适应。</li></ul></li><li><strong>隐藏的复杂性</strong>：<ul><li>虽然 RTK 内部处理了不可变性和异步操作，但它隐藏了一些 Redux 的原理性代码（如状态的不可变性操作、手动定义 <code>action</code> 和 <code>reducer</code> 的流程）。这对于希望深入了解 Redux 底层实现的开发者来说，可能减少了对框架的深度理解。</li><li>在代码中可以体现出来，使用RTK来自动创建action creator时默认只接收一个参数，因此需要用<code>prepare</code>函数来进行修改</li></ul></li><li><strong>与复杂应用的结合</strong>：<ul><li>对于一些非常复杂或高度定制的应用，RTK 的封装可能不够灵活，开发者有时可能需要绕过 RTK 的一些默认行为，以适应应用的特定需求。在这些情况下，传统的 Redux 反而可能更灵活。</li></ul></li></ul><h3 id="三、contextAPI-useReducer和Redux的区别"><a href="#三、contextAPI-useReducer和Redux的区别" class="headerlink" title="三、contextAPI+useReducer和Redux的区别"></a>三、<code>contextAPI</code>+<code>useReducer</code>和<code>Redux</code>的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240909101414957.png" alt="image-20240909101414957"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240909101339231.png" alt="image-20240909101339231"></p><h4 id="1、中间件和插件支持"><a href="#1、中间件和插件支持" class="headerlink" title="1、中间件和插件支持"></a><strong>1、中间件和插件支持</strong></h4><ul><li><strong>Context API + useReducer</strong>：没有 Redux 那种丰富的中间件和插件生态系统，例如 <code>redux-thunk</code>、<code>redux-saga</code> 之类的异步操作工具。通常需要手动处理复杂的异步逻辑。</li><li><strong>Redux</strong>：拥有大量中间件和开发工具（如 Redux DevTools和Middleware），可以很方便地<strong>调试和处理异步操作</strong>。</li></ul><h4 id="2、状态存储方式"><a href="#2、状态存储方式" class="headerlink" title="2、状态存储方式"></a><strong>2、状态存储方式</strong></h4><ul><li><strong>Context API + useReducer</strong>：没有全局的单一状态树。通过 <code>useReducer</code> 来管理本地状态，并通过 <code>Context API</code> 提供状态共享的功能。不容易新增状态（要添加新的Provider和Reducer）</li><li><strong>Redux</strong>：有一个全局的单一状态树（store），所有的应用状态都存储在这一个 store 中。这使得状态管理更加集中。创建新的状态slice较为方便</li></ul><h4 id="3、起步"><a href="#3、起步" class="headerlink" title="3、起步"></a>3、起步</h4><ul><li><strong>Context API + useReducer</strong>：由React直接提供，很容易建立</li><li><strong>Redux</strong>：需要提供插件支持，在初始建立的时候较为复杂</li></ul><h4 id="4、优化（具体见上一节）"><a href="#4、优化（具体见上一节）" class="headerlink" title="4、优化（具体见上一节）"></a>4、优化（具体见上一节）</h4><ul><li><strong>Context API + useReducer</strong>：优化较为复杂</li><li><strong>Redux</strong>：提供了很多开箱即用的优化</li></ul>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程12-React中可优化的部分以及useEffect的补充</title>
    <link href="/2024/09/03/react%E8%AF%BE%E7%A8%8B12-React%E4%B8%AD%E5%8F%AF%E4%BC%98%E5%8C%96%E7%9A%84%E9%83%A8%E5%88%86%E4%BB%A5%E5%8F%8AuseEffect%E7%9A%84%E8%A1%A5%E5%85%85/"/>
    <url>/2024/09/03/react%E8%AF%BE%E7%A8%8B12-React%E4%B8%AD%E5%8F%AF%E4%BC%98%E5%8C%96%E7%9A%84%E9%83%A8%E5%88%86%E4%BB%A5%E5%8F%8AuseEffect%E7%9A%84%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<p>本节探讨如何优化React项目，以及对useEffect的用法做一个小小的补充</p><span id="more"></span><h3 id="一、避免不必要的渲染"><a href="#一、避免不必要的渲染" class="headerlink" title="一、避免不必要的渲染"></a>一、避免不必要的渲染</h3><p>方法：memo、useMemo、useCallback、将元素传递到其他元素中作为children或其他道具</p><p>组件实例只能在三种不同的情况下重新呈现：</p><p>​状态改变、context改变、父组件重新渲染</p><p>wasted render： 没有在DOM产生任何变化的渲染</p><p>（使程序停滞或无响应）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903184623448.png" alt="image-20240903184623448" style="zoom:80%;" /><p>选择设置激活记录渲染的原因，然后点击开始录制和结束录制就可以获取每次渲染的信息</p><p>使用TEST应用“将元素传递到其他元素中作为children或其他道具”这个方法：</p><p>​当一个组件中包含了一个渲染时间很长的组件，每当大组件重新渲染的时候都会重新渲染这个组件。但是把组件当作children传入的时候，就不会将它重新渲染了。</p><p>​why？作为children，它最先被渲染，每次组件渲染时，直接将children移交，不会受到状态更新的影响。</p><p>添加工具咯：</p><p>Memoization</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903191433311.png" alt="image-20240903191433311" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903191638380.png" alt="image-20240903191638380" style="zoom: 33%;" /><p>父组件中的状态改变会重新渲染所有子组件，所以当一个子组件渲染速度过慢时，会使其他组件也受到影响。（经常更新，heavy，收到的道具经常不变）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903192958326.png" alt="image-20240903192958326"></p><p>这样包装起来就OK了。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903201449887.png" alt="image-20240903201449887" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903201522483.png" alt="image-20240903201522483" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903201600349.png" alt="image-20240903201600349" style="zoom: 33%;" /><p>解决object：useMemo</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903202608079.png" alt="image-20240903202608079"></p><p>useCallback（记忆函数），解决function  （setState函数是自动记忆的）</p><p>​<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240903203412445.png" alt="image-20240903203412445"></p><p>减少与context相关的渲染浪费</p><p>​当provider是App的子组件而App重新渲染，则provider中的context的value作为对象会重新渲染。因此所有接收context的对象的组件也都会被重新渲染。（使用useMemo来创建对象）</p><p>当想要记住的组件是要被export的，就可以直接</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-06%20154919.png" alt="img"></p><h3 id="二、提高应用的速度和相应能力（无延迟）"><a href="#二、提高应用的速度和相应能力（无延迟）" class="headerlink" title="二、提高应用的速度和相应能力（无延迟）"></a>二、提高应用的速度和相应能力（无延迟）</h3><p>useMemo、useCallback、useTransition</p><h3 id="三、减少Bundle的大小"><a href="#三、减少Bundle的大小" class="headerlink" title="三、减少Bundle的大小"></a>三、减少Bundle的大小</h3><p>方法：减少第三方包的使用，实现代码拆分和延迟加载</p><h4 id="什么是bundle？"><a href="#什么是bundle？" class="headerlink" title="什么是bundle？"></a><strong>什么是bundle？</strong></h4><hr><p>在前端开发中，“bundle”指的是将多个资源文件（如JavaScript、CSS、图像、字体等）打包成一个或多个文件的过程。这个打包的过程通常通过工具如Webpack、Parcel或Vite来完成。</p><p>为什么要进行打包？</p><ol><li><strong>减少HTTP请求</strong>：将多个文件打包成一个文件，可以减少浏览器发送的HTTP请求数量，从而加快页面的加载速度。</li><li><strong>代码压缩和优化</strong>：打包过程中，工具可以对代码进行压缩和优化，如去除无用代码（tree-shaking）、压缩代码大小、混淆代码以提高安全性等。</li><li><strong>模块化管理</strong>：通过打包工具，可以更好地管理项目中的模块和依赖，解决不同模块之间的依赖关系。</li><li><strong>跨浏览器兼容性</strong>：打包工具通常还可以处理不同浏览器对JavaScript或CSS特性的支持情况，生成兼容性的代码。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240904100411303.png" alt="image-20240904100411303"></p><h4 id="懒加载："><a href="#懒加载：" class="headerlink" title="懒加载："></a><strong>懒加载：</strong></h4><hr><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240907144718481.png" alt="image-20240907144718481"></p><p>懒加载（Lazy Loading）是一种优化技术，主要用于延迟加载页面中的资源或内容，直到它们真正需要被显示或使用时才进行加载。这种技术可以显著提高页面初始加载的速度，并减少不必要的资源消耗。</p><p><strong>提升页面加载速度</strong>：通过减少初始加载的资源数量，可以加快页面的显示速度，提升用户体验。</p><p><strong>减少带宽消耗</strong>：用户只会加载他们实际需要的资源，从而节省带宽，尤其对于移动设备用户更加友好。</p><p><strong>提升性能</strong>：对于复杂的Web应用，懒加载可以减少内存占用和CPU消耗，因为不需要一次性加载和渲染所有内容。</p><p><code>const Homepage = lazy(() =&gt; import(&quot;./pages/Homepage&quot;));</code></p><h4 id="suspense"><a href="#suspense" class="headerlink" title="suspense"></a><strong>suspense</strong></h4><hr><p>是React库中的一个组件，用于处理异步加载组件或数据时的渲染过渡。<code>Suspense</code>可以让您在等待异步操作完成之前显示一个备用内容（例如加载指示器），从而提升用户体验。</p><p><strong>组件懒加载（代码分割）</strong>：与<code>React.lazy()</code>一起使用，延迟加载组件，减少初始加载体积。</p><p><strong>数据获取（未来特性）</strong>：React团队也在扩展<code>Suspense</code>用于处理数据获取，但目前需要配合一些第三方库，如<code>relay</code>或<code>react-query</code>。</p><p><strong>步骤：</strong></p><ol><li>使用<code>React.lazy()</code>函数懒加载组件。</li><li>使用<code>&lt;Suspense&gt;</code>组件包裹懒加载的组件，并提供一个<code>fallback</code>属性来指定加载期间显示的UI。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240904102540533.png" alt="image-20240904102540533"></p><h3 id="四、Don’t-Optimize-Prematurely"><a href="#四、Don’t-Optimize-Prematurely" class="headerlink" title="四、Don’t Optimize Prematurely"></a>四、Don’t Optimize Prematurely</h3><p>引用自计算机科学家Donald Knuth的名言：“Premature optimization is the root of all evil” （过早优化是万恶之源）。这条原则强调在程序开发的早期阶段，不应该花费过多时间在微小的性能优化上</p><ol><li><strong>浪费时间和资源</strong></li></ol><p>在开发初期，程序的结构和需求可能尚未完全明确。如果过早地进行优化，可能会导致大量的时间和资源浪费在处理非关键的性能问题上，而这些问题可能在后续的开发中根本不会出现。</p><ol start="2"><li><strong>降低代码可读性和可维护性</strong></li></ol><p>许多优化措施可能会使代码变得复杂难懂。这不仅增加了代码的维护难度，还可能导致后续的开发和调试变得更加困难。简洁、清晰的代码通常比复杂的、高度优化的代码更容易维护。</p><ol start="3"><li><strong>难以预测的性能瓶颈</strong></li></ol><p>在程序开发的早期，真正的性能瓶颈可能尚不明确。过早优化可能会针对一些并不是实际瓶颈的部分进行，而忽略了更为重要的性能问题。只有在程序的主要功能基本完成并经过性能测试后，才能更准确地识别和解决实际的瓶颈。</p><ol start="4"><li><strong>延迟项目进度</strong></li></ol><p>过早的优化可能会分散开发人员的注意力，使他们无法专注于实现核心功能。这样会导致项目的整体进度被延迟，影响最终的交付时间。</p><ol start="5"><li><strong>优化的效果有限</strong></li></ol><p>在没有明确需求和数据支持的情况下，进行优化往往难以显著提升性能。相反，通过后期的分析和针对性优化，往往可以在关键部分取得更大的性能提升。</p><h3 id="五、useEffect"><a href="#五、useEffect" class="headerlink" title="五、useEffect"></a>五、useEffect</h3><p><strong>依赖数组：</strong></p><p>​✅state variable(状态变量)、prop、context value、reactive value(反应值：与状态有关的变量或函数）</p><p>​    ❌objects、arrays（他们在每次渲染都会被重新创建，react会判定为旧的和新的不同）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240906152320236.png" alt="image-20240906152320236" style="zoom: 33%;" /><p>Effect最好是作为最后的选择来使用！！！以下是它被过度使用的用例（然鹅前面的项目一直在使用。。）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240906152347059.png" alt="image-20240906152347059" style="zoom: 33%;" /><h5 id="stale-closures"><a href="#stale-closures" class="headerlink" title="stale closures:"></a><strong>stale closures</strong>:</h5><p>“<strong>Stale closure</strong>”是一个与闭包（closure）相关的编程问题，通常在处理异步操作或回调时容易出现。它指的是闭包内部引用了外部作用域的变量，但在闭包执行时，这些变量的值已经发生了变化，导致闭包内部使用了过时（stale）的值。</p><h3 id="六、补充contextAPI-useReducer和Redux在优化上的区别"><a href="#六、补充contextAPI-useReducer和Redux在优化上的区别" class="headerlink" title="六、补充contextAPI+useReducer和Redux在优化上的区别"></a>六、补充<code>contextAPI+useReducer</code>和<code>Redux</code>在优化上的区别</h3><h4 id="（1）contextAPI-useReducer"><a href="#（1）contextAPI-useReducer" class="headerlink" title="（1）contextAPI+useReducer"></a>（1）contextAPI+useReducer</h4><p>在状态管理优化方面，Redux 提供了许多开箱即用的工具和功能，使得优化性能相对简单。以下是 Redux 提供的一些常见优化手段：</p><h5 id="1-Redux-DevTools"><a href="#1-Redux-DevTools" class="headerlink" title="1. Redux DevTools"></a>1. <strong>Redux DevTools</strong></h5><ul><li><strong>Redux DevTools</strong> 提供了一种强大的调试工具，可以跟踪状态变化、时间旅行调试、回滚状态等。它不仅有助于调试，还可以帮助开发者分析和优化状态更新。</li><li><strong>性能优化</strong>：通过 Redux DevTools，可以实时查看哪些 action 触发了状态更新，分析哪些部分的状态管理和渲染需要优化。</li></ul><h5 id="2-Selector-和-Reselect"><a href="#2-Selector-和-Reselect" class="headerlink" title="2. Selector 和 Reselect"></a>2. <strong>Selector 和 Reselect</strong></h5><ul><li><strong>Reselect</strong> 是 Redux 官方推荐的一个选择器库，用于创建带记忆功能的选择器（memoized selectors）。它通过缓存计算结果来避免不必要的计算和重渲染。</li><li><strong>优化点</strong>：当状态更新时，如果未实际使用的数据未发生变化，Reselect 能确保组件不会重新计算或渲染，提升性能。</li></ul><h5 id="3-Immutable-数据管理"><a href="#3-Immutable-数据管理" class="headerlink" title="3. Immutable 数据管理"></a>3. <strong>Immutable 数据管理</strong></h5><ul><li>Redux 强调使用不可变数据，这样可以轻松地检测数据是否变化，从而优化状态更新过程。不可变性保证了当状态更新时，只有发生了实际变化的数据才会触发重新渲染。</li><li><strong>优化点</strong>：通过严格遵循不可变数据的原则，Redux 可以快速地检查状态是否发生变化，并仅更新相关组件，减少了不必要的渲染。</li></ul><h5 id="4-中间件优化"><a href="#4-中间件优化" class="headerlink" title="4. 中间件优化"></a>4. <strong>中间件优化</strong></h5><ul><li><strong>Redux-thunk</strong> 和 <strong>Redux-saga</strong> 等中间件可以优化异步操作的处理方式，减少不必要的状态更新和数据请求。</li><li><strong>优化点</strong>：通过合理设计中间件逻辑，可以避免重复的 API 请求或复杂的状态变更，进而优化应用性能。</li></ul><h5 id="5-使用-combineReducers-切分-reducer"><a href="#5-使用-combineReducers-切分-reducer" class="headerlink" title="5. 使用 combineReducers 切分 reducer"></a>5. <strong>使用 combineReducers 切分 reducer</strong></h5><ul><li>Redux 支持使用 <code>combineReducers</code> 将状态分片管理，避免每次状态更新时整个状态树都被重新计算。</li><li><strong>优化点</strong>：将状态管理分离成多个独立的 reducer，每个 reducer 只负责更新它自己管理的状态，这样可以确保应用只会在状态相关部分发生变化时触发更新，而不会影响其他不相关的状态。</li></ul><h5 id="6-React-Redux-的-connect-和-useSelector"><a href="#6-React-Redux-的-connect-和-useSelector" class="headerlink" title="6. React-Redux 的 connect 和 useSelector"></a>6. <strong>React-Redux 的 <code>connect</code> 和 <code>useSelector</code></strong></h5><ul><li><strong>connect</strong> 和 <strong>useSelector</strong> 提供了基于 Redux 状态的高效选择器机制。<code>connect</code> 使用了 <code>shouldComponentUpdate</code> 来优化组件的重渲染，而 <code>useSelector</code> 也支持通过比较函数（equality function）来决定是否重新渲染组件。</li><li><strong>优化点</strong>：通过 <code>connect</code> 和 <code>useSelector</code> 的正确使用，组件只会在其关心的状态发生变化时才重新渲染，减少不必要的渲染。</li></ul><h5 id="7-批处理（Batching-Updates）"><a href="#7-批处理（Batching-Updates）" class="headerlink" title="7. 批处理（Batching Updates）"></a>7. <strong>批处理（Batching Updates）</strong></h5><ul><li><strong>Redux</strong> 在某些情况下支持批量更新状态，从而减少多次不必要的渲染。React-Redux 自动支持 React 的批处理更新功能（batching），确保在一个事件循环中，状态变化会被批处理，从而避免多次重新渲染。</li><li><strong>优化点</strong>：批处理可以确保在一次状态变化过程中，多个组件的渲染被合并处理，减少性能开销。</li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>Redux 提供了很多优化工具，开发者可以通过使用 <code>Reselect</code>、<code>Redux DevTools</code>、<code>Immutable 数据结构</code>、中间件、<code>combineReducers</code>、以及 <code>React-Redux</code> 提供的 <code>connect</code> 和 <code>useSelector</code> 等机制，轻松优化应用的性能。而 <code>Context API + useReducer</code> 则需要手动实现类似的优化机制，尤其是在组件重渲染控制和复杂异步逻辑处理上，Redux 的优化工具更加成熟和开箱即用。</p><h4 id="（2）Context-API-useReducer"><a href="#（2）Context-API-useReducer" class="headerlink" title="（2）Context API + useReducer"></a>（2）Context API + useReducer</h4><p><code>Context API + useReducer</code> 优化较为复杂，主要原因在于它没有像 Redux 那样内置的优化机制和工具，开发者需要手动处理状态管理和性能优化的问题。以下是具体原因：</p><h5 id="1-Context-的全局重渲染"><a href="#1-Context-的全局重渲染" class="headerlink" title="1. Context 的全局重渲染"></a>1. <strong>Context 的全局重渲染</strong></h5><ul><li><strong>问题</strong>：Context API 的一个主要问题是，当上下文（Context）中的状态发生变化时，所有使用该 Context 的组件都会重新渲染，即使某些组件并不依赖这个变化的数据。这可能导致不必要的重渲染，影响性能。</li><li><strong>原因</strong>：React Context 的设计是为了简化跨组件传递数据，但它没有内置类似于 Redux 的细粒度状态更新机制。任何状态变化都会影响使用该 Context 的所有组件。</li><li><strong>解决方法</strong>：开发者需要手动通过分离 Context 或使用 <code>useMemo</code>、<code>useCallback</code> 来减少不必要的重渲染。这就增加了复杂性，特别是在应用变得庞大时，需要手动进行性能优化。</li></ul><h5 id="2-缺乏像-Reselect-这样的记忆化选择器"><a href="#2-缺乏像-Reselect-这样的记忆化选择器" class="headerlink" title="2. 缺乏像 Reselect 这样的记忆化选择器"></a>2. <strong>缺乏像 Reselect 这样的记忆化选择器</strong></h5><ul><li><strong>问题</strong>：<code>useReducer</code> 没有像 Redux 的 Reselect 这样方便的选择器库，开发者需要手动实现选择器（selectors）来提取和处理状态中的数据，并进行记忆化优化。</li><li><strong>原因</strong>：Context API 和 <code>useReducer</code> 只是 React 内置的状态管理机制，它们并不包含对状态读取或选择逻辑的优化。如果需要基于状态的某些部分进行计算或处理，开发者可能需要自己编写记忆化逻辑，这相对 Redux 来说更加复杂。</li><li><strong>解决方法</strong>：开发者可以借助 React 的 <code>useMemo</code> 来手动实现记忆化选择器，但这仍然需要自行编写和管理。</li></ul><h5 id="3-异步操作和中间件的处理复杂"><a href="#3-异步操作和中间件的处理复杂" class="headerlink" title="3. 异步操作和中间件的处理复杂"></a>3. <strong>异步操作和中间件的处理复杂</strong></h5><ul><li><strong>问题</strong>：<code>useReducer</code> 没有内置的异步处理机制，也没有像 Redux 中的 <code>redux-thunk</code> 或 <code>redux-saga</code> 这样的中间件，开发者需要手动管理异步操作的状态。</li><li><strong>原因</strong>：<code>useReducer</code> 是一个同步的 reducer 函数，设计上不支持处理异步逻辑。与 Redux 中通过中间件轻松处理异步状态不同，在 <code>useReducer</code> 中管理异步操作需要通过多个 <code>useEffect</code> 结合状态处理，这会导致代码变得更加复杂。</li><li><strong>解决方法</strong>：通常，开发者需要将异步逻辑放入 <code>useEffect</code> 钩子中手动处理，或者使用第三方库来帮助简化异步状态管理。</li></ul><h5 id="4-复杂状态拆分与管理"><a href="#4-复杂状态拆分与管理" class="headerlink" title="4. 复杂状态拆分与管理"></a>4. <strong>复杂状态拆分与管理</strong></h5><ul><li><strong>问题</strong>：当应用的状态变得复杂时，Context API + <code>useReducer</code> 可能会显得笨重。对于复杂的全局状态管理，拆分和维护多个 <code>useReducer</code> 以及对应的 <code>Context</code> 会变得难以维护。</li><li><strong>原因</strong>：<code>useReducer</code> 没有类似于 Redux 的 <code>combineReducers</code> 方法来自动分片管理不同的状态。开发者需要手动管理多个 <code>Context</code> 和 <code>Reducer</code>，并处理它们之间的依赖关系，这会让应用的复杂度增加。</li><li><strong>解决方法</strong>：可以通过模块化拆分 <code>Reducer</code> 和 <code>Context</code>，但这需要开发者自行管理每个部分的状态和更新逻辑，增加了维护成本。</li></ul><h5 id="5-缺乏调试和开发工具支持"><a href="#5-缺乏调试和开发工具支持" class="headerlink" title="5. 缺乏调试和开发工具支持"></a>5. <strong>缺乏调试和开发工具支持</strong></h5><ul><li><strong>问题</strong>：<code>Context API + useReducer</code> 没有像 Redux DevTools 这样强大的调试工具，开发者调试状态更新和流转的过程更加困难。</li><li><strong>原因</strong>：Redux DevTools 提供了丰富的功能，如时间旅行、action 日志、状态快照等。而 <code>Context API + useReducer</code> 缺少这样的工具支持，调试状态流转时只能依赖常规的 React 开发者工具，调试效率较低。</li><li><strong>解决方法</strong>：开发者可以通过手动调试和添加日志的方式解决，但这比使用 Redux DevTools 直接查看状态变化要复杂得多。</li></ul><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p><code>Context API + useReducer</code> 优化较为复杂，主要是因为它缺乏自动化的性能优化工具和机制。Context 全局状态变化时会导致所有订阅组件重渲染，手动管理状态拆分和异步逻辑也相对繁琐。相比之下，Redux 提供了很多开箱即用的优化工具和中间件，可以帮助开发者更轻松地管理和优化状态流转。</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程11-Worldwise</title>
    <link href="/2024/08/29/react%E8%AF%BE%E7%A8%8B11-Worldwise/"/>
    <url>/2024/08/29/react%E8%AF%BE%E7%A8%8B11-Worldwise/</url>
    
    <content type="html"><![CDATA[<p>本次课建立了更贴近现实的单页app（但是仍然是调用了虚假的API），第一次使用到Routing（路由）。</p><span id="more"></span><p>通过代码段可以用csm直接导入相应css module，很方便呀</p><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><h4 id="（1）Routing"><a href="#（1）Routing" class="headerlink" title="（1）Routing"></a>（1）Routing</h4><p>在React应用中，<strong>路由（Routing）</strong> 是管理不同页面或视图导航的关键机制。它允许用户通过更改URL来访问应用中的不同部分，而无需重新加载整个页面，这在构建单页应用（SPA）时尤为重要。此外，<strong>Router</strong> 通常指的是实现路由功能的具体组件或工具，两者虽相关但有所区别。</p><h5 id="1、Routing的作用"><a href="#1、Routing的作用" class="headerlink" title="1、Routing的作用"></a>1、Routing的作用</h5><hr><ol><li><p><strong>页面导航管理</strong></p><ul><li><p>多视图管理：在一个应用中，不同的URL对应不同的组件或页面。例如，<code>/home</code> 显示主页，<code>/about</code> 显示关于页面。</p></li><li><p>用户体验优化：通过路由，用户可以在应用内流畅地导航，而无需页面刷新，提升响应速度和用户体验。</p></li></ul></li><li><p><strong>单页应用（SPA）的核心</strong></p><ul><li><p>无需刷新页面：SPA通过路由实现不同视图的切换，避免了传统多页应用频繁的页面刷新。</p></li><li><p>状态保持：在SPA中，应用的状态（如用户登录信息）可以在不同路由间保持，不会因页面刷新而丢失。</p></li></ul></li><li><p><strong>动态内容加载</strong></p><ul><li>参数化路由：允许在URL中包含动态参数，如 <code>/user/:id</code>，根据不同的<code>id</code>加载不同的用户信息。</li><li>嵌套路由：支持在一个路由内嵌套其他路由，实现复杂的页面布局和导航结构。</li></ul></li><li><p><strong>路由守卫与权限控制</strong></p><ul><li><p>保护路由：根据用户的认证状态或权限，控制用户是否可以访问某些路由。</p></li><li><p>重定向：在特定条件下，将用户重定向到其他页面，例如未登录用户重定向到登录页。</p></li></ul></li><li><p><strong>SEO优化</strong></p><ul><li>服务器端渲染（SSR）：结合路由，能够实现更好的SEO优化，使搜索引擎能够正确抓取页面内容。</li></ul></li></ol><h5 id="2、Routing与Router的区别"><a href="#2、Routing与Router的区别" class="headerlink" title="2、Routing与Router的区别"></a>2、Routing与Router的区别</h5><hr><p>1.<strong>Routing（路由）</strong></p><ul><li>概念层面：指的是应用中不同路径与组件之间的映射关系，以及导航和页面切换的整体机制。</li><li>功能层面：包括定义路径、管理导航、处理动态参数、嵌套结构等。</li></ul><p>2.<strong>Router（路由器）</strong></p><ul><li>实现层面：是具体实现Routing功能的组件或工具。在React中，通常指的是像<code>BrowserRouter</code>、<code>HashRouter</code>这样的组件。</li><li>职责：监听URL的变化，匹配路由配置，并渲染对应的组件。</li></ul><h4 id="（2）SPA（单页应用）"><a href="#（2）SPA（单页应用）" class="headerlink" title="（2）SPA（单页应用）"></a>（2）SPA（单页应用）</h4><p><strong>SPA（Single Page Application，单页应用）</strong> 是一种现代Web应用程序的开发模式，特点是整个应用只包含一个主页面，通过动态加载内容来更新页面部分内容，而不需要完全刷新页面。这种方式为用户提供了更加流畅和接近桌面应用的用户体验。SPA应用在用户访问时只加载一次完整的HTML、CSS、JavaScript等资源，之后的页面更新通过AJAX请求或其他手段异步加载数据，然后动态更新页面内容。这种方式避免了传统多页应用程序（MPA）每次导航时都会重新加载整个页面的过程。</p><h5 id="1、SPA的特点"><a href="#1、SPA的特点" class="headerlink" title="1、SPA的特点"></a>1、SPA的特点</h5><hr><p>1）<strong>单个HTML页面</strong></p><ul><li>单一入口：整个应用只有一个HTML文件，所有的视图和页面都通过JavaScript动态渲染。</li><li>动态内容更新：页面的切换和内容更新不会重新加载整个页面，而是通过局部更新实现。</li></ul><p>2）<strong>流畅的用户体验</strong></p><ul><li>无刷新页面切换：用户点击链接后，不会看到传统页面刷新带来的白屏或加载等待，而是立即呈现新的内容。</li><li>更快的响应速度：由于不需要重新加载整个页面，页面切换速度更快，用户体验更佳。</li></ul><p>3）<strong>客户端路由</strong></p><ul><li>前端管理路由：使用前端路由库（如React Router、Vue Router等）来管理不同URL与组件之间的映射关系。</li><li>动态路径映射：客户端路由可以根据URL动态加载不同的页面或组件内容。</li></ul><p>4）<strong>丰富的交互</strong></p><ul><li>接近桌面应用的体验：由于页面不需要频繁刷新，SPA可以实现更复杂的交互和动画效果，使其更接近桌面应用的使用体验。</li><li>即时反馈：用户操作的结果可以即时在页面上显示，无需等待页面重新加载。</li></ul><p>5）<strong>数据交互和状态管理</strong></p><ul><li>AJAX请求：使用AJAX或Fetch API来与服务器进行数据交互，动态加载数据并更新视图。</li><li>前端状态管理：通过Redux、Vuex等状态管理工具来管理应用中的全局状态，保持数据的一致性和同步性。</li></ul><p>6）<strong>SEO挑战</strong></p><ul><li>默认对搜索引擎不友好：由于内容是通过JavaScript动态加载的，搜索引擎爬虫可能无法抓取到页面内容，影响SEO。</li><li>解决方案：使用服务器端渲染（SSR）或预渲染技术，如Next.js（用于React）和Nuxt.js（用于Vue）等来改善SEO问题。</li></ul><p>7）<strong>更高的初次加载时间</strong></p><ul><li>初次加载资源较多：由于整个应用所需的资源（包括所有页面的JavaScript和CSS）都在第一次访问时加载，可能导致初次加载时间较长。</li><li>优化手段：使用代码分割（Code Splitting）、懒加载（Lazy Loading）和缓存（Caching）等技术来优化加载性能。</li></ul><h5 id="2、SPA的工作原理"><a href="#2、SPA的工作原理" class="headerlink" title="2、SPA的工作原理"></a>2、SPA的工作原理</h5><hr><p>1）<strong>初次加载</strong></p><ul><li>用户访问SPA时，服务器会返回一个完整的HTML页面，该页面中包含了所有必要的CSS和JavaScript文件。</li></ul><p>2）<strong>路由管理</strong></p><ul><li>SPA的客户端路由会监听URL变化，并根据路由规则决定加载和渲染哪个组件或页面，而不是重新请求服务器的HTML页面。</li></ul><p>3）<strong>数据请求</strong></p><ul><li>页面内容的更新通常通过AJAX请求从服务器获取数据，然后通过JavaScript在前端更新页面部分内容。</li></ul><p>4）<strong>状态管理</strong></p><ul><li>使用前端的状态管理工具（如Redux、Vuex）来管理应用的全局状态，确保页面间的数据同步。</li></ul><h5 id="3、SPA的优缺点"><a href="#3、SPA的优缺点" class="headerlink" title="3、SPA的优缺点"></a>3、SPA的优缺点</h5><hr><p><strong>优点：</strong></p><ul><li><strong>用户体验流畅</strong>：无刷新页面切换，体验接近桌面应用。</li><li><strong>性能优势</strong>：通过局部更新页面内容，减少了不必要的资源加载和页面刷新。</li><li><strong>更易维护</strong>：前后端分离，前端代码更模块化、更容易维护。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>SEO问题</strong>：默认情况下，搜索引擎可能无法索引SPA的动态内容。</li><li><strong>首屏加载慢</strong>：初次加载时需要加载较多资源，可能导致页面加载时间较长。</li><li><strong>开发复杂度高</strong>：前端需要处理更多逻辑，开发过程中需要考虑路由、状态管理、性能优化等多个方面。</li></ul><h5 id="4、SPA的常见应用场景"><a href="#4、SPA的常见应用场景" class="headerlink" title="4、SPA的常见应用场景"></a>4、SPA的常见应用场景</h5><hr><p>SPA适用于需要提供丰富交互、流畅用户体验的应用，例如：</p><ul><li><strong>社交媒体平台</strong>：如Facebook、Twitter等，用户频繁切换页面，但不希望看到页面刷新。</li><li><strong>管理后台系统</strong>：如数据管理系统、仪表盘等，用户需要频繁操作和查看不同的数据视图。</li><li><strong>在线文档编辑</strong>：如Google Docs，用户需要实时编辑文档，且希望操作体验流畅。</li><li><strong>电子商务平台</strong>：如亚马逊的商品浏览和购物体验，需在不同商品页面间快速切换。</li></ul><h4 id="（3）CSS-Modules"><a href="#（3）CSS-Modules" class="headerlink" title="（3）CSS Modules"></a>（3）CSS Modules</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240829105931940.png" alt="image-20240829105931940"></p><p>vite已预先下载了这个包不用自己下载哈哈哈开心。</p><h5 id="1、如何解决命名冲突？"><a href="#1、如何解决命名冲突？" class="headerlink" title="1、如何解决命名冲突？"></a>1、如何解决命名冲突？</h5><hr><p>在使用CSS Module时，CSS类名的作用域被限制在引入该CSS文件的组件内部。这样，定义在不同组件中的相同类名不会互相干扰。</p><p>CSS Module会根据类名、文件路径、文件名等信息生成一个唯一的类名，这个类名在全局范围内是唯一的，从而避免了命名冲突。</p><h5 id="2、使用步骤？"><a href="#2、使用步骤？" class="headerlink" title="2、使用步骤？"></a>2、使用步骤？</h5><hr><p><strong>创建 CSS 文件</strong>： 创建一个带有模块化命名的CSS文件，通常命名为<code>ComponentName.module.css</code>。</p><p><strong>导入 CSS Module</strong>： 在对应的组件文件中导入这个CSS文件，并使用它提供的类名。例如<code>import styles from &#39;./Button.module.css&#39;;</code></p><p><strong>生成唯一类名</strong>： 使用 <code>styles.button</code> 时，编译器会将 <code>.button</code> 类名转换为一个全局唯一的类名，如 <code>.Button_button__3d2s4</code>，从而避免冲突。</p><h5 id="3、优点？"><a href="#3、优点？" class="headerlink" title="3、优点？"></a>3、优点？</h5><hr><p><strong>防止类名冲突</strong>：不同组件的相同类名在使用CSS Module后会生成不同的全局类名，完全避免冲突问题。</p><p><strong>提高代码可维护性</strong>：开发者不需要担心类名命名冲突，能够专注于组件的开发。</p><p><strong>简化CSS管理</strong>：由于CSS Module的局部作用域，开发者可以使用简短且易读的类名，而不用担心全局命名问题。</p><h3 id="二、代码构建过程"><a href="#二、代码构建过程" class="headerlink" title="二、代码构建过程"></a>二、代码构建过程</h3><h4 id="（1）实现单页连接😡😡😡😡"><a href="#（1）实现单页连接😡😡😡😡" class="headerlink" title="（1）实现单页连接😡😡😡😡"></a>（1）实现单页连接😡😡😡😡</h4><ul><li>新建一个pages文件夹存储不同界面的jsx，使用以下结构代码导入APP.jsx</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">BrowserRouter</span>&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Homepage</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">BrowserRouter</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>建立连接，不使用<code>&lt;a href=&quot;/pricing&quot;&gt;Pricing&lt;/a&gt;</code>（会重新加载界面）而是<code>&lt;NavLink to=&quot;/pricing&quot;&gt;Pricing&lt;/NavLink&gt;</code>（记得导入NavLink，它相较于Link来说好处是会重点突出选中的连接）</li><li>建立一个PageNav放置连接，可以重用到其他界面中</li></ul><p>😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡😡快气晕了，我的eslint真的很不听话，啥都报错，明明是无伤大雅的warn都让我跑不了程序。改了好久的设置终于，在我将settings.json中添加</p><p><code>&quot;eslint.rules.customizations&quot;: [</code></p><p>  <code>&#123; &quot;rule&quot;: &quot;no-unused-vars&quot;, &quot;severity&quot;: &quot;warn&quot; &#125;,</code></p><p>  <code>&#123; &quot;rule&quot;: &quot;react/prop-types&quot;, &quot;severity&quot;: &quot;off&quot; &#125;</code></p><p> <code>]</code></p><p>然后在vite.config.js改成</p><p><code>export default defineConfig(&#123;</code></p><p> <code>plugins: [react(),  eslint(&#123;</code></p><p>​      <code>overrideConfig: &#123;</code></p><p>​          <code>rules: &#123;</code></p><p>​                    <code>&quot;no-unused-vars&quot;: &quot;warn&quot;,</code></p><p>​                     <code>&quot;react/prop-types&quot;: &quot;off&quot;,</code></p><p>​    <code>&#125;, &#125;,  &#125;), ],&#125;);</code></p><p>它终于不会仅仅因为我定义了prop未使用就不让我跑程序了。。😡😡😡😡</p><p>顺便</p><h4 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h4><p>使用element而不是组件的好处是？</p><p>使用URL存储状态（param）（query）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240830165915719.png" alt="image-20240830165915719"></p><p>useNavigate、useParams、useSearchParams的强大作用</p><Navigate replace to="cities" />     <p>onClick&#x3D;{(<em>e</em>) &#x3D;&gt; {</p><p>​      e.preventDefault();</p><p>​      navigate(-1);</p><p>​     }}这两段代码的要点</p><p>自己阅读了一段代码并分析功能、组件以及状态（比较简单比较好分析）</p><h4 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h4><p>（进入下一节了欸）</p><p>context API</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240830170233284.png" alt="image-20240830170233284"></p><p>（之前是用children来解决prop drilling的）</p><p>使用一个小app来练习context API，并且组合成一个函数，再用costom来简化代码</p><p>leaflet（地图库）</p><p>啊啊啊啊啊啊来不及整理，脑瓜子嗡嗡的。。</p><p>npm i react-datepicker  官网：<a href="https://www.npmjs.com/package/react-datepicker">https://www.npmjs.com/package/react-datepicker</a></p><p>导入、调整格式</p><p>Advanced state management&#x3D;&gt;<strong>syetem context</strong> + <strong>useReducer</strong></p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程-challenge</title>
    <link href="/2024/08/28/react%E8%AF%BE%E7%A8%8B-challenge/"/>
    <url>/2024/08/28/react%E8%AF%BE%E7%A8%8B-challenge/</url>
    
    <content type="html"><![CDATA[<p>钱币转换小app</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [amount, setAmount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> [fromCur, setFromCur] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;EUR&quot;</span>);<br>  <span class="hljs-keyword">const</span> [toCur, setToCur] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;USD&quot;</span>);<br>  <span class="hljs-keyword">const</span> [converted, setConverted] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [isLoading, setIsLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>          <span class="hljs-string">`https://api.frankfurter.app/latest?amount=<span class="hljs-subst">$&#123;amount&#125;</span>&amp;from=<span class="hljs-subst">$&#123;fromCur&#125;</span>&amp;to=<span class="hljs-subst">$&#123;toCur&#125;</span>`</span><br>        );<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>        <span class="hljs-title function_">setConverted</span>(data.<span class="hljs-property">rates</span>[toCur]);<br>        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">false</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (fromCur === toCur) <span class="hljs-keyword">return</span> <span class="hljs-title function_">setConverted</span>(amount);<br>      <span class="hljs-title function_">convert</span>();<br>    &#125;,<br>    [amount, fromCur, toCur]<br>  );<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;amount&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setAmount(Number(e.target.value))&#125;</span><br><span class="language-xml">        disabled=&#123;isLoading&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;fromCur&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setFromCur(e.target.value)&#125;</span><br><span class="language-xml">        disabled=&#123;isLoading&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;USD&quot;</span>&gt;</span>USD<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;EUR&quot;</span>&gt;</span>EUR<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;CAD&quot;</span>&gt;</span>CAD<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;INR&quot;</span>&gt;</span>INR<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;toCur&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setToCur(e.target.value)&#125;</span><br><span class="language-xml">        disabled=&#123;isLoading&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;USD&quot;</span>&gt;</span>USD<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;EUR&quot;</span>&gt;</span>EUR<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;CAD&quot;</span>&gt;</span>CAD<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;INR&quot;</span>&gt;</span>INR<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        &#123;converted&#125; &#123;toCur&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程9-usepopcorn-2</title>
    <link href="/2024/08/28/react%E8%AF%BE%E7%A8%8B9-usepopcorn-2/"/>
    <url>/2024/08/28/react%E8%AF%BE%E7%A8%8B9-usepopcorn-2/</url>
    
    <content type="html"><![CDATA[<p>k</p><span id="more"></span><h3 id="一、用户界面和主要功能"><a href="#一、用户界面和主要功能" class="headerlink" title="一、用户界面和主要功能"></a>一、用户界面和主要功能</h3><h4 id="（1）界面"><a href="#（1）界面" class="headerlink" title="（1）界面"></a>（1）界面</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828110027563.png" alt="image-20240828110027563"></p><h4 id="（2）功能"><a href="#（2）功能" class="headerlink" title="（2）功能"></a>（2）功能</h4><p>1、调用API可以导入电影数据，搜索到电影并显示出基本信息</p><p>2、单击电影可以看到详细信息，并可以为它评分且加入已看电影的清单，也可以在清单中删除电影</p><p>3、右上角统计一共看了多少部电影以及评分和平均电影时间</p><p>4、离开界面再进去时数据不会丢失</p><h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><h4 id="（1）App-js"><a href="#（1）App-js" class="headerlink" title="（1）App.js"></a>（1）App.js</h4><p>从网站<a href="https://www.omdbapi.com/%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9KEY%E5%90%8E%E8%8E%B7%E5%8F%96%E7%94%B5%E5%BD%B1%E8%B5%84%E6%BA%90%E6%95%B0%E6%8D%AE">https://www.omdbapi.com/获取免费KEY后获取电影资源数据</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">StarRating</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./StarRating&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useMovies &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useMovies&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useLocalStorageState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useLocalStorageState&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useKey &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useKey&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">KEY</span> = <span class="hljs-string">&quot;c69cb565&quot;</span>;  <br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">average</span> = (<span class="hljs-params">arr</span>) =&gt;<br>  arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur, i, arr</span>) =&gt;</span> acc + cur / arr.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [query, setQuery] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Flipped&quot;</span>);<br>  <span class="hljs-keyword">const</span> [selectedId, setSelectedId] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">const</span> &#123; movies, isLoading, error &#125; = <span class="hljs-title function_">useMovies</span>(query, handleCloseMovie);<br>  <span class="hljs-keyword">const</span> [watched, setWatched] = <span class="hljs-title function_">useLocalStorageState</span>([], <span class="hljs-string">&quot;watched&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSelectMovie</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-title function_">setSelectedId</span>(<span class="hljs-function">(<span class="hljs-params">selectedId</span>) =&gt;</span> (id === selectedId ? <span class="hljs-literal">null</span> : id));<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCloseMovie</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setSelectedId</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">hanleAddWatched</span>(<span class="hljs-params">movie</span>) &#123;<br>    <span class="hljs-title function_">setWatched</span>(<span class="hljs-function">(<span class="hljs-params">watched</span>) =&gt;</span> [...watched, movie]);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteWatched</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-title function_">setWatched</span>(<span class="hljs-function">(<span class="hljs-params">setWatched</span>) =&gt;</span> watched.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbID</span> !== id));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> <span class="hljs-attr">query</span>=<span class="hljs-string">&#123;query&#125;</span> <span class="hljs-attr">setQuery</span>=<span class="hljs-string">&#123;setQuery&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NumResults</span> <span class="hljs-attr">movies</span>=<span class="hljs-string">&#123;movies&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          &#123;isLoading &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Loader</span> /&gt;</span>&#125;</span><br><span class="language-xml">          &#123;!isLoading &amp;&amp; !error &amp;&amp; (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">MovieList</span> <span class="hljs-attr">movies</span>=<span class="hljs-string">&#123;movies&#125;</span> <span class="hljs-attr">onSelectMovie</span>=<span class="hljs-string">&#123;handleSelectMovie&#125;</span> /&gt;</span></span><br><span class="language-xml">          )&#125;</span><br><span class="language-xml">          &#123;error &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">ErrorMessage</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&#123;error&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          &#123;selectedId ? (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">MovieDetails</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">selectedId</span>=<span class="hljs-string">&#123;selectedId&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onCloseMovie</span>=<span class="hljs-string">&#123;handleCloseMovie&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onAddWatched</span>=<span class="hljs-string">&#123;hanleAddWatched&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">          ) : (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">WatchedSummary</span> <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span> /&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">WatchedMovieList</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onDeleteWatched</span>=<span class="hljs-string">&#123;handleDeleteWatched&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">          )&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Loader-js和Error-js"><a href="#Loader-js和Error-js" class="headerlink" title="Loader.js和Error.js"></a>Loader.js和Error.js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Loader</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;loader&quot;</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ErrorMessage</span>(<span class="hljs-params">&#123; message &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⚠️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      &#123;message&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NavBar和Logo"><a href="#NavBar和Logo" class="headerlink" title="NavBar和Logo"></a>NavBar和Logo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">NavBar</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nav-bar&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Logo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span>🍿<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>usePopcorn<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Search</span>(<span class="hljs-params">&#123; query, setQuery &#125;</span>) &#123;<br>  <span class="hljs-comment">// useEffect(function () &#123;</span><br>  <span class="hljs-comment">//   const el = document.querySelector(&quot;.search&quot;);</span><br>  <span class="hljs-comment">//   el.focus();</span><br>  <span class="hljs-comment">// &#125;, []);</span><br>  <span class="hljs-keyword">const</span> inputEl = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useKey</span>(<span class="hljs-string">&quot;Enter&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">activeElement</span> === inputEl.<span class="hljs-property">current</span>) <span class="hljs-keyword">return</span>;<br>    inputEl.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>    <span class="hljs-title function_">setQuery</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;search&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search movies...&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;query&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setQuery(e.target.value)&#125;</span><br><span class="language-xml">      ref=&#123;inputEl&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">NumResults</span>(<span class="hljs-params">&#123; movies &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;num-results&quot;</span>&gt;</span></span><br><span class="language-xml">      Found <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;movies.length&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> results</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Main</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Box</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOpen, setIsOpen] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-toggle&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpen((open) =&gt; !open)&#125;&gt;</span><br><span class="language-xml">        &#123;isOpen ? &quot;–&quot; : &quot;+&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isOpen &amp;&amp; children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MovieList</span>(<span class="hljs-params">&#123; movies, onSelectMovie &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list list-movies&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;movies?.map((movie) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Movie</span> <span class="hljs-attr">movie</span>=<span class="hljs-string">&#123;movie&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span> <span class="hljs-attr">onSelectMovie</span>=<span class="hljs-string">&#123;onSelectMovie&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Movie</span>(<span class="hljs-params">&#123; movie, onSelectMovie &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onSelectMovie(movie.imdbID)&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;movie.Poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">movie.Title</span>&#125; <span class="hljs-attr">poster</span>`&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;movie.Title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🗓<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.Year&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MovieDetails</span>(<span class="hljs-params">&#123; selectedId, onCloseMovie, onAddWatched, watched &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [movie, setMovie] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br>  <span class="hljs-keyword">const</span> [isLoading, setIsLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [userRating, setUserRating] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> countRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (userRating) countRef.<span class="hljs-property">current</span>++;<br>    &#125;,<br>    [userRating]<br>  );<br><br>  <span class="hljs-keyword">const</span> isWatched = watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbID</span>).<span class="hljs-title function_">includes</span>(selectedId);<br>  <span class="hljs-keyword">const</span> watchedUserRating = watched.<span class="hljs-title function_">find</span>(<br>    <span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbID</span> === selectedId<br>  )?.<span class="hljs-property">userRating</span>;<br><br>  <span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-title class_">Title</span>: title,<br>    <span class="hljs-title class_">Poster</span>: poster,<br>    <span class="hljs-title class_">Runtime</span>: runtime,<br>    imdbRating,<br>    <span class="hljs-title class_">Plot</span>: plot,<br>    <span class="hljs-title class_">Released</span>: released,<br>    <span class="hljs-title class_">Actors</span>: actors,<br>    <span class="hljs-title class_">Director</span>: director,<br>    <span class="hljs-title class_">Genre</span>: genre,<br>  &#125; = movie;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAdd</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> newWatchedMovie = &#123;<br>      <span class="hljs-attr">imdbID</span>: selectedId,<br>      title,<br>      poster,<br>      <span class="hljs-attr">imdbRating</span>: <span class="hljs-title class_">Number</span>(imdbRating),<br>      <span class="hljs-attr">runtime</span>: <span class="hljs-title class_">Number</span>(runtime.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>).<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>)),<br>      userRating,<br>      <span class="hljs-attr">countRatingDecisions</span>: countRef.<span class="hljs-property">current</span>,<br>    &#125;;<br>    <span class="hljs-title function_">onAddWatched</span>(newWatchedMovie);<br>    <span class="hljs-title function_">onCloseMovie</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">useKey</span>(<span class="hljs-string">&quot;Escape&quot;</span>, onCloseMovie);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">true</span>);<br>      <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getMovieDetails</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>          <span class="hljs-string">`http://www.omdbapi.com/?apikey=<span class="hljs-subst">$&#123;KEY&#125;</span>&amp;i=<span class="hljs-subst">$&#123;selectedId&#125;</span>`</span><br>        );<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>        <span class="hljs-title function_">setMovie</span>(data);<br>        <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">false</span>);<br>      &#125;<br>      <span class="hljs-title function_">getMovieDetails</span>();<br>    &#125;,<br>    [selectedId]<br>  );<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (!title) <span class="hljs-keyword">return</span>;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`Movie|<span class="hljs-subst">$&#123;title&#125;</span>`</span>;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;usePopcorn&quot;</span>;<br>      &#125;;<br>    &#125;,<br>    [title]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;details&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;isLoading ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Loader</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-back&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onCloseMovie&#125;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-symbol">&amp;larr;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">Poster</span> <span class="hljs-attr">of</span> $&#123;<span class="hljs-attr">movie</span>&#125;`&#125; /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;details-overview&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                &#123;released&#125; <span class="hljs-symbol">&amp;bull;</span> &#123;runtime&#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;genre&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                &#123;imdbRating&#125; IMDb rating</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;rating&quot;</span>&gt;</span></span><br><span class="language-xml">              &#123;!isWatched ? (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">StarRating</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">maxRating</span>=<span class="hljs-string">&#123;10&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;36&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">onSetRating</span>=<span class="hljs-string">&#123;setUserRating&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  /&gt;</span></span><br><span class="language-xml">                  &#123;userRating &gt; 0 &amp;&amp; (</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-add&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleAdd&#125;</span>&gt;</span></span><br><span class="language-xml">                      + Add to list</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                  )&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">              ) : (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You rated with this movie &#123;watchedUserRating&#125;🌟<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              )&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>&#123;plot&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Starring: &#123;actors&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Directed by: &#123;director&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>        &lt;/&gt;<br>      )&#125;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedSummary</span>(<span class="hljs-params">&#123; watched &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> avgImdbRating = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbRating</span>));<br>  <span class="hljs-keyword">const</span> avgUserRating = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">userRating</span>));<br>  <span class="hljs-keyword">const</span> avgRuntime = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">runtime</span>));<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;summary&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Movies you watched<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#️⃣<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;watched.length&#125; movies<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⭐️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgImdbRating.toFixed(2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgUserRating.toFixed(2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⏳<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgRuntime&#125; min<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedMovieList</span>(<span class="hljs-params">&#123; watched, onDeleteWatched &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;watched.map((movie) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">WatchedMovie</span> <span class="hljs-attr">movie</span>=<span class="hljs-string">&#123;movie&#125;</span> <span class="hljs-attr">onDeleteWatched</span>=<span class="hljs-string">&#123;onDeleteWatched&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedMovie</span>(<span class="hljs-params">&#123; movie, onDeleteWatched &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;movie.poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">movie.title</span>&#125; <span class="hljs-attr">poster</span>`&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;movie.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⭐️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.imdbRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.userRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⏳<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.runtime&#125; min<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-delete&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onDeleteWatched(movie.imdbID)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          x</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">KEY</span> = <span class="hljs-string">&quot;c69cb565&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useMovies</span>(<span class="hljs-params">query, callback</span>) &#123;<br>  <span class="hljs-keyword">const</span> [movies, setMovies] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [isLoading, setIsLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      callback?.();<br><br>      <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><br>      <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchMovies</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">true</span>);<br>          <span class="hljs-title function_">setError</span>(<span class="hljs-string">&quot;&quot;</span>);<br>          <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>            <span class="hljs-string">`http://www.omdbapi.com/?apikey=<span class="hljs-subst">$&#123;KEY&#125;</span>&amp;s=<span class="hljs-subst">$&#123;query&#125;</span>`</span>,<br>            &#123; <span class="hljs-attr">signal</span>: controller.<span class="hljs-property">signal</span> &#125;<br>          );<br>          <span class="hljs-comment">//处理服务器返回了非2xx的状态码的情况，如404</span><br>          <span class="hljs-keyword">if</span> (!res.<span class="hljs-property">ok</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Something went wrong with fetching movies&quot;</span>);<br><br>          <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>          <span class="hljs-keyword">if</span> (data.<span class="hljs-property">Response</span> === <span class="hljs-string">&quot;False&quot;</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Movie not found&quot;</span>);<br>          <span class="hljs-title function_">setMovies</span>(data.<span class="hljs-property">Search</span>);<br>          <span class="hljs-title function_">setError</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>          <span class="hljs-keyword">if</span> (err.<span class="hljs-property">name</span> !== <span class="hljs-string">&quot;AbortError&quot;</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">message</span>);<br>            <span class="hljs-title function_">setError</span>(err.<span class="hljs-property">message</span>);<br>          &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-title function_">setIsLoading</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-comment">//console.log(data.Search);</span><br>        <span class="hljs-comment">// .then((res) =&gt; res.json())</span><br>        <span class="hljs-comment">// .then((data) =&gt; setMovies(data.Search));</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (!query.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-title function_">setMovies</span>([]);<br>        <span class="hljs-title function_">setError</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-comment">//handleCloseMovie();</span><br>      <span class="hljs-title function_">fetchMovies</span>();<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        controller.<span class="hljs-title function_">abort</span>();<br>      &#125;;<br>    &#125;,<br>    [query]<br>  );<br>  <span class="hljs-keyword">return</span> &#123; movies, isLoading, error &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useKey</span>(<span class="hljs-params">key, action</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">code</span>.<span class="hljs-title function_">toLowerCase</span>() === key.<span class="hljs-title function_">toLowerCase</span>()) <span class="hljs-title function_">action</span>();<br>      &#125;<br><br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, callback);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, callback);<br>      &#125;;<br>    &#125;,<br>    [action, key]<br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLocalStorageState</span>(<span class="hljs-params">initialState, key</span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> storedValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(key);<br>    <span class="hljs-keyword">return</span> storedValue ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(storedValue) : initialState;<br>  &#125;);<br><br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(key, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value));<br>    &#125;,<br>    [value, key]<br>  );<br><br>  <span class="hljs-keyword">return</span> [value, setValue];<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程10-ReactQuiz(useReducer学习)</title>
    <link href="/2024/08/26/react%E8%AF%BE%E7%A8%8B10-ReactQuiz/"/>
    <url>/2024/08/26/react%E8%AF%BE%E7%A8%8B10-ReactQuiz/</url>
    
    <content type="html"><![CDATA[<p>本节课做出了一个小小的测验应用，主要目的是为了了解useReducer这个hook的强大功能！</p><span id="more"></span><p>Auto Rename Tag插件，我为什么没有早点下载你！！！！！！😭😭😭</p><h3 id="一、useReducer讲解"><a href="#一、useReducer讲解" class="headerlink" title="一、useReducer讲解"></a>一、useReducer讲解</h3><p><strong>如何使用useReducer？</strong>（三步走）</p><ol><li><strong>initialState</strong></li><li><strong>reducer函数</strong></li><li><strong>useReducer初定义状态</strong>（使用initialState）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240827161620491.png" alt="image-20240827161620491"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240827161715601.png" alt="image-20240827161715601"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/IMG_0477.PNG" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/IMG_0478.PNG" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/IMG_0479.PNG" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240827162143695.png" alt="image-20240827162143695"></p><h3 id="二、json-server"><a href="#二、json-server" class="headerlink" title="二、json-server"></a>二、json-server</h3><p>JSON Server 是一个简单易用的工具，用于快速创建一个基于 JSON 文件的 RESTful API。它非常适合在开发和测试过程中使用，特别是在没有后端或后端未完成时，你可以使用 JSON Server 来模拟 API 进行前端开发。</p><p>JSON Server 的主要功能包括：</p><ol><li><strong>模拟 RESTful API</strong>： JSON Server 可以根据一个简单的 JSON 文件自动生成 RESTful API，包括 GET、POST、PUT、PATCH 和 DELETE 等常见的 HTTP 方法。</li><li><strong>快速原型设计</strong>： 在开发过程中，你可以使用 JSON Server 快速创建一个 API，允许你专注于前端开发或 API 调用逻辑，而无需编写真实的后端代码。</li><li><strong>处理查询参数</strong>： JSON Server 支持处理 URL 中的查询参数，允许你基于查询条件返回不同的数据集。</li><li><strong>支持分页和排序</strong>： 它可以根据 URL 中的参数轻松实现数据的分页和排序。</li><li><strong>支持完整的 CRUD 操作</strong>： 通过简单的配置，JSON Server 可以让你对 JSON 数据进行创建、读取、更新和删除操作。</li></ol><p>在本次创建的应用中，我们有一个question.json，包含了一个questions数组，但是我们想要假装是通过一个（虚假的）API来获取到问题的内容，因此拆分了一下终端，<code>npm i json-server</code>命令下载json-server，然后找到配置文件把命令加入，就可以运行<code>npm run server</code>将question.json运行在指定的端口，访问(<a href="http://localhost:8001/questions)%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96questions%E6%95%B0%E7%BB%84%E3%80%82">http://localhost:8001/questions)就可以获取questions数组。</a></p><p><code>&quot;server&quot;: &quot;json-server --watch data/questions.json --port 8001&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240826154217162.png" alt="image-20240826154217162"></p><h3 id="三、应用界面和代码"><a href="#三、应用界面和代码" class="headerlink" title="三、应用界面和代码"></a>三、应用界面和代码</h3><h4 id="（1）主要界面"><a href="#（1）主要界面" class="headerlink" title="（1）主要界面"></a>（1）主要界面</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-08-27%20162942.png" alt="屏幕截图 2024-08-27 162942"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-08-27%20162955.png" alt="屏幕截图 2024-08-27 162955"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240827163054783.png" alt="image-20240827163054783"></p><h4 id="（2）要点"><a href="#（2）要点" class="headerlink" title="（2）要点"></a>（2）要点</h4><p>1、使用useReducer来批量集中地更新状态：由于reducer函数将状态的更新集中在一起，因此可以通过这个函数来得知所有状态的更新情况。除此之外，action.type的划分也可以很容易看到整个应用的多种状态。</p><p>2、状态列举：questions（问题数组）、status（应用状态：loading、error、ready、active、finished，对应界面的切换）、index（正在显示的问题坐标）、answer（用户的答案）、points（总分数）、highscore（最高分）、secondsRemaing（倒计时剩余时间）</p><p>3、如何使代码更具有可读性：将常量定义在函数体外而不是直接出现在某个js语句中；在构建APP的HTML时，尽量全部使用组件构建，不要出现冗余的的代码块；拆分组件的工作一定要做到位，例如本次应用中，拆分出了近十个小的组件，这样会使修改组件内容变得容易。</p><p>4、每个按钮的onClick函数！！在回答完最后一个问题之后，要进入finish界面了，如果不停止更新index就会报错。</p><p>5、当组件已然很多，可以把所有组件全部都放入components文件夹中了，但是此时要记得更新在index.js中导入App.js的时候路径问题。</p><p><strong>6、不太会用reducer积累器（需要复习js基础知识）</strong></p><h4 id="（三）代码"><a href="#（三）代码" class="headerlink" title="（三）代码"></a>（三）代码</h4><h5 id="1、index-css"><a href="#1、index-css" class="headerlink" title="1、index.css"></a>1、index.css</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--color-darkest</span>: <span class="hljs-number">#343a40</span>;<br>  <span class="hljs-attr">--color-dark</span>: <span class="hljs-number">#495057</span>;<br>  <span class="hljs-attr">--color-medium</span>: <span class="hljs-number">#ced4da</span>;<br>  <span class="hljs-attr">--color-light</span>: <span class="hljs-number">#f1f3f5</span>;<br><br>  <span class="hljs-attr">--color-theme</span>: <span class="hljs-number">#1098ad</span>;<br>  <span class="hljs-attr">--color-accent</span>: <span class="hljs-number">#ffa94d</span>;<br>&#125;<br><br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Codystar&amp;display=swap&quot;</span>);<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>  <span class="hljs-attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="hljs-string">&quot;Segoe UI&quot;</span>, Roboto, Oxygen,<br>    Ubuntu, Cantarell, <span class="hljs-string">&quot;Open Sans&quot;</span>, <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, sans-serif;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-light);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-darkest);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.app</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.main</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.app-header</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">66rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.error</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#495057</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">14rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Codystar&quot;</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">5.6rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3.6rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">4rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.start</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.progress</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">grid-template-columns</span>: auto auto;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>&#125;<br><br>progress &#123;<br>  -webkit-appearance: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / -<span class="hljs-number">1</span>;<br>&#125;<br><br>::-webkit-progress-bar &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br>::-webkit-progress-value &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-theme);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--color-dark);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-dark);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span> <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-attr">[disabled]</span>)<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-darkest);<br>&#125;<br><br><span class="hljs-selector-class">.btn-option</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-attr">[disabled]</span>)<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">1.2rem</span>);<br>&#125;<br><br><span class="hljs-selector-class">.btn</span><span class="hljs-selector-attr">[disabled]</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">cursor</span>: not-allowed;<br>&#125;<br><br><span class="hljs-selector-class">.btn-ui</span> &#123;<br>  <span class="hljs-attribute">float</span>: right;<br>&#125;<br><br><span class="hljs-selector-class">.options</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">3.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn-option</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">text-align</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.btn-option</span><span class="hljs-selector-class">.correct</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-theme);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--color-theme);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-light);<br>&#125;<br><span class="hljs-selector-class">.btn-option</span><span class="hljs-selector-class">.wrong</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-accent);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--color-accent);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-darkest);<br>&#125;<br><br><span class="hljs-selector-class">.answer</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">2rem</span>);<br>&#125;<br><br><span class="hljs-selector-class">.result</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-theme);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-light);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.6rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.result</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.2rem</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.highscore</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">4.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.loader-container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.6rem</span>;<br><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.timer</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--color-dark);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.35rem</span> <span class="hljs-number">2.8rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-comment">/* CREDIT: https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje */</span><br><span class="hljs-selector-class">.loader</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle closest-side, currentColor <span class="hljs-number">90%</span>, <span class="hljs-number">#0000</span>) <span class="hljs-number">0%</span><br>      <span class="hljs-number">50%</span>,<br>    <span class="hljs-built_in">radial-gradient</span>(circle closest-side, currentColor <span class="hljs-number">90%</span>, <span class="hljs-number">#0000</span>) <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>,<br>    <span class="hljs-built_in">radial-gradient</span>(circle closest-side, currentColor <span class="hljs-number">90%</span>, <span class="hljs-number">#0000</span>) <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> / <span class="hljs-number">3</span>) <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">animation</span>: loader <span class="hljs-number">1s</span> infinite linear;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> loader &#123;<br>  <span class="hljs-number">20%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">0%</span>, <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">40%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">100%</span>, <span class="hljs-number">50%</span> <span class="hljs-number">0%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">60%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>, <span class="hljs-number">50%</span> <span class="hljs-number">100%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">0%</span>;<br>  &#125;<br>  <span class="hljs-number">80%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>, <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、App-js"><a href="#2、App-js" class="headerlink" title="2、App.js"></a>2、App.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useEffect, useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Header&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Main</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Main&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Loader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Loader&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Error</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Error&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">StartScreen</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./StartScreen&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Question</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Question&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NextButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./NextButton&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Progress</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Progress&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">FinishScreen</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./FinishScreen&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Footer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Timer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Timer&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SECS_PER_QUESTION</span> = <span class="hljs-number">30</span>;    <br><br><span class="hljs-keyword">const</span> initialState = &#123;<br>  <span class="hljs-attr">questions</span>: [],<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;loading&quot;</span>, <span class="hljs-comment">//&#x27;loading&#x27;,&#x27;error&#x27;,&#x27;ready&#x27;,&#x27;active&#x27;,&#x27;finished&#x27;</span><br>  <span class="hljs-attr">index</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">answer</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">points</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">highscore</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">secondsRemaining</span>: <span class="hljs-number">0</span>,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;dataReceived&quot;</span>:   <span class="hljs-comment">//接收到数据之前是显示Loading界面</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">questions</span>: action.<span class="hljs-property">payload</span>,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;ready&quot;</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;dataFailed&quot;</span>:    <span class="hljs-comment">//error情况处理</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;start&quot;</span>:       <span class="hljs-comment">//显示开始界面（最初显示第一道问题）</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;active&quot;</span>,<br>        <span class="hljs-attr">secondsRemaining</span>: state.<span class="hljs-property">questions</span>.<span class="hljs-property">length</span> * <span class="hljs-variable constant_">SECS_PER_QUESTION</span>,<span class="hljs-comment">//开始回答问题时启动计时</span><br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;newAnswer&quot;</span>:<br>      <span class="hljs-keyword">const</span> question = state.<span class="hljs-property">questions</span>.<span class="hljs-title function_">at</span>(state.<span class="hljs-property">index</span>);  <span class="hljs-comment">//定位问题</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">answer</span>: action.<span class="hljs-property">payload</span>,   <span class="hljs-comment">//通过payload传递答案的选项</span><br>        <span class="hljs-attr">points</span>:<br>          action.<span class="hljs-property">payload</span> === question.<span class="hljs-property">correctOption</span><br>            ? state.<span class="hljs-property">points</span> + question.<span class="hljs-property">points</span><br>            : state.<span class="hljs-property">points</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;nextQuestion&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">index</span>: state.<span class="hljs-property">index</span> + <span class="hljs-number">1</span>, <span class="hljs-attr">answer</span>: <span class="hljs-literal">null</span> &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;finish&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;finished&quot;</span>,<br>        <span class="hljs-attr">highscore</span>:<br>          state.<span class="hljs-property">points</span> &gt; state.<span class="hljs-property">highscore</span> ? state.<span class="hljs-property">points</span> : state.<span class="hljs-property">highscore</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;restart&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...initialState,<br>        <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;ready&quot;</span>,<br>        <span class="hljs-attr">questions</span>: state.<span class="hljs-property">questions</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tick&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">secondsRemaining</span>: state.<span class="hljs-property">secondsRemaining</span> - <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">status</span>: state.<span class="hljs-property">secondsRemaining</span> === <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;finished&quot;</span> : state.<span class="hljs-property">status</span>,<br>      &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Action unknown&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [<br>    &#123; questions, status, index, answer, points, highscore, secondsRemaining &#125;,<br>    dispatch,<br>  ] = <span class="hljs-title function_">useReducer</span>(reducer, initialState);<br><br>  <span class="hljs-keyword">const</span> numQuestions = questions.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> maxPossiblePoints = questions.<span class="hljs-title function_">reduce</span>(<br>    <span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> prev + cur.<span class="hljs-property">points</span>,<br>    <span class="hljs-number">0</span><br>  );   <span class="hljs-comment">//reducer积累器</span><br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://localhost:8001/questions&quot;</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;dataReceived&quot;</span>, <span class="hljs-attr">payload</span>: data &#125;))<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;dataFailed&quot;</span> &#125;));<br>  &#125;, []);<span class="hljs-comment">//使用useEffect来通过API获取问题数组</span><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">        &#123;status === &quot;loading&quot; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Loader</span> /&gt;</span>&#125;</span><br><span class="language-xml">        &#123;status === &quot;error&quot; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Error</span> /&gt;</span>&#125;</span><br><span class="language-xml">        &#123;status === &quot;ready&quot; &amp;&amp; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">StartScreen</span> <span class="hljs-attr">numQuestions</span>=<span class="hljs-string">&#123;numQuestions&#125;</span> <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span> /&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">        &#123;status === &quot;active&quot; &amp;&amp; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Progress</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">index</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">numQuestions</span>=<span class="hljs-string">&#123;numQuestions&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">points</span>=<span class="hljs-string">&#123;points&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">maxPossiblePoints</span>=<span class="hljs-string">&#123;maxPossiblePoints&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">answer</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Question</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">question</span>=<span class="hljs-string">&#123;questions[index]&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">answer</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Timer</span> <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span> <span class="hljs-attr">secondsRemaining</span>=<span class="hljs-string">&#123;secondsRemaining&#125;</span> /&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">NextButton</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">answer</span>=<span class="hljs-string">&#123;answer&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">index</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">numQuestions</span>=<span class="hljs-string">&#123;numQuestions&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Footer</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">        &#123;status === &quot;finished&quot; &amp;&amp; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">FinishScreen</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">points</span>=<span class="hljs-string">&#123;points&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">maxPossiblePoints</span>=<span class="hljs-string">&#123;maxPossiblePoints&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">highscore</span>=<span class="hljs-string">&#123;highscore&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Main</span>&gt;</span></span><br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure><h5 id="3、Error-js"><a href="#3、Error-js" class="headerlink" title="3、Error.js"></a>3、Error.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Error</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>💥<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> There was an error fecthing questions.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Error</span>;<br></code></pre></td></tr></table></figure><h5 id="4、Loader-js"><a href="#4、Loader-js" class="headerlink" title="4、Loader.js"></a>4、Loader.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Loader</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;loader-container&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;loader&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Loading questions...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5、StartScreen-js"><a href="#5、StartScreen-js" class="headerlink" title="5、StartScreen.js"></a>5、StartScreen.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">StartScreen</span>(<span class="hljs-params">&#123; numQuestions, dispatch &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Welcome to The React Quiz!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;numQuestions&#125; questions to test your React mastery<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-ui&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;start&quot; &#125;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        Let&#x27;s start</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">StartScreen</span>;<br><br></code></pre></td></tr></table></figure><h5 id="6、Header-js"><a href="#6、Header-js" class="headerlink" title="6、Header.js"></a>6、Header.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;app-header&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;logo512.png&#x27;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#x27;React logo&#x27;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The React Quiz<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Header</span>;<br><br></code></pre></td></tr></table></figure><h5 id="7、Main-js"><a href="#7、Main-js" class="headerlink" title="7、Main.js"></a>7、Main.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Main</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Main</span>;<br><br></code></pre></td></tr></table></figure><h5 id="8、Progress-js"><a href="#8、Progress-js" class="headerlink" title="8、Progress.js"></a>8、Progress.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Progress</span>(<span class="hljs-params">&#123; index, numQuestions, points, maxPossiblePoints, answer &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">progress</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&#123;numQuestions&#125;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;index</span> + <span class="hljs-attr">Number</span>(<span class="hljs-attr">answer</span> !== <span class="hljs-string">null)&#125;</span> /&gt;</span>&#123;*很巧妙地设置了progress的值，有回答时不移动，回答后移动*&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        Question <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;index + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>/&#123;numQuestions&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;points&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> /&#123;maxPossiblePoints&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Progress</span>;<br><br></code></pre></td></tr></table></figure><h5 id="9、Questions-js"><a href="#9、Questions-js" class="headerlink" title="9、Questions.js"></a>9、Questions.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Options</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Options&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Question</span>(<span class="hljs-params">&#123; question, dispatch, answer &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;question.question&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Options</span> <span class="hljs-attr">question</span>=<span class="hljs-string">&#123;question&#125;</span> <span class="hljs-attr">dispatch</span>=<span class="hljs-string">&#123;dispatch&#125;</span> <span class="hljs-attr">answer</span>=<span class="hljs-string">&#123;answer&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Question</span>;<br><br></code></pre></td></tr></table></figure><p>10、Options.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Options</span>(<span class="hljs-params">&#123; question, dispatch, answer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> hasAnswered = answer !== <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;options&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;question.options.map((option, index) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">btn</span> <span class="hljs-attr">btn-option</span> $&#123;<span class="hljs-attr">index</span> === <span class="hljs-string">answer</span> ? &quot;<span class="hljs-attr">answer</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125; $&#123;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">hasAnswered</span></span></span><br><span class="hljs-tag"><span class="language-xml">              ? <span class="hljs-attr">index</span> === <span class="hljs-string">question.correctOption</span></span></span><br><span class="hljs-tag"><span class="language-xml">                ? &quot;<span class="hljs-attr">correct</span>&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:</span> &quot;<span class="hljs-attr">wrong</span>&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">:</span> &quot;&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">          &#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;hasAnswered&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;option&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;newAnswer&quot;, payload: index &#125;)&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          &#123;option&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Options</span>;<br><br></code></pre></td></tr></table></figure><h5 id="11、Footer-js"><a href="#11、Footer-js" class="headerlink" title="11、Footer.js"></a>11、Footer.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Footer</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Footer</span>;<br><br></code></pre></td></tr></table></figure><h5 id="12、Timer-js"><a href="#12、Timer-js" class="headerlink" title="12、Timer.js"></a>12、Timer.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><br><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Timer</span>(<span class="hljs-params">&#123; dispatch, secondsRemaining &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> mins = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(secondsRemaining / <span class="hljs-number">60</span>);<br>  <span class="hljs-keyword">const</span> seconds = secondsRemaining % <span class="hljs-number">60</span>;<br>  <span class="hljs-title function_">useEffect</span>(<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;tick&quot;</span> &#125;);<br>      &#125;, <span class="hljs-number">1000</span>);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearInterval</span>(id);<br>    &#125;,<br>    [dispatch]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;timer&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;mins &lt; 10 &amp;&amp; &quot;0&quot;&#125;</span><br><span class="language-xml">      &#123;mins&#125; : &#123;seconds &lt; 10 &amp;&amp; &quot;0&quot;&#125;</span><br><span class="language-xml">      &#123;seconds&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Timer</span>;<br><br></code></pre></td></tr></table></figure><p><code>setInterval</code> 每隔 1000 毫秒（1秒）触发一次，向 <code>dispatch</code> 发送一个 <code>&#123; type: &quot;tick&quot; &#125;</code> 的动作，通常这个动作会在 <code>reducer</code> 中被处理为减少 <code>secondsRemaining</code> 的值，从而实现倒计时。<code>clearInterval(id)</code> 是清除定时器的操作，返回的函数会在组件卸载时或在 <code>dispatch</code> 发生变化时被调用，从而清除定时器，避免内存泄漏或不必要的计时操作。</p><h5 id="13、NextButton-js"><a href="#13、NextButton-js" class="headerlink" title="13、NextButton.js"></a>13、NextButton.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">NextButton</span>(<span class="hljs-params">&#123; dispatch, answer, index, numQuestions &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (answer === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">if</span> (index &lt; numQuestions - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-ui&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;nextQuestion&quot; &#125;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        Next</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  <span class="hljs-keyword">if</span> (index === numQuestions - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-ui&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;finish&quot; &#125;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        Finish</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">NextButton</span>;<br><br></code></pre></td></tr></table></figure><h5 id="14、FinishScreen"><a href="#14、FinishScreen" class="headerlink" title="14、FinishScreen"></a>14、FinishScreen</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FinishScreen</span>(<span class="hljs-params">&#123; points, maxPossiblePoints, highscore, dispatch &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> percentage = (points / maxPossiblePoints) * <span class="hljs-number">100</span>;<br><br>  <span class="hljs-keyword">let</span> emoji;<br>  <span class="hljs-keyword">if</span> (percentage === <span class="hljs-number">100</span>) emoji = <span class="hljs-string">&quot;👑&quot;</span>;<br>  <span class="hljs-keyword">if</span> (percentage &gt;= <span class="hljs-number">80</span> &amp;&amp; percentage &lt; <span class="hljs-number">100</span>) emoji = <span class="hljs-string">&quot;🤩&quot;</span>;<br>  <span class="hljs-keyword">if</span> (percentage &gt;= <span class="hljs-number">60</span> &amp;&amp; percentage &lt; <span class="hljs-number">80</span>) emoji = <span class="hljs-string">&quot;🥳&quot;</span>;<br>  <span class="hljs-keyword">if</span> (percentage &gt;= <span class="hljs-number">0</span> &amp;&amp; percentage &lt; <span class="hljs-number">60</span>) emoji = <span class="hljs-string">&quot;🙍‍♀️&quot;</span>;<br>  <span class="hljs-keyword">if</span> (percentage === <span class="hljs-number">0</span>) emoji = <span class="hljs-string">&quot;🤡&quot;</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;emoji&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>You scored <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;points&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> out of&#123;&quot; &quot;&#125;</span><br><span class="language-xml">        &#123;maxPossiblePoints&#125;(&#123;Math.ceil(percentage)&#125;%)</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;highscore&quot;</span>&gt;</span>(Highscore: &#123;highscore&#125; points)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-ui&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;restart&quot; &#125;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        Restart quiz</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">FinishScreen</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程8-react基础知识</title>
    <link href="/2024/08/19/react%E8%AF%BE%E7%A8%8B8-react%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/08/19/react%E8%AF%BE%E7%A8%8B8-react%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>本节课补充了一些关于React框架的基础知识。</p><span id="more"></span><h4 id="一、DOM元素"><a href="#一、DOM元素" class="headerlink" title="一、DOM元素"></a>一、DOM元素</h4><p>文档对象模型（Document Object Model）元素是HTML或XML文档总的各个节点，这些节点代表文档的结构和内容。在浏览器中，DOM 提供了一种编程接口，使得开发者可以通过 JavaScript 动态地访问和操作页面内容。HTML 元素（如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code> 等）在 DOM 中表示为元素节点。</p><p>通过 JavaScript，开发者可以使用各种方法和属性来操作 DOM 元素，以动态修改页面内容和结构。例如：</p><ul><li><strong>选择 DOM 元素</strong>：可以使用 <code>document.getElementById()</code>、<code>document.querySelector()</code> 等方法选择特定的 DOM 元素。</li><li><strong>修改内容或样式</strong>：可以通过修改 <code>innerHTML</code>、<code>textContent</code> 或 <code>style</code> 属性来更改元素的内容或样式。</li><li><strong>添加或移除元素</strong>：可以使用 <code>appendChild()</code>、<code>removeChild()</code> 等方法向 DOM 中添加或移除元素。</li><li><strong>事件处理</strong>：可以为 DOM 元素添加事件监听器来处理用户交互事件（如点击、输入等）。</li></ul><h4 id="二、Hook"><a href="#二、Hook" class="headerlink" title="二、Hook"></a>二、Hook</h4><p>React 中的 Hook 是一组特殊的函数，它们允许你在函数组件中使用 React 的状态和其他特性，而无需编写类组件。Hooks 是 React 16.8 版本引入的，目的是简化代码并使组件更容易理解和复用。</p><p><strong>1、为什么使用 Hooks？</strong></p><ul><li><strong>函数组件的局限性</strong>：在 Hooks 引入之前，只有类组件可以使用状态和生命周期方法。而函数组件则只能处理简单的、无状态的逻辑。</li><li><strong>Hooks 的优势</strong>：通过 Hooks，你可以在函数组件中使用状态、管理副作用、以及访问组件生命周期等功能。这使得函数组件可以替代类组件，并且更易于编写、复用和测试。</li></ul><p><strong>2、常见的 Hooks</strong></p><ul><li><p>**<code>useState</code>**：用于在函数组件中添加状态。</p></li><li><p>**<code>useEffect</code>**：用于在函数组件中处理副作用，比如数据获取、订阅或手动修改 DOM。它相当于类组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code>。</p></li><li><p>**<code>useContext</code>**：允许你在函数组件中使用 React 的上下文（Context），从而避免通过组件树逐层传递数据。</p></li><li><p>**<code>useReducer</code>**：用于在函数组件中管理更复杂的状态逻辑，是 <code>useState</code> 的替代方案。它类似于 Redux 的 reducer 概念。</p></li></ul><p><strong>3、Hooks 的规则</strong></p><ul><li><strong>只能在函数组件或自定义 Hook 中调用</strong>：不能在普通的 JavaScript 函数、类组件或循环、条件语句中调用 Hook。</li><li><strong>必须在顶层调用</strong>：不能在嵌套的函数或代码块中调用 Hook。这是为了保证每次渲染时 Hook 的调用顺序一致，从而确保状态和副作用的正确性。</li></ul><h4 id="三、Reconciler"><a href="#三、Reconciler" class="headerlink" title="三、Reconciler"></a>三、Reconciler</h4><p>在 React 中，<strong>reconciler</strong> 是一个内部机制，负责比较和协调（reconcile）组件状态变化时的 UI 更新过程。它是 React 核心部分之一，帮助确定在每次渲染时需要更新哪些部分的 UI，以及如何最有效地进行这些更新。</p><p><strong>1、Reconciler 的主要作用</strong></p><ul><li><strong>差异计算（Diffing）</strong>：当 React 组件的状态或属性发生变化时，Reconciler 负责比较新旧虚拟 DOM 树，找出两者之间的差异。这一过程称为“diffing”。</li><li><strong>最小化更新</strong>：通过 diffing 计算，Reconciler 可以确定最小化的更新集，即需要修改的节点，而不是重新渲染整个 UI。这提升了性能，尤其是在大型复杂应用中。</li><li><strong>触发渲染更新</strong>：根据 diffing 的结果，Reconciler 会告诉渲染器（renderer）哪些 DOM 操作需要执行，从而更新页面的 UI。对于 web 应用，渲染器通常是 React DOM。</li></ul><p><strong>2、工作原理</strong></p><p>Reconciler 的核心在于如何有效地计算出旧的虚拟 DOM（virtual DOM）树与新的虚拟 DOM 树之间的差异，并生成需要对实际 DOM 进行的更新操作。主要包括以下几个步骤：</p><ul><li><strong>虚拟 DOM</strong>：React 使用虚拟 DOM 来表示用户界面的结构。虚拟 DOM 是一个轻量级的 JavaScript 对象树，描述了 UI 的当前状态。</li><li><strong>比较（Comparing）</strong>：当组件状态或属性更新时，React 会创建一棵新的虚拟 DOM 树。Reconciler 然后会比较新旧两棵树，找出它们之间的差异。</li><li><strong>差异计算（Diffing）</strong>：Reconciler 使用了一种高效的算法，称为“diffing”，来找出哪些节点改变了。这包括节点的增删改、属性变化等。</li><li><strong>更新（Updating）</strong>：根据 diffing 的结果，Reconciler 会生成一系列操作指令（例如插入节点、删除节点、更新属性等），这些指令将被传递给渲染器，渲染器最终会将这些变化应用到实际的 DOM 中。</li></ul><p>3、协调过程</p><p>Reconciler 主要负责协调虚拟 DOM 树的更新过程，确保 UI 的更新是高效且一致的。协调过程包括以下内容：</p><ul><li><strong>树比较</strong>：Reconciler 会递归地比较新旧虚拟 DOM 树，找出需要更新的部分。对于每一个不同的部分，它会生成一个更新指令。</li><li><strong>键值（Key）优化</strong>：当渲染列表时（例如使用 <code>map()</code> 渲染多个元素），Reconciler 使用 <code>key</code> 属性来跟踪每个元素，从而更高效地更新列表项。这避免了不必要的节点重排和重渲染。</li><li><strong>递归更新</strong>：Reconciler 递归地更新所有子节点，确保整个组件树都得到适当的更新。</li></ul><ol start="4"><li><strong>Fiber 架构</strong></li></ol><p>React 16 版本引入了新的 Fiber 架构，增强了 Reconciler 的功能，使其能够更好地处理大型更新任务，并支持中断任务、优先级处理等高级特性。Fiber Reconciler 的主要改进包括：</p><ul><li><strong>可中断渲染</strong>：Fiber 架构允许 React 将长时间运行的渲染任务分成多个小任务，从而在渲染过程中可以响应用户的交互。</li><li><strong>任务优先级</strong>：Fiber 允许为不同的更新任务设置优先级，使得更重要的任务可以被优先处理。</li></ul><ol start="5"><li><strong>总结</strong></li></ol><p>在 React 中，Reconciler 是一个关键的内部机制，负责管理和优化组件更新的整个过程。它通过高效的 diffing 算法最小化 DOM 操作，确保页面更新既快速又高效。React 的 Fiber 架构进一步提升了 Reconciler 的性能和灵活性，使得 React 能够更好地处理复杂的应用场景。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240826093436350.png" alt="image-20240826093436350"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828193923359.png" alt="image-20240828193923359"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828194014913.png" alt="image-20240828194014913"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828194040762.png" alt="image-20240828194040762"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828194112849.png" alt="image-20240828194112849"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240828194149277.png" alt="image-20240828194149277"></p><h4 id="四、side-effect"><a href="#四、side-effect" class="headerlink" title="四、side effect"></a>四、side effect</h4><p>在 React 中，“side effect”（副作用）通常指的是组件在渲染过程中执行的那些与渲染无关的操作。副作用包括但不限于以下情况：</p><ol><li><strong>数据获取（Data Fetching）</strong>： 例如，你在组件渲染后从 API 获取数据。</li><li><strong>订阅（Subscriptions）</strong>： 例如，订阅某个事件或数据源，在组件卸载时取消订阅。</li><li><strong>手动更改 DOM</strong>： 虽然 React 通常会管理 DOM 操作，但有时你可能需要手动更改 DOM，如操作第三方库或者直接使用 <code>document</code> 对象。</li><li><strong>定时器（Timers）</strong>： 使用 <code>setTimeout</code> 或 <code>setInterval</code> 设置定时器。</li></ol><p>在 React 中，处理副作用最常用的方式是使用 <code>useEffect</code> 钩子。<code>useEffect</code> 钩子允许你在函数组件中执行副作用，并在必要时清除这些副作用。</p><h4 id="五、依赖数组"><a href="#五、依赖数组" class="headerlink" title="五、依赖数组"></a>五、依赖数组</h4><p><code>useEffect</code> 是 React 中用于处理副作用的钩子，比如数据获取、订阅、手动更改 DOM 等。依赖项数组决定了 <code>useEffect</code> 中的回调函数何时执行。</p><p><strong>空数组 <code>[]</code></strong>:</p><ul><li>如果依赖项数组为空，<code>useEffect</code> 中的回调函数只会在组件首次渲染后执行一次。</li><li>相当于组件的 <code>componentDidMount</code> 生命周期钩子。</li></ul><p><strong>没有依赖项数组</strong>:</p><ul><li>如果不提供依赖项数组，<code>useEffect</code> 中的回调函数将在每次组件渲染后执行。</li><li>相当于每次组件更新后的 <code>componentDidUpdate</code>。</li></ul><p><strong>带有依赖项的数组 <code>[dep1, dep2, ...]</code></strong>:</p><ul><li>如果依赖项数组中包含特定的变量，<code>useEffect</code> 中的回调函数只有在这些变量发生变化时才会执行。</li><li>这可以优化性能，避免不必要的副作用执行。</li></ul><h4 id="六、stale-closure"><a href="#六、stale-closure" class="headerlink" title="六、stale closure"></a>六、stale closure</h4><p>“Stale closure” 是 React 开发中一个常见的术语，指的是在使用 React hooks（尤其是 <code>useEffect</code>、<code>useCallback</code>、<code>useMemo</code> 等）时，闭包（closure）中引用了过时的变量或状态值，导致逻辑错误。</p><p>闭包是 JavaScript 中一个函数可以记住其创建时的上下文的特性。闭包使得内部函数可以访问外部函数的变量，即使外部函数已经执行完毕。这种特性在 React hooks 中可能会导致问题，尤其是在依赖项数组没有正确设置时。</p><p>在 React 中，组件的每次渲染都会生成新的函数和新的闭包。闭包中捕获的变量值是函数创建时的那一刻的值，而不是当前渲染的最新值。如果你的组件多次渲染，而某个钩子函数内部的闭包引用了旧的变量或状态值，那么这个闭包就被称为“stale closure”（陈旧的闭包）。</p><p><strong>解决方法：</strong></p><p>​    <strong>函数式更新</strong>: 当使用 <code>setState</code> 时，使用函数式更新（即传递一个函数而不是直接传递新值）。这可以确保你总是基于最新的状态更新。</p><p>​    <strong>正确设置依赖项数组</strong>: 在 <code>useEffect</code>、<code>useCallback</code> 和 <code>useMemo</code> 等 hooks 中，确保依赖项数组包含所有在闭包中引用的状态或 props。这样 React 就会在依赖项变化时重新执行函数，避免使用陈旧的闭包。</p><p>​     <strong>使用 refs</strong>: 在一些场景下，你可以使用 <code>useRef</code> 来存储值，因为 <code>useRef</code> 中的值在渲染之间是持久的，并且更新时不会触发组件的重新渲染。</p><h4 id="七、派生态"><a href="#七、派生态" class="headerlink" title="七、派生态"></a>七、派生态</h4><p>在React中，**”derived state”（派生状态）**通常是指通过计算或处理组件的已有状态或props得出的新数据，而不是直接存储在组件的state中的数据。派生状态不应该存储在state中，因为它可以在渲染时通过计算得出，从而避免冗余和潜在的数据不一致性。</p><h4 id="八、useState初始化状态"><a href="#八、useState初始化状态" class="headerlink" title="八、useState初始化状态"></a>八、useState初始化状态</h4><p>方法一：使用函数初始化</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [watched, setWatched] = <span class="hljs-title function_">useState</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> storedValue = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;watched&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(storedValue);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>方法二：直接初始化</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [watched, setWatched] = <span class="hljs-title function_">useState</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;watched&quot;</span>)));<br><br></code></pre></td></tr></table></figure><p><strong>惰性初始化（Lazy Initialization）</strong>：</p><ul><li><strong>方法一</strong>使用的是惰性初始化。<code>useState</code>接受一个函数作为参数时，React会在组件初次渲染时调用该函数，并将其返回值作为初始状态。这意味着函数只会在组件首次渲染时执行一次。</li><li><strong>方法二</strong>中的<code>localStorage.getItem</code>和<code>JSON.parse</code>在组件每次渲染时都会执行，即使状态已经初始化，这在某些情况下可能会导致不必要的计算开销。</li></ul><p><strong>性能考虑</strong>：</p><ul><li><strong>方法一</strong>更适合在初始化过程中存在昂贵操作（例如复杂的计算或数据提取）时使用，因为这些操作只会在组件首次渲染时执行一次。</li><li><strong>方法二</strong>的性能可能稍微差一些，尤其是在有复杂操作时，因为每次渲染组件都会执行状态初始化的表达式。</li></ul><p><strong>代码的可读性</strong>：</p><ul><li><strong>方法一</strong>可能更具可读性，特别是当初始化逻辑比较复杂时，使用函数形式可以让代码更清晰，容易理解逻辑分步处理的过程。</li><li><strong>方法二</strong>在简单的初始化场景下代码更简洁。</li></ul><h4 id="九、useRef"><a href="#九、useRef" class="headerlink" title="九、useRef"></a>九、useRef</h4><p>特点：</p><p><strong>保持跨渲染的可变值</strong>：</p><ul><li><code>useRef</code>返回的对象是 <code>&#123; current: value &#125;</code>。这个对象在组件的整个生命周期内是持久的，更新<code>current</code>属性不会触发重新渲染。这使得<code>useRef</code>非常适合存储跨渲染周期的数据，比如计时器ID、上一次的状态值或某个DOM节点的引用。</li></ul><p><strong>访问DOM元素</strong>：</p><ul><li><code>useRef</code>常用来直接访问DOM元素。在上面的例子中，我们使用<code>ref</code>属性将<code>myRef</code>对象赋给了一个输入框。<code>myRef.current</code>指向该DOM元素，可以在按钮点击时调用<code>focus()</code>方法来聚焦输入框。</li></ul><p><strong>保存组件间不变的数据</strong>：</p><ul><li><code>useRef</code>可以用来保存不需要触发重新渲染的变量。例如，你可以使用<code>useRef</code>保存计数器值或状态变量的前一个值，而无需通过<code>useState</code>来管理它们。</li></ul><h4 id="十、Custom-Hooks（自定义钩子）"><a href="#十、Custom-Hooks（自定义钩子）" class="headerlink" title="十、Custom Hooks（自定义钩子）"></a>十、Custom Hooks（自定义钩子）</h4><p>当多个组件需要共享相似的逻辑时，可以将这些逻辑提取到一个自定义Hook中，以避免重复代码。例如，处理表单输入的状态、处理数据获取（如API请求）的逻辑等。</p><h4 id="十一、Fiber"><a href="#十一、Fiber" class="headerlink" title="十一、Fiber"></a>十一、Fiber</h4><p>React 的 Fiber 是 React 16 及其后续版本中的一种新架构，用于提升 UI 渲染的性能和灵活性。它重新设计了 React 的协调（reconciliation）算法，使得 React 能够更好地处理复杂的应用场景，尤其是在响应用户交互和更新大型组件树时。Fiber 是一种数据结构和执行机制，它使得 React 可以更细粒度地管理和调度组件的更新任务。与传统的同步渲染不同，Fiber 允许将更新任务拆分成多个小任务，并根据优先级有选择地执行，从而提高了应用的响应性。</p><h5 id="（1）-Fiber-的设计目标"><a href="#（1）-Fiber-的设计目标" class="headerlink" title="（1） Fiber 的设计目标"></a>（1） <strong>Fiber 的设计目标</strong></h5><p>Fiber 架构的设计目标主要包括以下几个方面：</p><ul><li><strong>可中断渲染</strong>：传统的 React 采用的是同步递归算法，这意味着一旦开始渲染，就会阻塞主线程，直到整个渲染过程完成。Fiber 通过将渲染任务切割成多个小片段，使得渲染过程可以被中断，从而在必要时让出时间给其他更高优先级的任务。</li><li><strong>任务优先级</strong>：Fiber 允许为不同的更新任务设置优先级。优先级较高的任务（例如用户交互）可以在低优先级任务（例如后台数据同步）之前执行，从而提升用户体验。</li><li><strong>并发模式</strong>：Fiber 为 React 引入了并发模式，使得 React 能够在后台渲染任务时处理用户输入或其他高优先级任务，从而减少页面卡顿现象。</li></ul><h5 id="（2）-Fiber-的工作原理"><a href="#（2）-Fiber-的工作原理" class="headerlink" title="（2） Fiber 的工作原理"></a>（2） Fiber 的工作原理</h5><p>Fiber 将组件更新的工作分成两个主要阶段：<strong>渲染阶段（Render Phase）</strong> 和 <strong>提交阶段（Commit Phase）</strong>。</p><ul><li><strong>渲染阶段</strong>：<ul><li>在这个阶段，React 会通过协调器（Reconciler）进行组件树的 diffing（比较），决定哪些部分需要更新。</li><li>这个过程是“可中断的”，即 React 可以暂停渲染，以便处理其他更紧急的任务，然后再继续渲染未完成的部分。</li></ul></li><li><strong>提交阶段</strong>：<ul><li>一旦渲染阶段完成，React 会进入提交阶段，在这个阶段，所有的更改都会被应用到实际的 DOM 中。</li><li>这个阶段是同步的，并且不可中断，因为它直接影响到用户界面的显示。</li></ul></li></ul><h5 id="（3）Fiber-数据结构"><a href="#（3）Fiber-数据结构" class="headerlink" title="（3）Fiber 数据结构"></a>（3）<strong>Fiber 数据结构</strong></h5><p>Fiber 是一种链表结构，每个组件实例对应一个 Fiber 节点。Fiber 节点包含了关于该组件的各种信息，例如：</p><ul><li><strong>类型（Type）</strong>：组件的类型，例如函数组件、类组件或原生 DOM 节点。</li><li><strong>状态（State）</strong>：组件的本地状态和挂载点。</li><li><strong>子节点、兄弟节点和父节点的引用</strong>：用来构建 Fiber 树。</li><li><strong>更新队列（Update Queue）</strong>：保存该 Fiber 节点上的所有状态更新。</li></ul><h5 id="（4）优先级调度"><a href="#（4）优先级调度" class="headerlink" title="（4）优先级调度"></a>（4）<strong>优先级调度</strong></h5><p>Fiber 通过一个叫做 <code>scheduler</code> 的机制来管理不同更新任务的优先级。Scheduler 会根据任务的重要性为其分配优先级，并确保高优先级任务优先执行。</p><ul><li><strong>高优先级任务</strong>：例如用户的输入和动画，这些任务需要快速响应，因而具有较高优先级。</li><li><strong>低优先级任务</strong>：例如网络请求或不紧急的状态更新，这些任务可以在空闲时间执行。</li></ul><h5 id="（5）可中断渲染和恢复"><a href="#（5）可中断渲染和恢复" class="headerlink" title="（5）可中断渲染和恢复"></a>（5）<strong>可中断渲染和恢复</strong></h5><p>Fiber 的核心优势在于其可中断性。当 React 在渲染某个组件时，如果遇到一个更高优先级的任务，它可以暂停当前任务，将控制权交给高优先级任务。在高优先级任务完成后，React 可以恢复之前的渲染，继续未完成的工作。</p><h5 id="（6）Concurrent-Mode（并发模式）"><a href="#（6）Concurrent-Mode（并发模式）" class="headerlink" title="（6）Concurrent Mode（并发模式）"></a>（6）<strong>Concurrent Mode（并发模式）</strong></h5><p>Fiber 还为 React 引入了并发模式（Concurrent Mode）。并发模式下，React 可以在后台并发地处理多个渲染任务，并在处理任务的同时继续响应用户输入。这样可以显著提升应用的流畅性和响应速度。</p><h5 id="（7）Fiber-的优缺点"><a href="#（7）Fiber-的优缺点" class="headerlink" title="（7）Fiber 的优缺点"></a>（7）<strong>Fiber 的优缺点</strong></h5><p>优点：</p><ul><li><strong>提高了渲染的灵活性</strong>：通过可中断和恢复渲染，React 可以更好地管理大型更新任务。</li><li><strong>减少卡顿</strong>：通过任务优先级调度和并发模式，Fiber 减少了 UI 更新时的卡顿现象。</li><li><strong>增强用户体验</strong>：Fiber 提供了更高效的用户界面更新机制，尤其是在处理大量状态变化时。</li></ul><p>缺点：</p><ul><li><strong>复杂性增加</strong>：Fiber 引入了更多的内部机制，增加了 React 内部的复杂性。</li><li><strong>需要适应新模式</strong>：开发者需要理解 Fiber 的工作原理，以便在复杂应用中更好地使用 React。</li></ul><h4 id="十二、Fiber-Tree"><a href="#十二、Fiber-Tree" class="headerlink" title="十二、Fiber Tree"></a>十二、Fiber Tree</h4><p>Fiber Tree 是由多个 Fiber 节点相互连接而形成的树形数据结构。与传统的 Virtual DOM 树不同，Fiber Tree 允许对渲染工作进行分片处理，支持中断、恢复、以及优先级调度等操作。这使得 React 能够更有效地处理复杂的 UI 更新场景。</p><p>每个 Fiber 节点包含了一些描述组件的信息和状态，它们主要包括以下几个部分：</p><ol><li><strong>Type</strong>：<ul><li>表示组件的类型，如函数组件、类组件或原生 DOM 元素。</li></ul></li><li><strong>Key</strong>：<ul><li>用于在同级组件中标识节点，以便在更新时可以高效地进行 diff 运算。</li></ul></li><li><strong>StateNode</strong>：<ul><li>指向与当前 Fiber 节点对应的组件实例或 DOM 元素。</li></ul></li><li><strong>Return</strong>：<ul><li>指向当前 Fiber 节点的父节点。</li></ul></li><li><strong>Child</strong>：<ul><li>指向当前 Fiber 节点的第一个子节点。</li></ul></li><li><strong>Sibling</strong>：<ul><li>指向当前 Fiber 节点的下一个兄弟节点。</li></ul></li><li><strong>PendingProps 和 MemoizedProps</strong>：<ul><li>分别表示当前更新的 props 和上一次渲染时的 props。</li></ul></li><li><strong>UpdateQueue</strong>：<ul><li>存储需要在当前节点上处理的状态更新或副作用。</li></ul></li><li><strong>Alternate</strong>：<ul><li>指向 Fiber 树中的另一个对应节点，这在双缓冲技术（double buffering）中用于管理更新时的 Fiber。</li></ul></li></ol><h5 id="Fiber-Tree-的工作原理"><a href="#Fiber-Tree-的工作原理" class="headerlink" title="Fiber Tree 的工作原理"></a>Fiber Tree 的工作原理</h5><p>在 React 中，Fiber Tree 主要用于以下几种场景：</p><ol><li>协调过程（Reconciliation）：<ul><li>当组件状态或 props 发生变化时，React 会通过 Fiber Tree 来进行 diff 运算，以确定哪些部分需要更新。这个过程是可中断的，因此 React 可以优先处理高优先级任务。</li></ul></li><li>任务调度：<ul><li>Fiber Tree 通过 <code>scheduler</code> 管理不同任务的优先级，并决定哪些任务应该首先执行。</li></ul></li><li>双缓冲技术：<ul><li>Fiber Tree 通过 <code>current</code> 和 <code>workInProgress</code> 两棵树进行双缓冲。<code>current</code> 是当前屏幕上显示的 Fiber 树，而 <code>workInProgress</code> 则是正在构建的 Fiber 树。当新的更新完成时，React 会交换这两棵树。</li></ul></li></ol><h5 id="构建和更新-Fiber-Tree-的过程"><a href="#构建和更新-Fiber-Tree-的过程" class="headerlink" title="构建和更新 Fiber Tree 的过程"></a>构建和更新 Fiber Tree 的过程</h5><ol><li>初次渲染：<ul><li>React 会创建整个 Fiber Tree，并构建组件的实例以及它们对应的 DOM 元素。</li></ul></li><li>更新过程：<ul><li>当组件状态或 props 改变时，React 会创建一棵新的 Fiber Tree，并与旧的 Fiber Tree 进行对比。这种对比可以高效地找出需要更新的部分。</li></ul></li><li>提交阶段：<ul><li>在更新 Fiber Tree 后，React 会将变化应用到真实的 DOM 上。这是不可中断的阶段，确保用户界面与最新状态同步。</li></ul></li></ol><h5 id="Fiber-Tree-的优势"><a href="#Fiber-Tree-的优势" class="headerlink" title="Fiber Tree 的优势"></a>Fiber Tree 的优势</h5><ol><li>性能优化：<ul><li>Fiber Tree 允许对 UI 更新进行分片处理，避免了长时间的主线程阻塞，提升了页面的响应性。</li></ul></li><li>优先级调度：<ul><li>React 可以根据任务的优先级来决定执行顺序，从而确保用户的交互优先得到响应。</li></ul></li><li>渐进渲染：<ul><li>Fiber Tree 支持并发模式，使得 React 可以渐进式地渲染大型组件树。</li></ul></li></ol><h4 id="十三、Key的重要性"><a href="#十三、Key的重要性" class="headerlink" title="十三、Key的重要性"></a>十三、Key的重要性</h4><p>在 React 中，<code>key</code> 是一个特殊的属性，用于帮助 React 高效地更新和渲染列表中的元素。它在列表渲染和组件的重新排序中发挥了重要作用。以下是 <code>key</code> 的几个重要作用：</p><ol><li><strong>帮助 React 识别元素</strong></li></ol><p><code>key</code> 属性帮助 React 唯一标识列表中的每个元素。它用于区分每个元素，从而帮助 React 确定哪些元素已经改变、添加或删除。这使得 React 在更新界面时能够更高效地进行操作。</p><ol start="2"><li><strong>提高渲染效率</strong></li></ol><p>当列表的内容发生变化时（如增加、删除或重新排序），React 依赖 <code>key</code> 来确定哪些元素需要重新渲染。如果没有 <code>key</code>，React 会重新渲染整个列表，这样会降低性能。使用 <code>key</code>，React 能够最小化 DOM 操作，仅更新实际变化的部分。</p><ol start="3"><li><strong>稳定组件状态</strong></li></ol><p><code>key</code> 有助于确保组件的状态在渲染过程中保持稳定。例如，如果一个列表中的元素被重新排序，但它们的 <code>key</code> 不变，React 会保持这些元素的状态，而不是重新创建它们。这样可以避免组件状态的丢失或重置。</p><ol start="4"><li><strong>唯一性要求</strong></li></ol><p><code>key</code> 属性的值必须在列表中唯一，但不必在整个应用中唯一。通常，<code>key</code> 是元素的唯一标识符（如 ID），或者基于元素内容生成的唯一值。使用不唯一的 <code>key</code> 会导致 React 无法正确识别和管理元素，从而可能导致性能问题或不一致的 UI。</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程7-usepopcorn-1</title>
    <link href="/2024/08/17/react%E8%AF%BE%E7%A8%8B7-usepopcorn/"/>
    <url>/2024/08/17/react%E8%AF%BE%E7%A8%8B7-usepopcorn/</url>
    
    <content type="html"><![CDATA[<p>本次课程构建出一个电影清单界面，拥有更多的功能和更强的互动性🤓（NO这次先实现静态网页）。咱们就是争取这次不偷懒，不仅把代码打完把知识点也跟着记完吧。。。</p><span id="more"></span><p>一个小小的快捷键：鼠标悬停在某个组件，ctrl+左键&#x3D;&gt;直接去编辑这个组件（函数）</p><p>另一个小小的快捷键：cl&#x3D;&gt;console.log()</p><p>啊啊啊啊啊啊啊啊啊啊啊啊我为什么不早点切换到npm国内镜像!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p><p>npm下载速度真的慢的我想刀人<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240818164718523.png" alt="image-20240818164718178" style="zoom:67%;" /><br><code>npm config set registry=https://registry.npmmirror.com</code> 命令一键切换</p><h3 id="一、知识点讲解"><a href="#一、知识点讲解" class="headerlink" title="一、知识点讲解"></a>一、知识点讲解</h3><h4 id="（1）组件（component）分解"><a href="#（1）组件（component）分解" class="headerlink" title="（1）组件（component）分解"></a>（1）组件（component）分解</h4><p>首先需要明确的是：不管使用一个很大的组件或者是拆分成很多很小的组件都会使代码变得糟糕。<strong>逻辑分离</strong>很重要，而且要注重<strong>代码重用！！！！！</strong>让代码变得高效易懂。</p><h4 id="（2）组件分类"><a href="#（2）组件分类" class="headerlink" title="（2）组件分类"></a>（2）组件分类</h4><p>1、<strong>无状态&#x2F;展示组件（Stateless&#x2F;Presentational Components）</strong></p><ul><li><strong>定义</strong>: 主要负责展示 UI（用户界面），不处理应用的业务逻辑。</li><li><strong>特点</strong>:<ul><li>主要通过 <code>props</code> 接收数据。</li><li>仅负责展示，不涉及业务逻辑或状态管理。</li><li>由于没有业务逻辑，通常可以在多个地方复用。</li><li>可以使用函数组件，也可以是无状态的类组件。</li></ul></li></ul><ol start="2"><li><strong>Stateful Components（有状态组件）</strong></li></ol><ul><li><p><strong>定义</strong>: 负责管理应用的状态和逻辑，并可能会将数据传递给展示组件。这些组件通常会使用 <code>state</code> 来管理其内部状态。</p></li><li><p><strong>特点</strong>:</p><ul><li><p>管理状态: 处理应用的状态（使用 <code>state</code>）。</p></li><li><p>处理业务逻辑: 负责应用的逻辑，例如处理用户输入、调用 API、计算数据等。</p></li><li><p>容器组件: 通常扮演容器组件的角色，将数据和逻辑传递给展示组件。</p></li><li><p>实现: 可以使用类组件（具有 <code>state</code> 和生命周期方法）或使用 React Hooks 的函数组件。</p></li></ul></li></ul><ol start="3"><li><strong>Structural Components（结构组件）</strong></li></ol><ul><li><p><strong>定义</strong>: 主要负责应用的布局和结构，包括组织其他组件的方式。这些组件通常不关心具体的业务逻辑或数据展示，而是负责整体的界面布局和结构。</p></li><li><p><strong>特点</strong>:</p><ul><li><p>布局和结构: 负责定义组件的布局和结构，例如容器、网格、栅格系统等。</p></li><li><p>包含其他组件: 通常会包含其他展示组件或有状态组件。</p></li><li><p>不处理业务逻辑: 不直接处理应用的数据或业务逻辑，只负责组织和布局。</p></li></ul></li></ul><h4 id="（3）什么叫做使用Composition来解决Prop-Drilling的问题"><a href="#（3）什么叫做使用Composition来解决Prop-Drilling的问题" class="headerlink" title="（3）什么叫做使用Composition来解决Prop Drilling的问题"></a>（3）什么叫做使用Composition来解决Prop Drilling的问题</h4><p><strong>Composition</strong> 是一种用来解决 <strong>Prop Drilling</strong>（属性传递）问题的设计模式。<strong>Prop Drilling</strong> 指的是将数据从父组件逐层传递到深层嵌套的子组件，这样可能会导致组件树中的中间组件不必要地接收和传递数据，使得代码变得复杂且难以维护。<strong>Composition</strong> 是指将多个组件组合在一起，以实现更复杂的功能或布局。通过这种方式，组件可以专注于其自身的功能，而不是接收和传递大量的 <code>props</code>。</p><h4 id="（4）default值的设置"><a href="#（4）default值的设置" class="headerlink" title="（4）default值的设置"></a>（4）default值的设置</h4><p>为了增强组件的可重用性，通常会使用 <code>props</code> 传递数据、回调函数和行为，而不是将数据硬编码在组件内部。这样，组件可以根据传入的 <code>props</code> 动态渲染不同的内容或执行不同的操作。<code>default</code> 值用于为组件参数、变量或属性提供默认值，当未提供相应值时，程序将使用这些默认值。通过合理使用默认值，可以简化代码、提高可读性，并减少错误。<strong>PS：可以用default值来初始化状态</strong></p><h3 id="二、练习"><a href="#二、练习" class="headerlink" title="二、练习"></a>二、练习</h3><h4 id="（1）将下面的网页由一个巨大的组件分解成下图的组件树"><a href="#（1）将下面的网页由一个巨大的组件分解成下图的组件树" class="headerlink" title="（1）将下面的网页由一个巨大的组件分解成下图的组件树"></a>（1）将下面的网页由一个巨大的组件分解成下图的组件树</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240817161437915.png" alt="image-20240817161437915"></p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240817161356298.png" alt="image-20240817161356298" style="zoom: 67%;" /><h4 id="（2）构建一个评分组件"><a href="#（2）构建一个评分组件" class="headerlink" title="（2）构建一个评分组件"></a>（2）构建一个评分组件</h4><p><img src="C:/Users/姚姚/AppData/Roaming/Typora/typora-user-images/image-20240818142751400.png" alt="image-20240818142751400"></p><ul><li><p>特点：鼠标悬停在星星上时会显示暂时星数，星星会随之被颜色填满或仍未空心。点击某颗星星会固定星数和满星的数量。</p></li><li><p>拓展：增强组件的可重用性。</p><ul><li><p>1、将星星的大小、颜色、字体的大小、颜色、最大星星数、默认星星数、显示的内容等等都通过<code>props</code>（参数）传递。（<strong>参数太多会增加代码的复杂性</strong>）</p></li><li><p>2、🌟🌟考虑到用户在想要使用这个组件的时候，想要拿到一个重要的参数：星数。因此我们在某个组件中应用这个组件时，需要设置一个状态（比如）：movieRating。然后把setMovieRating函数通过参数传递给评分组件。在组件中的设置星数的函数中将movieRating也设置为Rating。</p></li></ul></li><li><p>参数类型检查：</p></li><li><p>1、PropType：<code>PropTypes</code> 是 React 内置的一个库，用于在运行时检查组件接收到的 <code>props</code> 是否符合指定的类型。尽管在 React 17 之后，<code>PropTypes</code> 被移出了核心库，但它仍然是进行简单类型检查的常用工具。</p></li><li><p>2、TypeScript：在 TypeScript 中，类型检查是通过静态类型系统在编译时完成的，这比 <code>PropTypes</code> 更加严格和安全。</p></li></ul><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="（1）usepopcorn"><a href="#（1）usepopcorn" class="headerlink" title="（1）usepopcorn"></a>（1）usepopcorn</h4><h5 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> tempMovieData = [<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt1375666&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;Inception&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;2010&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt0133093&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;The Matrix&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;1999&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt6751668&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;Parasite&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;2019&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_SX300.jpg&quot;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> tempWatchedData = [<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt1375666&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;Inception&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;2010&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg&quot;</span>,<br>    <span class="hljs-attr">runtime</span>: <span class="hljs-number">148</span>,<br>    <span class="hljs-attr">imdbRating</span>: <span class="hljs-number">8.8</span>,<br>    <span class="hljs-attr">userRating</span>: <span class="hljs-number">10</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">imdbID</span>: <span class="hljs-string">&quot;tt0088763&quot;</span>,<br>    <span class="hljs-title class_">Title</span>: <span class="hljs-string">&quot;Back to the Future&quot;</span>,<br>    <span class="hljs-title class_">Year</span>: <span class="hljs-string">&quot;1985&quot;</span>,<br>    <span class="hljs-title class_">Poster</span>:<br>      <span class="hljs-string">&quot;https://m.media-amazon.com/images/M/MV5BZmU0M2Y1OGUtZjIxNi00ZjBkLTg1MjgtOWIyNThiZWIwYjRiXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg&quot;</span>,<br>    <span class="hljs-attr">runtime</span>: <span class="hljs-number">116</span>,<br>    <span class="hljs-attr">imdbRating</span>: <span class="hljs-number">8.5</span>,<br>    <span class="hljs-attr">userRating</span>: <span class="hljs-number">9</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">average</span> = (<span class="hljs-params">arr</span>) =&gt;<br>  arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur, i, arr</span>) =&gt;</span> acc + cur / arr.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [movies, setMovies] = <span class="hljs-title function_">useState</span>(tempMovieData);<br>  <span class="hljs-keyword">const</span> [watched, setWatched] = <span class="hljs-title function_">useState</span>(tempWatchedData);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NumResults</span> <span class="hljs-attr">movies</span>=<span class="hljs-string">&#123;movies&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">MovieList</span> <span class="hljs-attr">movies</span>=<span class="hljs-string">&#123;movies&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">WatchedSummary</span> <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">WatchedMovieList</span> <span class="hljs-attr">watched</span>=<span class="hljs-string">&#123;watched&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">NavBar</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nav-bar&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Logo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span>🍿<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>usePopcorn<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Search</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [query, setQuery] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;search&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search movies...&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;query&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setQuery(e.target.value)&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">NumResults</span>(<span class="hljs-params">&#123; movies &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;num-results&quot;</span>&gt;</span></span><br><span class="language-xml">      Found <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;movies.length&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> results</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Main</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Box</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isOpen, setIsOpen] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-toggle&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpen((open) =&gt; !open)&#125;&gt;</span><br><span class="language-xml">        &#123;isOpen ? &quot;–&quot; : &quot;+&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isOpen &amp;&amp; children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MovieList</span>(<span class="hljs-params">&#123; movies &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;movies?.map((movie) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Movie</span> <span class="hljs-attr">movie</span>=<span class="hljs-string">&#123;movie&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Movie</span>(<span class="hljs-params">&#123; movie &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;movie.Poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">movie.Title</span>&#125; <span class="hljs-attr">poster</span>`&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;movie.Title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🗓<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.Year&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedSummary</span>(<span class="hljs-params">&#123; watched &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> avgImdbRating = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">imdbRating</span>));<br>  <span class="hljs-keyword">const</span> avgUserRating = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">userRating</span>));<br>  <span class="hljs-keyword">const</span> avgRuntime = <span class="hljs-title function_">average</span>(watched.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">movie</span>) =&gt;</span> movie.<span class="hljs-property">runtime</span>));<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;summary&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Movies you watched<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#️⃣<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;watched.length&#125; movies<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⭐️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgImdbRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgUserRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⏳<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;avgRuntime&#125; min<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedMovieList</span>(<span class="hljs-params">&#123; watched &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;watched.map((movie) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">WatchedMovie</span> <span class="hljs-attr">movie</span>=<span class="hljs-string">&#123;movie&#125;</span> /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WatchedMovie</span>(<span class="hljs-params">&#123; movie &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;movie.imdbID&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;movie.Poster&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">movie.Title</span>&#125; <span class="hljs-attr">poster</span>`&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;movie.Title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⭐️<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.imdbRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>🌟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.userRating&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>⏳<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;movie.runtime&#125; min<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（2）StarRating-js"><a href="#（2）StarRating-js" class="headerlink" title="（2）StarRating.js"></a>（2）StarRating.js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> containerStyle = &#123;<br>  <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;flex&quot;</span>,<br>  <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>  <span class="hljs-attr">gap</span>: <span class="hljs-string">&quot;16px&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> starContainerStyle = &#123;<br>  <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;flex&quot;</span>,<br>  <span class="hljs-comment">//gap: &quot;4px&quot;,</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">StarRating</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  maxRating = <span class="hljs-number">5</span>,</span><br><span class="hljs-params">  color = <span class="hljs-string">&quot;#e3af40&quot;</span>,</span><br><span class="hljs-params">  size = <span class="hljs-number">48</span>,</span><br><span class="hljs-params">  className = <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="hljs-params">  messages = [],</span><br><span class="hljs-params">  defaultRating = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [rating, setRating] = <span class="hljs-title function_">useState</span>(defaultRating);<br>  <span class="hljs-keyword">const</span> [tempRating, setTempRating] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRating</span>(<span class="hljs-params">rating</span>) &#123;<br>    <span class="hljs-title function_">setRating</span>(rating);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> textStyle = &#123;<br>    <span class="hljs-attr">lineHeight</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    color,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;size / <span class="hljs-number">2.5</span>&#125;</span>px`</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;containerStyle&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;starContainerStyle&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;Array.from(&#123; length: maxRating &#125;, (_, i) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Star</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;i&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onRate</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleRating(i + 1)&#125;</span><br><span class="language-xml">            full=&#123;tempRating ? tempRating &gt;= i + 1 : rating &gt;= i + 1&#125;</span><br><span class="language-xml">            onHoverIn=&#123;() =&gt; setTempRating(i + 1)&#125;</span><br><span class="language-xml">            onHoverOut=&#123;() =&gt; setTempRating(0)&#125;</span><br><span class="language-xml">            color=&#123;color&#125;</span><br><span class="language-xml">            size=&#123;size&#125;</span><br><span class="language-xml">          /&gt;</span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;textStyle&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;maxRating === messages.length</span><br><span class="language-xml">          ? messages[tempRating ? tempRating - 1 : rating - 1]</span><br><span class="language-xml">          : tempRating || rating || &quot;&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">&#123; onRate, full, onHoverIn, onHoverOut, color, size &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> starStyle = &#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;size / <span class="hljs-number">1.5</span>&#125;</span>px`</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;size / <span class="hljs-number">1.5</span>&#125;</span>px`</span>,<br>    <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;block&quot;</span>,<br>    <span class="hljs-attr">cursor</span>: <span class="hljs-string">&quot;pointer&quot;</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;starStyle&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onRate&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onMouseEnter</span>=<span class="hljs-string">&#123;onHoverIn&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onMouseLeave</span>=<span class="hljs-string">&#123;onHoverOut&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;full ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 20 20&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">fill</span>=<span class="hljs-string">&#123;color&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#123;color&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;none&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">stroke</span>=<span class="hljs-string">&#123;color&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">path</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">strokeLinecap</span>=<span class="hljs-string">&quot;round&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">strokeLinejoin</span>=<span class="hljs-string">&quot;round&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">strokeWidth</span>=<span class="hljs-string">&quot;&#123;2&#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（3）可折叠会话（可重用小组件）"><a href="#（3）可折叠会话（可重用小组件）" class="headerlink" title="（3）可折叠会话（可重用小组件）"></a>（3）可折叠会话（可重用小组件）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-comment">//import &quot;./index.css&quot;;</span><br><span class="hljs-comment">//import App from &quot;./App&quot;;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">StarRating</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./StarRating&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./style.css&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Text</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StarRating</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;blue&quot;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span> */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">StarRating</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">maxRating</span>=<span class="hljs-string">&#123;5&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">messages</span>=<span class="hljs-string">&#123;[</span>&quot;<span class="hljs-attr">Terrible</span>&quot;, &quot;<span class="hljs-attr">Bad</span>&quot;, &quot;<span class="hljs-attr">Okay</span>&quot;, &quot;<span class="hljs-attr">Good</span>&quot;, &quot;<span class="hljs-attr">Amazing</span>&quot;]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">StarRating</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;35&#125;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">defaultRating</span>=<span class="hljs-string">&#123;3&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TextExpander</span>&gt;</span></span><br><span class="language-xml">      Space travel is the ultimate adventure! Imagine soaring past the stars and</span><br><span class="language-xml">      exploring new worlds. It&#x27;s the stuff of dreams and science fiction, but</span><br><span class="language-xml">      believe it or not, space travel is a real thing. Humans and robots are</span><br><span class="language-xml">      constantly venturing out into the cosmos to uncover its secrets and push</span><br><span class="language-xml">      the boundaries of what&#x27;s possible.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TextExpander</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TextExpander</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">collapsedNumWords</span>=<span class="hljs-string">&#123;20&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">expandButtonText</span>=<span class="hljs-string">&quot;Show text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">collapseButtonText</span>=<span class="hljs-string">&quot;Collapse text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">buttonColor</span>=<span class="hljs-string">&quot;#ff6622&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      Space travel requires some seriously amazing technology and collaboration</span><br><span class="language-xml">      between countries, private companies, and international space</span><br><span class="language-xml">      organizations. And while it&#x27;s not always easy (or cheap), the results are</span><br><span class="language-xml">      out of this world. Think about the first time humans stepped foot on the</span><br><span class="language-xml">      moon or when rovers were sent to roam around on Mars.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TextExpander</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TextExpander</span> <span class="hljs-attr">expanded</span>=<span class="hljs-string">&#123;true&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">      Space missions have given us incredible insights into our universe and</span><br><span class="language-xml">      have inspired future generations to keep reaching for the stars. Space</span><br><span class="language-xml">      travel is a pretty cool thing to think about. Who knows what we&#x27;ll</span><br><span class="language-xml">      discover next!</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TextExpander</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TextExpander</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  collapsedNumWords = <span class="hljs-number">10</span>,</span><br><span class="hljs-params">  expandButtonText = <span class="hljs-string">&quot;show more&quot;</span>,</span><br><span class="hljs-params">  collapseButtonText = <span class="hljs-string">&quot;show less&quot;</span>,</span><br><span class="hljs-params">  buttonColor = <span class="hljs-string">&quot;red&quot;</span>,</span><br><span class="hljs-params">  expanded = <span class="hljs-literal">false</span>,</span><br><span class="hljs-params">  className,</span><br><span class="hljs-params">  children,</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isExpanded, setIsExpanded] = <span class="hljs-title function_">useState</span>(expanded);<br>  <span class="hljs-keyword">const</span> displayText = isExpanded<br>    ? children<br>    : children.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, collapsedNumWords).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>) + <span class="hljs-string">&quot;...&quot;</span>;<br><br>  <span class="hljs-keyword">const</span> buttonStyle = &#123;<br>    <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>    <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>    <span class="hljs-attr">font</span>: <span class="hljs-string">&quot;inherit&quot;</span>,<br>    <span class="hljs-attr">cursor</span>: <span class="hljs-string">&quot;pointer&quot;</span>,<br>    <span class="hljs-attr">marginLeft</span>: <span class="hljs-string">&quot;6px&quot;</span>,<br>    <span class="hljs-attr">color</span>: buttonColor,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;displayText&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsExpanded((exp) =&gt; !exp)&#125; style=&#123;buttonStyle&#125;&gt;</span><br><span class="language-xml">        &#123;isExpanded ? collapseButtonText : expandButtonText&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程6-eat-n-split</title>
    <link href="/2024/08/16/react%E8%AF%BE%E7%A8%8B6-eat-n-split/"/>
    <url>/2024/08/16/react%E8%AF%BE%E7%A8%8B6-eat-n-split/</url>
    
    <content type="html"><![CDATA[<p>本节课构建的是一个小巧的账单小组件。</p><span id="more"></span><p>如图所示，一共可以被分为三个部分：朋友列表；添加朋友表；分账单表。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240819194647578.png" alt="image-20240819194647578"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="css"><a href="#css" class="headerlink" title="&#x3D;&gt;css"></a>&#x3D;&gt;css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--color-lightest</span>: <span class="hljs-number">#fff4e6</span>;<br>  <span class="hljs-attr">--color-light</span>: <span class="hljs-number">#ffe8cc</span>;<br>  <span class="hljs-attr">--color-medium</span>: <span class="hljs-number">#ffa94d</span>;<br>  <span class="hljs-attr">--color-dark</span>: <span class="hljs-number">#ff922b</span>;<br>&#125;<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>  <span class="hljs-attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="hljs-string">&quot;Segoe UI&quot;</span>, Roboto, Oxygen,<br>    Ubuntu, Cantarell, <span class="hljs-string">&quot;Open Sans&quot;</span>, <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, sans-serif;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#495057</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.app</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">66vh</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">34rem</span> <span class="hljs-number">44rem</span>;<br>  <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">align-items</span>: start;<br>&#125;<br><br><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-medium);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#343a40</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.8rem</span> <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-dark);<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">0.4rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">4.8rem</span> <span class="hljs-number">1</span>fr auto;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">1.6rem</span>;<br><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.selected</span>,<br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-lightest);<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">grid-row</span>: span <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">grid-row</span>: span <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> &gt; <span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">float</span>: right;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.green</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#66a80f</span>;<br>&#125;<br><br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#e03131</span>;<br>&#125;<br><br><span class="hljs-selector-tag">form</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br><br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-lightest);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.form-add-friend</span> &#123;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1.5</span>fr;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br><span class="hljs-selector-class">.form-split-bill</span> &#123;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">12rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.2rem</span> <span class="hljs-number">4rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>&#125;<br><br><span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">::first-letter</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span>,<br>select &#123;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.7rem</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--color-light);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>,<br>select<span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--color-dark);<br>&#125;<br><br><span class="hljs-selector-tag">form</span> <span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.6rem</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-tag">form</span> <span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / -<span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.2rem</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">0.5px</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.6rem</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="js"><a href="#js" class="headerlink" title="&#x3D;&gt;js"></a>&#x3D;&gt;js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> initialFriends = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">118836</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Clark&quot;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&quot;https://i.pravatar.cc/48?u=118836&quot;</span>,<br>    <span class="hljs-attr">balance</span>: -<span class="hljs-number">7</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">933372</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Sarah&quot;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&quot;https://i.pravatar.cc/48?u=933372&quot;</span>,<br>    <span class="hljs-attr">balance</span>: <span class="hljs-number">20</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">499476</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Anthony&quot;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&quot;https://i.pravatar.cc/48?u=499476&quot;</span>,<br>    <span class="hljs-attr">balance</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; children, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [showAddFriend, setShowAddFriend] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [friends, setFriends] = <span class="hljs-title function_">useState</span>(initialFriends);<br>  <span class="hljs-keyword">const</span> [selectedFriend, setSelectFriend] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddFriend</span>(<span class="hljs-params">friend</span>) &#123;<br>    <span class="hljs-title function_">setFriends</span>(<span class="hljs-function">(<span class="hljs-params">friends</span>) =&gt;</span> [...friends, friend]);<br>    <span class="hljs-title function_">setShowAddFriend</span>(<span class="hljs-literal">false</span>);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSelection</span>(<span class="hljs-params">friend</span>) &#123;<br>    <span class="hljs-title function_">setSelectFriend</span>(<span class="hljs-function">(<span class="hljs-params">cur</span>) =&gt;</span> (cur?.<span class="hljs-property">id</span> === friend.<span class="hljs-property">id</span> ? <span class="hljs-literal">null</span> : friend));<br>    <span class="hljs-title function_">setShowAddFriend</span>(<span class="hljs-literal">false</span>);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSplitBill</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-title function_">setFriends</span>(<span class="hljs-function">(<span class="hljs-params">friends</span>) =&gt;</span><br>      friends.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">friend</span>) =&gt;</span><br>        friend.<span class="hljs-property">id</span> === selectedFriend.<span class="hljs-property">id</span><br>          ? &#123; ...friend, <span class="hljs-attr">balance</span>: friend.<span class="hljs-property">balance</span> + value &#125;<br>          : friend<br>      )<br>    );<br>    <span class="hljs-title function_">setSelectFriend</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">FriendList</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">friends</span>=<span class="hljs-string">&#123;friends&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onSelection</span>=<span class="hljs-string">&#123;handleSelection&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">selectedFriend</span>=<span class="hljs-string">&#123;selectedFriend&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        &#123;showAddFriend &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">FormAddFriend</span> <span class="hljs-attr">onAddFriends</span>=<span class="hljs-string">&#123;handleAddFriend&#125;</span> /&gt;</span>&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShowAddFriend((e) =&gt; !e)&#125;&gt;</span><br><span class="language-xml">          &#123;showAddFriend ? &quot;Close&quot; : &quot;Add friend&quot;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;selectedFriend &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">FormSplitBill</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">selectedFriend</span>=<span class="hljs-string">&#123;selectedFriend&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onSplitBill</span>=<span class="hljs-string">&#123;handleSplitBill&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;selectedFriend.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FriendList</span>(<span class="hljs-params">&#123; friends, onSelection, selectedFriend &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;friends.map((friend) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Friend</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">friend</span>=<span class="hljs-string">&#123;friend&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;friend.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onSelection</span>=<span class="hljs-string">&#123;onSelection&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">selectedFriend</span>=<span class="hljs-string">&#123;selectedFriend&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      ))&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Friend</span>(<span class="hljs-params">&#123; friend, onSelection, selectedFriend &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> isSelected = selectedFriend?.<span class="hljs-property">id</span> === friend.<span class="hljs-property">id</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;isSelected</span> ? &quot;<span class="hljs-attr">selected</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;friend.image&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;friend.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;friend.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;friend.balance &lt; 0 &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span></span><br><span class="language-xml">          You owe &#123;friend.name&#125; &#123;Math.abs(friend.balance)&#125;$</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      &#123;friend.balance &gt; 0 &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;friend.name&#125; owes you &#123;friend.balance&#125;$</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      &#123;friend.balance === 0 &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You and your friend are even<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onSelection(friend)&#125;&gt;</span><br><span class="language-xml">        &#123;isSelected ? &quot;Close&quot; : &quot;Select&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FormAddFriend</span>(<span class="hljs-params">&#123; onAddFriends &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [image, setImage] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;https://i.pravatar.cc/48&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-keyword">if</span> (!name || !image) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">const</span> id = crypto.<span class="hljs-title function_">randomUUID</span>();<br><br>    <span class="hljs-keyword">const</span> newFriend = &#123;<br>      id,<br>      name,<br>      <span class="hljs-attr">image</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;image&#125;</span>?=<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>      <span class="hljs-attr">balance</span>: <span class="hljs-number">0</span>,<br>    &#125;;<br><br>    <span class="hljs-title function_">onAddFriends</span>(newFriend);<br><br>    <span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-title function_">setImage</span>(<span class="hljs-string">&quot;https://i.pravatar.cc/48&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form-add-friend&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>👧🏻Friend name<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>🧣Image URL<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;image&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setImage(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FormSplitBill</span>(<span class="hljs-params">&#123; selectedFriend, onSplitBill &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [bill, setBill] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [paidByUser, setPaidByUser] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> paidByFriend = bill ? bill - paidByUser : <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">const</span> [whoIsPaying, setWhoIsPaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;user&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-keyword">if</span> (!bill || !paidByUser) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-title function_">onSplitBill</span>(whoIsPaying === <span class="hljs-string">&quot;user&quot;</span> ? paidByFriend : -paidByUser);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form-split-bill&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Split a Bill With &#123;selectedFriend.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>💜Bill Value<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;bill&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setBill(Number(e.target.value))&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>🔆Your expense<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;paidByUser&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setPaidByUser(Number(e.target.value))&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>☀️&#123;selectedFriend.name&#125;&#x27;s expense<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;paidByFriend&#125;</span> <span class="hljs-attr">disabled</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>🛎️Who<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;whoIsPaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setWhoIsPaying(e.target.value)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>You<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;friend&quot;</span>&gt;</span>&#123;selectedFriend.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Split bill<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程5-TravelList</title>
    <link href="/2024/08/16/react%E8%AF%BE%E7%A8%8B5-TravelList/"/>
    <url>/2024/08/16/react%E8%AF%BE%E7%A8%8B5-TravelList/</url>
    
    <content type="html"><![CDATA[<p>本节课建立了一个旅游需带物品清单App，在构建的时候，第一步是分析组件，第二步是构建静态网页，然后才是开始实现动态功能。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240816205602381.png" alt="image-20240816205602381"></p><h3 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h3><p>（1）index.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Monoton&amp;family=Quicksand:wght@500;700&amp;display=swap&quot;</span>);<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">font-family</span>: sans-serif;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#367031</span>;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Quicksand&quot;</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>&#125;<br><br><span class="hljs-selector-class">.app</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-rows</span>: auto auto <span class="hljs-number">1</span>fr auto;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9ad0c4</span>;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Monoton&quot;</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">8rem</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>  <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">letter-spacing</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2.4rem</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.add-form</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#74b8b1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2.8rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">0.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">button</span>,<br>select,<br><span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d1d8c8</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#295c59</span>;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.2rem</span> <span class="hljs-number">3.2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.add-form</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#8cd3bc</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#8eb1ce</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#e1ce98</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4rem</span> <span class="hljs-number">0</span>;<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">3.2rem</span>;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.actions</span> <span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-class">.list</span> select &#123;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.8rem</span> <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br>  <span class="hljs-attribute">overflow</span>: scroll;<br><br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">250px</span>, <span class="hljs-number">1</span>fr));<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-content</span>: start;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;checkbox&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2rem</span>;<br>  accent-<span class="hljs-attribute">color</span>: <span class="hljs-number">#e5771f</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">background</span>: none;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.8rem</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">2px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.stats</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9ad0c4</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.2rem</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（2）App.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Logo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Logo&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Form</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Form&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PackingList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./PackingList&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Stats</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Stats&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>([]);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddItems</span>(<span class="hljs-params">item</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(<span class="hljs-function">(<span class="hljs-params">items</span>) =&gt;</span> [...items, item]);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteItems</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(<span class="hljs-function">(<span class="hljs-params">items</span>) =&gt;</span> items.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> !== id));<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleToggleItem</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-title function_">setItems</span>(<span class="hljs-function">(<span class="hljs-params">items</span>) =&gt;</span><br>      items.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>        item.<span class="hljs-property">id</span> === id ? &#123; ...item, <span class="hljs-attr">packed</span>: !item.<span class="hljs-property">packed</span> &#125; : item<br>      )<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClearItems</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> confirmed = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">confirm</span>(<br>      <span class="hljs-string">&quot;Are you sure you want to delete all items?&quot;</span><br>    );<br><br>    <span class="hljs-keyword">if</span> (confirmed) <span class="hljs-title function_">setItems</span>([]);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">onAddItems</span>=<span class="hljs-string">&#123;handleAddItems&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">PackingList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">items</span>=<span class="hljs-string">&#123;items&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteItem</span>=<span class="hljs-string">&#123;handleDeleteItems&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onToggleItem</span>=<span class="hljs-string">&#123;handleToggleItem&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClearItems</span>=<span class="hljs-string">&#123;handleClearItems&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Stats</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&#123;items&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（3）Form.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params">&#123; onAddItems &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [description, setDescription] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [quantity, setQuantity] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">if</span> (!description) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">const</span> newItem = &#123; description, quantity, <span class="hljs-attr">packed</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">id</span>: <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() &#125;;<br><br>    <span class="hljs-title function_">onAddItems</span>(newItem);<br>    <span class="hljs-title function_">setDescription</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-title function_">setQuantity</span>(<span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;add-form&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>What do you need for your trip?<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;quantity&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setQuantity(Number(e.target.value))&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        &#123;Array.from(&#123; length: 20 &#125;, (_, i) =&gt; i + 1).map((num) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;num&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;num&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;num&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Item...&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;description&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setDescription(e.target.value)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（4）Item.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Item</span>(<span class="hljs-params">&#123; item, onDeleteItem, onToggleItem &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      &#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.packed&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onToggleItem(item.id)&#125;</span><br><span class="language-xml">      /&gt;&#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;item.packed</span> ? &#123; <span class="hljs-attr">textDecoration:</span> &quot;<span class="hljs-attr">line-through</span>&quot; &#125; <span class="hljs-attr">:</span> &#123;&#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;&quot; &quot;&#125;</span><br><span class="language-xml">        &#123;item.quantity&#125;🐶&#123;item.description&#125;&#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;&quot; &quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> onDeleteItem(item.id)&#125;&gt;❌<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#123;&quot; &quot;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（5）PackingList.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Item&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">PackingList</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  items,</span><br><span class="hljs-params">  onDeleteItem,</span><br><span class="hljs-params">  onToggleItem,</span><br><span class="hljs-params">  onClearItems,</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [sortBy, setSortBy] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;input&quot;</span>);<br><br>  <span class="hljs-keyword">let</span> sortedItems;<br><br>  <span class="hljs-keyword">if</span> (sortBy === <span class="hljs-string">&quot;input&quot;</span>) sortedItems = items;<br>  <span class="hljs-keyword">if</span> (sortBy === <span class="hljs-string">&quot;description&quot;</span>)<br>    sortedItems = items<br>      .<span class="hljs-title function_">slice</span>()<br>      .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.<span class="hljs-property">description</span>.<span class="hljs-title function_">localeCompare</span>(b.<span class="hljs-property">description</span>));<br>  <span class="hljs-keyword">if</span> (sortBy === <span class="hljs-string">&quot;packed&quot;</span>)<br>    sortedItems = items<br>      .<span class="hljs-title function_">slice</span>()<br>      .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> <span class="hljs-title class_">Number</span>(a.<span class="hljs-property">packed</span>) - <span class="hljs-title class_">Number</span>(b.<span class="hljs-property">packed</span>));<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;sortedItems.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Item</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">item</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onDeleteItem</span>=<span class="hljs-string">&#123;onDeleteItem&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onToggleItem</span>=<span class="hljs-string">&#123;onToggleItem&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;actions&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;sortBy&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setSortBy(e.target.value)&#125;&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span>sort by input order<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span>sort by description<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;packed&quot;</span>&gt;</span>sort by packed<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClearItems&#125;</span>&gt;</span>Clear List<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（6）Stats.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Stats</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!items.<span class="hljs-property">length</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;stats&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Start adding some items to your packing list!<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    );<br>  <span class="hljs-keyword">const</span> numItems = items.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> numPacked = items.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">packed</span>).<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> percentage = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>((numPacked / numItems) * <span class="hljs-number">100</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;stats&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span></span><br><span class="language-xml">        &#123;percentage === 100</span><br><span class="language-xml">          ? &quot;You got everything!Ready to go!&quot;</span><br><span class="language-xml">          : `You have $&#123;numItems&#125; items on your list,and you already packed </span><br><span class="language-xml">          $&#123;numPacked&#125; ($&#123;percentage&#125;%)`&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（7）Logo.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Logo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>🏞️Trip List🏜️<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程4-compoment</title>
    <link href="/2024/08/13/react%E8%AF%BE%E7%A8%8B4-compoment/"/>
    <url>/2024/08/13/react%E8%AF%BE%E7%A8%8B4-compoment/</url>
    
    <content type="html"><![CDATA[<p>这次课程创建了一个小组件，</p><span id="more"></span><p>下载了dev tools</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240813195809998.png" alt="image-20240813195809998" style="zoom:33%;" /><h2 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h2><h4 id="（1）App-js"><a href="#（1）App-js" class="headerlink" title="（1）App.js"></a>（1）App.js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> messages = [<br>  <span class="hljs-string">&quot;Learn React ⚛️&quot;</span>,<br>  <span class="hljs-string">&quot;Apply for jobs 💼&quot;</span>,<br>  <span class="hljs-string">&quot;Invest your new income 🤑&quot;</span>,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [step, setStep] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> [isOpen, setIsOpen] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePrevious</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (step &gt; <span class="hljs-number">1</span>) <span class="hljs-title function_">setStep</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> s - <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleNext</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (step &lt; <span class="hljs-number">3</span>) <span class="hljs-title function_">setStep</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> s + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsOpen((is) =&gt; !is)&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-symbol">&amp;times;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;isOpen &amp;&amp; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;steps&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;numbers&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">step</span> &gt;</span>= 1 ? &quot;active&quot; : &quot;&quot;&#125;`&#125;&gt;1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">step</span> &gt;</span>= 2 ? &quot;active&quot; : &quot;&quot;&#125;`&#125;&gt;2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">step</span> === <span class="hljs-string">3</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;`&#125;&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">StepMessage</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&#123;step&#125;</span>&gt;</span>&#123;messages[step - 1]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">StepMessage</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">bgColor</span>=<span class="hljs-string">&quot;#7950f2&quot;</span> <span class="hljs-attr">textColor</span>=<span class="hljs-string">&quot;#fff&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handlePrevious&#125;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>👈<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>Previous</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">bgColor</span>=<span class="hljs-string">&quot;#7950f2&quot;</span> <span class="hljs-attr">textColor</span>=<span class="hljs-string">&quot;#fff&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleNext&#125;</span>&gt;</span></span><br><span class="language-xml">              Next<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>👉<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">StepMessage</span>(<span class="hljs-params">&#123; step, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Step &#123;step&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; textColor, bgColor, onClick, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">bgColor</span>, <span class="hljs-attr">color:</span> <span class="hljs-attr">textColor</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（2）index-css"><a href="#（2）index-css" class="headerlink" title="（2）index.css"></a>（2）index.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: sans-serif;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-class">.steps</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f7f7</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.numbers</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.numbers</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>  aspect-ratio: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e7e7e7</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.numbers</span> <span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7950f2</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.message</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.buttons</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.buttons</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.buttons</span> <span class="hljs-selector-tag">button</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>&#125;<br><br><span class="hljs-selector-class">.close</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">background</span>: none;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">color</span>: inherit;<br>&#125;<br><br><span class="hljs-selector-class">.close</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#7950f2</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二、重点回顾"><a href="#二、重点回顾" class="headerlink" title="二、重点回顾"></a>二、重点回顾</h3><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240816203708314.png" alt="image-20240816203708314"></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240816203858922.png" alt="image-20240816203858922"></p><p>状态的应用（非常之重要）</p><p>回调函数</p><p>html表单：onSubmit（按下Enter键也可以提交）与onClick监听事件的不同</p><p>受控元素</p><p>onClick（）监控</p><p>状态提升（到最近公共祖先）</p><p>重用组件、children传递</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程3-pizza_menu</title>
    <link href="/2024/08/13/react%E8%AF%BE%E7%A8%8B3-pizza_menu/"/>
    <url>/2024/08/13/react%E8%AF%BE%E7%A8%8B3-pizza_menu/</url>
    
    <content type="html"><![CDATA[<p>记录做出的pizza menu项目，总结一下react 内容。</p><span id="more"></span><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><h4 id="（1）组件树"><a href="#（1）组件树" class="headerlink" title="（1）组件树"></a>（1）组件树</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240813151436338.png" alt="image-20240813151436338" style="zoom: 33%;" /><h4 id="（2）JSX与HTML"><a href="#（2）JSX与HTML" class="headerlink" title="（2）JSX与HTML"></a>（2）JSX与HTML</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240813151557741.png" alt="image-20240813151557741"></p><h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><h4 id="（1）index-css"><a href="#（1）index-css" class="headerlink" title="（1）index.css"></a>（1）index.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,300;0,400;0,500;1,300&amp;display=swap&quot;</span>);<br><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">62.5%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Roboto Mono&quot;</span>, sans-serif;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#252525</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f2e9</span>;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1.6rem</span> solid <span class="hljs-number">#edc84b</span>;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.2rem</span>;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">6rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">80rem</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">4.8rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* *************** */</span><br><br><span class="hljs-selector-class">.header</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: stretch;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-comment">/* Non-accessible color */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#edc84b</span>;<br>  <span class="hljs-comment">/* color: #af8602; */</span><br><br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">5.2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#edc84b</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">1px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* *************** */</span><br><br><span class="hljs-selector-class">.menu</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.menu</span> <span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">2px</span> solid currentColor;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid currentColor;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.4rem</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>&#125;<br><br><span class="hljs-selector-class">.menu</span> &gt; <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.6</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizzas</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">4.8rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">3.2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">12rem</span>;<br>  aspect-ratio: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">align-self</span>: start;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">0.8rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.4rem</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>  <span class="hljs-attribute">font-style</span>: italic;<br>  <span class="hljs-attribute">margin-bottom</span>: auto;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span><span class="hljs-selector-class">.sold-out</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#888</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pizza</span><span class="hljs-selector-class">.sold-out</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>();<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>&#125;<br><br><span class="hljs-comment">/* *************** */</span><br><br><span class="hljs-selector-class">.footer</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.order</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">2.4rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span> &#123;<br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#edc84b</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.4rem</span> <span class="hljs-number">3.2rem</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.2s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e9bb24</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">SPACING SYSTEM (px)</span><br><span class="hljs-comment">2 / 4 / 8 / 12 / 16 / 24 / 32 / 40 / 48 / 64 / 80 / 96 / 128</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">FONT SIZE SYSTEM (px)</span><br><span class="hljs-comment">10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 /52 / 62 / 74 / 86 / 98</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h4 id="（2）index-js"><a href="#（2）index-js" class="headerlink" title="（2）index.js"></a>（2）index.js</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><br><span class="hljs-keyword">const</span> pizzaData = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Focaccia&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Bread with italian olive oil and rosemary&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/focaccia.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Margherita&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato and mozarella&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/margherita.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Spinaci&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato, mozarella, spinach, and ricotta cheese&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/spinaci.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Funghi&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato, mozarella, mushrooms, and onion&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/funghi.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Salamino&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato, mozarella, and pepperoni&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">15</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/salamino.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pizza Prosciutto&quot;</span>,<br>    <span class="hljs-attr">ingredients</span>: <span class="hljs-string">&quot;Tomato, mozarella, ham, aragula, and burrata cheese&quot;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">photoName</span>: <span class="hljs-string">&quot;pizzas/prosciutto.jpg&quot;</span>,<br>    <span class="hljs-attr">soldOut</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>];<br><span class="hljs-comment">//整个应用界面</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//const style = &#123; color: &quot;red&quot;, fontSize: &quot;48px&quot;, textTransform: &quot;uppercase&quot; &#125;;</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Fast React Pizza Co.<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> pizzas = pizzaData;<br>  <span class="hljs-comment">//const pizzas = [];</span><br>  <span class="hljs-keyword">const</span> numPizzas = pizzas.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Our menu<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;numPizzas &gt; 0 ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            Authentic Italian cuisine.6 creative dishes to choose from. All  from our stone oven,all organic,all delicious.</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pizzas&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;pizzaData.map((pizza) =&gt; (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Pizza</span> <span class="hljs-attr">pizzaObj</span>=<span class="hljs-string">&#123;pizza&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;pizza.name&#125;</span> /&gt;</span></span><br><span class="language-xml">            ))&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>      ) : (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>we&#x27;re still work on our menu,please come back later :)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>      )&#125;<br>    &lt;/main&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Pizza</span>(<span class="hljs-params">&#123; pizzaObj &#125;</span>) &#123;<br>  <span class="hljs-comment">//if (pizzaObj.soldOut) return null;</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">pizza</span> $&#123;<span class="hljs-attr">pizzaObj.soldOut</span> ? &quot;<span class="hljs-attr">sold-out</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;`&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;pizzaObj.photoName&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;pizzaObj.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;pizzaObj.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;pizzaObj.ingredients&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;pizzaObj.soldOut ? &quot;SOLD OUT&quot; : pizzaObj.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Footer</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> hour = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getHours</span>();<br>  <span class="hljs-keyword">const</span> openHour = <span class="hljs-number">12</span>;<br>  <span class="hljs-keyword">const</span> closeHour = <span class="hljs-number">19</span>;<br>  <span class="hljs-keyword">const</span> isOpen = hour &gt;= openHour &amp;&amp; hour &lt;= closeHour;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;isOpen ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Order</span> <span class="hljs-attr">closeHour</span>=<span class="hljs-string">&#123;closeHour&#125;</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          we&#x27;re happy to welcome you between &#123;openHour&#125;:00 and &#123;closeHour&#125;:00</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Order</span> (props) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        we&#x27;re open until &#123;props.closeHour&#125;:00.Come visit us or order unline.</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>Order<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>);<br><span class="hljs-comment">/*strict : can check bug</span><br><span class="hljs-comment">root.render(</span><br><span class="hljs-comment">    &lt;React.StrictMode&gt;</span><br><span class="hljs-comment">        &lt;App /&gt;</span><br><span class="hljs-comment">    &lt;/React.StrictMode&gt;</span><br><span class="hljs-comment">);*/</span><br><br></code></pre></td></tr></table></figure><h3 id="三、Summary"><a href="#三、Summary" class="headerlink" title="三、Summary"></a>三、Summary</h3><p>（1）map</p><p>（2）？：</p><p>（3）fragment </p><p>（4）render</p><p>（5）destrcution and props</p><p>（6）条件展示css </p><p>（7）emoji网站：<a href="https://emojipedia.org/">https://emojipedia.org/</a></p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程2-kick off</title>
    <link href="/2024/08/11/react%E8%AF%BE%E7%A8%8B2-kick-off/"/>
    <url>/2024/08/11/react%E8%AF%BE%E7%A8%8B2-kick-off/</url>
    
    <content type="html"><![CDATA[<p>开始整合比较小的页面</p><span id="more"></span><p>最好不要嵌套函数声明</p><h3 id="一、Babel"><a href="#一、Babel" class="headerlink" title="一、Babel"></a>一、Babel</h3><p>Babel 是一个广泛使用的 JavaScript 编译器，主要用于将现代 JavaScript 代码（ES6+）转换为与旧浏览器兼容的代码。它能够将新版本的 JavaScript 语法和特性编译为更旧版本，从而确保代码可以在不支持这些新特性的环境中运行。</p><p>Babel 的主要功能包括：</p><ol><li><strong>语法转换</strong>：将现代 JavaScript 语法（如箭头函数、类、模板字符串等）转换为较旧的等效代码。</li><li><strong>插件系统</strong>：Babel 提供了一个强大的插件系统，用户可以根据需要定制 Babel 的行为，例如添加支持 TypeScript、React JSX 等。</li><li><strong>Polyfill</strong>：通过 <code>@babel/polyfill</code>，可以在旧浏览器中引入新 JavaScript 标准库功能（如 Promise、Map 等）。</li><li><strong>代码转换</strong>：Babel 还可以用于代码的其他转换，例如重命名变量、删除未使用的代码等。</li></ol><p>在 React 项目中，Babel 通常与 Webpack 一起使用，通过配置 Babel Loader 来处理 JavaScript 文件的转换，使得开发者可以使用最新的 JavaScript 特性进行开发，同时确保代码的兼容性。</p><h3 id="二、webpack"><a href="#二、webpack" class="headerlink" title="二、webpack"></a>二、webpack</h3><p>Webpack 是一个现代 JavaScript 应用的模块打包工具（bundler）。它的主要功能是将各种资源（JavaScript、CSS、图片等）作为模块进行打包，从而生成可以在浏览器中运行的文件。Webpack 的核心思想是把所有的项目资源都视为模块，无论是 JavaScript 代码、样式表还是图片等资源，最终打包成一个或多个输出文件，以便在浏览器中更高效地加载。</p><p>以下是 Webpack 的一些核心概念：</p><ol><li><strong>Entry（入口）</strong>：<ul><li>Webpack 从一个或多个入口文件开始构建依赖关系图，找出项目中所有的模块及其依赖关系。</li><li>默认入口文件是 <code>./src/index.js</code>，但可以通过 Webpack 配置文件 (<code>webpack.config.js</code>) 来指定。</li></ul></li><li><strong>Output（输出）</strong>：<ul><li>配置输出文件的名称和路径。打包后的文件通常命名为 <code>bundle.js</code>，但也可以自定义。</li><li>例如，将输出文件放在 <code>./dist</code> 目录下。</li></ul></li><li><strong>Loaders（加载器）</strong>：<ul><li>Loaders 用于转换不同类型的模块，如将 ES6+ 的 JavaScript 转换为兼容的 ES5，或者将 SCSS 文件编译为 CSS。</li><li>常用的加载器有 <code>babel-loader</code>（处理 JavaScript）、<code>css-loader</code>（处理 CSS）、<code>file-loader</code>（处理文件资源）等。</li></ul></li><li><strong>Plugins（插件）</strong>：<ul><li>插件用于执行复杂的任务，如优化打包文件的大小、生成 HTML 文件、提取 CSS 文件等。</li><li>常见的插件有 <code>HtmlWebpackPlugin</code>（生成 HTML 文件）、<code>MiniCssExtractPlugin</code>（提取 CSS 到单独文件）、<code>UglifyJsPlugin</code>（压缩 JavaScript 文件）等。</li></ul></li><li><strong>Mode（模式）</strong>：<ul><li>Webpack 提供了两种模式：<code>development</code> 和 <code>production</code>。</li><li><code>development</code> 模式适用于开发环境，具有更好的调试体验，代码不会被压缩。</li><li><code>production</code> 模式适用于生产环境，代码会被优化和压缩，以提高性能。</li></ul></li><li><strong>DevServer</strong>：<ul><li>Webpack DevServer 是一个开发服务器，它可以实时重新加载页面，提供热模块替换（Hot Module Replacement，HMR）功能，使开发过程更加高效。</li></ul></li></ol><p>在实际应用中，Webpack 通常与 Babel、Sass、PostCSS 等工具结合使用，以构建现代 Web 应用程序。通过配置 Webpack，你可以在开发过程中享受模块化开发的便利，同时确保最终生成的文件在性能和兼容性上达到最佳状态。</p><h3 id="三、React的分离特性"><a href="#三、React的分离特性" class="headerlink" title="三、React的分离特性"></a>三、React的分离特性</h3><p>React 框架的确与传统的分离式（HTML、CSS、JavaScript 分离）开发方式有所不同。在 React 中，开发者通常会将逻辑、结构和样式组合在一个组件内，使用 JavaScript 来创建用户界面。这种方法称为<strong>组件化开发</strong>，其核心理念是将 UI 拆分为独立、可复用的组件。</p><p>尽管 React 不再像传统方式那样严格分离 HTML、CSS、JS，但它依然在不同层次上体现了分离性：</p><ol><li><strong>组件分离</strong></li></ol><ul><li>React 强调将页面分解成多个独立的组件，每个组件只负责自己的功能和状态管理。这种分离方式使得代码更加模块化和可维护。</li><li>每个组件可以包含自己的结构（HTML）、样式（CSS）、逻辑（JS），并且可以独立开发、测试和复用。</li></ul><ol start="2"><li><strong>JSX 的语义分离</strong></li></ol><ul><li>在 React 中，JSX 允许开发者在 JavaScript 中编写类似 HTML 的语法。尽管看似混合了 HTML 和 JavaScript，但其实 JSX 只是 React 的语法糖，最终会被编译成纯 JavaScript。</li><li>通过 JSX，结构化的 UI 代码嵌入在 JavaScript 中，但仍然保持了逻辑和展示之间的清晰分离。代码语义化也得到了增强，因为 JSX 语法比传统的字符串拼接方式更直观。</li></ul><ol start="3"><li><strong>CSS-in-JS</strong></li></ol><ul><li>React 生态中有许多样式解决方案，比如 styled-components、emotion，它们允许在 JavaScript 文件中编写样式。这种方式使样式与组件逻辑紧密绑定，避免了传统全局 CSS 带来的样式冲突问题。</li><li>CSS-in-JS 提供了样式的局部作用域（scoped styling），从而实现了样式的隔离和组件化管理。</li></ul><ol start="4"><li><strong>Context 和 Hooks 的逻辑分离</strong></li></ol><ul><li>React 提供了 Context 和 Hooks，使得状态管理和业务逻辑可以与 UI 组件分离。例如，使用 <code>useContext</code> 和 <code>useReducer</code> 等 Hook，可以将全局状态逻辑与具体组件解耦，从而提高代码的可读性和复用性。</li><li>通过自定义 Hooks，开发者可以将可复用的逻辑抽取出来，并在多个组件中共享，而不需要重复代码。</li></ul><ol start="5"><li><strong>CSS Modules</strong></li></ol><ul><li>CSS Modules 是 React 中另一种常用的样式解决方案，它允许开发者将样式分离成各个模块，并自动为每个模块生成唯一的类名，以避免样式冲突。</li><li>使用 CSS Modules 时，样式文件仍然可以保持与组件分离，同时确保了样式的作用范围只限于当前组件。</li></ul><ol start="6"><li><strong>文件结构的分离</strong></li></ol><ul><li>虽然 React 鼓励在组件内部进行组合，但开发者依然可以根据项目需求将组件、样式和逻辑代码分布在不同的文件中。</li><li>例如，可以有一个 <code>components</code> 文件夹来存放组件，一个 <code>styles</code> 文件夹来存放样式文件，一个 <code>services</code> 文件夹来处理业务逻辑和 API 请求。</li></ul><p>React 中的“分离性”更多地体现在逻辑层次的分离，而非文件层次的分离。通过组件化开发、JSX、CSS-in-JS、Context、Hooks 等机制，React 保持了代码的模块化和可维护性，即使结构、样式和逻辑被合并在一起。这种方式更适合现代前端开发的需求，提供了更好的代码组织方式和开发体验。</p><h3 id="四、重用组件的代码实例"><a href="#四、重用组件的代码实例" class="headerlink" title="四、重用组件的代码实例"></a>四、重用组件的代码实例</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Menu</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Our menu<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;pizza&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Pizza</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Pizza Spinaci&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">ingredients</span>=<span class="hljs-string">&quot;Tomato, mozarella, spinach, and ricotta cheese&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">photoName</span>=<span class="hljs-string">&quot;pizzas\spinaci.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">price</span>=<span class="hljs-string">&#123;10&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Pizza</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Pizza Funghi&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">ingredients</span>=<span class="hljs-string">&quot;Tomato, mozarella, mushrooms, and onion&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">price</span>=<span class="hljs-string">&#123;12&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">photoName</span>=<span class="hljs-string">&quot;pizzas/funghi.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Pizza</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;props.photoName&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;props.name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.ingredients&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;props.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react课程1-preparing</title>
    <link href="/2024/08/08/react%E8%AF%BE%E7%A8%8B1-preparing/"/>
    <url>/2024/08/08/react%E8%AF%BE%E7%A8%8B1-preparing/</url>
    
    <content type="html"><![CDATA[<p>处理数据+在用户界面展示数据——&gt;<strong>用户界面(user interface)与数据同步</strong></p><span id="more"></span><h3 id="一、react简介"><a href="#一、react简介" class="headerlink" title="一、react简介"></a>一、react简介</h3><p>处理数据+在用户界面展示数据——&gt;用户界面(user interface)与数据同步</p><p>react基本上是关于component的，它的基本任务就是<strong>获取组件的当前状态并将它们绘制在web界面上</strong>。另外一件对组件做的事情就是：<strong>重用</strong>（）。以及<strong>组件嵌套</strong>。</p><p>远离DOM的纯净的JS。——&gt;JXS</p><p>如何很好地响应变化？：<strong>state</strong></p><p>react实际上是一个库。</p><p>建立在react上的框架：Next.js和Remix</p><p>迄今为止最受欢迎的框架：1、许多大型公司很久之前就已经开始使用react；2、拥有巨大的就业市场和很高的需求；3、拥有许多专业社区为开发人员提供支持</p><p>最初是起源于社交软件。</p><h3 id="二、Node-JS"><a href="#二、Node-JS" class="headerlink" title="二、Node.JS"></a>二、Node.JS</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境。它使得 JavaScript 不仅可以在浏览器中运行，还可以在服务器端运行。简单来说，Node.js 让你能够使用 JavaScript 编写服务器端应用程序。以下是 Node.js 的主要用途和特点：</p><ol><li><strong>服务器端编程</strong></li></ol><ul><li>使用 Node.js 可以编写服务器端代码，这意味着你可以用 JavaScript 创建后台服务、处理请求和响应、管理数据库等。Node.js 常用于构建 RESTful API、Web 应用程序、实时聊天应用等。</li></ul><ol start="2"><li><strong>事件驱动与非阻塞 I&#x2F;O</strong></li></ol><ul><li>Node.js 的最大特点之一是其事件驱动和非阻塞 I&#x2F;O 模型。这使得它非常适合处理高并发的请求，比如需要同时处理大量连接的服务器。因为它是非阻塞的，所以即使有大量请求同时到来，Node.js 也不会因为某个请求在等待数据而阻塞其他请求。</li></ul><ol start="3"><li><strong>全栈开发</strong></li></ol><ul><li>由于 Node.js 使用 JavaScript 语言，前端开发人员可以在掌握 JavaScript 的基础上，无缝地过渡到后端开发，实现全栈开发。比如使用 Express 框架可以很方便地创建和管理后端服务。</li></ul><ol start="4"><li><strong>丰富的包生态系统</strong></li></ol><ul><li>Node.js 具有一个庞大的包管理系统，即 npm（Node Package Manager）。通过 npm，开发者可以访问数十万计的开源包和模块，大大简化了开发过程。例如，使用 <code>express</code> 可以快速搭建 web 服务器，使用 <code>mongoose</code> 可以轻松操作 MongoDB 数据库。</li></ul><ol start="5"><li><strong>跨平台</strong></li></ol><ul><li>Node.js 是跨平台的，可以在 Windows、Linux、macOS 等操作系统上运行，这使得它成为了一个非常灵活的开发工具。</li></ul><ol start="6"><li><strong>实时应用</strong></li></ol><ul><li>Node.js 非常适合开发实时应用程序，比如聊天室、在线游戏、协同工具等，因为它能处理大量的并发连接并且响应速度非常快。</li></ul><ol start="7"><li><strong>开发工具和构建工具</strong></li></ol><ul><li>Node.js 也被广泛用于开发工具的构建，如 webpack、gulp 等，帮助前端开发者进行项目的打包、构建、测试和部署。</li></ul><p><strong>举例应用场景：</strong></p><ul><li><strong>Web 服务器</strong>：使用 Express.js 创建的 Web 应用。</li><li><strong>API 服务</strong>：RESTful API，用于与数据库交互并提供数据服务。</li><li><strong>实时应用</strong>：聊天应用、协同编辑工具（如 Google Docs）。</li><li><strong>开发工具</strong>：前端打包工具（如 Webpack）、任务运行器（如 Gulp）。</li></ul><p>总之，Node.js 是一个强大的工具，适合需要高并发处理和实时交互的应用场景，尤其是在 Web 开发领域有着广泛的应用。</p><h3 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h3><p>（1）安装 VS code的依赖：</p><p>1、ESlint（发现bug）</p><p>2、Prettier（自动格式化代码使其更美观）</p><p>3、One Monokai Theme</p><p>4、material icon Theme</p><p>（2）设置</p><p>auto save调整为  onFocusChange</p><p>default Formatter调整为Prettier</p><p>Format on save打开</p><p>eslint run改为on save</p><p>（3）快捷键</p><p>1、新建一个空的HTML文件时，输入！点击Enter就会构建出一个空的HTML结构</p><p>2、rfc+Enter，创建一个空的组件函数结构</p><p>（4）安装好npm 以及npm依赖，下载react-start-app@5来创建项目，<strong>npm start</strong>来运行项目</p>]]></content>
    
    
    <categories>
      
      <category>react课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发课程4--贪吃蛇小游戏</title>
    <link href="/2024/08/07/2024-08-07-web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B4--%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/08/07/2024-08-07-web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B4--%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>网页端的贪吃蛇小游戏，支持定制，目前功能尚少</p><span id="more"></span><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Snake<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snake.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;input.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;food.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snakeUtils.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;game.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;game-board&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;game-start&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Start Game<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;start-button&quot;</span>&gt;</span>Start<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;game-over&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Game Over<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;restart-button&quot;</span>&gt;</span>Restart<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* No need to edit this file! */</span><br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-color</span>: gray;<br>&#125;<br><br><span class="hljs-selector-id">#game-board</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: black;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vmin</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vmin</span>;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">21</span>, <span class="hljs-number">1</span>fr);<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">21</span>, <span class="hljs-number">1</span>fr);<br>&#125;<br><br><span class="hljs-comment">/* .snake &#123;</span><br><span class="hljs-comment">  background-color: rgb(58, 90, 160);</span><br><span class="hljs-comment">  border: 0.25vmin solid rgb(78, 66, 126);</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.snake</span>&#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;IMG_20240731_162343.jpg&#x27;</span>); <span class="hljs-comment">/* 替换为你的蛇头图片路径 */</span><br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">4.76vmin</span> <span class="hljs-number">4.76vmin</span>; <span class="hljs-comment">/* 设置图片的大小，使其适应像素块 */</span><br>  <span class="hljs-attribute">background-position</span>: center; <span class="hljs-comment">/* 图片居中对齐 */</span><br>&#125;<br><br><span class="hljs-comment">/* .food &#123;</span><br><span class="hljs-comment">  background-color: rgb(182, 111, 139);</span><br><span class="hljs-comment">  border: 0.25vmin solid gray;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-selector-class">.food</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;th.jpg&#x27;</span>); <span class="hljs-comment">/* 替换为你的蛇头图片路径 */</span><br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">4.76vmin</span> <span class="hljs-number">4.76vmin</span>; <span class="hljs-comment">/* 设置图片的大小，使其适应像素块 */</span><br>&#125;<br><br><span class="hljs-selector-id">#game-start</span>, <span class="hljs-selector-id">#game-over</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>); <span class="hljs-comment">/* 添加半透明背景 */</span><br>  <span class="hljs-attribute">color</span>: white; <span class="hljs-comment">/* 文字颜色 */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000</span>; <span class="hljs-comment">/* 确保它们在其他内容上面 */</span><br>&#125;<br><br><span class="hljs-selector-id">#game-start</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-id">#game-over</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-comment">/* display: flex; */</span><br>&#125;<br><br><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="game-js"><a href="#game-js" class="headerlink" title="game.js"></a>game.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SNAKE_SPEED</span> = <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">const</span> gameBoard = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;game-board&#x27;</span>);<br><span class="hljs-keyword">const</span> gameStartOverlay = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;game-start&#x27;</span>);<br><span class="hljs-keyword">const</span> gameOverOverlay = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;game-over&#x27;</span>);<br><br><span class="hljs-keyword">let</span> isGameRunning = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">let</span> gameInterval;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">init</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;start-button&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, startGame);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;restart-button&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, restartGame);<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = init;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">main</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!isGameRunning) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-title function_">update</span>();<br>  <span class="hljs-title function_">draw</span>();<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkGameOver</span>()) &#123;<br>    <span class="hljs-title function_">gameOver</span>();<br>  &#125;<br>  <span class="hljs-comment">// TODO 4.3, 4.4: Add Game Over Alert, and clear interval!</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">startGame</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Starting game...&#x27;</span>);<br>  isGameRunning = <span class="hljs-literal">true</span>;<br>  gameStartOverlay.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏游戏开始界面</span><br>  gameOverOverlay.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏游戏结束界面</span><br>  gameBoard.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 清空游戏板</span><br>  <span class="hljs-title function_">resetGame</span>(); <span class="hljs-comment">// 重置游戏状态</span><br>  <span class="hljs-keyword">if</span> (gameInterval) <span class="hljs-built_in">clearInterval</span>(gameInterval); <span class="hljs-comment">// 清除之前的定时器</span><br>  gameInterval = <span class="hljs-built_in">setInterval</span>(main, <span class="hljs-number">1000</span> / <span class="hljs-variable constant_">SNAKE_SPEED</span>); <span class="hljs-comment">// 启动新的游戏循环</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">restartGame</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Restarting game...&#x27;</span>);<br>  isGameRunning = <span class="hljs-literal">true</span>;<br>  gameOverOverlay.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <span class="hljs-comment">// 隐藏游戏结束界面</span><br>  gameBoard.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 清空游戏板</span><br>  <span class="hljs-title function_">resetGame</span>(); <span class="hljs-comment">// 重置游戏状态</span><br>  <span class="hljs-keyword">if</span> (gameInterval) <span class="hljs-built_in">clearInterval</span>(gameInterval); <span class="hljs-comment">// 清除之前的定时器</span><br>  gameInterval = <span class="hljs-built_in">setInterval</span>(main, <span class="hljs-number">1000</span> / <span class="hljs-variable constant_">SNAKE_SPEED</span>); <span class="hljs-comment">// 启动新的游戏循环</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">gameOver</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Game Over&#x27;</span>); <br>  isGameRunning = <span class="hljs-literal">false</span>;<br>  <span class="hljs-built_in">clearInterval</span>(gameInterval); <span class="hljs-comment">// 停止游戏循环</span><br>  gameOverOverlay.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>; <span class="hljs-comment">// 显示游戏结束界面</span><br>&#125;;<br><span class="hljs-comment">// TODO 4.4: Define the interval ID</span><br><span class="hljs-comment">// HINT: ONLY EDIT THE LINE BELOW!</span><br><span class="hljs-comment">//setInterval(main, 1000 / SNAKE_SPEED);</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">update</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Updating&#x27;</span>);<br>  <span class="hljs-title function_">updateSnake</span>();<br>  <span class="hljs-title function_">updateFood</span>();<br>  <span class="hljs-comment">// TODO 4.2: Update Game State</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">draw</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  gameBoard.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-title function_">drawSnake</span>(gameBoard);<br>  <span class="hljs-title function_">drawFood</span>(gameBoard);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">checkGameOver</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">snakeOutOfBounds</span>() || <span class="hljs-title function_">snakeIntersectSelf</span>(); <span class="hljs-comment">// 检查游戏结束条件</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resetGame</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 重置蛇的位置</span><br>  snakeBody = [<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">11</span> &#125;,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">10</span> &#125;,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">9</span> &#125;<br>  ];<br>  <br>  <span class="hljs-comment">// 重置食物的位置</span><br>  food = <span class="hljs-title function_">getNewFoodPosition</span>();<br>  <br>  <span class="hljs-comment">// 可以添加其他初始化逻辑</span><br>&#125;;<br><br><br><span class="hljs-comment">// TODO 4.1: Create a function that checks if the game is over</span><br><br></code></pre></td></tr></table></figure><h4 id="food-js"><a href="#food-js" class="headerlink" title="food.js"></a>food.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> food = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">16</span> &#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateFood</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">onSnake</span>(food)) &#123;<br>    <span class="hljs-title function_">growSnake</span>();<br>    food = <span class="hljs-title function_">getNewFoodPosition</span>();<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// Don&#x27;t change me!</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">drawFood</span> = (<span class="hljs-params">gameBoard</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> foodElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>  foodElement.<span class="hljs-property">style</span>.<span class="hljs-property">gridRowStart</span> = food.<span class="hljs-property">y</span>;<br>  foodElement.<span class="hljs-property">style</span>.<span class="hljs-property">gridColumnStart</span> = food.<span class="hljs-property">x</span>;<br>  foodElement.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;food&#x27;</span>);<br>  gameBoard.<span class="hljs-title function_">appendChild</span>(foodElement);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="snake-js"><a href="#snake-js" class="headerlink" title="snake.js"></a>snake.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> snakeBody = [<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">11</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">10</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">9</span> &#125;,<br>];<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateSnake</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// Remove tail segment</span><br>  snakeBody.<span class="hljs-title function_">pop</span>();<br><br>  <span class="hljs-comment">// Add new head segment</span><br>  <span class="hljs-keyword">const</span> newHead = &#123; ...snakeBody[<span class="hljs-number">0</span>] &#125;;<br>  <span class="hljs-keyword">const</span> snakeDirection = <span class="hljs-title function_">getInputDirection</span>();<br><br>  newHead.<span class="hljs-property">x</span> += snakeDirection.<span class="hljs-property">x</span>;<br>  newHead.<span class="hljs-property">y</span> += snakeDirection.<span class="hljs-property">y</span>;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">outOfBounds</span>(newHead)) &#123;<br>    <span class="hljs-title function_">gameOver</span>(); <span class="hljs-comment">// 处理游戏结束逻辑</span><br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  snakeBody.<span class="hljs-title function_">unshift</span>(newHead);<br>&#125;;<br><br><span class="hljs-comment">// Don&#x27;t change this function!</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">drawSnake</span> = (<span class="hljs-params">gameBoard</span>) =&gt; &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; snakeBody.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> segment = snakeBody[i];<br>    <span class="hljs-keyword">const</span> snakeElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    snakeElement.<span class="hljs-property">style</span>.<span class="hljs-property">gridRowStart</span> = segment.<span class="hljs-property">y</span>;<br>    snakeElement.<span class="hljs-property">style</span>.<span class="hljs-property">gridColumnStart</span> = segment.<span class="hljs-property">x</span>;<br>    <span class="hljs-comment">// if (i === 0) &#123;</span><br>    <span class="hljs-comment">//   snakeElement.classList.add(&#x27;snake-head&#x27;);</span><br>    <span class="hljs-comment">// &#125; else &#123;</span><br>    <span class="hljs-comment">//   snakeElement.classList.add(&#x27;snake&#x27;);</span><br>    <span class="hljs-comment">// &#125;</span><br>    snakeElement.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;snake&#x27;</span>);<br>    gameBoard.<span class="hljs-title function_">appendChild</span>(snakeElement);<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="snakeUtils-js"><a href="#snakeUtils-js" class="headerlink" title="snakeUtils.js"></a>snakeUtils.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GRID_SIZE</span> = <span class="hljs-number">21</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSnake</span> = (<span class="hljs-params">position</span>) =&gt; &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; snakeBody.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">equalPositions</span>(position, snakeBody[i])) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br><br><span class="hljs-comment">// const gameOver = () =&gt; &#123;</span><br><span class="hljs-comment">//   console.log(&#x27;Game Over&#x27;);</span><br><span class="hljs-comment">//   // 清空游戏板</span><br><span class="hljs-comment">//   gameBoard.innerHTML = &#x27;&#x27;;</span><br><span class="hljs-comment">// &#125;;</span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">equalPositions</span> = (<span class="hljs-params">pos1, pos2</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> pos1.<span class="hljs-property">x</span> === pos2.<span class="hljs-property">x</span> &amp;&amp; pos1.<span class="hljs-property">y</span> === pos2.<span class="hljs-property">y</span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">growSnake</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  snakeBody.<span class="hljs-title function_">push</span>(&#123; ...snakeBody[snakeBody.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getNewFoodPosition</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> randomFoodPosition = <span class="hljs-title function_">randomGridPosition</span>();<br>  <span class="hljs-keyword">while</span> (<span class="hljs-title function_">onSnake</span>(randomFoodPosition)) &#123;<br>    randomFoodPosition = <span class="hljs-title function_">randomGridPosition</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> randomFoodPosition;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">randomGridPosition</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable constant_">GRID_SIZE</span>) + <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable constant_">GRID_SIZE</span>) + <span class="hljs-number">1</span>,<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">outOfBounds</span> = (<span class="hljs-params">position</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> position.<span class="hljs-property">x</span> &lt; <span class="hljs-number">1</span> || position.<span class="hljs-property">x</span> &gt; <span class="hljs-variable constant_">GRID_SIZE</span> || position.<span class="hljs-property">y</span> &lt; <span class="hljs-number">1</span> || position.<span class="hljs-property">y</span> &gt; <span class="hljs-variable constant_">GRID_SIZE</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">snakeOutOfBounds</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">outOfBounds</span>(snakeBody[<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">snakeIntersectSelf</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; snakeBody.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">equalPositions</span>(snakeBody[<span class="hljs-number">0</span>], snakeBody[i])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="input-js"><a href="#input-js" class="headerlink" title="input.js"></a>input.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> inputDirection = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowUp&#x27;</span> &amp;&amp; inputDirection.<span class="hljs-property">x</span> !== <span class="hljs-number">0</span>) &#123;<br>    inputDirection = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: -<span class="hljs-number">1</span> &#125;;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowDown&#x27;</span> &amp;&amp; inputDirection.<span class="hljs-property">x</span> !== <span class="hljs-number">0</span>) &#123;<br>    inputDirection = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">1</span> &#125;;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowRight&#x27;</span> &amp;&amp; inputDirection.<span class="hljs-property">y</span> !== <span class="hljs-number">0</span>) &#123;<br>    inputDirection = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowLeft&#x27;</span> &amp;&amp; inputDirection.<span class="hljs-property">y</span> !== <span class="hljs-number">0</span>) &#123;<br>    inputDirection = &#123; <span class="hljs-attr">x</span>: -<span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;;<br>  &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getInputDirection</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> inputDirection;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web开发课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发课程3--HTML and CSS</title>
    <link href="/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B3--HTML-and-CSS/"/>
    <url>/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B3--HTML-and-CSS/</url>
    
    <content type="html"><![CDATA[<p>本次课程学习HTML和CSS</p><span id="more"></span><h3 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h3><p>1、</p><p>Hypertext markup language（超文本标记语言）</p><p>是网络浏览器用来描述网页内容和结构的语言，是网页的骨架和核心结构，也可以把它看作嵌套的盒子。</p><p>div就像一个空白的画布..</p><p>but..accessibility, not descriptive. It’s ambiguous（模糊的）, hard to organize, hard to target（定位）, bad style, too cluttered（乱）, it’s more work.</p><p>利用<strong>MDN</strong>网站学习！更新速度很快…</p><h3 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">color</span>: red;<br>   <span class="hljs-attribute">font-family</span>: Arial;<br>   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24pt</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ID  vs  Class</p><p>Only one   VS    Multiple</p><p>建议只使用类</p><p>utility classes 实用类：只使用一个CSS属性修改</p><p>fonts.google.com  字体网页</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/976789a0-8f9b-11eb-85f6-6fac77c0c9b3.png" alt="面试官：说说你对盒子模型的理解? | web前端面试- 面试官系列" style="zoom: 50%;" /><p>定义空间元素的方式</p><p>weblab.to&#x2F;flex</p>]]></content>
    
    
    <categories>
      
      <category>web开发课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发课程2--Command line and Git</title>
    <link href="/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B2--Command-line-and-Git/"/>
    <url>/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B2--Command-line-and-Git/</url>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240804145935038.png" alt="image-20240804145935038" style="zoom:80%;" /><p>go over Command line  and use command lines to run some Git commands and learn about Git as well.</p><span id="more"></span><h3 id="一、命令行语句"><a href="#一、命令行语句" class="headerlink" title="一、命令行语句"></a>一、命令行语句</h3><p>pwd：print working directory（当前工作目录）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240804150539650.png" alt="image-20240804150539650" style="zoom: 67%;" /></p><p>rm file name：remove</p><p>touch f n：creat </p><p>mkdir folder name:creat a folder</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240804151036413.png" alt="image-20240804151036413" style="zoom: 67%;" /><h3 id="二、Git——A-version-control-system"><a href="#二、Git——A-version-control-system" class="headerlink" title="二、Git——A version-control system"></a>二、Git——A version-control system</h3><h4 id="（1）problems-with-coding-in-projects"><a href="#（1）problems-with-coding-in-projects" class="headerlink" title="（1）problems with coding in projects"></a>（1）problems with coding in projects</h4><ol><li>Synchronization（同步） of files (no one knows which file is the most up-to-date)</li><li>Collaboration（合作） of files (if there are two version of the same file, both of them fix a different problem, it’s hard to know how to join the files)</li><li>Version history (if we break something, we can’t go back to a working copy)</li></ol><h4 id="（2）what-does-git-do？-基本原理"><a href="#（2）what-does-git-do？-基本原理" class="headerlink" title="（2）what does git do？(基本原理)"></a>（2）what does git do？(基本原理)</h4><p>track changes  by doing math(computing the <strong>difference</strong> every time you make changes)</p><h4 id="（3）some-terminology（基本术语）"><a href="#（3）some-terminology（基本术语）" class="headerlink" title="（3）some terminology（基本术语）"></a>（3）some terminology（基本术语）</h4><p>1.<strong>Repository</strong>—— a set of files to track changes on(git仓库)</p><p>2.<strong>Commit</strong>——a set of  changes in a repository transitioning from one version to the next</p><p>3.<strong>Log</strong>——the set of commits for each version of the repository</p><ul><li>commit (n.)- a packaged set of changes</li><li>push (v.)- to send commits to the git server</li><li>pull (V.)- to get most updated files from the git server</li></ul><p>           </p><h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><p>git init</p><p>git status</p><p>git remote add origin <code>https://github.com/Yaodeer/catbook-react</code>(连接远程仓库)</p><p>git push </p><p>一些命令行语句：</p><p><a href="https://training.github.com/downloads/github-git-cheat-sheet/">GitHub Git Cheat Sheet - GitHub Cheatsheets</a></p><p>git clone了工程到电脑上并连接到了我自己的仓库，默认分支main：</p><p><code>git clone https://github.com/weblab-workshops/catbook-react.git</code></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>web开发课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发课程1--kick off</title>
    <link href="/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B1--kick-off/"/>
    <url>/2024/08/04/web%E5%BC%80%E5%8F%91%E8%AF%BE%E7%A8%8B1--kick-off/</url>
    
    <content type="html"><![CDATA[<p>准备花时间跟学一下MIT的web开发课程，希望可以坚持下去。本篇主要是着手学习之前需要了解的内容。</p><span id="more"></span><p>作业链接：<a href="https://gaudy-basketball-f66.notion.site/web-lab-Students-Page-2f46514f5dd441acbde22a3ae36d60ff">web.lab Students Page! (notion.site)</a></p><h3 id="一、课程安排"><a href="#一、课程安排" class="headerlink" title="一、课程安排"></a>一、课程安排</h3><p>week1——build an app from scratch together</p><p>week2——advanced topics</p><p>week3——code code code</p><p>week4——CODE CODE CODE</p><h3 id="二、简述"><a href="#二、简述" class="headerlink" title="二、简述"></a>二、简述</h3><p>HTML——build the structure of your website that contains all the components(组件) that we see and all the information、all the text images things like that.</p><p>CSS（Cascading Style Sheets层叠样式表）——basically tells the website how to look,how to make it look good</p><p>JavaScript——provides any sort of motion or information of fetching,so it can make your website more interactive and functional(功能性的)</p><p>Assets（资源）——like images,videos</p><h3 id="三、要求"><a href="#三、要求" class="headerlink" title="三、要求"></a>三、要求</h3><p>1、Functionally</p><p>2、Usability</p><p>3、Aesthetics</p><p>4、Concept Exection</p>]]></content>
    
    
    <categories>
      
      <category>web开发课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot学习记录</title>
    <link href="/2024/07/31/springboot%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/07/31/springboot%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>.<span id="more"></span></p><h3 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>1）搜索springboot.io查找使用手册（全英的我很难看懂……）</p><p>2）springboot提供了一种快速开发spring项目的方式（自动配置、起步依赖（Maven））</p><p>3）springboot项目构建时采用jar的打包方式</p><p>4）start.spring.io   在官网配置spring boot项目</p><p>5）sout——system.out.println</p><h4 id="2、实现基本案例"><a href="#2、实现基本案例" class="headerlink" title="2、实现基本案例"></a>2、实现基本案例</h4><p>搭建springboot工程，定义HelloController.hello()方法，返回指定内容。</p><p>1）创建Maven项目</p><p>2）导入SpringBoot起步依赖（创建项目时勾选SpringWeb和Thymeleaf依赖）</p><p>3）定义Controller</p><p>4）编写引导类（现在版本自动生成，是Springboot项目的入口）</p><p>5）启动测试</p><h4 id="3、起步依赖原理"><a href="#3、起步依赖原理" class="headerlink" title="3、起步依赖原理"></a>3、起步依赖原理</h4><p>1）在spring-boot-starter-parent中定义了各种技术的版本信息，组合了一套最优搭配的技术版本。</p><p>2）在各种starter中，定义了完成该功能需要的坐标合集，其中大部分版本信息来自于父工程。</p><p>3）我们的忠诚继承parent，引入starter后，通过依赖传递，就可以简单方便获得需要的jar包，并且不会存在版本冲突等问题。</p><h3 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h3><p>spring boot是基于约定的，所以很多配置都有默认值，如果想用自己的配置替换默认值，就可以用application.properties或者application.yml（&#x2F;yaml）进行配置。</p><h4 id="1、两种配置文件"><a href="#1、两种配置文件" class="headerlink" title="1、两种配置文件"></a>1、两种配置文件</h4><p>properties：   server.port&#x3D;8085（键&#x3D;值）</p><p>yml&#x2F;yaml:          server:                           （换行缩进）</p><p>​                      port: 8080</p><p>在同一级目录下的优先级：properties&gt;yml&gt;yaml</p><h4 id="2、YAML文件是以数据为核心的，比xml更加简洁，相对于properties来说更容易看出配置属于哪个层级。"><a href="#2、YAML文件是以数据为核心的，比xml更加简洁，相对于properties来说更容易看出配置属于哪个层级。" class="headerlink" title="2、YAML文件是以数据为核心的，比xml更加简洁，相对于properties来说更容易看出配置属于哪个层级。"></a>2、<strong>YAML</strong>文件是以数据为核心的，比xml更加简洁，相对于properties来说更容易看出配置属于哪个层级。</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801145449469.png" alt="image-20240801145449469" style="zoom:67%;" /><p>   1）大小写敏感、2）数值前必须有空格作为分隔符、3）缩进代表层级关系，不能使用Tab，只能使用空格，空格数不重要，只需要相同层级的元素左侧对齐即可。4）#表注释</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801150220414.png" alt="image-20240801150220414" style="zoom:67%;" /><p>参数引用： ${key}</p><h4 id="3、配置文件读取"><a href="#3、配置文件读取" class="headerlink" title="3、配置文件读取"></a>3、配置文件读取</h4><p><em>三种方法</em></p><p>​@value</p><p>​Environment</p><p>​@ConfigurationProperties:是我们配置文件的内容和对象做映射</p><h5 id="（1）读取实例方法一（-value）"><a href="#（1）读取实例方法一（-value）" class="headerlink" title="（1）读取实例方法一（@value）"></a>（1）读取实例方法一（@value）</h5><p>如果想要在&#x2F;hello路径输出一个字符串，controller文件可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demoa;<br><br>#<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span>      <span class="hljs-comment">//RESTful控制器，返回JSON数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>   <br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring Boot!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想要读取配置文件，可以将文件修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demoa;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span>      <span class="hljs-comment">//RESTful控制器，返回JSON数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>   <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span> <br>   <span class="hljs-keyword">private</span> String name;   <span class="hljs-comment">//读取name的赋给字符串name</span><br>   <span class="hljs-meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span>    <br>   <span class="hljs-keyword">private</span> String name1;<br>   <span class="hljs-meta">@Value(&quot;$&#123;address[1]&#125;&quot;)</span>   <span class="hljs-comment">//读取数组的第一个值</span><br>   <span class="hljs-keyword">private</span> String name2;<br>   <span class="hljs-meta">@RequestMapping(&quot;/hello2&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(name);     <span class="hljs-comment">//输出name的值，在控制台可以看到输出</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring Boot!&quot;</span>;<br>   &#125;<br>   <br>   <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring Boot!&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-08-01%20161321.png"  /><h5 id="（2）读取配置方法二（Environment）"><a href="#（2）读取配置方法二（Environment）" class="headerlink" title="（2）读取配置方法二（Environment）"></a>（2）读取配置方法二（Environment）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Enviroment env;  <span class="hljs-comment">//注入env对象，不要弄错包</span><br><br><span class="hljs-comment">//以下内容是写在函数体内</span><br>System.out.println(env.getProperty(<span class="hljs-string">&quot;person.name&quot;</span>));<br><br></code></pre></td></tr></table></figure><h5 id="（3）读取配置文件方法三（-ConfigurationProperties）"><a href="#（3）读取配置文件方法三（-ConfigurationProperties）" class="headerlink" title="（3）读取配置文件方法三（@ConfigurationProperties）"></a>（3）读取配置文件方法三（@ConfigurationProperties）</h5><p>注：yml文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8085</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">abc</span><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Yaoyao</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">21</span><br><span class="hljs-attr">address:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">beijing</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">shanghai</span><br></code></pre></td></tr></table></figure><p>1、第一步，新建一个person类，添加属性与yml对应。右键生成getter 和 setter，然后添加注解：@Component（让它被识别）和@ConfigurationProperties。此时如果生成一个Person对象叫person，再输出它的值，则输出的name值是abc，age读取不了因此输出默认值0.因此。导入@ConfigurationProperties时，要用这样的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;person&quot;)</span><br></code></pre></td></tr></table></figure><p>2、controller文件中注入一个Person对象，用@Autowired注解来注入。并打印。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">@Autowired</span><br><span class="hljs-keyword">private</span> Person person;<br><br>System.<span class="hljs-keyword">out</span>.println(person);<br></code></pre></td></tr></table></figure><p>我们会发现打印出来的结果是org.example.demo.Person@347d42b6，这是因为默认情况下会打印出对象的类名和对象的哈希码。如果想要打印出对象的具体属性值，则需要在Person类中重写toString（）方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;, age=&quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时打印出来的结果就变成了Person{name&#x3D;’Yaoyao’, age&#x3D;21}</p><p>3、读取数组</p><p>1）将address数组复制到person下，在Person里加入字符串数组private String[] address</p><p>并在Person里加入getter 和 setter，不需重写toString。</p><p>2）controller文件中输入person.getaddress，alt+enter键快捷生成常量。接着打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] address = person.getAddress();<br>    <span class="hljs-keyword">for</span>(String s : address)&#123;<br>        System.out.println(s);<br>    &#125;<br></code></pre></td></tr></table></figure><p>控制台会打印出beijing和shanghai。</p><h4 id="4、profile"><a href="#4、profile" class="headerlink" title="4、profile"></a>4、profile</h4><p>我们在开发spring boot应用时，通常同一套程序会被安装到不同的环境，比如开发、测试、生产等。其中数据库地址、服务器端口等配置都不同，如果每次打包时都要修改配置文件则非常麻烦，profile就是用来进行动态配置切换的。</p><h5 id="（1）profile配置——多profile文件方式"><a href="#（1）profile配置——多profile文件方式" class="headerlink" title="（1）profile配置——多profile文件方式"></a>（1）profile配置——多profile文件方式</h5><p>创建多个properties文件，分别命名为application-dev.properties（开发）、application-test.properties（测试）、application-pro.properties（生产）。如果分别在里面设置了端口号，这时候直接运行，会显示Tomcat仍旧运行在默认端口8080，因为没有配置文件被激活。如果想要激活某一个配置文件，可以在主配置文件中加入<strong>spring.profiles.active&#x3D;dev</strong>；这时就激活了application-dev.properties</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801175409410.png" alt="image-20240801175409410"></p><h5 id="（2）profile配置——yml多文档方式（更加简洁）"><a href="#（2）profile配置——yml多文档方式（更加简洁）" class="headerlink" title="（2）profile配置——yml多文档方式（更加简洁）"></a>（2）profile配置——yml多文档方式（更加简洁）</h5><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801214745825.png" alt="image-20240801214745825" style="zoom:67%;" /><p>（需要把刚刚的那些配置注释掉）(记得空格，不要把server写成sever。。服了，找半天错误)</p><h5 id="（3）不依赖idea修改配置和激活工程"><a href="#（3）不依赖idea修改配置和激活工程" class="headerlink" title="（3）不依赖idea修改配置和激活工程"></a>（3）不依赖idea修改配置和激活工程</h5><p>右边找到package选项将工程打包成jar文件</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240801181439994.png" alt="image-20240801181439994" style="zoom: 67%;" /><p>找到文件位置打开终端，java -jar .\demo1-0.0.1-SNAPSHOT.jar运行。</p><p>如果想要在这里配置参数，java -jar .\demo1-0.0.1-SNAPSHOT.jar –spring.profiles.active&#x3D;test</p><h4 id="5、内外部配置文件加载顺序"><a href="#5、内外部配置文件加载顺序" class="headerlink" title="5、内外部配置文件加载顺序"></a>5、内外部配置文件加载顺序</h4><p>1）内部</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240803140132561.png" alt="image-20240803140132561" style="zoom:50%;" /><p>其中我们用的在resources目录下的properties配置文件属于第四种</p><p>2）外部</p><p>可以通过命令行的方式来修改配置。</p><p>方法一：在运行jar包语句后面加上 –server.port&#x3D;8053这样类似的配置语句</p><p>方法二：在运行jar包语句后面加上 –spring.config.location&#x3D;&#x2F;放置的外部配置文件的路径</p>]]></content>
    
    
    <categories>
      
      <category>xxx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-spring boot -java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过idea基于maven新建spring boot项目并运行（2024版本）</title>
    <link href="/2024/07/01/%E9%80%9A%E8%BF%87idea%E5%9F%BA%E4%BA%8Emaven%E6%96%B0%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%90%E8%A1%8C%EF%BC%882024%E7%89%88%E6%9C%AC%EF%BC%89/"/>
    <url>/2024/07/01/%E9%80%9A%E8%BF%87idea%E5%9F%BA%E4%BA%8Emaven%E6%96%B0%E5%BB%BAspring-boot%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%90%E8%A1%8C%EF%BC%882024%E7%89%88%E6%9C%AC%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>此博客记录如何成功运行一个spring boot项目并用APIFOX进行测试。</p><span id="more"></span><p>运行项目运行了很久都是不报错但是加载不出界面的情况，一开始以为是版本不匹配的原因，后来发现其实不是！（现在安装了JDK22、17、11三个版本……已老实）目前IDEA版本是最新版2024.1.4，JDK是22版本，maven也是最新版。</p><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="1、首先需要配置JDK、maven两个软件"><a href="#1、首先需要配置JDK、maven两个软件" class="headerlink" title="1、首先需要配置JDK、maven两个软件"></a>1、首先需要配置JDK、maven两个软件</h4><h5 id="（1）下载软件"><a href="#（1）下载软件" class="headerlink" title="（1）下载软件"></a>（1）下载软件</h5><p>JDK：<a href="https://www.oracle.com/java/technologies/downloads/#jdk22-windows">https://www.oracle.com/java/technologies/downloads/#jdk22-windows</a></p><p>我一般会下载最新版（但是老版兼容性会更好一些）</p><p>maven：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a>  下滑找到如图所示版本下载</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701104309249.png" alt="image-20240701104309249"></p><h5 id="（2）配置环境变量"><a href="#（2）配置环境变量" class="headerlink" title="（2）配置环境变量"></a>（2）配置环境变量</h5><p>在系统变量下添加如下所示两个环境变量，变量值是文件的地址（按照自己的文件地址添加）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-01%20110538.png" alt="屏幕截图 2024-07-01 110538"></p><p>在系统变量中找到Path变量，点击编辑，在后面添加如下所示两条</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701110456636.png" alt="image-20240701110456636"></p><p>cmd打开终端，输入如下命令，出现如图所示的信息，显示了maven和JDK版本，说明配置成功。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">mvn -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701110615522.png" alt="image-20240701110615522"></p><h4 id="2、-下载IntelliJ-IDEA"><a href="#2、-下载IntelliJ-IDEA" class="headerlink" title="2、  下载IntelliJ IDEA"></a>2、  下载IntelliJ IDEA</h4><p>仍旧是去官网下载：<a href="https://www.jetbrains.com.cn/idea/download/?section=windows">下载 IntelliJ IDEA – 领先的 Java 和 Kotlin IDE (jetbrains.com.cn)</a></p><p>但是我们会发现这是收费的，于是只能去下载破解版。此处贴上我当时参考的链接：</p><p><a href="https://www.quanxiaoha.com/idea-pojie/idea-pojie-20241.html">IDEA 2024.1 最新激活码，破解版安装教程（亲测有效~） - 犬小哈教程 (quanxiaoha.com)</a></p><h3 id="二、开始创建项目"><a href="#二、开始创建项目" class="headerlink" title="二、开始创建项目"></a>二、开始创建项目</h3><p>我运行出来的结果是这样的：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701144938865.png" alt="image-20240701144938865" style="zoom: 67%;" /><p>虽然很简单但是搞了一下午加一晚上……不知道为什么跟着教程或者GPT都弄不出来，总是各种报错……后来GPT突然活了，我调整了一下文件结构然后就成功了！！</p><h4 id="1、安装插件（可选）"><a href="#1、安装插件（可选）" class="headerlink" title="1、安装插件（可选）"></a>1、安装插件（可选）</h4><p>很多插件都是内置的，我只迷迷糊糊安装了一个wl spring assistant，也不知道有什么用。不过首先要安装的还是汉化包。按照我搜到的教程，应该是要安装Spring Initializr这个插件的，但是它需要Spring  boot helper这个插件才能正常工作。但是Spring  boot helper也需要购买，免费的老版本也需要老版本的idea才行。（在我激情卸载新版本下载老版本后，我发现老版本的破解帖子大多都失效了……）</p><h4 id="2、新建项目"><a href="#2、新建项目" class="headerlink" title="2、新建项目"></a>2、新建项目</h4><p>（1）如图，由于我没有下载Spring Initializr这个插件，所以我只能选择Spring Boot这个选项，和网上的教程都不一样（所以我才急切想下载过去的版本，但是失败了anyway）。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701145920537.png" alt="image-20240701145920537" style="zoom: 50%;" /><p>但是当我最终放弃下载老版本，又灰溜溜把新版本装好后，把鼠标放在Spring Boot这个选项上面时，它显示了这样一句话。。。。（所以其实是一样的，好像没有什么不同！）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701150249468.png" style="zoom: 80%;" /><p>（2）右边我选的就是这样，只改动了圈出的地方，最上面名称可以自己设置。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701150551021.png" alt="image-20240701150551021" style="zoom: 67%;" /><p>（3）选择依赖项</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701150654448.png" alt="image-20240701150654448"><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701150713132.png" alt="image-20240701150713132"></p><p>由于这个项目比较简单所以就选择了这两个，暂时不需要数据库的依赖项。</p><p>然后项目就创建好了！</p><h3 id="三、配置项目"><a href="#三、配置项目" class="headerlink" title="三、配置项目"></a>三、配置项目</h3><p>进入项目后，把重要文件夹展开后是这样（刚新建项目没有target文件夹）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701152318300.png" alt="image-20240701152318300" style="zoom:67%;" /><p>其实我不是很明白为什么会出现test文件夹（不管项目怎么命名都会出现，但是最开始是没有的……不知道是不是我按了什么不该按的）下面这两个文件是可以运行的。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701152517651.png" alt="image-20240701152517651"><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701152534710.png" alt="image-20240701152534710"></p><p>第一步：需要添加两个文件。右键下面任意一个软件包，选择添加一个java类，我命名为了helloController</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701152723798.png" alt="image-20240701152723798" style="zoom:67%;" /><p>在这个文件中添加如下代码（请看注释要点！不然会报错）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.test; <span class="hljs-comment">//注意test这个单词是要改成你的项目名字的</span><br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;  <span class="hljs-comment">//不用改</span><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;  <span class="hljs-comment">//不用改</span><br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">helloController</span> &#123;  <span class="hljs-comment">//这个类名要和刚刚创建的java类名一致</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>; <span class="hljs-comment">// 返回模板文件的名称，不需要扩展名</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后右键这个文件夹选择新建一个html文件，命名为index</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701153234536.png" alt="image-20240701153234536"></p><p>在文件中添加如下代码（body内添加内容，&lt; br&#x2F; &gt;是换行符）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>##################<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>  <br>############<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步就可以点击运行了。但是此时可能会报错，如你的报错原因是如下图，那么应该是跟我一样，因为默认端口号8080已经被占用了。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701153703817.png" alt="image-20240701153703817"></p><p>解决方法也很简单，就是换个端口号，点开下面的文件，在其最上方添加一行代码server.port&#x3D;8016（可以自己改端口号）（当然也可以选择在管理员终端终止8080端口运行，但是还是改个端口更简单）</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701153818223.png" alt="image-20240701153818223" style="zoom:80%;" /><p>然后应该就能运行成功了！这时我们在电脑上访问localhost:8016（端口号），就可以看见我们在html中写的内容了。</p><h3 id="四、API测试"><a href="#四、API测试" class="headerlink" title="四、API测试"></a>四、API测试</h3><h4 id="1、在官网下载APIFox"><a href="#1、在官网下载APIFox" class="headerlink" title="1、在官网下载APIFox"></a>1、在官网下载APIFox</h4><p><a href="https://apifox.com/">https://apifox.com/</a></p><h4 id="2、创建一个新的项目"><a href="#2、创建一个新的项目" class="headerlink" title="2、创建一个新的项目"></a>2、创建一个新的项目</h4><p>项目类型选择html</p><h4 id="3、添加一个新的接口"><a href="#3、添加一个新的接口" class="headerlink" title="3、添加一个新的接口"></a>3、添加一个新的接口</h4><p>配置请求：</p><ul><li>请求方法：GET</li><li>请求 URL：&#96;<a href="http://localhost:8016‘">http://localhost:8016‘</a></li><li>添加查询参数：name（可选）</li><li>返回相应的内容格式选html</li></ul><h4 id="4、点击发送按钮查看响应"><a href="#4、点击发送按钮查看响应" class="headerlink" title="4、点击发送按钮查看响应"></a>4、点击发送按钮查看响应</h4><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701163121572.png" alt="image-20240701163121572"></p><h3 id="五、一些问题记录"><a href="#五、一些问题记录" class="headerlink" title="五、一些问题记录"></a>五、一些问题记录</h3><h4 id="1、依赖项thymeleaf的作用"><a href="#1、依赖项thymeleaf的作用" class="headerlink" title="1、依赖项thymeleaf的作用"></a>1、依赖项thymeleaf的作用</h4><p>将 Thymeleaf 集成到 Spring Boot 应用中，使得你可以使用 Thymeleaf 作为模板引擎来渲染 HTML 页面。</p><p>如果一开始新建项目时没有添加这个依赖项，也可以打开pom.xml文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、Controller文件的作用"><a href="#2、Controller文件的作用" class="headerlink" title="2、Controller文件的作用"></a>2、Controller文件的作用</h4><p>控制器（Controller）是用于处理 HTTP 请求的核心组件。控制器的主要职责是接收用户的输入，并根据该输入返回相应的响应。控制器通常与视图模板或 RESTful API 结合使用。</p><p>上面的helloController文件按理来说应该命名为HomeController，表示端口号域名不加任何后续路径，处理根路径’ &#x2F; ‘并返回index.html模板。</p><p>然后我们还可以新建一个HelloController文件，用于处理 ’ hello ‘ 路径并返回一个简单的字符串响应。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.demoa;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span>      <span class="hljs-comment">//RESTful控制器，返回JSON数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span>  <span class="hljs-comment">//括号里是路径</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;Hello, %s!&quot;</span>, name);  <span class="hljs-comment">//返回Hello World！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>xxx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
      <tag>IntelliJ IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置服务器记录</title>
    <link href="/2024/06/29/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/06/29/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>在阿里云平台免费领取了七个月服务器使用权，在这里记录一下配置经过。</p><span id="more"></span><h3 id="一、服务器"><a href="#一、服务器" class="headerlink" title="一、服务器"></a>一、服务器</h3><h4 id="1、云服务器的使用流程"><a href="#1、云服务器的使用流程" class="headerlink" title="1、云服务器的使用流程"></a>1、云服务器的使用流程</h4><p>（1）<strong>获取</strong>云服务器ECS——登录<a href="http://www.aliyun.com,购买或免费领用云服务器ecs/">www.aliyun.com，购买或免费领用云服务器ECS</a></p><p>（2）<strong>登录</strong>云服务器ECS——远程登录ECS实例配置主机环境</p><p>（3）<strong>管理</strong>云服务器ECS——在云服务器上搭建个人网站，管理并维护网站</p><p>（4）<strong>释放</strong>云服务器ECS——不需要ECS实例时释放资源，节省费用</p><h4 id="2、登录云服务器-windows系统"><a href="#2、登录云服务器-windows系统" class="headerlink" title="2、登录云服务器(windows系统)"></a>2、登录云服务器(windows系统)</h4><p>（1）点击远程管理之后点击立即登录，进入以下界面，第一次登陆的时候需要设置密码，需要记住这个密码。确定后就登陆上了这个服务器；</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701100745300.png" alt="image-20240701100745300" style="zoom: 50%;" /><p>（2）我一般在电脑终端进行登录，cmd打开终端，输入以下语句登录；</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">root@</span>公网IP<br></code></pre></td></tr></table></figure><p>出现以下界面，说明登陆成功，现在可以在服务器中进行配置了。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240701101436004.png" alt="image-20240701101436004" style="zoom:50%;" /><h3 id="二、配置MySQL"><a href="#二、配置MySQL" class="headerlink" title="二、配置MySQL"></a>二、配置MySQL</h3>]]></content>
    
    
    <categories>
      
      <category>xxx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>ECS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode刷题记录（不分类版）</title>
    <link href="/2024/05/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%8D%E5%88%86%E7%B1%BB%E7%89%88%EF%BC%89/"/>
    <url>/2024/05/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%8D%E5%88%86%E7%B1%BB%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>尽量保证每天至少做两题，保持手感。累计11题。</p><span id="more"></span><h3 id="2024-5-24"><a href="#2024-5-24" class="headerlink" title="2024&#x2F;5&#x2F;24"></a>2024&#x2F;5&#x2F;24</h3><h4 id="（1）接雨水"><a href="#（1）接雨水" class="headerlink" title="（1）接雨水"></a>（1）接雨水</h4><p><a href="https://leetcode.cn/problems/trapping-rain-water/description/">42. 接雨水 - 力扣（LeetCode）</a></p><p>记得第一次看到这题，两眼一黑就没管了。昨晚睡觉时突然想到，想了半天，今天写的时候也没写出来。总结错误原因是：1、想到了要记录左边最大值和右边最大值，但是记录的非常笨拙；2、记录的最大值不是真的最大值，而是每个凹陷两边的最大值。还是题感不够以及思路不够灵活。刚好这道题用到的很多方法是我不会的，遂记录。</p><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>（已超时）分别记录高度为1、2、3……等这一行能接多少雨水。需要遍历两层，记录当前列的左边和右边是否有值，若有则这一块可以接到雨水。时间复杂度O(n2);</p><h5 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h5><p>动态规划：1、用两个数组leftmax[]和rightmax[]分别记录某个位置左边高度的最大值和右边高度的最大值。两个最大值中小的那个减去它的高度就是这一列能接到的雨水量；2、如何得到两个数组的值？（动态规划）leftmax[0]&#x3D;h[0]，rightmax[n-1]&#x3D;h[n-1]。从左向右遍历，得到等式：left[ i ]&#x3D;max( left[ i-1],h[ i] ) , 从右向左遍历，得到right[i]&#x3D;max(right[ i+1],h[ i ])；</p><p>时间复杂度：O（n），空间复杂度：O（n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left[<span class="hljs-number">20004</span>],right[<span class="hljs-number">20004</span>];  <br><span class="hljs-type">int</span> cnt,tmp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; h)</span> </span>&#123;<br>   <span class="hljs-type">int</span> n=h.<span class="hljs-built_in">size</span>();<br>   left[<span class="hljs-number">0</span>]=h[<span class="hljs-number">0</span>],right[n<span class="hljs-number">-1</span>]=h[n<span class="hljs-number">-1</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>      left[i]=<span class="hljs-built_in">max</span>(left[i<span class="hljs-number">-1</span>],h[i]);<br>      right[n-i<span class="hljs-number">-1</span>]=<span class="hljs-built_in">max</span>(right[n-i],h[i]);<br>   &#125;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>      tmp=<span class="hljs-built_in">min</span>(left[i],right[i]);<br>      cnt+=tmp-h[i];<br>   &#125;<br>   <span class="hljs-keyword">return</span> cnt;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h5><p>单调栈：单调栈内存储的是下标。如果该下标高度小于栈顶，入栈；否则开始计算两个下标之间可以接的雨水量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> cnt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; h)</span> </span>&#123;<br>   stack&lt;<span class="hljs-type">int</span>&gt; r;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h,<span class="hljs-built_in">size</span>();i++)&#123;<br>      <span class="hljs-keyword">while</span>(!r.<span class="hljs-built_in">empty</span>()&amp;&amp;h[r.<span class="hljs-built_in">top</span>()]&lt;h[i])&#123;<br>         <span class="hljs-type">int</span> cur=t.<span class="hljs-built_in">top</span>();<br>         r.<span class="hljs-built_in">pop</span>();<br>         <span class="hljs-keyword">if</span>(r.<span class="hljs-built_in">empty</span>())<br>            <span class="hljs-keyword">break</span>;<br>         cnt+=(<span class="hljs-built_in">min</span>(h[r.<span class="hljs-built_in">top</span>()],h[i])-h[cur])*(i-r.<span class="hljs-built_in">top</span>()<span class="hljs-number">-1</span>);<br>      &#125;<br>      r.<span class="hljs-built_in">push</span>(i);<br>   &#125;<br>   <span class="hljs-keyword">return</span> cnt;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2024-5-28"><a href="#2024-5-28" class="headerlink" title="2024&#x2F;5&#x2F;28"></a>2024&#x2F;5&#x2F;28</h3><h4 id="（1）合并两个有序数组（字符串、数组）"><a href="#（1）合并两个有序数组（字符串、数组）" class="headerlink" title="（1）合并两个有序数组（字符串、数组）"></a>（1）合并两个有序数组（字符串、数组）</h4><p><a href="https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150">88. 合并两个有序数组 - 力扣（LeetCode）</a></p><h5 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h5><p>直接合并然后排序（时间复杂度O(m+n)log(m+n)）</p><h5 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h5><p>逆序双指针：m、n分别指向两个数组最后一个（不是0的）元素，然后每次作比较，将大的数字放在数组的最后一个位置，相应指针和位置前移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;<br> <span class="hljs-type">int</span> i=m+n<span class="hljs-number">-1</span>;<br>   <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">0</span>&amp;&amp;nums1[m<span class="hljs-number">-1</span>]&gt;nums2[n<span class="hljs-number">-1</span>])&#123;<br>         nums1[i--]=nums2[m<span class="hljs-number">-1</span>];<br>         m--;<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>nums1[i--]=nums2[n<span class="hljs-number">-1</span>];<br>         n--;         <br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2024-5-29"><a href="#2024-5-29" class="headerlink" title="2024&#x2F;5&#x2F;29"></a>2024&#x2F;5&#x2F;29</h3><h4 id="（1）长度最小的子数组（二分、前缀和、滑动窗口）"><a href="#（1）长度最小的子数组（二分、前缀和、滑动窗口）" class="headerlink" title="（1）长度最小的子数组（二分、前缀和、滑动窗口）"></a>（1）长度最小的子数组（二分、前缀和、滑动窗口）</h4><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/?envType=study-plan-v2&envId=top-interview-150">209. 长度最小的子数组 - 力扣（LeetCode）</a></p><h5 id="方法一：暴力法（超时）"><a href="#方法一：暴力法（超时）" class="headerlink" title="方法一：暴力法（超时）"></a>方法一：暴力法（超时）</h5><h5 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h5><p>前缀和+二分查找：在想到使用前缀和之后，需要使用二分查找找到想要的下标才能使时间复杂度下降。而在每个语言中都已经有内置的二分查找函数，找到大于或者等于某个数的第一个位置。c++：lower_bound。时间复杂度：nlog(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-type">int</span> ans=INT_MAX;   <span class="hljs-comment">//表示最大的整数，在后面的比较时有用</span><br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;   <span class="hljs-comment">//sum[i]存储的是nums[0]到nums[i-1]的和，因此要设置n+1的长度，sum[0]=0,sum[1]=nums[0]……</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>      sum[i]=sum[i<span class="hljs-number">-1</span>]+nums[i];   <span class="hljs-comment">//计算前缀和</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>      <span class="hljs-type">int</span> s=target+sum[i<span class="hljs-number">-1</span>];   <span class="hljs-comment">//将目标加上当前坐标的前缀和，方便查找（i-1为子串第一个坐标）</span><br>      <span class="hljs-keyword">auto</span> bound=<span class="hljs-built_in">lower_bound</span>(sum.<span class="hljs-built_in">begin</span>(),sum.<span class="hljs-built_in">end</span>(),s);  <span class="hljs-comment">//注意查找得到的是位置</span><br>      <span class="hljs-keyword">if</span>(bound!=sum.<span class="hljs-built_in">end</span>())<br>         ans=<span class="hljs-built_in">min</span>(ans,bound-sum.<span class="hljs-built_in">begin</span>()-(i<span class="hljs-number">-1</span>));  <br>   &#125;<br>   <span class="hljs-keyword">return</span> ans==INT_MAX?<span class="hljs-number">0</span>:ans;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法三：-1"><a href="#方法三：-1" class="headerlink" title="方法三："></a>方法三：</h5><p>滑动窗口：设置左右指针表示窗口的两边，保证窗口内元素之和满足要求时，左指针右移，不断保存左右指针相差最小的那个值。当窗口不符合要求时，右指针继续右移。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-type">int</span> target,vetor&lt;<span class="hljs-type">int</span>&gt; num)</span></span>&#123;<br>   <span class="hljs-type">int</span> n=num.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">if</span>(!n)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-type">int</span> ans=INT_MAX,l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span>(r&lt;n)&#123;<br>      sum+=num[r];<br>      <span class="hljs-keyword">while</span>(sum&gt;=target)&#123;<br>         ans=<span class="hljs-built_in">min</span>(ans,r-l+<span class="hljs-number">1</span>);<br>         sum-=num[l];<br>         l++;<br>      &#125;<br>      r++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ans==INT_MAX?<span class="hljs-number">0</span>:ans;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）搜索二维矩阵（二分法）"><a href="#（2）搜索二维矩阵（二分法）" class="headerlink" title="（2）搜索二维矩阵（二分法）"></a>（2）搜索二维矩阵（二分法）</h4><h5 id="方法一：两次二分查找"><a href="#方法一：两次二分查找" class="headerlink" title="方法一：两次二分查找"></a>方法一：两次二分查找</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">searchMatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; num, <span class="hljs-type">int</span> t)</span> </span>&#123;<br><span class="hljs-keyword">auto</span> row=<span class="hljs-built_in">upper_bound</span>(num.<span class="hljs-built_in">begin</span>(),num.<span class="hljs-built_in">end</span>(),t,[](<span class="hljs-type">const</span> <span class="hljs-type">int</span> b,<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;a)&#123;<span class="hljs-keyword">return</span> b&lt;a[<span class="hljs-number">0</span>];&#125;);  <span class="hljs-comment">//找到第一个元素大于给定元素的那一行</span><br>   <span class="hljs-keyword">if</span>(row==num.<span class="hljs-built_in">begin</span>())  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   --row;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">binary_search</span>(row-&gt;<span class="hljs-built_in">begin</span>(),row-&gt;<span class="hljs-built_in">end</span>(),t);<br>   <span class="hljs-comment">//二分查找函数，找到等于给定元素的下标，找不到就返回false</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：一次二分查找（假想成一维数组）"><a href="#方法二：一次二分查找（假想成一维数组）" class="headerlink" title="方法二：一次二分查找（假想成一维数组）"></a>方法二：一次二分查找（假想成一维数组）</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">searchMatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; num, <span class="hljs-type">int</span> t)</span> </span>&#123;<br>   <span class="hljs-type">int</span> m=num.<span class="hljs-built_in">size</span>(),n=num[<span class="hljs-number">0</span>].size;   <span class="hljs-comment">//得到行数(m)和列数(n)</span><br>   <span class="hljs-type">int</span> low=<span class="hljs-number">0</span>,high=m*n<span class="hljs-number">-1</span>;<br>   <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>      <span class="hljs-type">int</span> mid=(high-low)/<span class="hljs-number">2</span>+low;  <span class="hljs-comment">//防止溢出</span><br>      <span class="hljs-type">int</span> x=num[mid/n][mid%n];   <span class="hljs-comment">//注意是n！！！不是m</span><br>      <span class="hljs-keyword">if</span>(x&lt;t)<br>         low=mid+<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;t)<br>         high=mid<span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">else</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）打家劫舍（一维动态规划）"><a href="#（3）打家劫舍（一维动态规划）" class="headerlink" title="（3）打家劫舍（一维动态规划）"></a>（3）打家劫舍（一维动态规划）</h4><p><a href="https://leetcode.cn/problems/house-robber/description/?envType=study-plan-v2&envId=top-interview-150">198. 打家劫舍 - 力扣（LeetCode）</a></p><p>第一步：定义子问题：从k间房屋中可以偷到的最大金额</p><p>第二步：列出递推关系。题目要求不能够偷两间相邻的房屋，因此偷k间房屋就有了两个选择，f[k]&#x3D;max( f[k-1] , f[k-2]+num[k-1] )；</p><p>第三步：写出已知值。f[0]&#x3D;0,f[1]&#x3D;num[0];</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; num)</span></span>&#123;<br>   <span class="hljs-type">int</span> n=num.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">if</span>(!n)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>   add[<span class="hljs-number">1</span>]=num[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>      add[i+<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(add[i],add[i<span class="hljs-number">-1</span>]+num[i]);<br>   &#125;<br>   <span class="hljs-keyword">return</span> add[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>第四步：空间优化。我们发现每次都只需要用到数组的最后两个值，因此用两个整数保存这两个值即可，不需要多余空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; num)</span></span>&#123;<br>   <span class="hljs-type">int</span> pre=<span class="hljs-number">0</span>,cur=<span class="hljs-number">0</span>,ans;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:num)&#123;<br>      ans=<span class="hljs-built_in">max</span>(pre+i,cur);<br>      pre=cur;<br>      cur=ans;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）三角形最小路径和（二维动态规划）"><a href="#（4）三角形最小路径和（二维动态规划）" class="headerlink" title="（4）三角形最小路径和（二维动态规划）"></a>（4）三角形最小路径和（二维动态规划）</h4><p><a href="https://leetcode.cn/problems/triangle/description/?envType=study-plan-v2&envId=top-interview-150">120. 三角形最小路径和 - 力扣（LeetCode）</a></p><h5 id="方法一：动态规划（自底向上）-不改动原数组"><a href="#方法一：动态规划（自底向上）-不改动原数组" class="headerlink" title="方法一：动态规划（自底向上）(不改动原数组)"></a>方法一：动态规划（自底向上）(不改动原数组)</h5><p>设dp[i] [j]表示第i行第j个元素到最后一行的最短路径，则可以得到状态转移方程：                      dp[i] [j]&#x3D;min(dp[i+1] [j] , dp[i+1] [j+1]) +triangle[i] [j]，则dp[0] [0]为所需值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumTotal</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;<br>   <span class="hljs-type">int</span> n=triangle.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span>[][] dp=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i;j++)&#123;<br>         dp[i][j]=<span class="hljs-built_in">min</span>(dp[i+j][j],dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>])+triangle[i][j];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：动态规划（空间优化）"><a href="#方法二：动态规划（空间优化）" class="headerlink" title="方法二：动态规划（空间优化）"></a>方法二：动态规划（空间优化）</h5><p>我们会发现每次只需要用到两个先前值，因此不需要用到二维数组。dp数组不断保存每一行每个值遍历到最后一行的最短路径之和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumTotal</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;<br>   <span class="hljs-type">int</span> n=triangle.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span>[] dp=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i;j++)&#123;<br>         dp[j]=<span class="hljs-built_in">min</span>(dp[j],dp[j+<span class="hljs-number">1</span>])+triangle[i][j];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2024-5-30"><a href="#2024-5-30" class="headerlink" title="2024&#x2F;5&#x2F;30"></a>2024&#x2F;5&#x2F;30</h3><h4 id="（1）最小路径和（二维动态规划）"><a href="#（1）最小路径和（二维动态规划）" class="headerlink" title="（1）最小路径和（二维动态规划）"></a>（1）最小路径和（二维动态规划）</h4><p><a href="https://leetcode.cn/problems/minimum-path-sum/description/?envType=study-plan-v2&envId=top-interview-150">64. 最小路径和 - 力扣（LeetCode）</a></p><p>跟昨天做的题思路很像（相当于偷个小懒hhh），也是丝滑地ac了，就是没有空间优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m=grid.<span class="hljs-built_in">size</span>(),n=grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> dp[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br>        dp[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>]=grid[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            dp[i][n<span class="hljs-number">-1</span>]=dp[i+<span class="hljs-number">1</span>][n<span class="hljs-number">-1</span>]+grid[i][n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            dp[m<span class="hljs-number">-1</span>][i]=dp[m<span class="hljs-number">-1</span>][i+<span class="hljs-number">1</span>]+grid[m<span class="hljs-number">-1</span>][i];  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=n<span class="hljs-number">-2</span>;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>                dp[i][j]=<span class="hljs-built_in">min</span>(dp[i+<span class="hljs-number">1</span>][j],dp[i][j+<span class="hljs-number">1</span>])+grid[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>试着空间优化一下：(分类讨论地好狗屎，但是不知道怎么分情况更简单了。。。)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>   <span class="hljs-type">int</span> m=grid.<span class="hljs-built_in">size</span>(),n=grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<br>   dp[<span class="hljs-number">0</span>]=grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>         <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>&amp;&amp;j!=<span class="hljs-number">0</span>)<br>            dp[j]=dp[j<span class="hljs-number">-1</span>]+grid[i][j];<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>&amp;&amp;i!=<span class="hljs-number">0</span>)<br>            dp[j]=dp[j]+grid[i][j];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>&amp;&amp;j!=<span class="hljs-number">0</span>)<br>            dp[j]=<span class="hljs-built_in">min</span>(dp[j<span class="hljs-number">-1</span>],dp[j])+grid[i][j];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp[n<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）不同路径（二维动规、障碍物）"><a href="#（2）不同路径（二维动规、障碍物）" class="headerlink" title="（2）不同路径（二维动规、障碍物）"></a>（2）不同路径（二维动规、障碍物）</h4><p><a href="https://leetcode.cn/problems/unique-paths-ii/description/?envType=study-plan-v2&envId=top-interview-150">63. 不同路径 II - 力扣（LeetCode）</a></p><h5 id="方法一：动规数组存储该位置的路径和，遇到障碍物该位置路径数变为零。"><a href="#方法一：动规数组存储该位置的路径和，遇到障碍物该位置路径数变为零。" class="headerlink" title="方法一：动规数组存储该位置的路径和，遇到障碍物该位置路径数变为零。"></a>方法一：动规数组存储该位置的路径和，遇到障碍物该位置路径数变为零。</h5><p>AC，但是空间复杂度有点高，而且在初始化的时候容易犯错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePathsWithObstacles</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;<br><span class="hljs-type">int</span> m=obstacleGrid.<span class="hljs-built_in">size</span>(),n=obstacleGrid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span> dp[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br>   dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)<br>      dp[i][<span class="hljs-number">0</span>]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>      dp[<span class="hljs-number">0</span>][i]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;n;j++)&#123;<br>         <span class="hljs-keyword">if</span>(obstacleGrid[i][j])<br>            dp[i][j]=<span class="hljs-number">0</span>;<br>         <span class="hljs-keyword">else</span><br>            dp[i][j]=dp[i<span class="hljs-number">-1</span>][j]+dp[i][j<span class="hljs-number">-1</span>];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：空间优化（滚动数组）"><a href="#方法二：空间优化（滚动数组）" class="headerlink" title="方法二：空间优化（滚动数组）"></a>方法二：空间优化（滚动数组）</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePathsWithObstacles</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;<br>   <span class="hljs-type">int</span> m=obstacleGrid.<span class="hljs-built_in">size</span>(),n=obstacleGrid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<br>   dp[<span class="hljs-number">0</span>]=obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>         <span class="hljs-keyword">if</span>(obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>            dp[j]=<span class="hljs-number">0</span>;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">0</span>)<br>            dp[j]+=dp[j<span class="hljs-number">-1</span>];<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）最长回文子串"><a href="#（3）最长回文子串" class="headerlink" title="（3）最长回文子串"></a>（3）最长回文子串</h4><p><a href="https://leetcode.cn/problems/longest-palindromic-substring/description/?envType=study-plan-v2&envId=top-interview-150">5. 最长回文子串 - 力扣（LeetCode）</a></p><h5 id="方法一：中心扩展法"><a href="#方法一：中心扩展法" class="headerlink" title="方法一：中心扩展法"></a>方法一：中心扩展法</h5><p>分为两种情况：1、回文串长度是奇数；2、回文串长度是偶数。因此从中心向外扩展时也就有两种情况：1、中心是当前值；2、中心是当前值与右边值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>   <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>(),pre=<span class="hljs-number">0</span>,maxL=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>      <span class="hljs-type">int</span> l=i<span class="hljs-number">-1</span>,r=i;<br>      <span class="hljs-keyword">for</span>(;l&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;s[l]==s[r];l--,r++);<br>      <span class="hljs-keyword">if</span>(maxL&lt;r-l+<span class="hljs-number">1</span>)&#123;<br>         maxL=r-l+<span class="hljs-number">1</span>;<br>         pre=l+<span class="hljs-number">1</span>;<br>      &#125;<br>      l=i<span class="hljs-number">-1</span>,r=i+<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">for</span>(;l&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;s[l]==s[r];l--,r++);<br>      <span class="hljs-keyword">if</span>(maxL&lt;r-l+<span class="hljs-number">1</span>)&#123;<br>         maxL=r-l+<span class="hljs-number">1</span>;<br>         pre=l+<span class="hljs-number">1</span>;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(pre,maxL);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h4><p>不知道为什么力扣不能完全通过……不理解</p><p>理解了，因为没有初始化为false啊啊啊啊我要气死了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> len=s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>,res=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录左右边界和右-左的长度</span><br>    <span class="hljs-type">bool</span> dp[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>]=&#123;<span class="hljs-literal">false</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;len;j++)&#123;<span class="hljs-comment">//j=i这步就将每个单个字符dp赋为了true</span><br>            <span class="hljs-keyword">if</span>(s[i]==s[j]&amp;&amp;(j - i &lt;= <span class="hljs-number">1</span> || dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]))&#123;<br>                dp[i][j] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(j-i&gt;res)&#123;<br>                    res=j-i;<span class="hljs-comment">//res记得也得更新！</span><br>                    left=i;<br>                    right=j;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(left,res+<span class="hljs-number">1</span>);<span class="hljs-comment">//左闭右开</span><br>&#125; <br></code></pre></td></tr></table></figure><h4 id="（4）删除有序数组中的重复项-II（双指针）"><a href="#（4）删除有序数组中的重复项-II（双指针）" class="headerlink" title="（4）删除有序数组中的重复项 II（双指针）"></a>（4）删除有序数组中的重复项 II（双指针）</h4><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/">80. 删除有序数组中的重复项 II</a></p><h5 id="方法一：双指针（？）"><a href="#方法一：双指针（？）" class="headerlink" title="方法一：双指针（？）"></a>方法一：双指针（？）</h5><p>自己写的，有点丑陋……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-type">int</span> j=i+<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">while</span>(j&lt;nums.<span class="hljs-built_in">size</span>()&amp;&amp;nums[i]==nums[i+<span class="hljs-number">1</span>]&amp;&amp;nums[i]==nums[j])&#123;<br>                nums.<span class="hljs-built_in">erase</span>(nums.<span class="hljs-built_in">begin</span>()+j);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(nums[i]==nums[i+<span class="hljs-number">1</span>])<br>                i+=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span><br>                i+=<span class="hljs-number">1</span>;<br>        &#125; <br>        <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">size</span>();       <br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：单指针"><a href="#方法二：单指针" class="headerlink" title="方法二：单指针"></a>方法二：单指针</h5><p>首先，定义一个指针 <code>i</code>，用来记录不重复元素的位置。</p><p>遍历数组 <code>nums</code>，对于数组中的每个元素 <code>num</code>：</p><ul><li>如果 <code>i</code> 小于 2（即数组前两个元素），或者当前元素 <code>num</code> 大于 <code>nums[i - 2]</code>（说明当前元素和前两个元素不相同），则将当前元素 <code>num</code> 赋值给 <code>nums[i]</code>，并将指针 <code>i</code> 向后移动一位，相当于将当前元素保留下来。</li><li>如果当前元素 <code>num</code> 和 <code>nums[i - 2]</code> 相同（说明当前元素已经重复出现两次以上），则不做任何操作，直接继续遍历下一个元素。</li></ul><p>最后返回指针 <code>i</code>，即为删除重复元素后数组的新长度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> </span>&#123;<br>       <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>           <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">2</span> || num &gt; nums[i - <span class="hljs-number">2</span>]) &#123;<br>               nums[i++] = num;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> i;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）买卖股票的最佳时机"><a href="#（5）买卖股票的最佳时机" class="headerlink" title="（5）买卖股票的最佳时机"></a>（5）买卖股票的最佳时机</h4><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></p><p>自己写的代码太丑陋了而且还有bug（不知道为啥），这是chatgpt写的，跟我一样的思路怎么就这么简洁呢呃呃呃，怎么不算天才呢</p><p>我用了两个数组去记录……左边最小值和右边最大值，怎么不算愚蠢呢……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>    <span class="hljs-type">int</span> minPrice = INT_MAX;<br>    <span class="hljs-type">int</span> maxProfit = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> price : prices) &#123;<br>        minPrice = <span class="hljs-built_in">min</span>(minPrice, price);   <span class="hljs-comment">//记录到目前位置的股票价格最小值</span><br>        maxProfit = <span class="hljs-built_in">max</span>(maxProfit, price - minPrice);  <span class="hljs-comment">//维护利润最大值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> maxProfit;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2024-5-31"><a href="#2024-5-31" class="headerlink" title="2024&#x2F;5&#x2F;31"></a>2024&#x2F;5&#x2F;31</h3><h4 id="（1）买卖股票的最佳时机-（动规、贪心）"><a href="#（1）买卖股票的最佳时机-（动规、贪心）" class="headerlink" title="（1）买卖股票的最佳时机||（动规、贪心）"></a>（1）买卖股票的最佳时机||（动规、贪心）</h4><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/?envType=study-plan-v2&envId=top-interview-150">122. 买卖股票的最佳时机 II - 力扣（LeetCode）</a></p><h5 id="方法一：直接求解-贪心"><a href="#方法一：直接求解-贪心" class="headerlink" title="方法一：直接求解&#x2F;贪心"></a>方法一：直接求解&#x2F;贪心</h5><p>按照直接求解的思路，如果要使利润最大化，只需要把股票价格看成折线图，计算每一次上升的利润。如果把距离看为1，就看每两天是否有利润，只要有就增加利润值。</p><p>按照贪心的思路，由于股票的购买没有限制，因此相当于找到若干个不相交的区间，使区间内利润和最大。如果区间长度为1，也就等同于了刚刚的思路。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br><span class="hljs-type">int</span> maxp=<span class="hljs-number">0</span>,n=prices.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>     maxp+=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,prices[i+<span class="hljs-number">1</span>]-prices[i]);  <span class="hljs-comment">//省去了每次判断两个股票值的大小</span><br>   <span class="hljs-keyword">return</span> maxp;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：动态规划-1"><a href="#方法二：动态规划-1" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h5><p>虽然知道可以动态规划但是就是想不到怎么规划！！！</p><p>首先要设置状态，可以设置dp[i] [0]表示第i天交易完时手里没有股票的最大利润，dp[i] [1]则表示手里有股票。下面就可以列状态转移方程。（一开始真的想复杂了，所以完全不知道这怎么转移）对于dp[i] [0]，有两种情况：1、dp[i] [0]&#x3D;dp[i-1] [0]（和前一天保持一致）                              2、dp[i] [0]&#x3D;dp[i-1] [1]+prices[i]（前一天有股票，今天卖出，获得今天的收益，不用管成本）对于dp[i] [1]：1、dp[i] [1]&#x3D;dp[i-1] [1]；2、dp[i] [1]&#x3D;dp[i-1] [0]-prices[i]</p><p>遍历结束后，我们手中有两个值，dp[n-1] [0]和dp[n-1] [1]，显然最后手里没有股票的话利润才是最大的，因此应该返回dp[n-1] [0]。</p><p>对于这道题也可以空间优化，因为每次都只是用到了前一天的两个值而已。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br><span class="hljs-type">int</span> n=prices.<span class="hljs-built_in">size</span>(),dp0,dp1,newdp0,newdp1;<br>   dp0=<span class="hljs-number">0</span>,dp1=-prices[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>      newdp0=<span class="hljs-built_in">max</span>(dp0,dp1+prices[i]);<br>      newdp1=<span class="hljs-built_in">max</span>(dp1,dp0-prices[i]);<br>      dp0=newdp0;<br>      dp1=newdp1;<br>   &#125;<br>   <span class="hljs-keyword">return</span> dp0;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）三数之和（双指针）"><a href="#（2）三数之和（双指针）" class="headerlink" title="（2）三数之和（双指针）"></a>（2）三数之和（双指针）</h4><p><a href="https://leetcode.cn/problems/3sum/description/?envType=study-plan-v2&envId=top-interview-150">15. 三数之和 - 力扣（LeetCode）</a></p><h5 id="方法一-自己写的（我也想写双指针法？？）"><a href="#方法一-自己写的（我也想写双指针法？？）" class="headerlink" title="方法一:自己写的（我也想写双指针法？？）"></a>方法一:自己写的（我也想写双指针法？？）</h5><p>通过了308&#x2F;313个用例呜呜呜我哭死。最后是时间超了，我的代码好丑陋……感觉超时间应该是因为用到了查找函数，有点丑陋。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>(),cur;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; num;<br>     <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">3</span>||nums[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>||nums[n<span class="hljs-number">-1</span>]&lt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> num;<br>        vector&lt;<span class="hljs-type">int</span>&gt; tmp;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-2</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&gt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>           <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]=nums[i+<span class="hljs-number">1</span>])<br>              <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;n<span class="hljs-number">-1</span>;j++)&#123;<br>                cur=nums[i]+nums[j];<br>                cur=<span class="hljs-number">0</span>-cur;<br>                <span class="hljs-keyword">auto</span> it=<span class="hljs-built_in">find</span>(nums.<span class="hljs-built_in">begin</span>()+j+<span class="hljs-number">1</span>,nums.<span class="hljs-built_in">end</span>(),cur);<br>                <span class="hljs-keyword">if</span>(it!=nums.<span class="hljs-built_in">end</span>())&#123;<br>                    tmp=&#123;nums[i],nums[j],nums[it-nums.<span class="hljs-built_in">begin</span>()]&#125;;<br>                    <span class="hljs-keyword">if</span>(num.<span class="hljs-built_in">empty</span>()||<span class="hljs-built_in">find</span>(num.<span class="hljs-built_in">begin</span>(),num.<span class="hljs-built_in">end</span>(),tmp)==num.<span class="hljs-built_in">end</span>())<br>                    num.<span class="hljs-built_in">push_back</span>(tmp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="方法二：（相向）双指针法"><a href="#方法二：（相向）双指针法" class="headerlink" title="方法二：（相向）双指针法"></a>方法二：（相向）双指针法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>   <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">//第一步排序</span><br>   vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; num;    <br>   <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();   <span class="hljs-comment">//我好不容易严谨一会上来就判断n是不是小于3，结果题目写了n&gt;=3</span><br>   <span class="hljs-keyword">if</span>(nums[n<span class="hljs-number">-1</span>]+num[n<span class="hljs-number">-2</span>]+nums[n<span class="hljs-number">-3</span>]&lt;<span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> num;   <span class="hljs-comment">//最大三数和都小于0了</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-2</span>;i++)&#123;<br>      <span class="hljs-type">int</span> x=nums[i];<br>      <span class="hljs-keyword">if</span>(i&amp;&amp;x=nums[i<span class="hljs-number">-1</span>])   <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//跳过重复元素</span><br>      <span class="hljs-keyword">if</span>(nums[i]+num[i+<span class="hljs-number">1</span>]+nums[i+<span class="hljs-number">2</span>]&gt;<span class="hljs-number">0</span>)   <span class="hljs-keyword">break</span>;   <span class="hljs-comment">//三数之和已经大于0</span><br>      <span class="hljs-keyword">if</span>(nums[n<span class="hljs-number">-1</span>]+num[n<span class="hljs-number">-2</span>]+nums[i]&lt;<span class="hljs-number">0</span>)   <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//和最大两个数相加都大于0</span><br>      <span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>,k=n<span class="hljs-number">-1</span>;   <span class="hljs-comment">//一前一后两个指针</span><br>      <span class="hljs-keyword">while</span>(j&lt;k)&#123;<br>         <span class="hljs-type">int</span> t=x+nums[j]+nums[k];<br>         <span class="hljs-keyword">if</span>(t&gt;<span class="hljs-number">0</span>)  k--;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t&lt;<span class="hljs-number">0</span>)  s--;<br>         <span class="hljs-keyword">else</span>&#123;<br>            num.push_back&#123;x,nums[j],nums[k]&#125;;<br>            <span class="hljs-keyword">for</span>(++j;j&lt;k&amp;&amp;nums[j]==nums[j<span class="hljs-number">-1</span>];++j);<br>            <span class="hljs-keyword">for</span>(--k;j&lt;k&amp;&amp;nums[k]==nums[k+<span class="hljs-number">1</span>];--k);  <span class="hljs-comment">//跳过重复的数字</span><br>         &#125;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）买卖股票的最佳时机-（k次）-动态规划"><a href="#（3）买卖股票的最佳时机-（k次）-动态规划" class="headerlink" title="（3）买卖股票的最佳时机|||（k次）(动态规划)"></a>（3）买卖股票的最佳时机|||（k次）(动态规划)</h4><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/">188. 买卖股票的最佳时机 IV - 力扣（LeetCode）</a></p><p>我是真的没有想到还有|||……后面好像还有IV。今天下午都要买卖股票啦，哈哈哈（苦笑）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=INT_MIN/<span class="hljs-number">2</span>;  <span class="hljs-comment">//除以二是为了防止溢出</span><br>   <span class="hljs-type">int</span> n=prices.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-type">int</span> buy1=inf; <span class="hljs-comment">//第一次买后的最大收益，初始值设置为最低</span><br>   <span class="hljs-type">int</span> sell1=<span class="hljs-number">0</span>;  <span class="hljs-comment">//第一次卖掉后的最大收益</span><br>   <span class="hljs-type">int</span> buy2=inf;<br>   <span class="hljs-type">int</span> sell2=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;  <span class="hljs-comment">//变量更新的顺序可以随意调换</span><br>      sell1=<span class="hljs-built_in">max</span>(sell1,buy1+prices[i]);<br>      buy1=<span class="hljs-built_in">max</span>(buy1,-prices[i]);<br>      sell2=<span class="hljs-built_in">max</span>(sell2,buy2+prices[i]);<br>      buy2=<span class="hljs-built_in">max</span>(buy2,sell1-prices[i]);<br>   &#125;<br>   <span class="hljs-keyword">return</span> sell2;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）买卖股票的最佳时期（k次）"><a href="#（4）买卖股票的最佳时期（k次）" class="headerlink" title="（4）买卖股票的最佳时期（k次）"></a>（4）买卖股票的最佳时期（k次）</h4><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/?envType=study-plan-v2&envId=top-interview-150">188. 买卖股票的最佳时机 IV - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span> k, vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br><span class="hljs-type">int</span> n=prices.<span class="hljs-built_in">size</span>();<br>   k=<span class="hljs-built_in">min</span>(k,n/<span class="hljs-number">2</span>);<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">buy</span><span class="hljs-params">(k+<span class="hljs-number">1</span>)</span></span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sell</span><span class="hljs-params">(k+<span class="hljs-number">1</span>)</span></span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>      buy[i]=INT_MIN/<span class="hljs-number">2</span>;<br>      sell[i]=<span class="hljs-number">0</span>;<br>   &#125;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)&#123;<br>         buy[j]=<span class="hljs-built_in">max</span>(buy[j],sell[j<span class="hljs-number">-1</span>]-prices[i]);<br>         sell[j]=<span class="hljs-built_in">max</span>(sell[j],buy[j<span class="hljs-number">-1</span>]+prices[i]);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> sell[k];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）阶乘后的0（数学）"><a href="#（5）阶乘后的0（数学）" class="headerlink" title="（5）阶乘后的0（数学）"></a>（5）阶乘后的0（数学）</h4><p><a href="https://leetcode.cn/problems/factorial-trailing-zeroes/description/?envType=study-plan-v2&envId=top-interview-150">172. 阶乘后的零 - 力扣（LeetCode）</a></p><p>这居然是中等？？你的中等我的中等好像不一样？？自己ac了但是贴个复杂度更小的解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trailingZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>   <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span>(n)&#123;<br>      n=n/<span class="hljs-number">5</span>;<br>      ans+=n;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ans;  <span class="hljs-comment">//就是~这么简单</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2024-6-1"><a href="#2024-6-1" class="headerlink" title="2024&#x2F;6&#x2F;1"></a>2024&#x2F;6&#x2F;1</h2><p>休息一天。。头疼</p><h3 id="2024-6-2"><a href="#2024-6-2" class="headerlink" title="2024&#x2F;6&#x2F;2"></a>2024&#x2F;6&#x2F;2</h3><h4 id="（1）直线上最多的点数"><a href="#（1）直线上最多的点数" class="headerlink" title="（1）直线上最多的点数"></a>（1）直线上最多的点数</h4><p><a href="https://leetcode.cn/problems/max-points-on-a-line/description/?envType=study-plan-v2&envId=top-interview-150">149. 直线上最多的点数 - 力扣（LeetCode）</a></p><p>枚举直线+哈希表：外层循环遍历每一个点，求出跟该点在同一条直线上的点的最大值，然后再得到所有点中的最大值。题目中用字符串保存斜率，求出x坐标差和y坐标差后，求出他们的最大公约数，分别除去再存储，可以有效的维护相同斜率的哈希表，也可以很好地使x坐标差为0的情况方便存储。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxPoints</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = points.<span class="hljs-built_in">size</span>(), ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            map&lt;string, <span class="hljs-type">int</span>&gt; map;  <span class="hljs-comment">//每次循环都要重新构造哈希表</span><br>            <span class="hljs-type">int</span> maxv = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-type">int</span> x1 = points[i][<span class="hljs-number">0</span>], y1 = points[i][<span class="hljs-number">1</span>], x2 = points[j][<span class="hljs-number">0</span>], y2 = points[j][<span class="hljs-number">1</span>];<br>                <span class="hljs-type">int</span> a = x1 - x2, b = y1 - y2;<br>                <span class="hljs-type">int</span> k = <span class="hljs-built_in">gcd</span>(a, b);<br>                string key = <span class="hljs-built_in">to_string</span>(a / k) + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-built_in">to_string</span>(b / k);<br>                map[key]++;<br>                maxv = <span class="hljs-built_in">max</span>(maxv, map[key]);<br>            &#125;<br>            ans = <span class="hljs-built_in">max</span>(ans, maxv + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<span class="hljs-comment">// 求最大公约数的代码</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> b == <span class="hljs-number">0</span> ? a : <span class="hljs-built_in">gcd</span>(b, a % b);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>求最小公倍数的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">// 先求最大公约数</span><br>    <span class="hljs-type">int</span> num = <span class="hljs-built_in">gcd</span>(a, b);<br>    <span class="hljs-comment">// 利用最大公约数求最小公倍数</span><br>    <span class="hljs-keyword">return</span> (a * b) / num;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）零钱兑换（一维动规）"><a href="#（2）零钱兑换（一维动规）" class="headerlink" title="（2）零钱兑换（一维动规）"></a>（2）零钱兑换（一维动规）</h4><p><a href="https://leetcode.cn/problems/coin-change/?envType=study-plan-v2&envId=top-interview-150">322. 零钱兑换 - 力扣（LeetCode）</a></p><p>很好的题目，使我小脑萎缩。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span>&#123;<br>   <span class="hljs-type">int</span> MAX=amount+<span class="hljs-number">1</span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(amount+<span class="hljs-number">1</span>,MAX)</span></span>;  <span class="hljs-comment">//若最后dp(amount)为max证明凑不到</span><br>   dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=amount;i++)<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-type">int</span>)coins.<span class="hljs-built_in">size</span>();++j)<br>         <span class="hljs-keyword">if</span>(coins[j]&lt;=i)<br>            dp[i]=<span class="hljs-built_in">min</span>(dp[i],dp[i-coins[j]]+<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">return</span> dp[amount]==MAX?<span class="hljs-number">-1</span>:dp[amount];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++二叉树详解（概念+例题）</title>
    <link href="/2024/05/20/c++%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%A6%82%E5%BF%B5+%E4%BE%8B%E9%A2%98%EF%BC%89/"/>
    <url>/2024/05/20/c++%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%A6%82%E5%BF%B5+%E4%BE%8B%E9%A2%98%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>二叉树的学习记录</p><span id="more"></span><h3 id="一、二叉树相关概念"><a href="#一、二叉树相关概念" class="headerlink" title="一、二叉树相关概念"></a>一、二叉树相关概念</h3><h4 id="（1）二叉树的结构（照搬力扣网站）"><a href="#（1）二叉树的结构（照搬力扣网站）" class="headerlink" title="（1）二叉树的结构（照搬力扣网站）"></a>（1）二叉树的结构（照搬力扣网站）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br><span class="hljs-type">int</span> val;<br>TreeNode *left;<br>TreeNode *right;<br><span class="hljs-built_in">TreeNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br><span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x, TreeNode *left, TreeNode *right) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(left), <span class="hljs-built_in">right</span>(right) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>满二叉树&#x2F;完全二叉树（只有最后一层缺失，且只有右边缺失）</p><h4 id="（2）二叉搜索树"><a href="#（2）二叉搜索树" class="headerlink" title="（2）二叉搜索树"></a>（2）二叉搜索树</h4><h4 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h4><p>一个节点左子树上的所有节点的值全部小于该节点，右子树上所有结点的值全部大于该节点。</p><p>作用：树如其名，二叉搜索树在搜索某个节点的值时速度更快。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240522195705342.png" alt="image-20240522195705342" style="zoom: 67%;" /><p>如图，若想要找节点6，从根节点开始，小于根节点，找左子树；大于节点3，找右子树；等于节点6，找到节点。</p><p>除此之外，我们会发现这棵二叉搜索树的中序遍历：1.3.4.6.7.8.10.13.14</p><h4 id="2、二叉搜索树的搭建"><a href="#2、二叉搜索树的搭建" class="headerlink" title="2、二叉搜索树的搭建"></a>2、二叉搜索树的搭建</h4><p>(1)笨蛋版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>   TreeNode* temp=root;<br>   TreeNode* prev=<span class="hljs-literal">nullptr</span>;<br>   <span class="hljs-keyword">while</span>(temp)&#123;<br>      prev=temp;<br>      <span class="hljs-keyword">if</span>(k&lt;temp-&gt;val)<br>         temp=temp-&gt;next;<br>      <span class="hljs-keyword">else</span><br>         temp=temp-&gt;right;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(k&lt;prev-&gt;val)&#123;<br>      TreeNode* curr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(k);<br>      prev-&gt;left=curr;<br>      curr-&gt;left=curr-&gt;right=<span class="hljs-literal">nullptr</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(k&gt;prev-&gt;val)&#123;<br>      TreeNode* curr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(k);<br>      prev-&gt;right=curr;<br>      curr-&gt;left=curr-&gt;right=<span class="hljs-literal">nullptr</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）调用自身搭建</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">add</span><span class="hljs-params">(TreeNode* root,<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(root=<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(num);<br>   <span class="hljs-keyword">if</span>(root-&gt;val&gt;num)<br>      root-&gt;left=<span class="hljs-built_in">add</span>(root-&gt;left,num);<br>   <span class="hljs-keyword">else</span><br>      root-&gt;right=<span class="hljs-built_in">add</span>(root-&gt;right,num);<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、二叉搜索树的例题"><a href="#3、二叉搜索树的例题" class="headerlink" title="3、二叉搜索树的例题"></a>3、二叉搜索树的例题</h4><h5 id="1-由二叉搜索树的中序遍历搭建二叉搜索树（傻眼）"><a href="#1-由二叉搜索树的中序遍历搭建二叉搜索树（傻眼）" class="headerlink" title="1&gt;由二叉搜索树的中序遍历搭建二叉搜索树（傻眼）"></a>1&gt;由二叉搜索树的中序遍历搭建二叉搜索树（傻眼）</h5><p>方法一：总是选取中序遍历中间位置左边的数字作为根节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">sortedArrayToBST</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">helper</span>(nums, <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function">TreeNode* <span class="hljs-title">helper</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span>(left&gt;right)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>   <span class="hljs-type">int</span> mid=(right+left)/<span class="hljs-number">2</span>;<br>   TreeNode* root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(num[mid]);<br>   root-&gt;left=<span class="hljs-built_in">helper</span>(nums,left,mid<span class="hljs-number">-1</span>);<br>   root-&gt;right=<span class="hljs-built_in">helper</span>(nums,mid+<span class="hljs-number">1</span>,right);<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：总是选取中序遍历中间位置左边的数字作为根节点（只需mid加一）</p><h5 id="2-找到二叉搜索树中第k大的节点值（k-cnt）"><a href="#2-找到二叉搜索树中第k大的节点值（k-cnt）" class="headerlink" title="2&gt;找到二叉搜索树中第k大的节点值（k&#x3D;cnt）"></a>2&gt;找到二叉搜索树中第k大的节点值（k&#x3D;cnt）</h5><p>方法一：（自写）（占用额外空间）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myinorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">myinorder</span>(root-&gt;right,nums);<br>    nums.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br>    <span class="hljs-built_in">myinorder</span>(root-&gt;left,nums);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findTargetNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> cnt)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums;<br>    <span class="hljs-built_in">myinorder</span>(root,nums);<br>    <span class="hljs-keyword">return</span> nums[cnt<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：优化（空间复杂度O(1)）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> k;<span class="hljs-type">int</span> res;   <span class="hljs-comment">//必须是全局变量</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myinorder</span><span class="hljs-params">(TreeNode* root)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">myinorder</span>(root-&gt;right);<br>    k--;<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//迭代到倒数第k节点，是第k大的节点</span><br>       res=root-&gt;val;<br>       <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">myinorder</span>(root-&gt;left);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findTargetNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> cnt)</span> </span>&#123;<br>    k=cnt;<br>    <span class="hljs-built_in">myinorder</span>(root);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-前序遍历构造二叉搜索树"><a href="#3-前序遍历构造二叉搜索树" class="headerlink" title="3&gt;前序遍历构造二叉搜索树"></a>3&gt;前序遍历构造二叉搜索树</h5><p>方法一：通过构建二叉搜索树的函数来构造</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">bstFromPreorder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder)</span> </span>&#123;<br>   TreeNode* root =<span class="hljs-built_in">add</span>(<span class="hljs-literal">nullptr</span>, preorder[<span class="hljs-number">0</span>]);<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; preorder.<span class="hljs-built_in">size</span>(); i++) &#123;<br>       root=<span class="hljs-built_in">add</span>(root, preorder[i]);<br>   &#125;<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：已知二叉搜索树的中序遍历是有序的，因此我们现在知道了二叉树的前序和中序遍历（中序遍历可由前序遍历排序得出），就可以搭建了。（见下面第八道例题）</p><p>方法三：递归（分析前序遍历的特点：我们会发现，由根节点开始，第一个大于根节点的节点及其后均为右子树，中间的是左子树，依此类推）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">bstFromPreorder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">mybst</span>(preorder,<span class="hljs-number">0</span>,preorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-function">TreeNode* <span class="hljs-title">mybst</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(left&gt;right)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>   <span class="hljs-type">int</span> root=preorder[left];<br>   <span class="hljs-type">int</span> mid=left;<br>   <span class="hljs-keyword">for</span>(;mid&lt;=right+<span class="hljs-number">1</span>;mid++)<br>      <span class="hljs-keyword">if</span>(preorder[mid]&gt;root)<br>         <span class="hljs-keyword">break</span>;<br>   TreeNode* node=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(root);<br>   node-&gt;left=<span class="hljs-built_in">mybst</span>(preorder,left+<span class="hljs-number">1</span>,mid<span class="hljs-number">-1</span>);<br>   node-&gt;right=<span class="hljs-built_in">mybst</span>(preorder,mid,right);<br>   <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-二叉搜索树的最近公共祖先"><a href="#4-二叉搜索树的最近公共祖先" class="headerlink" title="4&gt;二叉搜索树的最近公共祖先"></a>4&gt;二叉搜索树的最近公共祖先</h5><p>给定一个二叉树，找到该树中两个指定节点的最近公共祖先。（一个节点也可以是自己的祖先；最近：深度之差最小）</p><p>方法：递归（思路：找到分叉点。也就是两个节点都大于或者小于某个节点时，这个节点一定不是他们的最近公共祖先）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123; <span class="hljs-keyword">if</span>(p-&gt;val&lt;root-&gt;val&amp;&amp;q-&gt;val&lt;root-&gt;val)<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">lowestCommonAncestor</span>(root-&gt;left,p,q);<br>   <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">lowestCommonAncestor</span>(root-&gt;right,p,q);<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）二叉树的层次遍历（自顶向下）"><a href="#（3）二叉树的层次遍历（自顶向下）" class="headerlink" title="（3）二叉树的层次遍历（自顶向下）"></a>（3）二叉树的层次遍历（自顶向下）</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">102. 二叉树的层序遍历 - 力扣（LeetCode）</a></p><p>题目描述：给你二叉树的根节点 <code>root</code> ，返回其节点值的层序遍历。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240520152406792.png" alt="image-20240520152406792" style="zoom:50%;" /><p>输入：root &#x3D; [ 3 , 9 , 20 , null , null , 15 , 7 ]<br>        输出：[ [3] , [ 9 , 20 ] , [ 15 , 7 ] ]</p><p><strong>广度优先搜索法：</strong></p><p>（一直以为广度优先搜索都是固定的那种函数模板，函数体里总会调用自身函数，现在看来不是这样。）</p><p>（广度：一层一层全部搜索完再去下一层；深度：走到底再返回）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector &lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">levelOrder</span>(TreeNode* root) &#123;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; ret;  <span class="hljs-comment">//存储返回值</span><br>   <span class="hljs-keyword">if</span>(!root)<br>      <span class="hljs-keyword">return</span> ret;    <span class="hljs-comment">//空树，返回空向量</span><br>   queue &lt;TreeNode*&gt; q;   <span class="hljs-comment">//存储每一层的节点</span><br>   q.<span class="hljs-built_in">push</span>(root);    <span class="hljs-comment">//先压入第一层（根节点）</span><br>   <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;   <span class="hljs-comment">//第一层循环：表示各层的存储过程</span><br>      <span class="hljs-type">int</span> curl=q.<span class="hljs-built_in">size</span>();<br>      ret.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;());   <span class="hljs-comment">//每一层都要先添加一个空的向量，来存储这一层的节点值</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=curl;++i)&#123;   <span class="hljs-comment">//第二层循环：某一层的更新以及存储过程</span><br>         <span class="hljs-keyword">auto</span> node=q.<span class="hljs-built_in">front</span>();q.<span class="hljs-built_in">pop</span>();<br>         ret.<span class="hljs-built_in">back</span>().<span class="hljs-built_in">push_back</span>(node-&gt;val);  <span class="hljs-comment">//向最后一个向量后添加节点值</span><br>         <span class="hljs-keyword">if</span>(node-&gt;left) q.<span class="hljs-built_in">push</span>(node-&gt;left);  <span class="hljs-comment">//在队列内存储下层的节点值</span><br>         <span class="hljs-keyword">if</span>(node-&gt;right) q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>思路亦可改为每次循环新创建一个向量，然后压入每层节点值，最后再把这个向量压入二级向量中。</p><p><em><strong>二级向量数组</strong></em>：内层是向量，向量大小不固定；外层是存储这些向量的向量。</p><p><em><strong>emplace_push</strong></em>:据说速度要大于push_back。</p><h3 id="二、力扣刷题记录"><a href="#二、力扣刷题记录" class="headerlink" title="二、力扣刷题记录"></a>二、力扣刷题记录</h3><h4 id="（1）装饰树"><a href="#（1）装饰树" class="headerlink" title="（1）装饰树"></a>（1）装饰树</h4><p>装饰过程：在每个父节点与其子节点之间都插入一个值为-1的节点。返回完成装饰后树的根节点。<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240520171910175.png" alt="image-20240520171910175" style="zoom:67%;" /></p><p><strong>递归法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">expandBinaryTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span>(root!=<span class="hljs-literal">nullptr</span>)&#123;<br>      <span class="hljs-built_in">expandBinaryTree</span>(root-&gt;left);<br>      <span class="hljs-keyword">if</span>(root-&gt;left!=<span class="hljs-literal">nullptr</span>)&#123;<br>         TreeNode* T=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">-1</span>);<br>         T-&gt;left=root-&gt;left;<br>         root-&gt;left=T;<br>      &#125;<br>      <span class="hljs-built_in">expandBinaryTree</span>(root-&gt;right);<br>      <span class="hljs-keyword">if</span>(root-&gt;right!=<span class="hljs-literal">nullptr</span>)&#123;<br>         TreeNode* T=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">-1</span>);<br>         T-&gt;right=root-&gt;right;<br>         root-&gt;right=T;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）求二叉树的最小深度"><a href="#（2）求二叉树的最小深度" class="headerlink" title="（2）求二叉树的最小深度"></a>（2）求二叉树的最小深度</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/">111. 二叉树的最小深度 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>   <span class="hljs-comment">//只有左节点或右节点只能返回此节点的最小深度了（非叶子节点）</span><br>   <span class="hljs-keyword">if</span>(root-&gt;left==<span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> <span class="hljs-built_in">minDepth</span>(root-&gt;right)+<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">if</span>(root-&gt;right == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">minDepth</span>(root-&gt;left) + <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">minDepth</span>(root-&gt;left), <span class="hljs-built_in">minDepth</span>(root-&gt;right)) + <span class="hljs-number">1</span>;<br>   <span class="hljs-comment">//叶子节点来选择最小深度</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）N叉树的前序遍历"><a href="#（3）N叉树的前序遍历" class="headerlink" title="（3）N叉树的前序遍历"></a>（3）N叉树的前序遍历</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/description/">589. N 叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> val;<br>vector&lt;Node*&gt; children;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorder</span><span class="hljs-params">(Node* root)</span></span>&#123;<br>      vector&lt;<span class="hljs-type">int</span>&gt; res;<br>      <span class="hljs-built_in">helper</span>(root,res);<br>      <span class="hljs-keyword">return</span> res;<br>   &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">helper</span><span class="hljs-params">(<span class="hljs-type">const</span> Node* root, vector&lt;<span class="hljs-type">int</span>&gt; &amp; res)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>         <span class="hljs-keyword">return</span>;<br>      res.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp; ch:root-&gt;children)<br>         <span class="hljs-built_in">helper</span>(ch,res);  <span class="hljs-comment">//对每个子节点都进行前序遍历</span><br>   &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（4）克隆二叉树（递归）（无连接）"><a href="#（4）克隆二叉树（递归）（无连接）" class="headerlink" title="（4）克隆二叉树（递归）（无连接）"></a>（4）克隆二叉树（递归）（无连接）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">cloneTree</span><span class="hljs-params">(TreeNode root)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(root==null)<br>      <span class="hljs-keyword">return</span> null;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode&#123;root.val,<span class="hljs-built_in">cloneTree</span>(root.left),<span class="hljs-built_in">cloneTree</span>(root.right)&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（5）翻转二叉树-递归"><a href="#（5）翻转二叉树-递归" class="headerlink" title="（5）翻转二叉树(递归)"></a>（5）翻转二叉树(递归)</h4><p><a href="https://leetcode.cn/problems/invert-binary-tree/description/">226. 翻转二叉树 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(root==null)<br>      <span class="hljs-keyword">return</span> null;<br>   TreeNode* left=<span class="hljs-built_in">invertTree</span>(root-&gt;left);<br>   TreeNode* right=<span class="hljs-built_in">invertTree</span>(root-&gt;right);<br>   root-&gt;left=right;<br>   root-&gt;right=left;<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（6）相同的树-终于自己写会的递归，只是有细节不到位"><a href="#（6）相同的树-终于自己写会的递归，只是有细节不到位" class="headerlink" title="（6）相同的树(终于自己写会的递归，只是有细节不到位)"></a>（6）相同的树(终于自己写会的递归，只是有细节不到位)</h4><p><a href="https://leetcode.cn/problems/same-tree/description/">100. 相同的树 - 力扣（LeetCode）</a></p><p>错误版本：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(TreeNode* p, TreeNode* q)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(p-&gt;val!=q-&gt;val)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span>(p==q==null)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">isSameTree</span>(p-&gt;left,q-&gt;left)+<span class="hljs-built_in">isSameTree</span>(p-&gt;right,q-&gt;right)==<span class="hljs-number">2</span>?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确版本：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(TreeNode* p, TreeNode* q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">nullptr</span>&amp;&amp;q==<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">nullptr</span>||q==<span class="hljs-literal">nullptr</span>)  <span class="hljs-comment">//这个情况不要漏掉了</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(p-&gt;val!=q-&gt;val)   <span class="hljs-comment">//一定要先判断是不是空再取节点值！！！！！！！</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">isSameTree</span>(p-&gt;left,q-&gt;left)&amp;&amp;<span class="hljs-built_in">isSameTree</span>(p-&gt;right,q-&gt;right);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（7）对称二叉树"><a href="#（7）对称二叉树" class="headerlink" title="（7）对称二叉树"></a>（7）对称二叉树</h4><p><a href="https://leetcode.cn/problems/symmetric-tree/description/">101. 对称二叉树 - 力扣（LeetCode）</a></p><p>方法一：根据前几道题解来判断（反转后如果和原树相同说明是对称的）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>TreeNode root1=<span class="hljs-built_in">invertTree</span>(root);<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">isSameTree</span>(root1,root);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：递归（和判断是否是相同树很像）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">issame</span>(root,root);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">issame</span><span class="hljs-params">(TreeNode* l,TreeNode* r)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(l==<span class="hljs-literal">nullptr</span>&amp;&amp;r==<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">if</span>(l==<span class="hljs-literal">nullptr</span>||r==<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">return</span> l-&gt;val==r-&gt;val&amp;&amp;<span class="hljs-built_in">issame</span>(l-&gt;left,r-&gt;right)&amp;&amp;<span class="hljs-built_in">issame</span>(l-&gt;right,r-&gt;left);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（8）由遍历构造二叉树"><a href="#（8）由遍历构造二叉树" class="headerlink" title="（8）由遍历构造二叉树"></a>（8）由遍历构造二叉树</h4><h5 id="1-由前序遍历和中序遍历构造二叉树"><a href="#1-由前序遍历和中序遍历构造二叉树" class="headerlink" title="1&gt;由前序遍历和中序遍历构造二叉树"></a>1&gt;由前序遍历和中序遍历构造二叉树</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(pre.<span class="hljs-built_in">empty</span>())<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>   TreeNode* root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(pre[<span class="hljs-number">0</span>]);<br>   <span class="hljs-comment">//pre.erase(pre.begin());</span><br>   <span class="hljs-type">int</span> size=<span class="hljs-built_in">find</span>(in.<span class="hljs-built_in">begin</span>(),in.<span class="hljs-built_in">end</span>(),pre[<span class="hljs-number">0</span>]);<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">prel</span><span class="hljs-params">(pre.begin()+<span class="hljs-number">1</span>,pre.begin()+size+<span class="hljs-number">1</span>)</span></span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">prer</span><span class="hljs-params">(pre.begin()+size+<span class="hljs-number">1</span>,pre.end())</span></span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inl</span><span class="hljs-params">(in.begin(),in.begin()+size)</span></span>;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inr</span><span class="hljs-params">(in.begin()+size+<span class="hljs-number">1</span>,in.end())</span></span>;<br>   root-&gt;left=<span class="hljs-built_in">mybuildTree</span>(prel,inl);<br>   root-&gt;right=<span class="hljs-built_in">mybuildTree</span>(prer,inr);<br>   <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++链表详解（概念+例题）</title>
    <link href="/2024/05/14/c++%E9%93%BE%E8%A1%A8%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%A6%82%E5%BF%B5+%E4%BE%8B%E9%A2%98%EF%BC%89/"/>
    <url>/2024/05/14/c++%E9%93%BE%E8%A1%A8%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%A6%82%E5%BF%B5+%E4%BE%8B%E9%A2%98%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>学不懂链表，写个博客浅浅记录一下链表的学习叭。</p><span id="more"></span><h3 id="一、数组与链表的区别"><a href="#一、数组与链表的区别" class="headerlink" title="一、数组与链表的区别"></a>一、数组与链表的区别</h3><p>面试中除了会问到栈和队列的区别，还可能会询问数组（顺序表）与链表的区别。我们也可以先从熟悉的数据结构：数组，通过分析它和链表的区别来体会链表的特征。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240517152625892.png" alt="image-20240517152625892"></p><h3 id="二、单链表的介绍"><a href="#二、单链表的介绍" class="headerlink" title="二、单链表的介绍"></a>二、单链表的介绍</h3><h4 id="1、单链表的结构"><a href="#1、单链表的结构" class="headerlink" title="1、单链表的结构"></a>1、单链表的结构</h4><h4 id="（1）图示"><a href="#（1）图示" class="headerlink" title="（1）图示"></a>（1）图示</h4><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240523151418436.png" alt="image-20240523151418436" style="zoom: 33%;" /><h4 id="（2）代码"><a href="#（2）代码" class="headerlink" title="（2）代码"></a>（2）代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Listnode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Listnode* next;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2、头插"><a href="#2、头插" class="headerlink" title="2、头插"></a>2、头插</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listcreatf</span><span class="hljs-params">(Listnode** head,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    Listnode* newnode=<span class="hljs-keyword">new</span> Listnode &#123;x,<span class="hljs-literal">NULL</span>&#125;;<br>    newnode-&gt;next=*head;  <span class="hljs-comment">//新指针指向原来的头指针</span><br>    *head=newnode;  <span class="hljs-comment">//新指针成为头指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>函数的第一个参数类型应该为<strong>二级指针</strong>，因为涉及到改变&#x2F;初始化头节点，这个操作需要为一级指针的值赋值。</p><h4 id="3、单链表的创建（尾插）"><a href="#3、单链表的创建（尾插）" class="headerlink" title="3、单链表的创建（尾插）"></a>3、单链表的创建（尾插）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listcreatb</span><span class="hljs-params">(Listnode** head,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//用new来创建一个新指针，值为x，指向为空   </span><br>    Listnode* newnode=<span class="hljs-keyword">new</span> Listnode &#123;x,<span class="hljs-literal">NULL</span>&#125;;<br>    <span class="hljs-keyword">if</span>(*head==<span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">//如果是空链表，将newnode作为头节点</span><br>        *head=newnode;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        Listnode* tail=*head;  <span class="hljs-comment">//每次插入新的节点都需要从头遍历</span><br>        <span class="hljs-keyword">while</span>(tail-&gt;next!=<span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//目的是找到尾节点（它的指向为空）</span><br>            tail=tail-&gt;next;<br>        tail-&gt;next=newnode;  <span class="hljs-comment">//将新节点连接在尾节点后面，作为新的尾节点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、链表的释放"><a href="#4、链表的释放" class="headerlink" title="4、链表的释放"></a>4、链表的释放</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listfree</span><span class="hljs-params">(Listnode** head)</span></span><br><span class="hljs-function"></span>&#123;<br>Listnode* cur;  <span class="hljs-comment">//新建一个节点</span><br>    <span class="hljs-keyword">while</span>(*head)&#123;<br>        cur=*head;  <span class="hljs-comment">//cur指向当前的头节点</span><br>        *head=cur-&gt;next;  <span class="hljs-comment">//下一位节点成为头节点</span><br>        <span class="hljs-built_in">delete</span>(cur);   <span class="hljs-comment">//删除头节点</span><br>        cur=<span class="hljs-literal">nullptr</span>;  <span class="hljs-comment">//必须置空，否则会成为野指针</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、链表的打印"><a href="#5、链表的打印" class="headerlink" title="5、链表的打印"></a>5、链表的打印</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listprint</span><span class="hljs-params">(Listnode* head)</span></span><br><span class="hljs-function"></span>&#123;<br>   listnode* cur=head;  <span class="hljs-comment">//cur节点指向头节点</span><br>   <span class="hljs-keyword">while</span>(cur)&#123;<br>      cout&lt;&lt;cur-&gt;data&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>;  <span class="hljs-comment">//依次打印</span><br>      cur=cur-&gt;next;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、删除链表中的节点"><a href="#6、删除链表中的节点" class="headerlink" title="6、删除链表中的节点"></a>6、删除链表中的节点</h4><h4 id="（1）删除头节点"><a href="#（1）删除头节点" class="headerlink" title="（1）删除头节点"></a>（1）删除头节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listdeletef</span><span class="hljs-params">(Listnode** head)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(*head==<span class="hljs-literal">NULL</span>)<br>      <span class="hljs-keyword">return</span>;<br>   <span class="hljs-keyword">else</span>&#123;<br>      Listnode* newnode=(*head)-&gt;next;<br>      <span class="hljs-built_in">delete</span>(*head);<br>      *head=newnode;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）删除尾节点"><a href="#（2）删除尾节点" class="headerlink" title="（2）删除尾节点"></a>（2）删除尾节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listdeleteb</span><span class="hljs-params">(Listnode** head)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(*head==<span class="hljs-literal">NULL</span>) <span class="hljs-comment">//空链表</span><br>      <span class="hljs-keyword">return</span>;<br>   <span class="hljs-keyword">if</span>((*head)-&gt;next==<span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">//只有一个节点</span><br>      <span class="hljs-built_in">delete</span>(*head);<br>      *head=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//需要置空</span><br>   &#125;<br>   <span class="hljs-keyword">else</span>&#123;<br>      Listnode* cur=*head;  <br>      Listnode* tmp=<span class="hljs-literal">NULL</span>;  <br>      <span class="hljs-keyword">while</span>(cur-&gt;next)&#123;<br>         tmp=cur;<br>         cur=cur-&gt;next;  <span class="hljs-comment">//找到尾节点</span><br>      &#125;<br>      <span class="hljs-built_in">delete</span>(cur);<br>      cur=<span class="hljs-literal">NULL</span>;<br>      tmp-&gt;next=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//tmp成为尾节点</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）删除等于给定值的所有节点"><a href="#（3）删除等于给定值的所有节点" class="headerlink" title="（3）删除等于给定值的所有节点"></a>（3）删除等于给定值的所有节点</h4><p>注意这个函数里会返回头节点因为函数参数只需要是一级指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Listnode* <span class="hljs-title">Listdelete</span><span class="hljs-params">(Listdode* head,<span class="hljs-type">int</span> x)</span>  </span><br><span class="hljs-function"></span>&#123;<br>   Listnode* tmp=<span class="hljs-literal">NULL</span>;Listnode* cur=head;<br>   <span class="hljs-keyword">while</span>(cur)&#123;<br>      <span class="hljs-keyword">if</span>(cur-&gt;data==x)&#123;<br>         <span class="hljs-keyword">if</span>(cur==head)&#123;   <span class="hljs-comment">//如果头节点就是要删除的节点</span><br>            head=cur-&gt;next;<br>            <span class="hljs-built_in">delete</span>(cur);<br>            cur=head;<br>         &#125;<br>         <span class="hljs-keyword">else</span>&#123;<br>            tmp-&gt;next=cur-&gt;next;<br>            <span class="hljs-built_in">delete</span>(cur);<br>            cur=tmp-&gt;next;<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>         tmp=cur;<br>         cur=cur-&gt;next;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）删除指定位置的节点"><a href="#（4）删除指定位置的节点" class="headerlink" title="（4）删除指定位置的节点"></a>（4）删除指定位置的节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">Listdeletepos</span><span class="hljs-params">(Listnode** head,Listnode* pos)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(*head==pos)&#123;<br>      *head=pos-&gt;next;<br>      <span class="hljs-built_in">delete</span>(pos);<br>      pos=<span class="hljs-literal">nullptr</span>;<br>   &#125;<br>   <span class="hljs-keyword">else</span>&#123;<br>      Listnode* cur=*head;<br>      <span class="hljs-keyword">while</span>(cur-&gt;next!=pos)&#123;<br>         cur=cur-&gt;next;<br>      &#125;<br>      cur-&gt;next=pos-&gt;next;<br>      <span class="hljs-built_in">delete</span>(pos);<br>      pos=<span class="hljs-literal">nullptr</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-链表元素的查找"><a href="#7-链表元素的查找" class="headerlink" title="7.链表元素的查找"></a>7.链表元素的查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Listnode* <span class="hljs-title">Listfind</span><span class="hljs-params">(Listnode* head,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>Listnode* cur=head;<br>   <span class="hljs-keyword">while</span>(cur)&#123;<br>      <span class="hljs-keyword">if</span>(cur-&gt;data==x)<br>         <span class="hljs-keyword">return</span> cur;<br>      <span class="hljs-keyword">else</span><br>         cur=cur-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-在指定位置后插入节点"><a href="#8-在指定位置后插入节点" class="headerlink" title="8.在指定位置后插入节点"></a>8.在指定位置后插入节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Listinsertb</span><span class="hljs-params">(Listnode* pos,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>   Listnode* newnode=<span class="hljs-keyword">new</span> Listnode &#123;x,<span class="hljs-literal">NULL</span>&#125;;<br>   newnode-&gt;next=pos-&gt;next;<br>   pos-&gt;next=newnode;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、单链表的应用-例题"><a href="#三、单链表的应用-例题" class="headerlink" title="三、单链表的应用&amp;例题"></a>三、单链表的应用&amp;例题</h3><h4 id="1-链表反转"><a href="#1-链表反转" class="headerlink" title="1.链表反转"></a>1.链表反转</h4><p>力扣题目连接：<a href="https://leetcode.cn/problems/reverse-linked-list/description/">206. 反转链表 - 力扣（LeetCode）</a></p><img src="C:/Users/姚姚/AppData/Roaming/Typora/typora-user-images/image-20240518103637208.png" alt="image-20240518103637208" style="zoom: 67%;" /><p><strong>方法一：迭代</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span></span>&#123;<br>         ListNode* prev=<span class="hljs-literal">nullptr</span>;<br>         ListNode* curr=head;<br>         <span class="hljs-keyword">while</span>(curr)&#123;<br>            ListNode* next=curr-&gt;next;<br>            curr-&gt;next=prev;<br>            pre=curr;<br>            curr=next;<br>         &#125;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>**-&gt;**图解分析：</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240523151338924.png" alt="image-20240523151338924" style="zoom: 33%;" /><p><strong>方法二：递归</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span></span>&#123;<br>         <span class="hljs-keyword">if</span>(!head||!head-&gt;next)<br>            <span class="hljs-keyword">return</span> head;<br>         ListNode* newhead=<span class="hljs-built_in">reverseList</span>(head-&gt;next);<br>         head-&gt;next-&gt;next=head;<br>         head-&gt;next=<span class="hljs-literal">nullptr</span>;<br>         <span class="hljs-keyword">return</span> newhead;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-找到链表的中间节点"><a href="#2-找到链表的中间节点" class="headerlink" title="2.找到链表的中间节点"></a>2.找到链表的中间节点</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/middle-of-the-linked-list/description/">876. 链表的中间结点 - 力扣（LeetCode）</a></p><p>题目描述：给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。</p><p><strong>方法一：遍历法</strong></p><p>先遍历一遍找到一共有多少个节点，再遍历一遍找到中间节点。当链表长度较长的时候，这种方法较为浪费时间。下面的方法只需要遍历一次。</p><p><strong>方法二：快慢指针法：</strong></p><p>定义两个指针，慢指针依次只走一步，快指针一次走两步。当快指针走到终点时，慢指针就刚好走到了中间节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">middleNode</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>ListNode* slow,ListNode* fast;<br>   slow=fast=head;<br>   <span class="hljs-keyword">while</span>(fast&amp;&amp;fast-&gt;next)&#123;<br>      slow=slow-&gt;next;<br>      fast=fast-&gt;next-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-移除重复节点"><a href="#3-移除重复节点" class="headerlink" title="3.移除重复节点"></a>3.移除重复节点</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/remove-duplicate-node-lcci/description/">面试题 02.01. 移除重复节点 - 力扣（LeetCode）</a></p><p>题目描述：编写代码，移除未排序链表中的重复节点。保留最开始出现的节点。</p><p><strong>哈希表法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">removeDuplicateNodes</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>   ListNode* pre=<span class="hljs-literal">NULL</span>,*cur=head;  <span class="hljs-comment">//前后指针</span><br>   unordered_set&lt;<span class="hljs-type">int</span>&gt; list;  <span class="hljs-comment">//初始化哈希表</span><br>   <span class="hljs-keyword">while</span>(cur)&#123;  <span class="hljs-comment">//当指针不为空</span><br>      <span class="hljs-keyword">if</span>(list.<span class="hljs-built_in">find</span>(cur&gt;val)==list.<span class="hljs-built_in">end</span>())&#123;  <span class="hljs-comment">//没有该元素</span><br>         list.<span class="hljs-built_in">insert</span>(cur-&gt;val);  <span class="hljs-comment">//插入</span><br>         pre=cur;<br>      &#125;     <br>      <span class="hljs-keyword">else</span><br>         pre-&gt;next=cur-&gt;next;  <span class="hljs-comment">//如果表中已经有该元素，删除该指针</span><br>      cur=cur-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> head;  <span class="hljs-comment">//若头指针就为空则直接返回</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-找到链表的倒数第k个指针"><a href="#4-找到链表的倒数第k个指针" class="headerlink" title="4.找到链表的倒数第k个指针"></a>4.找到链表的倒数第k个指针</h4><p>力扣题目链接：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kthToLast</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>ListNode* pre,*cur;<br>   pre=cur=head;<br>   <span class="hljs-keyword">while</span>(k--)<br>      pre=pre-&gt;next;<br>   <span class="hljs-keyword">while</span>(pre)&#123;<br>      pre=pre-&gt;next;<br>      cur=cur-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> cur.val;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-判断链表是否为回文链表"><a href="#5-判断链表是否为回文链表" class="headerlink" title="5.判断链表是否为回文链表"></a>5.判断链表是否为回文链表</h4><p>力扣题目链接：</p><p><strong>方法一：复制元素到数组中再进行判断</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; list;<br>   <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">nullptr</span>)&#123;<br>      list.<span class="hljs-built_in">emplace_back</span>(head-&gt;val);<br>      head=head-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=list.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&lt;j;i++,j--)&#123;<br>      <span class="hljs-keyword">if</span>(list[i]!=list[j])<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二：递归</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    ListNode* frontPointer;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">recursivelyCheck</span><span class="hljs-params">(ListNode* currentNode)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (currentNode != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">recursivelyCheck</span>(currentNode-&gt;next)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (currentNode-&gt;val != frontPointer-&gt;val) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            frontPointer = frontPointer-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        frontPointer = head;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursivelyCheck</span>(head);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="6-相交链表"><a href="#6-相交链表" class="headerlink" title="6.相交链表"></a>6.相交链表</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">面试题 02.07. 链表相交 - 力扣（LeetCode）</a></p><p>题目描述：给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。题目数据 保证 整个链式结构中不存在环。注意，函数返回结果后，链表必须 保持其原始结构 。</p><p><strong>双指针法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(headA==<span class="hljs-literal">nullptr</span>||headB==<span class="hljs-literal">nullptr</span>)<br>      <span class="hljs-keyword">return</span> null;<br>   ListNode* n1=headA,*n2=headB;<br>   <span class="hljs-keyword">while</span>(n1!=n2)&#123;<br>      n1=n1==<span class="hljs-literal">nullptr</span>?headB:n1-&gt;next;<br>      n2=n2==<span class="hljs-literal">nullptr</span>?headA:n2-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> n1;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-环路检测"><a href="#7-环路检测" class="headerlink" title="7.环路检测"></a>7.环路检测</h4><p>力扣题目链接：<a href="https://leetcode.cn/problems/linked-list-cycle-lcci/description/">面试题 02.08. 环路检测 - 力扣（LeetCode）</a></p><p>题目描述：给定一个链表，如果它是有环链表，实现一个算法返回环路的开头节点。若环不存在，请返回 null。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。注意：<code>pos</code> 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p><strong>哈希表法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>   unordered_set&lt;ListNode*&gt; list;<br>   <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">nullptr</span>)&#123;<br>      <span class="hljs-keyword">if</span>(list.<span class="hljs-built_in">count</span>(head))<br>         <span class="hljs-keyword">return</span> head;<br>      list.<span class="hljs-built_in">insert</span>(head);<br>      head=head-&gt;next;<br>   &#125;<br>   <span class="hljs-keyword">return</span> null;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络面经</title>
    <link href="/2024/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F/"/>
    <url>/2024/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<p>三、网络的七层协议，TCP UDP的区别 ，mac地址，ip 端口 子网掩码分别是干什么用的</p><p><strong>https 攻击方式</strong></p><p>1、数据被监听2、数据被篡改</p><p><strong>进程间有哪些通信方式</strong></p><p>管道、共享内存、消息队列、信号</p><p><strong>https是怎么加密的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509223423753.png" alt="image-20240509223423753"></p><p>加密就是把明⽂(要传输的信息)进行⼀系列变换, ⽣成密文；解密就是把密⽂再进⾏⼀系列变换, 还原成明文。</p><p>对称加密（算法公开、计算量⼩、加密速度快、加密效率高）、非对称加密（算法强度复杂、运算速度很慢）、数据摘要</p><p><strong>cpu调度算法的评价指标?</strong></p><p>cpu利用率、系统吞吐量、周转时间、等待时间、响应时间</p><p><strong>为什么说tcp是可靠的?</strong></p><p>TCP保证可靠性一般有以下几种方法：</p><p>检验和：在数据传输过程中，把传输的数据当作一个16位整数。吧所有的数据加起来，最前面的进位补到最后一位，然后取反得到校验和。发送方和接收方验证校验和是否相同。不相同则数据传输有误，相同也可能有问题。<br>确认应答：ACK和序列号（一应一答）机制保证数据的完整性（三次握手于四次挥手过程中通过比对Seq和ACK来实现）<br>超时重传：发送数据包在一定的时间周期内没有收到相应的ACK，等待一定的时间，超时之后就认为这个数据包丢失，就会重新发送（也就是发送数据后，长时间没收到回应，会把数据再发一次。）<br>连接管理：三次握手，四次挥手<br>最大消息长度：理想的情况下是该长度的数据刚好不被网络层分块。<br>拥塞控制：控制传输上流量（发送数据时开始是慢启动，先发送一点点数据去探测网络拥塞不拥塞，如果不拥塞了，则大量的发送数据。如果突然拥塞了，则又很慢的发送数据。这样是为了尽可能快的发送数据，避免网络拥塞造成一系列问题）<br>流量控制：TCP利用滑动窗口实现流量控制，流量控制是为了控制发送方的发送速率，保证接收方可以及时接收</p><p><strong>网络协议有哪些？</strong></p><p>1、HTTP（Hypertext Transfer Protocol）协议是一种用于传输超文本的协议，通常用于在Web浏览器和Web服务器之间传递数据。它基于请求-响应模型：客户端发送HTTP请求，服务器返回HTTP响应。通信使用明文进行，不具备加密性。lHTTP广泛应用于Web开发，用于获取网页、传输HTML、CSS、JavaScript等资源。它的无状态特性使其适用于快速、轻量级的数据传输。</p><p>HTTP协议的特点</p><p>支持服务器&#x2F;客户端模式</p><p>传输较快速，客户端向服务器发送请求，只需要传输请求方法和路径</p><p>灵活，HTTP允许传输任意类型的数据对象</p><p>无连接，每次连接只能处理一个请求，服务器处理完客户端请求，客户端收到响应后就断开连接</p><p>无状态，协议本身对事务处理没有记忆能力，如果后序连接需要之前发送的信息时就需要重传</p><p>(1)HTTP1.0和HTTP1.1的区别：</p><p>长连接：HTTP1.0只支持浏览器与服务器的短连接，即每次请求都要重新建立连接，服务器无法记录每个历史请求，HTTP1.1支持长连接即在一次连接下，浏览器可以向服务器发送多次请求</p><p>增加Host字段：HTTP1.0中认为每个服务器都绑定这唯一一个IP，所有发送的请求头URL中没有host信息，而HTTP1.1在请求和响应中都支持了host头域，且请求消息中如果没有Host头域会报告一个错误(400 Bad Request)</p><p>缓存：HTTP1.1在1.0的基础上加入了一些cache的新特性，当缓存对象的Age超过Expire时变为stale对象，cache不需要直接抛弃stale对象，而是与源服务器进行重新激活（revalidation）。</p><p>错误提示：HTTP1.0中定义了16个状态码，对错误或警告的提示不够具体。HTTP1.1引入了一个Warning头域，增加对错误或警告信息的描述，并且还新增了24个状态响应码，如409(Conflict)表示请求的资源与资源的当前状态发生冲突；410(Gone)表示服务器上的某个资源被永久性的删除</p><p>(2)HTTP1.X和HTTP2.0的区别</p><p>增加二进制格式解析：HTTP1.X解析基于文本，而文本格式本身就具有多样性，很多场景下不方便，而引入二进制后，只有0和1组合，使解析更加方便也增强了健壮性</p><p>多路复用：即每个request都是是用作连接共享机制的，每个request都对应一个id，使一个连接可以有多个请求，再根据id将request归属到不同的服务端请求里</p><p>header压缩：HTTP1.X中，每次传输都要写点header头，占用了大量数据，因此HTTP2.0在客户端和服务端各保存了一份header fields表，每次传输时只需传输header的更新信息，将header fields表更新即可实现header传输</p><p>2、SMTP（Simple Mail Transfer Protocol）是一种电子邮件传输协议，用于在邮件客户端和邮件服务器之间传递电子邮件。它定义了邮件的格式以及在不同设备之间的传递方式。</p><p>3、FTP（File Transfer Protocol）是一种用于在计算机之间传输文件的协议。它支持用户通过用户名和密码进行身份验证，并提供文件上传和下载功能。</p><p>4、DNS（Domain Name System）是一种将域名映射到IP地址的分布式数据库系统。它允许用户使用易记的域名而不是复杂的IP地址访问互联网资源。</p><p><strong>避免缓存雪崩如何实现</strong></p><p>缓存雪崩是指在某个时间点，大量缓存同时失效，导致大量请求直接落到<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1001.2101.3001.7020">数据库</a>上，造成数据库负载激增的现象。</p><p>1 合理设置缓存失效时间：<br>将缓存的失效时间分散开，避免同时失效。可以在原有的失效时间基础上，加上一个随机的时间偏移，或者使用带有范围的失效时间。</p><p>2 采用永不过期策略：<br>对于热点数据，可以考虑使用永不过期的策略，即在缓存中永远不主动删除，而在数据更新时手动刷新缓存。这样可以避免大量缓存同时失效的情况。</p><p>3 使用多级缓存：<br>引入多级缓存架构，例如本地缓存、分布式缓存（如Redis）、全局缓存（如CDN），这样即使一个级别的缓存失效，其他级别的缓存仍然可以提供服务，降低缓存雪崩的风险。</p><p>4 缓存预热：<br>在系统启动或低峰期，提前加载热门数据到缓存中，避免在高峰期大量请求涌入时触发缓存失效。</p><p>5 限流和熔断：<br>实施限流和熔断机制，控制并发访问的数量，防止瞬时请求过多导致缓存雪崩。</p><p>6 缓存穿透保护：<br>使用类似布隆过滤器算法，防止缓存穿透，即查询一个不存在的数据导致缓存和数据库都不命中。</p><p>7 灾备机制：<br>部署灾备机制，当主缓存出现问题时，可以切换到备用缓存，保障系统的可用性。</p><p>8 分批更新缓存：<br>当大量数据需要更新时，采用分批更新的方式，避免一次性大规模的缓存更新。</p><p><strong>protocol buffer</strong></p><p><strong>Speed协议</strong></p><p><strong>2.TCP和UDP区别</strong><br>① TCP协议是有连接的，即在传输实际数据之前TCP的客户端和服务器端必须通过三次握手建立连接，会话结束后还要结束连接。而UDP是无连接的。<br>②TCP协议保证数据按序发送以及到达，超时重传来保证可靠性，但是UDP不保证按序到达，不保证到达，只是努力交付，即使是按序发送的序列，也不保准按序送到。<br>③TCP协议所需的资源多，首部需要20个字节，UDP首部只需要8个字节<br>④TCP有流量控制和拥塞控制，UDP有没有网络堵塞不会影响发送端的发送速率。<br>⑤TCP是一对一连接，而UDP是一对一 一对多 多对多的通信<br>⑥TCP面向的是字节流的服务，UDP面向的是报文的服务。</p><p>4.<strong>进程和程序的区别</strong><br>①进程是程序的一次执行。<br>②进程是可以并行执行的计算<br>③进程是一个程序与其使用的数据在处理机上顺序执行时发生的活动。<br>④进程是系统进行资源分配和调度的一个独立单位<br>本质区别：<br>①程序是永存的，进程是暂时的<br>②进程有并发性，程序没有<br>③二者不是一一对应关系，一个程序可以对应多个进程，多个进程可执行同一个程序，一个进程可执行一个或者几个程序<br>④进程是竞争计算机资源的基本单位，但是程序不是。</p><h5 id="为啥不多进程而是多线程呢？"><a href="#为啥不多进程而是多线程呢？" class="headerlink" title="为啥不多进程而是多线程呢？"></a>为啥不多进程而是多线程呢？</h5><p>答：线程廉价且启动较快，对系统资源的冲击比较小，多进程不可预测且测试困难。</p><p>7.读写锁（这个不会，但好像也挺基础的）<br>读锁是共享的<br>　写锁是排他的<br>　<br>读-读能共存，<br>读-写不能共存，<br>写-写不能共存。</p><p>8.堆和栈<br>栈内存：存储局部变量，更新速度快，声明周期短<br>堆内存：存储数组和对象，凡是new建立的都是在堆中，堆中存放的是实体，实体用于封装数据，java垃圾回收（不定时）。</p><p>9.虚拟内存和实际内存（操作系统学的，有点久远）<br>当虚拟内存中的值真正需要用的时候，物理内存才会开辟一段地址来存储虚拟内存中的值<br>所以真正能使用的物理内存的大小则为：虚拟内存(pagefile.sys) + 物理内存</p><p>10.抢占式进程调度（这个也不会，菜哭了）<br>最常见的现象是你这个进程运行时间太长了，是时候切换到另一个进程了</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509221747850.png" alt="image-20240509221747850"></p><h6 id="tcp和udp应用场景"><a href="#tcp和udp应用场景" class="headerlink" title="tcp和udp应用场景"></a>tcp和udp应用场景</h6><p>tcp：文件传输、接收邮件、远程登录<br>udp：在线视频、qq聊天、广播通信</p><p>对于3次握手：主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。<br>对于4次挥手：其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。</p><p>拥塞控制主要是四个算法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">慢启动<br>拥塞避免<br>拥塞发生<br>快速恢复<br></code></pre></td></tr></table></figure><p><strong>浏览器输入一个URL按下回车后，其流程是？</strong></p><p>分析：如果要连接到远程服务器，首先要知道服务器的IP地址和端口，然后发送请求到服务器，服务器再响应。因此寻址和如何建立连接是关键。</p><p>步骤：</p><p>（1）进行寻址：若浏览器缓存中存有URL的对应IP，则直接查询IP；否则访问DNS（Domain Name System）进行寻址（Domain Name Resolution）。</p><p>（2） DNS或者URL Cache返回网页服务器的IP地址。</p><p>（3）浏览器与网页服务器进行三次握手建立TCP连接。由于是网页浏览服务，故连接到服务器的80端口。</p><p>（4）浏览器与服务器建立HTTP会话（Session），接收来自服务器的HTTP数据。</p><p>（5）浏览器解析HTTP数据，在本地窗口内渲染并显示网页。</p><p>（6）当浏览器页面被关闭时，终止HTTP会话并关闭连接。</p><p><strong>多线程建立有哪几种方法</strong></p><p>继承thread、建立线程池、实现Runnable、实现Callable</p><p><strong>多线程并发的三大特性</strong></p><p>可见性、原子性（要么全部执行且不会被打乱要么全部不执行）、有序性</p><h3 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h3><p>浏览器多样化，需要考虑兼容性的问题，传统方式布局比较繁杂</p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>移动端浏览器大部分内核为<a href="https://so.csdn.net/so/search?q=webkit&spm=1001.2101.3001.7020">webkit</a>，不需要考虑兼容性的问题，且移动端可以放心使用flex弹性布局</p><p>移动端技术解决方案</p><p>移动端浏览器<br>移动端浏览器基本以webkit内核为主,因此我们就考虑webkit兼容性问题<br>我们可以放心使用H5标签和css3样式<br>同时我们浏览器的私有前缀我们只需要考虑添加webkit即可</p><p>css初始化 normalize.css<br>移动端css初始化推荐使用normalize.css<br>好处<br>保护了有价值的默认值<br>修复了浏览器的bug<br>是模块化的<br>拥有详细的文档<br>网址 : <a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><p>css3 盒子模型 box-sizing<br>box-sizing:border-box<br>padding和border不会在撑大盒子了<br>默认值<br>box-sizing:content-box<br>padding和border和原来一样会在撑大盒子</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>计网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp面经（杂乱版）</title>
    <link href="/2024/05/09/cpp%E9%9D%A2%E7%BB%8F/"/>
    <url>/2024/05/09/cpp%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>什么是虚函数？</strong><br>被 <a href="https://so.csdn.net/so/search?q=virtual&spm=1001.2101.3001.7020">virtual</a> 关键字修饰的成员函数称为虚函数。<br><a href="https://so.csdn.net/so/search?q=%E8%99%9A%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">虚函数</a>的作用是实现多态性，即通过基类访问派生类的函数。<br><strong>什么是纯虚函数？</strong><br>在虚函数后面添加 &#x3D;0 ，虚函数就成为<a href="https://so.csdn.net/so/search?q=%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">纯虚函数</a>，<br>在很多情况下，基类生成对象很不合理。为了解决这个问题，引入了纯虚函数的概念，将函数定义为纯虚函数，派生类中必须重写实现纯虚函数。对于实现了纯虚函数的子类，该纯虚函数在子类中就变成了虚函数。</p><h5 id="auto-ptr能作为vector的元素吗？为什么？"><a href="#auto-ptr能作为vector的元素吗？为什么？" class="headerlink" title="auto_ptr能作为vector的元素吗？为什么？"></a>auto_ptr能作为vector的元素吗？为什么？</h5><p>答：不可以。<br>当复制一个auto_ptr时，它所指向的对象的所有权被交到复制的auto_ptr上面，而它自身将被设置为null。复制一个auto_ptr意味着改变它的值。</p><p><strong>死锁的四个必要条件</strong></p><p>1、 互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</p><p>2、不可剥夺条件:进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能由获得该资源的进程自己来释放（只能是主动释放)。</p><p>3、 请求与保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</p><p>4、循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被链中下一个进程所请求。</p><pre><code class="hljs">预防：通过设置某些限制条件，以破坏产生死锁的条件，来防止发生死锁。避免：系统在分配资源时根据资源的使用情况提前作出预测，从而避免死锁的发生。检测：允许系统在运行的过程中产生死锁，但是，系统中有相应的管理模块可以及时检测出已经产生的死锁，并且精确地确定与死锁有关的进程和资源，然后采取适当措施，清除系统中已经产生的死锁。解除：与检测死锁相配套的一种措施，用于将进程从死锁状态下解脱出来。</code></pre><p><strong>进程调度</strong></p><p>在多道程序系统中，进程的数量往往多于处理机的个数，因此进程争用处理机的情况在所难免。处理机调度是对处理机进行分配，即从就绪队列中按照一定的算法（公平、高效）选择一个进程并将处理机分配给它运行，以实现进程并发执行。</p><p>先来先服务（FCFS）调度算法、短作业优先（SJF）调度算法、优先级调度算法、高响应比优先调度算法</p><p><strong>进程与线程的区别</strong></p><p>本质区别：进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位。</p><p>包含关系：一个进程至少有一个线程，线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p><p>资源开销：每个进程都有独立的地址空间，进程之间的切换会有较大的开销；线程可以看做轻量级的进程，同一个进程内的线程共享进程的地址空间，每个线程都有自己独立的运行栈和程序计数器，线程之间切换的开销小。</p><p>影响关系：一个进程崩溃后，在保护模式下其他进程不会被影响，但是一个线程崩溃可能导致整个进程被操作系统杀掉，所以多进程要比多线程健壮。</p><p><strong>一个基本的事实前提</strong>：<strong>一个CPU在一个瞬间只能处理一个任务</strong>。</p><p>并发（Concurrent）：在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。<br>同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</p><p>并行（Parallel）：当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。其实决定并行的因素不是CPU的数量，而是CPU的核心数量，比如一个CPU多个核也可以并行。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509203458598.png" alt="image-20240509203458598"></p><p><strong>哈希冲突</strong></p><p>当两个不同的数经过哈希函数计算后得到了同一个结果，即他们会被映射到哈希表的同一个位置时，即称为发生了哈希冲突。简单来说就是哈希函数算出来的地址被别的元素占用了。</p><h6 id="开放定址法：我们在遇到哈希冲突时，去寻找一个新的空闲的哈希地址。（链地址法、公共溢出区法）"><a href="#开放定址法：我们在遇到哈希冲突时，去寻找一个新的空闲的哈希地址。（链地址法、公共溢出区法）" class="headerlink" title="开放定址法：我们在遇到哈希冲突时，去寻找一个新的空闲的哈希地址。（链地址法、公共溢出区法）"></a><strong>开放定址法：我们在遇到哈希冲突时，去寻找一个新的空闲的哈希地址。</strong>（链地址法、公共溢出区法）</h6><p>数据库索引<br><strong>堆栈的区别</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">一个由c/C++编译的程序占用的内存分为以下几个部分 <br>  <span class="hljs-number">1</span>、栈区（stack）―   由编译器自动分配释放。用来存储函数调用时的临时信息的结构，存放为运行时函数分配的局部变量、函数参数、返回数据、返回地址等。 <br>  <span class="hljs-number">2</span>、堆区（heap） ―   一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。<br>     注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。 <br>  <span class="hljs-number">3</span>、全局区（静态区）（<span class="hljs-type">static</span>）―，全局变量和静态变量的存储是放在一块的，<br>     初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 - 程序结束后有系统释放 <br>  <span class="hljs-number">4</span>、文字常量区  ―常量字符串就是放在这里的。 程序结束后由系统释放 <br>  <span class="hljs-number">5</span>、程序代码区―存放函数体的二进制代码。<br></code></pre></td></tr></table></figure><p><strong>栈和队列的区别、数组和链表有什么区别</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509163720074.png" alt="image-20240509163720074"></p><p>c语言中常用的数据结构<br><strong>两个堆怎么实现一个队列</strong><br>二叉树的前中后序遍历输出结果</p><ul><li><p>HashMap原理，为什么每次扩容都是2的倍数，为什么由头插改成了尾插，环化是怎么引起的</p></li><li><p>快排和堆排的原理</p><p>当面试官询问 C++ 相关的常见八股知识时，他们可能会深入以下几个方面：</p><ol><li><p><strong>C++ 的特性和优势</strong>：</p><ul><li>C++ 是一种通用编程语言，继承了 C 语言的功能并加入了面向对象编程的特性。</li><li>C++ 具有高效性、灵活性和可移植性等优势，可以直接操作硬件并实现高性能的应用程序。</li></ul></li><li><p><strong>类与对象</strong>：</p><ul><li>类是用户自定义的数据类型，用于描述具有相同属性和行为的对象的集合。</li><li>对象是类的一个实例，具有类定义的属性和行为。</li><li>构造函数用于初始化对象的状态，析构函数用于清理对象所占用的资源。</li></ul></li><li><p><strong>继承与多态</strong>：</p><ul><li>继承是面向对象编程中一种机制，允许一个类继承另一个类的属性和行为。</li><li>多态性允许不同对象对同一消息做出不同的响应，提高了代码的灵活性和可扩展性。</li><li>虚函数是在基类中声明的带有 virtual 关键字的函数，派生类可以重写这些函数以实现多态。</li></ul></li><li><p><strong>模板与泛型编程</strong>：</p><ul><li>模板是一种通用的代码结构，可以用于生成特定数据类型的函数或类。</li><li>模板的特化和偏特化允许针对特定类型提供定制的实现。</li><li>泛型编程是一种编程范式，旨在编写与特定数据类型无关的代码。</li></ul></li><li><p><strong>异常处理</strong>：</p><ul><li>异常是程序执行过程中发生的意外事件。</li><li>异常处理是一种机制，用于在程序中检测、报告和处理异常。</li><li>C++ 中的异常处理关键字包括 try、catch 和 throw。</li></ul></li><li><p><strong>内存管理</strong>：</p><ul><li>栈是一种自动分配和释放内存的数据结构，用于存储函数调用、局部变量等。</li><li>堆是一种动态分配和释放内存的数据结构，用于存储程序运行时动态创建的对象。</li></ul></li><li><p><strong>STL（标准模板库）</strong>：</p><ul><li>STL 提供了丰富的数据结构和算法，包括向量、链表、映射、集合等容器以及排序、搜索、迭代等算法。</li><li>迭代器是一种抽象的数据访问接口，用于遍历容器中的元素。</li></ul></li><li><p><strong>并发编程</strong>：</p><ul><li>C++11 引入了一套新的并发编程库，包括线程、原子操作、互斥量、条件变量等。</li><li>线程同步的机制包括互斥量、条件变量和原子操作，用于确保多个线程之间的数据一致性和同步执行。</li></ul></li></ol><p>以上是对常见 C++ 八股知识的详细解答，你可以根据自己的理解和经验进一步扩展和完善。</p></li><li><p><strong>重载重写隐藏</strong></p><p>一、重载</p><ul><li>相同的作用域内</li><li>参数列表不同（参数的类型，个数，顺序不同）</li><li>函数名字相同；函数返回类型相同</li></ul><p>二、重写</p><ul><li>不在同一个作用域（分别位于<a href="https://so.csdn.net/so/search?q=%E6%B4%BE%E7%94%9F%E7%B1%BB&spm=1001.2101.3001.7020">派生类</a>与基类） ；</li><li>基类函数必须有 <strong>virtual</strong> 关键字，不能有 static 。</li><li>函数名字相同；参数相同；返回值相同</li><li>函数体不同</li></ul><p>三、隐藏</p><p>​不在同一个作用域（分别位于派生类与基类） ；</p><p>​函数名字相同；</p><p>​参数、返回值、函数体都可以不同；</p></li><li><p><strong>什么函数可以&#x2F;不可以声明为虚函数</strong></p></li></ul><p>​<a href="https://so.csdn.net/so/search?q=%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">析构函数</a> 普通的成员函数</p><p>​普通函数（非成员函数）、构造函数、内联函数、静态函数、友元函数。</p><ul><li><p><strong>vector和list的使用场景</strong></p><p>vector适用：对象数量变化少，简单对象，随机访问元素频繁<br>list适用：对象数量变化大，对象复杂，插入和删除频繁<br>最大的区别是,list是双向的，而vector是单向的。<br>因此在实际使用时，如何选择这三个容器中哪一个，应根据你的需要而定，一般应遵循下面的原则：<br>1）、如果你需要高效的随即存取，而不在乎插入和删除的效率，使用vector<br>2)、如果你需要大量的插入和删除，而不关心随即存取，则应使用list<br>3)、如果你需要随即存取，而且关心两端数据的插入和删除，则应使用deque。</p></li><li><p><strong>stack适配器的底层容器是什么，能不能用vector，为什么</strong></p></li></ul><p>1 stack 堆栈适配器 （ 可用的容器类型 vector deque list）默认是deque<br>2 queue 队列适配器 ( 可用的容器类型 deque list)默认的容器是deque<br>3 priority_queue 优先级队列 (可用的容器类型 deque vector)默认是vector|<br>                        底层容器必须支持随机访问迭代器，因此底层容器可以是deque，不能是list</p><ul><li><strong>什么情况下需要使用多继承</strong></li></ul><p>一个子类拥有很多父类 ,一般指一个类有2个以上父类。</p><ul><li>STL中的多继承</li><li><strong>虚继承原理</strong></li></ul><p>所谓虚继承（virtual）就是子类中只有一份间接父类的数据。该技术用于解决<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BB%A7%E6%89%BF&spm=1001.2101.3001.7020">多继承</a>中的父类为非虚基类时出现的数据冗余问题，即菱形继承问题。</p><p>在上图中，父类数据并不存放在虚继承的子类中，那么子类怎么找到父类数据呢？</p><p>——在虚继承的类中，会定义一个<strong>虚基表指针vbptr</strong>，<strong>指向虚基表</strong>。(虚表在<strong>构造函数之前</strong>写入)</p><p>而虚<strong>基表中会存在偏移量，这个量就是表的地址到父类数据地址的距离</strong>。</p><p>我们可以通过调试，找到虚基表指针和虚基表：</p><ul><li><strong>右值引用和移动语义</strong></li></ul><p>可以被取地址的、有名字的都是左值，反之不能取地址的、没有名字的就是右值。</p><p>右值：<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F&spm=1001.2101.3001.7020">字面常量</a>，表达式，函数的非引用返回值，在表达式求值过程中临时创建的对象，这些使用过后就被销毁的资源</p><p>在现有的 C++ 机制中，我们可以定义拷贝构造函数和赋值函数。要实现转移语义，需要定义转移构造函数，还可以定义转移赋值操作符。如果转移构造函数和转移拷贝操作符没有定义，那么就遵循现有的机制，拷贝构造函数和赋值操作符会被调用。普通的函数和操作符也可以利用右值引用操作符实现转移语义。</p><ul><li><strong>C++内存管理方式</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240509170056071.png" alt="image-20240509170056071"></p><p>一、自动存储</p><p>在函数内部定义的常规变量使用自动存储空间，被称为<strong>自动变量</strong>（automatic variable），这意味着它们在所属的函数被调用时自动产生，在该函数结束时消亡。<strong>自动变量通常存储在栈中</strong>。这意味着执行代码块时，其中的变量将依次加入到栈中，而在离开代码块时，将按相反的顺序释放着些变量，着被称为<a href="https://so.csdn.net/so/search?q=%E5%90%8E%E8%BF%9B%E5%85%88%E5%87%BA&spm=1001.2101.3001.7020">后进先出</a>（LIFO）。因此，在程序执行过程中，栈将不断地增大和缩小。</p><p>二、静态存储</p><p>静态存储是整个程序执行期间都存在的存储方式。使变量称为静态的方式有两种：一种是在函数外面定义它；另一种是在声明变量时使用关键字static</p><p>三、动态存储<br>new和delete运算符提供了一种比自动变量和静态变量更灵活的方法。它们管理了一个内存池，这在C++中被称为自由存储空间（free store）或堆（heap）。该内存池同用于静态变量和自动变量的内存是分开的。new和delete让您能够在一个函数中分配内存，而在另一个函数中释放它。因此，数据的声明周期不完全受程序或函数的生命时间控制。与使用常规变量相比，使用new和delete让程序员对程序如何使用内存有更大的控制权。然而，内存管理也更复杂了。在栈中，自动添加和删除机制使得占用的内存总是连续的，单new和delete的相互影响可能导致占用的自由存储区不连续，这使得跟踪新分配内存的位置更困难。</p><p>四、线程存储</p><ul><li>shared ptr的具体实现（问的很细</li></ul><p><strong>栈、堆、内存泄漏</strong><br>如果使用new在自由存储空间（或堆）上创建变量后，没有调用delete。会发生什么？</p><p>即使包含指针的内存（由于作用域规则和对象生命周期的原因而）被释放，在自由存储空间上动态分配的变量或结构依然存在。</p><p>则将会无法访问自由存储空间的结构，因为指向这些内存的指针无效。</p><p>这将导致<strong>内存泄露</strong>，被泄漏的内存在程序的整个生命周期将不可使用，这些内存被分配，但无法被使用。</p><p><strong>引用和指针的区别</strong></p><p>\1. 指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元；而引用仅是个别名；</p><p>\2. 引用使用时无需解引用(*)，指针需要解引用；</p><p>\3. 引用只能在定义时被初始化一次，之后不可变；指针可变；</p><p>\4. 引用没有 const，指针有 const；</p><p>\5. 引用不能为空，指针可以为空；</p><p>\6. “sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p><p>\7. 指针和引用的自增(++)运算意义不一样；</p><p>\8. 指针可以有多级，但是引用只能是一级（int **p；合法 而 int &amp;&amp;a是不合法的）</p><p>9.从内存分配上看：程序为指针变量分配内存区域，而引用不需要分配内存区域。</p><p><strong>tcp滑动窗口</strong></p><p>滑动窗口机制是TCP协议中实现流量控制和可靠传输的关键技术。它的主要工作原理如下：</p><ol><li>发送方维护一个发送窗口，这是一个连续的字节序列，表示发送方可以发送的字节数范围。发送窗口由两个参数定义：窗口的起始字节和窗口的大小。发送方将数据分成多个数据段，并按顺序发送到接收方。</li><li>接收方使用确认号来通知发送方已成功接收到的数据。确认号表示接收方期望接收的下一个字节的序列号。同时，接收方还会通告一个窗口大小，告诉发送方自己的接收缓冲区还能容纳多少字节的数据。</li><li>发送方根据接收方通告的窗口大小进行数据发送控制。如果接收方的窗口变大，发送方可以发送更多的数据；如果接收方的窗口变小，发送方需要适应减少的窗口大小。这样，发送方可以持续发送数据而不需要等待每个数据段的确认，从而提高了传输效率。</li></ol><p>滑动窗口机制在数据传输中起到了流量控制和可靠性传输的重要作用。通过动态调整窗口大小，接收方可以控制发送方的数据发送速率，避免网络拥塞和数据丢失。同时，滑动窗口机制还确保了数据的顺序传输和可靠接收，为TCP协议提供了可靠的传输服务。</p><p><strong>二分查找的时间复杂度、二分查找的具体操作</strong></p><p>O(logn)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (L &lt; R)&#123;                      <span class="hljs-comment">//一直二分，直到区间[L,R]缩小到L=R</span><br>    <span class="hljs-type">int</span> mid = (L + R) / <span class="hljs-number">2</span>;          <span class="hljs-comment">//mid是L、R的中间值</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))  R = mid;       <span class="hljs-comment">//答案在左半部分[L,mid]，更新R=mid</span><br>    <span class="hljs-keyword">else</span>             L = mid + <span class="hljs-number">1</span>;   <span class="hljs-comment">//答案在右半部分[mid+1, R]，更新L=mid+1</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>11.n个数中找出最小的k个数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">GetLeastNumbers_Solution</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; input, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ret;<br>        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span> || input.<span class="hljs-built_in">size</span>() &lt; k)<br>            <span class="hljs-keyword">return</span> ret;<br>        priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt; &gt; pq;(大根堆)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt; input.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(pq.<span class="hljs-built_in">size</span>() &lt; k)<br>                pq.<span class="hljs-built_in">push</span>(input[i]);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(input[i] &lt; pq.<span class="hljs-built_in">top</span>())&#123;<br>                    pq.<span class="hljs-built_in">pop</span>();<br>                    pq.<span class="hljs-built_in">push</span>(input[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!pq.<span class="hljs-built_in">empty</span>())&#123;<br>            ret.<span class="hljs-built_in">push_back</span>(pq.<span class="hljs-built_in">top</span>());<br>            pq.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>priority_queue&lt;int,vector<int>,greater<int> &gt;q;  (小根堆)</p><p><strong>为什么父类的析构函数为什么不调用子类的虚函数</strong>（因为子类早就被析构了）<br>IO多路复用select&#x2F;poll&#x2F;epoll<br>什么情况下select比epoll好</p><p><strong>全局变量和static全局变量有啥不同</strong></p><p>1.两者<a href="https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&spm=1001.2101.3001.7020">作用域</a>不同，全局变量的作用域是整个工程项目，静态全局变量作用域只在当前文件</p><p>2.全局变量在其他文件引用时，需使用<a href="https://so.csdn.net/so/search?q=extern&spm=1001.2101.3001.7020">extern</a>声明</p><p>3.全局变量和静态全局变量都存储在静态存储区</p><p>4.全局变量和静态全局变量都是定义在函数外或类外</p><p><strong>define和type define的不同</strong></p><p>1、作用域不同<br>#define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用。<br>typedef有自己的作用域，只能在作用域内使用。</p><p>2、对指针的操作不同<br>例如：</p><p>typedef    int*      INTp1 ;</p><p>#define    INTp2    int* ;<br>上面两种看似效果一样，实则不同！具体区别如下：<br>INTp1 a,b等同于int *a; int *b;表示定义了两个整型指针变量。<br>而INTp2 a,b等同于int *a, b; 表示定义了一个整型指针变量a和整型变量b。</p><p>3、 功能不同<br>#define 虽然只是简单的替换，但是也可为为类型取别名，还可以定义常量、变量和编译开关等；<br>typedef可用来定义类型的别名，这些类型不只包含内部类型（int，double，long long,char等），还包括自定义类型（如struct），可以起到使类型易于记忆的功能,增强程序的可读性。</p><p>4、原理不同<br>define不分配内存，给出的是⽴即数，有多少次使⽤就进⾏多少次替换。</p><p>typedef在静态存储区中分配空间，在程序运⾏过程中内存中只有⼀个拷贝。</p><p><strong>互斥锁</strong></p><p>互斥锁、自旋锁和读写锁用于解决多线程同步的问题</p><p>sizeof和strlen的区别</p><p>violate关键字</p><h5 id="14-set的使用场景，map使用场景"><a href="#14-set的使用场景，map使用场景" class="headerlink" title="14.set的使用场景，map使用场景"></a>14.set的使用场景，map使用场景</h5><p>set可以做到整数数组的去重，但是对象就不可以。<br>map中的集合，元素成对存在，每个元素由键和值两部分组成。</p><p><strong>问2：C和C++的区别？</strong></p><p>答：c++在c的基础上增添类，C是一个结构化语言，它的重点在于算法和数据结构。C程序的设计首要考虑的是如何通过一个过程，对输入（或环境条件）进行运算处理得到输出（或实现过程（事务）控制），而对于C++，首要考虑的是如何构造一个对象模型，让这个模型能够契合与之对应的问题域，这样就可以通过获取对象的状态信息得到输出或实现过程（事务）控制。</p><p>1.<br>   语言本身：</p><ol><li>C++是面向对象语言，C是面向过程语言。</li><li>结构：C以结构体struct为核心结构；C++以类class为核心结构。</li><li>多态：C可以以宏定义的方式“自定义”部分地支持多态；C++自身提供多态，并以模板templates支持编译期多态，以虚函数virtual function支持运行期多态。</li><li>头文件的调用：C++用&lt; &gt;代替” “代表系统头文件；且复用C的头文件时，去掉”.h”在开头加上”C”。</li><li>输入输出：鉴于C++中以对象作为核心，输入和输出都是在流对象上的操作。</li><li>封装：C中的封装由于struct的特性全部为公有封装，C++中的封装由于class的特性更加完善、安全。</li><li>常见风格：C中常用宏定义来进行文本替换，不具有类型安全性；C++中常建议采用常量定义，具有类型安全性。</li><li>效率：常见的说法是同等目的C通常比C++更富有效率(这其实有一定的误解，主要在于C++代码更难于优化且少有人使用编译期求值的特性)。</li><li>常用语言&#x2F;库特性：<ol><li>数组：C中采用内建数组，C++中建议采用vector。相比之下vector的大小可以动态增长，且使用一些技巧后增长并不低效，且成员函数丰富。</li><li>字符串 C中采用C风格的string(实则为字符串数组)，C++中建议采用string，对比与上一条类似。</li><li>内存分配：C中使用malloc与free，它们是是C标准库函数，C++中建议使用new&#x2F;delete代替前者，他们说是C++的运算符(这是笔试面试常考点)以C++中的new为例，new可分为operator new(new 操作)、new operator(new 操作符)和placement new(定位 new)。其中operator new执行和malloc相同的任务，即分配内存，但对构造函数一无所知；而 new operator则调用operator new，分配内存后再调用对象构造函数进行对象的构造。其中operator new是可以重载的。placement new，就是operator new的一个重载版本，允许你在一个已经分配好的内存中构造一个新的对象。</li><li>指针：C中通常使用的是原生指针(raw pointer)，由于常出现程序员在申请后忘记释放造成资源泄漏的问题，在C++98中加入了“第一代”基于引用计数的智能指针auto_ptr，由于初代的各种问题(主要是无法解决循环指针)，在03标准也就是TR1中引入了shared_ptr,weak_ptr和unique_ptr这三个功能各异的智能指针，并与11标准中正式确定，较好的解决了上述问题。</li></ol></li><li>仅有C++才有的常用特性：<ol><li>语言(范式)特性：<ol><li>面向对象编程：C++中以关键字class和多态特性支持的一种编程范式；</li><li>泛型编程：C++中以关键字template支持的一种编程范式；</li><li>模板元编程 ：C++中以模板特化和模板递归调用机制支持的一种编程范式。</li><li>C++中以对象和类型作为整个程序的核心，在对象方面，时刻注意对象创建和析构的成本，例如有一个很常用的(具名)返回值优化((N)RVO);<br>在类型方面，有运行时类型信息(RTTI)等技术作为C++类型技术的支撑。</li><li>函数重载：C++允许拥有不同变量但具有相同函数名的函数(函数重载的编译器实现方式、函数重载和(主)模板特化的区别都曾考过)。</li><li>异常：以catch、throw、try等关键字支持的一种机制。</li><li>名字空间：namespace，可以避免和减少命名冲突且让代码具有更强的可读性。</li><li>谓词用法：通常以bool函数或仿函数(functor)或lambda函数的形式，出现在STL的大多数算法的第三个元素。</li></ol></li><li>常见关键字(操作符)特性：<ol><li>auto：在C中，auto代表自动类型通常都可省略；而在C++11新标准中，则起到一种“动态类型”的作用——通常在自动类型推导和decltype搭配使用。</li><li>空指针：在C中常以NULL代表空指针，在C++中根据新标准用nullptr来代表空指针。</li><li>&amp;: 在C中仅代表取某个左值(lvalue)的地址，在C++中还可以表示引用(别名)。</li><li>&amp;&amp;：在C中仅能表示逻辑与，在C++中还可以表示右值引用。</li><li>[]：在C中仅能表示下标操作符，在C++中还可以表示lambda函数的捕捉列表。</li><li>{}：在C中仅能用于数组的初始化，在C++中由于引入了初始化列表(initializer_list)，可用于任何类型、容器等的初始化。</li><li>常量定义：C中常以define来定义常量，C++中用const来定义运行期常量，用constexpr来定义编译器常量。</li></ol></li><li>常用新特性：<ol><li>右值引用和move语义(太多内容，建议自查)。</li><li>基于范围的for循环(与python中的写法类似，常用于容器)。</li><li>基于auto——decltype的自动类型推导。</li><li>lambda函数(一种局部、匿名函数，高效方便地出现在需要局部、匿名语义的地方)。</li><li>标准规范后的多线程库。</li></ol></li></ol></li></ol><p><strong>问3：什么是面向对象（OOP）？</strong></p><p>答：面向对象是一种对现实世界理解和抽象的方法、思想，通过将需求要素转化为对象进行问题处理的一种思想。面向对象就是把现实问题抽象为对象，通过调用每个对象的属性或功能去解决问题。</p><p>对象<br>对象是由数据（描述事物的属性）和作用于数据的操作（体现事物的行为）组成的封装体，描述客观事物的一个实体，是构成系统的基本单元。</p><p>类<br>类是对一组有相同数据和相同操作的对象的定义，是对象的模板，其包含的方法和数据描述一组对象的共同行为和属性。类是在对象之上的抽象，对象则是类的具体化，是类的实例。类可有其子类，也可有其他类，形成类层次结构。1）类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。</p><p>2）类是一组具有相同属性和行为的对象的抽象。我们可以将类看做是创建对象<strong>蓝图</strong>，对象根据这个蓝图去具体实现某个东西。</p><p><strong>问4：什么是多态？</strong></p><p>答：多态是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态。</p><p><strong>问5：设计模式懂嘛，简单举个例子？</strong></p><p>答：设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>比如单例模式，保证一个类仅有一个实例，并提供一个访问它的全局访问点。将构造函数、析构函数、复制构造函数、赋值操作符声明为私有，即可实现单例模式</p><p>适用于：当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时；当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</p><p>比如工厂模式，定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。</p><p>适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p><strong>问8：const知道吗？解释其作用。</strong></p><p>答：</p><p>1.const 修饰类的成员变量，表示成员常量，不能被修改。</p><p>2.const修饰函数承诺在本函数内部不会修改类内的数据成员，不会调用其它非 const 成员函数。</p><p>3.如果 const 构成函数重载，const 对象只能调用 const 函数，非 const 对象优先调用非 const 函数。</p><p>4.const 函数只能调用 const 函数。非 const 函数可以调用 const 函数。</p><p>5.类体外定义的 const 成员函数，在定义和声明处都需要 const 修饰符。。</p><p><strong>问12：解释下封装、继承和多态？</strong></p><p>答：</p><p><strong>一、封装：</strong></p><p>封装是实现面向对象程序设计的第一步，封装就是将数据或函数等集合在一个个的单元中（我们称之为类）。封装(encapsulation)即信息隐蔽。它是指在确定系统的某一部分内容时，应考虑到其它部分的信息及联系都在这一部分的内部进行，外部各部分之间的信息联系应尽可能的少。</p><p>封装的意义在于保护或者防止代码（数据）被我们无意中破坏。</p><ul><li>public：对外公开，访问级别最高</li><li>protected：只对同一个包中的类或者子类公开</li><li>默认：只对同一个包中的类公开</li><li>private：不对外公开，只能在对象内部访问，访问级别最低</li></ul><p><strong>二、继承：</strong></p><p>让某个类型的对象获得另一个类型的对象的属性和方法。继承就是<a href="https://so.csdn.net/so/search?q=%E5%AD%90%E7%B1%BB%E7%BB%A7%E6%89%BF%E7%88%B6%E7%B1%BB&spm=1001.2101.3001.7020">子类继承父类</a>的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><p>继承主要实现<strong>重用代码</strong>，节省开发时间。</p><p>子类可以继承父类的一些东西。</p><p><strong>三、多态</strong></p><p>多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。多态：对于同一个行为，不同的子类对象具有不同的表现形式。多态存在的3个条件：<br>1）继承 2）重写 3）父类引用指向子类对象。</p><p><strong>问15：常用的排序算法有哪些？简单描述几个排序算法的优缺点？</strong></p><p>答：选择、冒泡、快速、**、希尔、归并、堆排等。</p><p>1.快排：是冒泡排序的一种改进。</p><p>优点：快，数据移动少</p><p>缺点：稳定性不足</p><p>2.归并：分治法排序，稳定的排序算法，一般用于对总体无序，但局部有序的数列。</p><p>优点：效率高O(n)，稳定</p><p>缺点：比较占用内存</p><p><strong>问16：new和malloc的区别？</strong></p><p>答：</p><p>1、new是关键字，需要编译器支持；malloc是库函数，需要头文件支持。</p><p>2、new申请内存无需指定内存大小，编译器会根据类型信息自行计算。除此之外，new会调用构造函数。malloc必须由我们计算需要申请的字节数，需要显式指出所需内存的尺寸，并且返回后强行转换为实际类型的指针。而且malloc只管分配内存，并不能对所得的内存进行初始化，所以得到的一片新内存中，其值是随机的。</p><p>3、new可以重载，malloc不可以重载。</p><p>4、new是关键字，malloc是库函数，new的效率高于malloc。<br>new和malloc都可用于申请动态内存和释放内存。对于<strong>非内部数据类型</strong>的对象而言，光用maloc&#x2F;free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于malloc&#x2F;free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc&#x2F;free。 C++语言需要一个能完成动态内存分配和初始化工作的运算符new，以及一个能完成清理与释放内存工作的运算符delete。所以说new的效率高于malloc。</p><p>5、new出来的指针是直接带类型信息的。而malloc返回的都是void指针。</p><p><strong>问18：同步IO和异步IO的区别？</strong></p><p>答：</p><p><strong>A. 同步</strong></p><p>所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。</p><p>按照这个定义，其实绝大多数函数都是同步调用（例如sin isdigit等）。</p><p>但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。</p><p>最常见的例子就是 SendMessage。</p><p>该函数发送一个消息给某个窗口，在对方处理完消息之前，这个函数不返回。</p><p>当对方处理完毕以后，该函数才把消息处理函数所返回的值返回给调用者。</p><p><strong>B. 异步</strong></p><p>异步的概念和同步相对。</p><p>当一个异步过程调用发出后，调用者不会立刻得到结果。</p><p>实际处理这个调用的部件是在调用发出后，通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p><h5 id="C-是不是类型安全的？"><a href="#C-是不是类型安全的？" class="headerlink" title="C++是不是类型安全的？"></a>C++是不是类型安全的？</h5><p>答案：不是。两个不同类型的指针之间可以强制转换（用reinterpret cast)。C#是类型安全的。</p><h5 id="main-函数执行以前，还会执行什么代码？"><a href="#main-函数执行以前，还会执行什么代码？" class="headerlink" title="main 函数执行以前，还会执行什么代码？"></a>main 函数执行以前，还会执行什么代码？</h5><p>答案：全局对象的构造函数会在main 函数之前执行。</p><p><strong>请说出const与#define 相比，有何优点？</strong><br>答案：</p><p>const作用：定义常量、修饰函数参数、修饰函数返回值三个作用。被Const修饰的东西都受到强制保护，可以预防意外的变动，能提高程序的健壮性。</p><p>1） const 常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误。</p><p>2） 有些集成化的调试工具可以对const 常量进行调试，但是不能对宏常量进行调试。</p><h5 id="vector的reserve和capacity的区别"><a href="#vector的reserve和capacity的区别" class="headerlink" title="vector的reserve和capacity的区别?"></a>vector的reserve和capacity的区别?</h5><p>答：reserve()用于让容器预留空间，避免再次内存分配；capacity() 返回在重新进行内存分配以前所能容纳的元素数量。</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端/移动端面经</title>
    <link href="/2024/05/09/%E5%89%8D%E7%AB%AF%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    <url>/2024/05/09/%E5%89%8D%E7%AB%AF%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>cookie</strong></p><p>cookie其实就是一些数据信息，类型为“<strong>小型文本文件</strong>”，存储于电脑上的文本文件中。游览器保存了我们的cookie，里面记录了一些信息。当我们打开一个网站时，如果这个网站我们曾经登录过，那么当我们再次打开网站时，发现就不需要再次登录了，而是直接进入了首页。</p><p>（名字、值、可访问目录、有效时间、大小）</p><p> cookie有2种存储方式，一种是会话性，一种是持久性。（可以人为设置）</p><p><strong>session和cookie的区别</strong></p><p><strong>2.1、</strong>保存的位置不同<br>cookie保存在浏览器端，session保存在服务端。<br><strong>2.2、</strong>使用方式不同<br>cookie如果在浏览器端对cookie进行设置对应的时间，则cookie保存在本地硬盘中，此时如果没有过期，则就可以使用，如果过期则就删除。如果没有对cookie设置时间，则默认关闭浏览器，则cookie就会删除。<br>session：我们在请求中，如果发送的请求中存在sessionId，则就会找到对应的session对象，如果不存在sessionId,则在服务器端就会创建一个session对象，并且将sessionId返回给浏览器，可以将其放到cookie中，进行传输，如果浏览器不支持cookie，则应该将其通过encodeURL(sessionID)进行调用，然后放到url中。<br><strong>2.3、</strong>存储内容不同：cookie只能存储字符串，而session存储结构类似于hashtable的结构，可以存放任何类型。<br><strong>2.4</strong>、存储大小：&#96;&#96;cookie最多可以存放4k大小的内容，session则没有限制。<br><strong>2.5、</strong>session的安全性要高于cooKie<br><strong>2.6、</strong>cookie的session的应用场景：cookie可以用来保存用户的登陆信息，如果删除cookie则下一次用户仍需要重新登录<br>session就类似于我们拿到钥匙去开锁，拿到的就是我们个人的信息，一般我们可以在session中存放个人的信息或者购物车的信息。<br><strong>2.7、</strong>session和cookie的弊端：cookie的大小受限制，cookie不安全，如果用户禁用cookie则无法使用cookie。如果过多的依赖session，当很多用户同时登陆的时候，此时服务器压力过大。sessionId存放在cookie中，此时如果对于一些浏览器不支持cookie，此时还需要改写代码，将sessionID放到url中，也是不安全。</p><p><strong>localstorage和sessionstorage的区别</strong></p><p>1、localStorage存储在硬盘里，sessionStorage存储在内存里；</p><p>2、数据大小不同；</p><p>3、localStorage的生命周期是永久的，除非主动删除，sessionStorage的生命周期是临时的，当关闭当前窗口或标签页，数据就会被清空；</p><p>4、localStorage可以跨页面使用，sessionStorage只能在当前窗口使用。</p><p><strong>css选择器</strong></p><p>1.！important 优先级10000<br>2.内联选择器 优先级1000<br>3.ID选择器 优先级100<br>4.类别选择器 优先级10<br>5.属性选择器 优先级10<br>6.伪类 优先级10<br>7.元素选择器 优先级1<br>8.通配符选择器 优先级0<br>9.继承选择器 没有优先级</p><p>1、标签选择器：**标签名{css属性名：属性值}**通过标签名找到页面中的这类标签，设置样式</p><p>2、类选择器： **.类名{css属性名：属性值；}**通过类名找到页面中的带有这个类名的标签，设置样式</p><p>3、id选择器：**#id属性值{css属性名：属性值;}**通过id属性值，找到页面中带有这个id属性值的标签，设置样式</p><p>4、通配符选择器：***{css属性名：属性值}**找到页面中所有的标签，然后设置样式（开发中应用最少）</p><p><strong>css权重</strong></p><p>1.从0开始，一个<a href="https://so.csdn.net/so/search?q=%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F&spm=1001.2101.3001.7020">行内样式</a>+1000<br>2.一个id选择器+100<br>3.一个属性选择器、class或者伪类+10<br>4.一个元素选择器，或者伪元素+1，通配符+0。</p><p>权重决定了你css规则怎样被浏览器解析直到生效。“css权重关系到你的css规则是怎样显示的”。 当很多的样式被应用到某一个元素上时，权重是一个决定哪种样式生效，或者是优先级的过程。</p><p>!important &gt; 行内样式 &gt; 内联样式 and 外联样式</p><p><strong>css盒模型</strong></p><p>html中的各个元素都类似一个一个的盒子里面的物品，但是却叫做css盒模型，是因为css盒模型像一个盒子，把各种html元素包起来，将html元素进行封装，以便于网页布局与排版。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513102005071.png" alt="image-20240513102005071" style="zoom: 33%;" /><pre><code class="hljs">    1，上面图中蓝色方框指的是html元素，也是内容部分context，可以是一张图片、一个h1标题、一个表格、一个表单等。但是他的大小并不一定是100×100，而是可以修改的。属性width和height用于修改内容部分的大小。    2，绿色部分，也就是padding部分，指的是内边距，是元素内容与其最近一层束缚框的距离，类似于在一个方格里写字我们写在方格的中间，而与边框保持一定距离一样。    3，浅橘色部分，也就是border部分，指的是这个边框的宽度，我们常见的就是宽度为1，也就是一条线。    4，深橘色部分，也就是margin部分，也叫边缘部分，类似于人与人之间保持一定的距离一样，他的作用是保证html元素之间的距离，比如网页上的两种图片需要保持一定的间距才显得好看。    5，padding，border，margin实际上是每个html元素都存在的css属性。他们可以对元素的上下左右四个方向进行限制。    6，当存在盒子里嵌套盒子时，也就是html的标签嵌套时，里面的元素默认以左上角作为停靠点。    7，盒子模型可用简记为：4个矩形套娃。</code></pre><p><strong>css 有哪几种定位</strong></p><p><strong>1、</strong>静态定位：默认值。（没有指定定位方式时）按照文档的书写布局自动分配在一个合适的地方，用margin改变位置。</p><p><strong>2、</strong>相对定位：脱离正常的文档流，但是其在文档流中的位置依然存在，视觉上相对原来的位置有移动。（设置left、top等值）</p><p><strong>3、</strong>绝对定位：默认情况下依赖浏览器的左上角为定位基准;如果绝对定位的元素存在父、祖先元素且存在相对定位的时候该元素将依赖具备相对定位的元素来进行定位，而不是左上角。（设置top、right、bottom、left这些偏移值，相对于 static 定位以外的第一个父元素进行定位）在没有父元素的条件下，它的参照为body，该方式脱离文档流</p><p><strong>4、</strong>固定定位：生成绝对定位的元素，相对于浏览器窗口进行定位。只需设置它相对于各个方向的偏移值，就可以将该元素固定在页面固定的位置，通常用来显示一些提示信息，脱离文档流；</p><h5 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h5><ol><li>块级元素会独占一行，从上向下顺序排列。</li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。</li></ol><p><strong>12. 如果制作一个访问量很大的网站，对css，js和图片应该怎么处理?</strong></p><p>方法1：资源文件按模块进行放置，有利于团队开发</p><p>方法2：图片尽量采取聚合技术</p><p>方法3：精简压缩css和js文件，减少文件大小</p><p>方法4：类库、媒体使用CDN加速，减轻服务器压力</p><p><strong>解释jsonp的原理</strong></p><p>JSONP是一种非正式传输协议，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p><p><strong>JS怎么创建一个类?</strong></p><p>方式1 : var obj &#x3D; new Object();</p><p>方式2 : var obj &#x3D; {};</p><p><strong>ajax原理，什么是同步异步(主观题，答案不唯一)?</strong></p><p>Ajax的工作原理：相当于在用户和服务器之间加了—个中间层，使用户操作与服务器响应异步化。这样把以前的一些服务器负担的工作转嫁到客户端，利于客户端闲置的处理能力来处理，减轻服务器和带宽的负担，从而达到节约ISP的空间及带宽租用成本的目的。</p><p><strong>xml和json</strong></p><p>json相比xml可读性和可扩张性好、编码及解码难度较低、在数据交互中带宽占用少，并且在当下是最流行的数据交互格式。</p><p><strong>css怎么清除浮动</strong></p><p>1、给父元素单独定义高度</p><p>2、在标签结尾处(前)加空标签并设置<code>clear:both;</code></p><p>3、父元素div定义 伪元素:after</p><p>4、父元素定义 <code>overflow:hidden;</code></p><p>5、父元素定义 <code>overflow:auto;</code></p><p><strong>浮动的作用</strong>：可以让多个块级元素一行内排列显示。浮动可以改变元素标签默认的排列方式。</p><p><code>float</code> 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><p><strong>js数据类型</strong></p><p>未定义 (Undefined)，空 (Null)，数字 (Number)，字符串 (String)，布尔值 (Boolean)，符号 (Symbol)，任意大整数 (BigInt)，对象 (Object)。</p><p> <strong>js 的作用域链</strong></p><p>各个作用域的嵌套关系组成一条作用域链。</p><p>作用域链主要是进行标识符（变量和函数）的查询，标识符解析就是沿着作用域链一级一级的搜索标识符的过程，而作用域链就是保证对变量和函数的有序访问。<br>（1）如果自身作用域中声明该变量，则无需使用作用域链<br>在上面的例子中，如果要在 bar 函数中查询变量 a ，则直接使用 LHS 查询，赋值为 100 即可。<br>（2）如果自身作用域中未声明该变量，则需要使用作用域链进行查找</p><p><strong>js 的作用域，块级作用域，函数作用域</strong></p><p>（由于 JavaScript 存在变量提升这种特性，从而导致很多与直觉不符的代码，这也是 JavaScript 的一个重要设计缺陷，这种设计缺陷带来的问题可以去看看JS变量和函数提升。所以 ES6 通过引入块级作用域并配合 let、const 关键字来避开了这种设计缺陷，但是由于 JavaScript 需要向下兼容，所以变量提升在相当长一段时间内还会继续存在。）</p><p>作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。在 JS 中作用域分为全局作用域和函数作用域，另外函数作用域可以互相嵌套。（ES6增加了块级作用域）</p><p>1、全局作用域：全局作用域中的对象在代码中的任何地方都能访问，其生命周期伴随着页面的生命周期。</p><p>2、函数作用域：函数作用域就是在函数内部定义的变量或函数，并且定义的变量或函数只能在函数内部被访问，函数执行结束后，函数内部定义的变量就会被销毁。</p><p>3、块级作用域：ES6 中给 JavaScript 新增了块级作用域</p><ul><li><p>块级作用域由<code>&#123;&#125;</code>包括，<code>if</code>语句和<code>for</code>语句里面的<code>&#123;&#125;</code>都属于块级作用域</p></li><li><p><code>var</code>定义的变量没有块级作用域概念，可以跨块级作用域访问</p></li><li><p><code>let</code>和<code>const</code>定义的变量只能在块级作用域里访问</p><p>块级作用域是通过词法环境的栈结构来实现的，而变量提升是通过变量环境来实现的，通过两者的结合，JavaScript 引擎也就同时支持了变量提升和块级作用域了。</p></li></ul><p><strong>同源和跨域，跨域问题怎么解决</strong></p><p><strong>1、</strong>同源策略：它是浏览器最核心也最基本的安全功能。如果缺少了同源策略，浏览器很容易受到 XSS、 CSFR 等攻击。同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。</p><p><strong>2、</strong>跨域：当浏览器中一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域。（什么情况下触发同源策略）</p><p>（1）CORS技术（跨源资源共享）：服务器在返回响应报文的时候，在响应头中设置一个允许的header</p><p>（2）原生<a href="https://so.csdn.net/so/search?q=jsonp&spm=1001.2101.3001.7020">jsonp</a>：通过动态创建script标签,通过script标签的src,向一个不同源的接口发送一个get请求（jsonp不支持post）</p><ul><li>获取客户端发送过来的回调函数的名字</li><li>得到要通过JSONP形式发送给客户端的数据</li><li>根据前两步得到的数据，拼接出一一个函数调用的字符串</li><li>把上一步拼接得到的字符串，响应给客户端的<code>&lt;script&gt;</code>标签进行解析执行</li></ul><p>具有局限性，不安全，可能会受到XSS攻击；只支持跨域 HTTP 请求这种情况，不能解决不同域的两个页面之间如何进行 Javascript 调用的问题</p><p>（3）jQuery中的jsonp：设置dataType为jsonp，<a href="https://so.csdn.net/so/search?q=jq&spm=1001.2101.3001.7020">jq</a>会自动动态帮我们创建一个script标签，将url放到src属性中。<em>细节注意点</em>：jq使用jsonp不需要自己设置callback，jq会自动帮我们发送callback参数，参数值就是jq的success回调函数</p><p>（4）浏览器设置跨域：通过修改一些设置，让被设置的浏览器没有同源的限制,自然可以实现跨域</p><p><strong>PNG格式和JPG格式的区别</strong></p><p>1、JPG 使用的是有损压缩——这意味着当图像变小时，图像中的某些数据会被永久删除。从长远来看，这可能会影响文件的质量，因为每次编辑和保存文件时，都会丢失更多数据。<br>PNG 使用无损压缩。这意味着压缩图像时不会丢失任何数据——无论编辑保存文件多少次，质量都保持不变。图像不会变得模糊或扭曲。</p><p>2、最好以 PNG 格式创建屏幕截图，这是几乎所有屏幕截图工具的默认设置。手机端一般会自动将屏幕截图保存为 PNG 格式。主要是因为屏幕截图一般包含具有清晰对比度的精确直线和没有颜色渐变的单色区域。这些都是JPG 格式的主要弱点。</p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513111239223.png" alt="image-20240513111239223" style="zoom: 67%;" /><p>JPG适合用于照片，在风景或人物图片中几乎看不到压缩伪像。由于尺寸小，适合在网站中使用和网络传输。PNG适用于所有包含锐边和纯色的图形。用于保存屏幕截图、图标和需要透明背景的图片。</p><p>协商缓存和强缓存</p><p><strong>懒加载的原理和你是怎么实现的</strong></p><p>1、对于页面有很多静态资源的情况下（比如网商购物页面），为了节省用户流量和提高页面性能，可以在用户浏览到当前资源的时候，再对资源进行请求和加载。</p><p>2、原理：监听onscroll事件判断资源位置</p><p>首先为所有懒加载的静态资源添加自定义属性字段，比如如果是图片，可以指定data-src为真实的图片地址，src指向loading的图片。<br>然后当资源进入视口的时候，将src属性值替换成data-src的值。<br>可以使用元素的getBoundingRect().top判断是否在视口内，也可以使用元素距离文档顶部的距离offsetTop和scrollTop是否小于视口高度来判断：</p><p>React setState之后的流程</p><p><strong>有什么办法实现深拷贝？</strong></p><p>1、浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是指向内存的地址 ，所以如果其中一个对象改变了这个引用类型的值，就会影响到另一个对象。<br>深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。<br>2、方法：递归调用、lodash函数库（**lodash.cloneDeep()**）实现深拷贝、通过js的内置对象JSON来进行深拷贝、通过jQuery的extend方法实现深拷贝、Object.assign()拷贝</p><p><strong>怎么调试 JS 代码</strong></p><p>1、直接在js代码中加入断点进行调试</p><p>2、在事件监听器上设置断点</p><p>3、在DOM节点中设置断点</p><p>（下一步、跳过一些代码、进入函数、跳出函数、跳到下一个断点）</p><p>4、使用vs code（安装某些插件）</p><p>web安全问题，答了（xss、csrf），怎么防御攻击</p><p>\1. 地图展示为什么不用 Google<br>\2. 小程序为什么不使用框架<br>\3. 没有学 react 吗<br><strong>前后端分离是什么</strong></p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513113123476.png" alt="image-20240513113123476" style="zoom:67%;" /><p>1、”前”特指浏览器端(或客户端)，直接呈现给用户的；后端是服务器端，处理业务逻辑和数据，不呈现给用户（JSP不是前端技术）</p><p>2、静态资源和服务(实现接口的业务逻辑)，在开发阶段就分离开发，而部署阶段分离部署在不同服务器上，算是严格意义上的前后端分离。</p><p>3、前端人员和后端人员约定好接口后，前端人员彻底不用再关心业务处理是怎么回事，他只需要把界面做好就可以了，后端人员也不用再关系前端界面是什么样的，他只需要做好业务逻辑处理即可。服务的切离，代码管理，服务部署也都独立出来分别管理，系统的灵活性也获得了极大的提升。</p><p>4、最核心的就是无论你后端换了什么语言，换了什么人去编写，换了什么样的服务器，只要你们定义的一个接口规则不变，然后不会影响到用户的使用，数据的一个展示。同时反过来也一样，无论你前端换了什么UI框架，欸，我今天用easyui，明天我用layui，后天我用bootstrap，你也能够根据定义的接口文档去展示相关数据和效果，那么就是前后端分离。</p><p><strong>闭包是什么</strong></p><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p><p>1.让外部访问函数内部变量变成可能</p><p>2.变量会常驻在内存中</p><p>3.可以避免使用全局变量,防止全局变量污染;</p><p>4.可能会造成<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F&spm=1001.2101.3001.7020">内存泄漏</a>或溢出。</p><p><strong>闭包要注意什么</strong></p><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，<strong>在退出函数之前，将不使用的局部变量全部删除。</strong></p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><p>\12. this 指向<br>\13. var、const、let<br>\14.</p><p> <strong>flex 布局</strong></p><p>flex是Flexible Box的缩写，意为弹性布局，用来为<a href="https://so.csdn.net/so/search?q=%E7%9B%92%E6%A8%A1%E5%9E%8B&spm=1001.2101.3001.7020">盒模型</a>提供最大的灵活性</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513135451485.png" alt="image-20240513135451485"></p><p>（主轴方向、如何换行、如何对齐、项目放大、缩小比例）</p><p><strong>CSS引入的方式有哪些?link和@import的区别是?</strong></p><p>内联 内嵌 外链 导入<br>区别 ：同时加载<br>前者无兼容性，后者CSS2.1以下浏览器不支持<br>Link 支持使用javascript改变样式，后者不可</p><p><strong>XSS</strong>(反射型、存储型、DOM型)</p><ul><li>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）。</li><li>诱使受害者打开受到攻击的服务器URL。</li><li>受害者在Web浏览器中打开URL，恶意脚本执行。</li></ul><p>防范：</p><p>（1）编码：对用户输入的数据进行HTML Entity编码</p><p>（2）过滤：移除用户上传的DOM属性，如onerror等，移除用户上传的style节点，script节点，iframe节点等。</p><p>（3）校正：避免直接对HTML Entity编码，使用DOM Prase转换，校正不配对的DOM标签。</p><p><strong>CSRF</strong></p><p>跨站请求伪造</p><p>攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账…造成的问题包括：个人隐私泄露以及财产安全。</p><ol><li>登录受信任网站A，并在本地生成Cookie</li><li>在不登出A的情况下，访问危险网站B</li></ol><p><strong>Node.js的适用场景？</strong></p><p>高并发、聊天、实时消息推送</p><p> <strong>404、500、301 分别是什么</strong></p><p>100-199 用于指定客户端应相应的某些动作。</p><p>   200-299 用于表示请求成功。</p><p>   300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。</p><p>   400-499 用于指出客户端的错误。400    1、语义有误，当前请求无法被服务器理解。401   当前请求需要用户验证 403  服务器已经理解请求，但是拒绝执行它。</p><p>   500-599 用于支持服务器错误。 503 – 服务不可用</p><p>301：永久移动（网页移动到新的位置）</p><p>302：临时移动</p><p>400：错误请求（服务器不理解请求的语法）</p><p>403：服务器拒绝请求</p><p>404：服务器找不到请求的网页</p><p>500：服务器内部错误，无法完成请求</p><p>502：错误网关</p><p><strong>几种CSS布局方式及其特点</strong>。 </p><p>答案：常见的CSS布局方式包括浮动、定位、弹性布局和网格布局。</p><p> <strong>404、500 错误如何检查</strong></p><p>\21. 临时重定向是什么，二者区别<br>\22. http 2.0<br>\23. React 没学过吗<br>\24. vue 如何实现响应式<br>\25. v-if 和 v-show 区别<br>\26. 组件间通信方式<br>\27. 性能优化（使用异步请求)<br>\28. 给请求排序</p><p><strong>框架 vue和react的异同</strong></p><p>一、同</p><p>①都使用虚拟dom。<br>②提供了响应式和组件化的视图组件。<br>③把注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</p><p>二、异</p><p>vue：1、渐进式框架、自底向上增量开发</p><p>​          2、可以在任意其他类型的项目中使用，使用成本较低，更灵活，主张较弱</p><p>3、易用（使用成本低），灵活（生态系统完善，适用于任何规模的项目），高效（体积小，优化好，性能好）</p><p>react：主张是函数式编程的理念， 实现了前端界面的高性能高效率开发，react很擅长处理组件化的页面。在 React 中，所有的组件的渲染功能都依靠 JSX，它是JavaScript的语法扩展，它在创建UI组件和调试时非常简单有用。</p><p>三、总结</p><p>1、React：整体是函数式的思想，在react中，是单向数据流，推崇结合immutable来实现数据不可变。<br>Vue：的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立Watcher来监听，当属性变化的时候，响应式的更新对应的虚拟dom。</p><p>2、React：思路是all in js，通过js来生成html，所以设计了jsx，还有通过js来操作css，社区的styled-component、jss等。<br>Vue：把html，css，js组合到一起，用各自的处理方式，Vue有单文件组件，可以把html、css、js写到一个文件中，html提供了模板引擎来处理。</p><p>3、当组件的状态发生变化时，React的机制会触发整个组件树的重新呈现。您可能需要使用额外的属性来避免不必要地重新渲染子组件。虽然Vue的重新渲染功能是开箱即用的，但Vue提供了优化的重新渲染，其中系统在渲染过程中跟踪依赖关系并相应地工作。重新渲染是Vue最显着的特征，也使其成为全世界开发人员广泛接受的框架。</p><p>4、react是类式的写法，api很少，而Vue是声明式的写法，通过传入各种options，api和参数都很多。所以react结合typescript更容易一起写，Vue稍微复杂。</p><p>手写防抖节流</p><p><strong>浏览器性能优化策略</strong></p><p>一、感知性能优化（loading图标或者骨架屏）</p><p>如果一个页面的加载时间很长，我们也可以通过一些方式让用户觉得没有那么慢。</p><p>二、HTML优化</p><p>1、HTML代码压缩，将注释、空格和新行从生产文件中删除。减少HTML的大小，加快网站的页面加载时间，并显著减少用户的下载时间。 </p><p>2、删除不必要的注释</p><p>3、删除不必要的属性： <code>type=&quot;text/javascript&quot;</code> or <code>type=&quot;text/css&quot;</code> </p><p>4、使用语义化标签<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240513150309276.png" alt="image-20240513150309276" style="zoom:33%;" /></p><p>易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</p><p>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</p><p>方便其他设备解析，如盲人阅读器根据语义渲染网页</p><p>有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。</p><p>5、减少iframe数量</p><p>6、削减DOM数量和层级数量</p><p>7、减少HTTP请求次数（将多个 CSS 和 JavaScript 文件合并为一个文件）</p><p>三、JS优化</p><p>1、<script>标签尽量尽可能放到<body>标签的底部。</p><p>2、尽量减少 DOM 操作的次数和复杂度，可以提高页面的响应速度和性能。</p><p>3、删除重复的脚本</p><p>4、节流与防抖：日常开发过程中，滚动事件做复杂计算频繁调用回调函数很可能会造成页面的卡顿，这时候我们更希望把多次计算合并成一次，只操作一个精确点，JS把这种方式称为debounce（防抖）和throttle（节流）。</p><p>5、</p><p>四、CSS优化</p><p>1、少用@import（影响浏览器的并行下载、导致下载顺序紊乱）</p><p>2、避免！important选择器（破坏了样式表中固有的级联规则、尽量靠近html或body元素）</p><p>3、不在id选择器之前嵌套其他的选择器</p><p>4、压缩CSS文件</p><p>5、CSS层级嵌套尽量不超过三层</p><p>五、图片优化</p><p>1、根据实际需要压缩照片</p><p>2、小图片引入雪碧图</p><p>3、图片懒加载</p><p><strong>React</strong>中的组件生命周期有哪些阶段？ 答案：在React中，组件的生命周期分为三个阶段：挂载阶段、更新阶段和卸载阶段。</p><p><strong>vue 生命周期</strong></p><p>Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -> 渲染、更新 -> 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。</p><p>什么是事件代理</p><p>vue2和vue3响应式的区别</p><p>vue2组件间通信方式</p>]]></content>
    
    
    <categories>
      
      <category>八股面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DFS刷题记录</title>
    <link href="/2024/05/04/DFS%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/05/04/DFS%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>DFS：广度优先搜索</p><span id="more"></span><h3 id="一、分糖果"><a href="#一、分糖果" class="headerlink" title="一、分糖果"></a>一、分糖果</h3><p>​       假如有有两种糖果，每种分别有m和q个，要分给k个人，并且每个人手上的糖果不少于2个不多于5个，一共有多少种分法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> res;<br><span class="hljs-type">int</span> k,m,q;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span>(n==k)<br>    <span class="hljs-keyword">if</span>(a==m&amp;&amp;b==q)  res++;  <span class="hljs-comment">//分好了</span><br>    <span class="hljs-keyword">return</span>;  <span class="hljs-comment">//n若已达到k，不管有没有分好都需要return</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=m;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=q;j++)<br>      <span class="hljs-keyword">if</span>(i+j&gt;=<span class="hljs-number">2</span>&amp;&amp;i+j&lt;=<span class="hljs-number">5</span>)<br>        <span class="hljs-built_in">dfs</span>(n+<span class="hljs-number">1</span>,a+i,b+j);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  cin&gt;&gt;k&gt;&gt;m&gt;&gt;q;<br>  <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>  cout&lt;&lt;res&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP算法详解+图示（附优化版）</title>
    <link href="/2024/04/25/KMP%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3+%E5%9B%BE%E7%A4%BA%EF%BC%88%E9%99%84%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89/"/>
    <url>/2024/04/25/KMP%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3+%E5%9B%BE%E7%A4%BA%EF%BC%88%E9%99%84%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="一、KMP算法的意义"><a href="#一、KMP算法的意义" class="headerlink" title="一、KMP算法的意义"></a>一、KMP算法的意义</h3><p>​在求解这样的算法问题时：已知两个字符串s1和s2，其中s2是s1的字串，请找到s2在s1中的位置。传统的寻找方法即暴力解法：分别从两个字串的第一个字符开始找起，若可以匹配就继续下一个字符；若匹配失败，s1回溯到第二个字符，s2回溯到第一个字符，依此类推……</p><p>​暴力解法在字串长度过大时往往时间复杂度很高，而其主要原因是因为回溯的次数太多，而KMP算法的作用就是用已知的信息量去尽可能减少回溯次数，达到简洁且迅速的效果。</p><h3 id="二、KMP算法的步骤"><a href="#二、KMP算法的步骤" class="headerlink" title="二、KMP算法的步骤"></a>二、KMP算法的步骤</h3><h4 id="1-计算字符串中每个位置之前字串的最长相等前后缀长度"><a href="#1-计算字符串中每个位置之前字串的最长相等前后缀长度" class="headerlink" title="1.计算字符串中每个位置之前字串的最长相等前后缀长度"></a>1.计算字符串中每个位置之前字串的最长相等前后缀长度</h4><p>（1）最长相等前后缀的概念</p><p>​已知一个字符串abaaba,它的前缀字串和后缀字串分别为：</p><p>前缀：a,ab,<strong>aba</strong>,abaa,abaab;</p><p>后缀：a,ba,<strong>aba</strong>,aaba,baaba;</p><p>​那么很明显，aba是它的最长相等前后缀，即这个字符串的最长相等前后缀长度为3。</p><p>（2）next[n]数组</p><p>​对于字符串abaabac，我们想要用数组next[n]中的元素next[i]来保存字符串第i个字符前的字串的最长相等前后缀的长度。</p><p>​首先，我们规定next[0]&#x3D;-1（前面没有字串），next[1]&#x3D;0(字串没有前后缀)。那么就可以得到next[n]的值：</p><p>​ abaabac</p><p>next[0]  [1] [2]      [3]     [4]      [5]     [6]</p><p>​    -1    0    0    1    1    2        3</p><h4 id="2-根据next数组，对字串进行匹配"><a href="#2-根据next数组，对字串进行匹配" class="headerlink" title="2.根据next数组，对字串进行匹配"></a>2.根据next数组，对字串进行匹配</h4><p>​创建如下图所示的两个字符串。</p><p>​已知在进行前六个字符的匹配时，由于都能够匹配成功，因此箭头同步向右移动。当匹配到如图所示的位置时，匹配失败了。如果按照暴力解法，那么上面的字符串应该从第一个b开始匹配，而子串需要从头匹配。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425170716134.png" alt="image-20240425170716134"></p><p>​而KMP算法则利用上一步我们求解的next数组，已知子串中字符<strong>c</strong>的位置是6，而<strong>next[6]&#x3D;3</strong>。因此下一次匹配时，我们直接移动子串，使得子串位置为<strong>3</strong>的字符<strong>a</strong>对准箭头所在的地方，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425171406127.png" alt="image-20240425171406127"></p><p>​接下来让我们理解一下这一步的原理是什么。我会讲解地通俗一点（可能我的理解比较浅显，但是这个思路是可以弄清楚这个算法的）。</p><p>​我们知道KMP算法的作用是要减少回溯的次数，那么如何减少呢？当我们已经走到图一的位置时，我们很容易发现按照暴力方法很浪费时间，因为很明显直接按图二移动是最方便快捷的。由于字符串的匹配不可能每次都让我们用眼睛看到，因此我们需要将信息存储在数组里，需要的时候就可以使用。而next数组就是存储这个重要信息的数组。比如在图一的位置，next数组可以告诉程序，在已知匹配的字符串中，前三位字符和后三位字符是相等的。而此时只有最后一位是不匹配的，因此，我们只需要把前三位平移过来，那么就可以得到图二的结果：有三位字符是匹配的，然后我们继续判断下一位是否和p匹配。既然最大相等前后缀字符串的长度为3，那么对应的，箭头就应该指向子串位置为3的字符（从0计）。</p><p>​以此类推，由于next[3]&#x3D;1,那么相应的，箭头应该指向第二个字符b。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425172526743.png" alt="image-20240425172526743"></p><p>​接下来，聪明的你应该知道，箭头应该指向a了。可是这时候仍然是不匹配的，而且next[0]&#x3D;-1，这时候应该怎么办呢？很简单，这时候应该将字符串的箭头向右移动了，而子串的箭头位置不变，因为它已经指向字串的第0个字符了。</p><h3 id="三、KMP算法的代码实现"><a href="#三、KMP算法的代码实现" class="headerlink" title="三、KMP算法的代码实现"></a>三、KMP算法的代码实现</h3><h4 id="1-计算next数组"><a href="#1-计算next数组" class="headerlink" title="1.计算next数组"></a>1.计算next数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getnext</span><span class="hljs-params">(string s,<span class="hljs-type">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br>    next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>||s[i]==s[k])&#123;<br>            i++,k++;<br>            next[i]=k;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            k=next[k];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​这个函数真的很不好理解。如果让我直接去想这个代码我是肯定想不到的，因此只能就着代码理清思路，这样做题的时候不至于忘记。</p><p>​首先，由于k的初始值是-1，所以一定会进入if函数里，这样一来，next[1]就被赋为0了。</p><p>​当k&#x3D;-1或者s[i]&#x3D;s[k]的时候，会将i和k同时右移。我们先分析，什么时候k&#x3D;-1呢？只有上一次循环时k&#x3D;0，并且s[0]!&#x3D;s[i]时，在k&#x3D;next[k]这个公式里，才会将k又赋为-1。故而此时，i+1前并无相等前后缀，也就又将next[i+1]赋为0。接着，又会判断s[i+1]与s[0]是否相等，如果相等，则i+2前最大相等前后缀长度就为1了。</p><p>​若前面已经有相等前后缀，此时s[i]&#x3D;s[k]，那么相当于相等前后缀的延长，因此s和k会同时后移观察下一位是否也相等。</p><p>​比较复杂的情况如下图（理解k&#x3D;next[k]）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240425211350229.png" alt="image-20240425211350229"></p><p>​如图是一串字符串，下标i和next[i]的值分别在其上下标出。在i&#x3D;6，k&#x3D;3之前，可以发现最大前后缀是3，而此时s[i]&#x3D;s[k]不相等。而这个函数的关键之处：k&#x3D;next[k]，将k的值改变成了1（next[3]&#x3D;1)。我们可以发现，如果将k和i分别向前移一位，此时k&#x3D;0，i&#x3D;5，而s[i]的值刚好等于s[k]。这并不是巧合。因为i&#x3D;6之前最大前后缀长度为3，也就是说明字符串前三位和i&#x3D;6之前的三位是相等的。而下标i&#x3D;3之前的最大前后缀长度为1，也就是说明i&#x3D;0、i&#x3D;2、i&#x3D;3、i&#x3D;5这几个数的值也是相等的。所以现在我们向前回溯到，与i&#x3D;6不相等的那个下标（此处为3）之前的子串中的相等前后缀，它的长度对应的下标前的子串一定和i&#x3D;6前的某个后缀相等。然后我们继续比较该下标的值和i&#x3D;6处的值是否相等，以此类推。</p><p>​如果还是不太明白可以多试几个字符串多多验证几次，推导几遍，就会渐渐思路清晰。（其实我们会发现这个思想和前面讲到的KMP思想很类似）</p><p>​ps:while函数中之所以i&lt;s.size()-1，是因为每次都是先i++再赋值的。</p><h4 id="2-KMP算法的代码"><a href="#2-KMP算法的代码" class="headerlink" title="2.KMP算法的代码"></a>2.KMP算法的代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">KMPinit</span><span class="hljs-params">(string s,string p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> len=p.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> next[len],i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化</span><br>    <span class="hljs-built_in">getnext</span>(p,next);<span class="hljs-comment">//求出next数组</span><br>    <span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;j&lt;len)&#123;<span class="hljs-comment">//跳出循环要么找完s字符串都没找到，要么已经找完了</span><br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>||s[i]==s[j])&#123;<span class="hljs-comment">//根据图示理解</span><br>            i++,j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            j=next[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j&gt;=len)&#123;<span class="hljs-comment">//如果跳出循环是因为已经匹配完毕，那么就可以返回位置了</span><br>        <span class="hljs-type">int</span> index=i-len;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//找不到匹配项</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、KMP代码的优化"><a href="#四、KMP代码的优化" class="headerlink" title="四、KMP代码的优化"></a>四、KMP代码的优化</h3><p>​假设子串为aaaaaab，并且字符串为aaaaaacccc。我们会发现b与c不匹配，接着便是前一位的a与c进行匹配，但是依旧不匹配，而紧接着会将前面的a依次与c匹配，得到的结果仍旧是不匹配，因此当next数组指向的字符和它本身相等时，便没有必要再匹配下去。</p><p>​所以我们可以把next函数做以下修正(KMP函数无需改变)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getnext</span><span class="hljs-params">(string s,<span class="hljs-type">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br>    next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,k=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>||s[i]==s[k])&#123;<br>            i++,k++;<br>            <span class="hljs-keyword">if</span>(s[i]!=s[k])<br>            next[i]=k;<br>            <span class="hljs-keyword">else</span><br>                next[i]=next[k];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            k=next[k];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考博客：CSDN（哈顿之光）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>KMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为博客配置waline评论模块需要注意什么</title>
    <link href="/2024/04/22/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEwaline%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88/"/>
    <url>/2024/04/22/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEwaline%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>​想要在Github博客中部署一个评论模块有许多选择，其中waline是在valine的基础上衍化而来，因此功能也会更多。但是在跟着官方文档配置的时候需要注意一些问题，否则会一直出错😿……（如果你因fail to fetch这个错误而来，那真是找对人了）</p><span id="more"></span><p>​先附上官方教程文档：<a href="https://waline.js.org/guide/get-started/#vercel-%E9%83%A8%E7%BD%B2-%E6%9C%8D%E5%8A%A1%E7%AB%AF">快速上手 | Waline</a></p><p>​首先要注意的是在注册LeanCloud账号时最好注册国际版，这样比较方便。</p><h3 id="一、vercel部署部分"><a href="#一、vercel部署部分" class="headerlink" title="一、vercel部署部分"></a>一、vercel部署部分</h3><h5 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422144225513.png" alt="image-20240422144225513"></p><p>如上图所示，首先需要点击Deploy然后进行登录，登陆完成之后，会显示这个界面：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422144718930.png" alt="image-20240422144718930"></p><p>这时我一脸蒙，于是就真的随便找了一个项目creat了（页面和教程不一样但我并未在意）……</p><p>其实应该退回到教程页，再点一遍deploy，就可以和教程一致了。</p><h5 id="2-环境变量配置"><a href="#2-环境变量配置" class="headerlink" title="2.环境变量配置"></a>2.环境变量配置</h5><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422145045708.png" alt="image-20240422145045708"></p><p>​第一次看这段话的时候我有点疑惑，加上这时候设置的界面和教程有细微差别，所以我的配置也出错了。如下图所示，正确的配置应该是KEY栏分别写入LEAN_ID<code>, </code>LEAN_KEY和LEAN_MASTER_KEY，Value栏分别写入它们三个的值。（需要add more新创建两个栏）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422145236754.png" alt="image-20240422145236754"></p><h5 id="3-获取服务端地址"><a href="#3-获取服务端地址" class="headerlink" title="3.获取服务端地址"></a>3.获取服务端地址</h5><p>​教程中写到，部署结束后点击visit后跳转到的网页的网址即是服务器地址，也就是后面的serverURL，在HTML文件部署的时候也需要用到。</p><p>​重点来了！！！！在我把所有东西全部部署结束，且保证绝对无误的情况下，虽然我的博客网页上已经展现出了评论的模块，我居然还是评论不了（会显示fail to fetch）……（此时心态已崩🤯）我反反复复找了很久的错误，翻看了视频教程下的评论，终于发现了和我一样错误的友友。他说原因是“<strong>完成后访问的visit地址和第二次在ver项目中打开的server地址不一样</strong>”。我反复琢磨了很久，因为我反复点开visit，这个网址一直不变啊。。。突然，一切都变了，某个瞬间当我点开visit时，它居然显示网页停止访问😨。我三分疑惑四分愤怒地又点开了很多次，终于它加载出来了，定睛一看网页的域名居然变了😇😇😇😇😇😇😇</p><p>​当我把变化后的域名代替先前的域名后，错误就解决了！</p><h3 id="二、HTML引入"><a href="#二、HTML引入" class="headerlink" title="二、HTML引入"></a>二、HTML引入</h3><h5 id="1-找到index-html"><a href="#1-找到index-html" class="headerlink" title="1.找到index.html"></a>1.找到index.html</h5><p>​（ps：不知道不同主题是否对这个配置文件名有影响，我所用的是fluid这个主题）</p><p>​这里我又犯错了，因为我发现.deploy_git和public文件夹下都有一个这样的文件。由于先前我知道了每次hexo clean后都会删掉public文件夹，因此我毅然决然地选择修改了.deploy_git里的文件。于是每次部署网页之后，我都惊奇地发现回到这个文件后我做的修改都离奇消失了。直到我在hexo d时仔细地看了一眼运行结果，发现它赫然写着delete  .deploy_git以及保留public，我的小脑都萎缩了🫠。</p><p>​因此结论就是，一定要<strong>修改public文件夹下的index.html文件</strong>，这样才能生效。</p><h5 id="2-如何修改"><a href="#2-如何修改" class="headerlink" title="2.如何修改"></a>2.如何修改</h5><p>​注意在修改的时候不要把教程文档的所有代码全部粘贴进html文件。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151514648.png" alt="image-20240422151514648"></p><p>​第一部分：head部分，只将中间的那一部分添加入自己html文件的head部分里。记得缩进一定要规范。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151659178.png" alt="image-20240422151659178"></p><p>​第二部分：body部分。我们在html文件中找到<body>后点开方便的符号就可以折叠，这样就可以找到body部分的末尾在哪里<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422151922923.png" alt="image-20240422151922923"></p><p>而第二部分最好添加进body部分的最后面。由于我的文件里写道要把某部分保留在最后，因此这一部分代码我就放在那部分前面了。仍然要注意缩进的格式！但是因为我的文件中，body内的很多代码都没有缩进，因此这一部分代码我也没有缩进一格。</p><h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><h5 id="1-部署博客主题配置文件"><a href="#1-部署博客主题配置文件" class="headerlink" title="1.部署博客主题配置文件"></a>1.部署博客主题配置文件</h5><p>​在我配置评论功能的时候，不仅部署了html文件，还部署了yml文件。具体的部署要视各主题而定。因为主题部署文件可能并未默认开启评论功能，因此要去文件中找到“comment”部分，打开评论功能，并配置其他相应必要代码。</p><h5 id="2-重新创建项目"><a href="#2-重新创建项目" class="headerlink" title="2.重新创建项目"></a>2.重新创建项目</h5><p>​如果在第一次配置时出错了，想要再次配置，一定要先删掉之前的项目，删除方法如下图所示，点开Geberal下滑到最下面就可以删掉了。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240422152645310.png" alt="image-20240422152645310"></p><p>​但是仅仅在这里删掉是没有用的。还需要进入自己的GitHub网站，你会发现那里也创建了一个同名项目，需要将它也删除。</p><p>​（这个错误也硬控我半小时😾）</p><p>​如果跟着教程文档配置结束后，也排除了我的文章里的问题，还是没有成功，可以在这里或教程下留下评论，让大家一起找找。听说有官方QQ群，但是不知道是哪个😴</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>waline</tag>
      
      <tag>comments</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora基本使用教程</title>
    <link href="/2024/04/21/Typora%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/21/Typora%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文旨在帮助刚刚入门Typora的大家写博文👻。</p><span id="more"></span><p>​打开Typora后，看到一片空白一定有些蒙圈。不要害怕！学会文中的几个指令后就能丝滑写出像样的文章啦，其实Typora和word相差也没有太大。</p><h4 id="一、如何写Frontmatter？"><a href="#一、如何写Frontmatter？" class="headerlink" title="一、如何写Frontmatter？"></a>一、如何写Frontmatter？</h4><h5 id="1-何为frontmatter？"><a href="#1-何为frontmatter？" class="headerlink" title="1.何为frontmatter？"></a>1.何为frontmatter？</h5><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421141453727.png" alt="image-20240421141453727"></p><p>它定义了你的博文标题、这篇博文的分类、标签和作者名等。</p><p>对于我的博客来说，作者一般都是我自己，在主题配置文件修改过后就不用每次都写一遍了。除此之外，时间一般会默认为创建博文文档的时间，也可自行修改。</p><h5 id="2-写frontmatter的格式是什么？"><a href="#2-写frontmatter的格式是什么？" class="headerlink" title="2.写frontmatter的格式是什么？"></a>2.写frontmatter的格式是什么？</h5><p>若想在博文中插入frontmatter，需要打出三个短横线“—”，再Enter，可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142133810.png" alt="image-20240421142133810"></p><p>示例：</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142500459.png" alt="image-20240421142500459"></p><p>注意：1.只有在博文最上方打frontmatter才会生效</p><p>​2.要使用英文冒号，冒号后需要有空格。</p><p>​3.若需要打多个标签，格式如下：<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240421142627174.png" alt="image-20240421142627174"></p><h5 id="3-常见的frontmatter"><a href="#3-常见的frontmatter" class="headerlink" title="3.常见的frontmatter"></a>3.常见的frontmatter</h5><p>title：标题</p><p>auther：作者</p><p>date：建立日期</p><p>updated：更新日期</p><p>comments：是否开启文章评论功能（默认值true）</p><p>tags：标签</p><p>categories：分类</p><p>permalink：覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</p><p>published：文章是否发布</p><h4 id="二、写文章常用指令"><a href="#二、写文章常用指令" class="headerlink" title="二、写文章常用指令"></a>二、写文章常用指令</h4><h5 id="1-多级标题"><a href="#1-多级标题" class="headerlink" title="1.多级标题"></a>1.多级标题</h5><p>在写文章时，往往需要用到多级标题。在Typora里，一级标题的字大小最大。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br></code></pre></td></tr></table></figure><p>依次类推。#后要加空格才会生效。</p><h5 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2.代码块"></a>2.代码块</h5><p>如果想要在文中加入可直接复制的代码块，只需要打出”&#96;&#96;&#96;“再Enter。</p><p>代码块右下方可以调整代码语言。</p><h5 id="3-emjoy"><a href="#3-emjoy" class="headerlink" title="3.emjoy"></a>3.emjoy</h5><p>很多好看的emjoy都在这个网页：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp; more (webfx.com)</a></p><p>下滑找到喜欢的emjoy点击就能够复制了哦😋。</p><h5 id="4-加粗字体-斜体等"><a href="#4-加粗字体-斜体等" class="headerlink" title="4.加粗字体&#x2F;斜体等"></a>4.加粗字体&#x2F;斜体等</h5><p>只要鼠标圈出想要修改的文本，右键就可以修改啦。</p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github图床配置教程</title>
    <link href="/2024/04/15/Typora%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/15/Typora%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文详细地描述了如何利用Typora+PicGo+Github建立图床，并且列出了很多新手容易踩的坑（自己淋过雨要为大家撑伞）。如果对于某些步骤有疑惑或者出错了可以留下评论。</p><span id="more"></span><h3 id="一、建立Github仓库"><a href="#一、建立Github仓库" class="headerlink" title="一、建立Github仓库"></a>一、建立Github仓库</h3><h5 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h5><p>先登录进自己的Github账号，按图示依次点击，就能新建一个仓库了。</p><p>（1）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415201356717.png" alt="image-20240415201356717"></p><p>（2）</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415201449418.png" alt="image-20240415201449418"></p><p>（3）填写仓库名，设置为公开，记得要勾选添加README文件，这样才能在仓库中直接创建一个默认的main分支。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415202107013.png" alt="image-20240415202107013"></p><h5 id="2-生成一个token，用于PicGo访问Github"><a href="#2-生成一个token，用于PicGo访问Github" class="headerlink" title="2.生成一个token，用于PicGo访问Github"></a>2.生成一个token，用于PicGo访问Github</h5><p>（1）依次进入settings&#x2F;Developer settings&#x2F;Personal access tokens</p><p>（反正作者的Github上真的找不到这样一个路径，所以以上工作做好后，可以直接访问如下网站进入这个界面，亲测无误。网址：<a href="https://github.com/settings/tokens">Personal Access Tokens (Classic) (github.com)</a>）</p><p>（2）（据说选上面的Beta选项会变得不幸，虽然作者第一次失败时也是选了上面的Beta选项，但是由于还存在其他漏洞，所以它究竟可不可用不得而知）<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415203006752.png" alt="image-20240415203006752"></p><p>（3）Note随便写就行，时间限度我选了永久，因为害怕token失效；</p><p>下面的其他选项都不用管，只要将repo勾选上就好。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415203417667.png" alt="image-20240415203417667"></p><p>（4）得到token后好好保存（它只会在这里显示一次），等会还需要用上。</p><p>tips：如果因为某些步骤失误，需要重新生成token，记得把先前生成的token删掉。</p><h3 id="二、PicGo配置"><a href="#二、PicGo配置" class="headerlink" title="二、PicGo配置"></a>二、PicGo配置</h3><h5 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1.下载PicGo"></a>1.下载PicGo</h5><p>（1）点击链接，直达：<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1">Release 2.3.1 · Molunerfinn&#x2F;PicGo (github.com)</a></p><p>（2）我所给出的链接是2.3.1正式版，如果需要最新版，可以点击releases，如图<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415204546713.png" alt="image-20240415204546713"></p><p>（3）在2.3.1这个版本界面一直下滑，直到如图，点击Assets会出现以下版本，可根据需求下载。比如我的设备是Windows11，我下载的版本已在图中圈出。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415204936447.png" alt="image-20240415204936447"></p><p>（4）下载后进行安装，步骤比较简单就省略了。记住安装时的路径，后面会需要。</p><p>（5）然后！是作者踩得一个大坑。在安装后，我怎么都无法打开这个软件。一开始我以为是版本不兼容等问题，但是设置之后仍旧无法打开。但是任务管理器上它明明就在运行……我还卸载重新安装了很多次。后来才发现，点开如图的地方，才发现它在偷偷运行呢！不知道为什么它运行时居然不显示界面，需要点一下才会显示。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415205718027.png" alt="image-20240415205718027"></p><h5 id="2-PicGo配置"><a href="#2-PicGo配置" class="headerlink" title="2.PicGo配置"></a>2.PicGo配置</h5><p>（1）进入PicGo后，将框住的地方修改为Github</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415205845506.png" alt="image-20240415205845506"></p><p>（2）点击图床设置，选择Github设置，进入如下界面。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415210205262.png" alt="image-20240415210205262"></p><p>仓库名格式：“Github用户名&#x2F;仓库名”</p><p>分支名：main（不要用master）</p><p>token：在第一步保存的token直接粘贴进来</p><p>存储路径：可设可不设</p><p>自定义域名格式：<a href="https://cdn.jsdelivr.net/gh/[Github%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]@main">https://cdn.jsdelivr.net/gh/[Github用户名]/[仓库名]@main</a></p><p>（这个域名据说可以加快访问图片的速度，不知道日后会不会失效，但是暂时是可以用的）</p><p>点击确定，PicGo就配置好啦。</p><p>（3）补充：点击PicGo设置中的设置sever，如果下图处不是36677要修改为36677，否则会出错</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415210909195.png" alt="image-20240415210909195"></p><h3 id="三、Typora配置"><a href="#三、Typora配置" class="headerlink" title="三、Typora配置"></a>三、Typora配置</h3><p>（1）点击右上角文件，进入偏好设置</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211109267.png" alt="image-20240415211109267"></p><p>（2）进入图像设置，插入图片时选择上传图片，并将如图所示的选项打勾；</p><p>上传服务设定设置为PicGo（app），下面填写PicGo安装的路径，一定要填写完整，把PicGo.exe也要放到路径里。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211453817.png" alt="image-20240415211453817"></p><p>（3）至此所有的配置已经完成。</p><p>确保网络已经连接好，点击上图左下角的验证图片上传选项，若出现如下图的界面，证明上传成功，PicGo应用也会发来通知说上传成功。此时在自己的Github仓库里也能够找到相应图片。</p><p><img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240415211851779.png" alt="image-20240415211851779"></p><p>如果仍然不成功也不要气馁呀。作者配置了快一天才成功…………因为先配置了Gitee结果发现它失效了（失效了还不删教程，太过分了！！！！）</p><p>如果配置成功啦就恭喜你啦，从此以后就可以丝滑地在Typora里粘贴图片了~</p>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>Github</tag>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【踩雷合辑】利用Hexo搭建以fluid为主题的Github博客需要注意什么？</title>
    <link href="/2024/04/13/github%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%95%99%E7%A8%8B/"/>
    <url>/2024/04/13/github%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>​搭建博客是一个非常漫长的过程，在期间我参照过几十篇教程，在非常厉害的Gina同学的帮助下，反反复复试验了很多很多次，经过很多天后才终于能通过我的博客网址访问我的博客主页啦。<span id="more"></span>中间踩过不少雷，有时候一度绝望过（因为在网上根本搜不到和我一样的错误QAQ），好在最终坚持下来了。</p><p>​先附上fluid主题的官方文档：<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a>里面有很详细的配置教程哦。</p><h4 id="一、-config-yml配置文件撰写"><a href="#一、-config-yml配置文件撰写" class="headerlink" title="一、_config.yml配置文件撰写"></a>一、_config.yml配置文件撰写</h4><p>​它就在你所搭建的博客文档的根目录里，是非常重要的配置文档。</p><h5 id="1-博客主题修改"><a href="#1-博客主题修改" class="headerlink" title="1.博客主题修改"></a>1.博客主题修改</h5><p>​打开文档后拉到下面，找到<img src="https://cdn.jsdelivr.net/gh/Yaodeer/pict@main/image-20240416163624718.png" alt="image-20240416163624718"></p><p>​将theme后改为fluid，注意fluid主题的文件要放入themes文件夹里。如果是下载了zip压缩包，需要将其解压到该文件夹里并修改名字为fluid。</p><h5 id="2-deploy配置"><a href="#2-deploy配置" class="headerlink" title="2.deploy配置"></a>2.deploy配置</h5><p>​这个代码块就在主题配置的下方。注意不要按照网上搜索的教程配置，因为很多教程都已经很老了，所以可能会出问题。按照下面的格式配置是没有问题的。（分支必须是main）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># <span class="hljs-title class_">Deployment</span><br>## <span class="hljs-title class_">Docs</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy</span>:<br>  <span class="hljs-attr">type</span>: git<br>  <span class="hljs-attr">repo</span>: git@github.<span class="hljs-property">com</span>:[博客名]/[仓库名].<span class="hljs-property">github</span>.<span class="hljs-property">io</span>.<span class="hljs-property">git</span><br>  <span class="hljs-attr">branch</span>: main<br></code></pre></td></tr></table></figure><p>注意：每个冒号后都有一个空格。</p><h5 id="3-记得保存修改"><a href="#3-记得保存修改" class="headerlink" title="3.记得保存修改"></a>3.记得保存修改</h5><p>​我所用的编译软件是vscode，这个软件直接退出是不会保存的。快捷键Ctrl+s可以保存修改，然后不用退出就可以继续hexo g+hexo s两步走试看网页效果啦。</p><h4 id="二、博客部署的问题"><a href="#二、博客部署的问题" class="headerlink" title="二、博客部署的问题"></a>二、博客部署的问题</h4><p>​我们知道要搭建博客，就要去Github官网创建一个博客，然后再建立一个仓库用于保存我们的网页。博客的名字可以随意取，但是仓库名，如果你和我一样取的是英文名，<strong>第一个字母一定要小写！！！！！</strong></p><p>​因为我们会发现，当我们想要进入自己的博客官网时，输入的网址格式如下：https:&#x2F;&#x2F;[仓库名].github.io&#x2F;，而每次进入网址时，仓库名的第一个字母就会自动从大写变成小写，因此访问时就会显示404。</p><p>​不知道是主题的问题还是什么，反正这个问题害我找bug找了快两个小时……</p><h5 id="1-配置安装缺失"><a href="#1-配置安装缺失" class="headerlink" title="1.配置安装缺失"></a>1.配置安装缺失</h5><p>有时候hexo d后报错是因为有些配置没有安装,用下面的指令安装好就可</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h5 id="2-在根目录下部署"><a href="#2-在根目录下部署" class="headerlink" title="2.在根目录下部署"></a>2.在根目录下部署</h5><p>有时候搭建博客在部署时会忘记退出到根目录，此时也会出错。</p><h4 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h4><p>1.在部署博客时最好hexo clean后再hexo g+hexo d。</p><p>2.博文的文件放置在source文件夹下的_posts文件夹内。（fluid主题配置后都会默认创建一个这样的文件，里面有一篇默认的文档）</p><p>3.博客主题文档的配置需要很多图片，千万不要把他们放在public文件夹下。因为public是每次部署博客生成的静态文件，每次hexo clean之后就会将其删除。但是博客文件是会保留下来的，所以不用担心。那么<strong>这些照片，最好放在source文件夹下的img文件夹内保存</strong>（若没有就新建一个这样的文件夹）。</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/12/hello-world/"/>
    <url>/2024/04/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
